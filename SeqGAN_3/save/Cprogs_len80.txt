#include <stdio.h> #include <math.h> int main ( ) { int side ; float area , r_4 ; r_4 = sqrt ( 3 ) / 4 ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = r_4 * side * side ; printf ( " \n Area of Equilateral Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float radius , area ; printf ( " \n Enter the radius of Circle : " ) ; scanf ( " %d " , & radius ) ; area = 3.14 * radius * radius ; printf ( " \n Area of Circle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int side , area ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = side * side ; printf ( " \n Area of Square : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " \n Enter temp in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( 1.8 * celsius ) + 32 ; printf ( " \n Temperature in Fahrenheit : %f " , fahrenheit ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , sum ; printf ( " \n Enter two no : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " % d " , i ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d " , i ) ; i + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " %d " , i ) ; i + + ; } while ( i < = 10 ) ; return ( 0 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; char ch ; for ( i = 0 ; i < 256 ; i + + ) { printf ( " %c " , ch ) ; ch = ch + 1 ; } }
#include <stdio.h> int main ( int args , char * argv [ ] ) { int i = 0 ; for ( i = 0 ; i < args ; i + + ) printf ( " \n  %s " , argv [ i ] ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { unsigned int mask ; clrscr ( ) ; printf ( " Memory Required : %d butes " , sizeof ( mask ) ) ; getch ( ) ; }
#include <stdio.h> main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f % % %f = %fn " , a , b , a % b ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x1 = 200 , y1 = 200 ; int x2 = 300 , y2 = 300 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; line ( x1 , y1 , x2 , y2 ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 300 , 100 , 200 , 200 ) ; line ( 300 , 100 , 400 , 200 ) ; line ( 200 , 200 , 400 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x = 200 , y = 200 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; outtextxy ( x , y , " Hello World " ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; circle ( 300 , 300 , 50 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> int main ( ) { int * ptr1 , * ptr2 ; int num ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , ptr1 , ptr2 ) ; num = * ptr1 + * ptr2 ; printf ( " Sum = %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < = 6 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , i * j ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) { printf ( " %d\t " , count ) ; count + + ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = ' * ' ; for ( i = 4 ; i > = 0 ; i-- ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) printf ( " %c " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> struct stud { int roll ; char name [ 10 ] ; int marks ; } ; int main ( ) { int size ; struct stud s ; size = sizeof ( s ) ; printf ( " nSize of Structure : %d " , size ) ; return ( 0 ) ; }
#include <stdio.h> typedef struct XYZ { int far * fptr ; double dvar ; unsigned char ch ; } xyz ; int main ( ) { xyz * ptr = ( XYZ * ) 1000 ; printf ( " Size of Pointer to structure : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int far * ptr ; printf ( " Size of Integer Far Pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float a = 3.14 , * fptr ; fptr = & a ; printf ( " Size of Float Pointer : %d " , sizeof ( fptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char a = 'a' , * cptr ; cptr = & a ; printf ( " \n Size of Char Pointer : %d " , sizeof ( cptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a = 10 , * ptr ; ptr = & a ; printf ( " Size of int pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; char marks [ 3 ] ; printf ( " Please Enter Marks : " ) ; scanf ( " %s " , marks ) ; num = atoi ( marks ) ; printf ( " \n Marks : %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " String before to strupr : %sn " , string ) ; strupr ( string ) ; printf ( " String after strupr : %sn " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strupr ( string ) ; printf ( " String after strupr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " \n String before to strlwr : %s " , string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; strcpy ( str2 , str1 ) ; printf ( " \n Copied String : %s " , str2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] ; int len ; printf ( " \n Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " \n Length of Given String : %d " , len ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 97 & & ch < = 122 ) printf ( " Character is Lowercase Letters " ) ; else printf ( " Character is Not Lowercase Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 65 & & ch < = 90 ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = 0 ; while ( str [ length ] ! = '\0' ) length + + ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , digits ; char ch [ 10 ] ; printf ( " \n Enter the Number : " ) ; scanf ( " %d " , & num ) ; sprintf ( ch , " %d " , num ) ; digits = strlen ( ch ) ; printf ( " \n Number of Digits : %d " , digits ) ; return ( 0 ) ; }
#include <stdio.h> void main ( ) { int a = 3 , b = 3 , c ; asm { mov ax , a mov bx , a add ax , bx mov c , ax } printf ( " %d " , c ) ; }
#include <stdio.h> int main ( ) { char para [ 100 ] ; printf ( " Enter Paragraph : " ) ; scanf ( " % [ ^\t ] s " , para ) ; printf ( " Accepted Paragraph : %s " , para ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { while ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { switch ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { if ( printf ( " " ) ) { } else if ( printf ( " Hello " ) ) { } else { } }
#include <stdio.h> void main ( ) { while ( !printf ( " Hello " ) ) { } }
#include <stdio.h> #define PRINT printf ( " Hello " ) void main ( ) { if ( PRINT ) { } }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " %d " , printf ( " abcdefghijklmnopqrstuvwxyz " ) ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int num = 1342 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , num ) ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int number = 12354 ; int sum = 0 ; for ( ; number > 0 ; sum + = number % 10 , number / = 10 ) ; printf ( " \n Sum of the Digits : %d " , sum ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2 > 0 ) { num1 + + ; num2-- ; } printf ( " %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2-- ) { num1 + + ; } printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 ; num1 = num1 - ( -num2 ) ; printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> #include " myhead.h " void main ( ) { int num1 = 10 , num2 = 10 , num3 ; num3 = add ( num1 , num2 ) ; printf ( " Addition of Two numbers : %d " , num3 ) ; }
#include <stdio.h> #define begin main int begin ( ) { printf ( " Hello " ) ; return ( 0 ) ; }
#include <stdio.h> #define begin m##a##i##n void begin ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #define begin ( m , a , i , n ) m##a##i##n #define start begin ( m , a , i , n ) void start ( ) { printf ( " Hello " ) ; }
#include <dos.h> void main ( ) { char * path = " BIN " ; _AH = 0x39 ; _DX = ( unsigned int ) path ; __int__ ( 0x21 ) ; }
#include <dos.h> void main ( ) { char * message = " Pritesh Taral$ " ; _AH = 9 ; _DX = ( int ) message ; geninterrupt ( 0x21 ) ; }
#include <stdio.h> void main ( ) { printf ( " 1 " ) ; printf ( " 2 " ) ; printf ( " 3 " ) ; printf ( " 4 " ) ; printf ( " 5 " ) ; printf ( " 6 " ) ; printf ( " 7 " ) ; printf ( " 8 " ) ; printf ( " 9 " ) ; printf ( " 10 " ) ; }
#include <stdio.h> void printNumber ( int value ) { int i ; printf ( " %d\n  " , value ) ; i = value + 1 ; if ( i > 10 ) return ; printNumber ( i ) ; } void main ( ) { printNumber ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; Start : i = i + 1 ; printf ( " %d " , i ) ; if ( i < = 10 ) goto Start ; }
#include <stdio.h> void main ( ) { static int i = 1 ; if ( i < = 10 ) { printf ( " %d " , i + + ) ; main ( ) ; } }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { printf ( " \n Hello , world\a " ) ; printf ( " \n Hello , world\b " ) ; printf ( " \n Hello , world\c " ) ; printf ( " \n Hello , world\d " ) ; printf ( " \n Hello , world\e " ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { printf ( " \n Hello , world\a " ) ; printf ( " \n Hello , world\b " ) ; printf ( " \n Hello , world\c " ) ; printf ( " \n Hello , world\d " ) ; printf ( " \n Hello , world\e " ) ; return 0 ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) }
#include <stdio.h> main ( ) { printf ( " hello , world\n  " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) }
#include <stdio.h> main ( ) { printf ( " hello , world\n  " ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; char marks [ 3 ] ; printf ( " Please Enter Marks : " ) ; scanf ( " %s " , marks ) ; num = atoi ( marks ) ; printf ( " \n Marks : %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 97 & & ch < = 122 ) printf ( " Character is Lowercase Letters " ) ; else printf ( " Character is Not Lowercase Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 65 & & ch < = 90 ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " String before to strupr : %sn " , string ) ; strupr ( string ) ; printf ( " String after strupr : %sn " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strupr ( string ) ; printf ( " String after strupr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " \n String before to strlwr : %s " , string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; strcpy ( str2 , str1 ) ; printf ( " \n Copied String : %s " , str2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] ; int len ; printf ( " \n Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " \n Length of Given String : %d " , len ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = 0 ; while ( str [ length ] ! = '\0' ) length + + ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j ; clrscr ( ) ; for ( i = 0 ; i < = 9 ; i + + ) { for ( j = 0 ; j < ( 1 + 2 * i ) ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j ; clrscr ( ) ; for ( i = 0 ; i < = 9 ; i + + ) { for ( j = 0 ; j < ( 1 + 2 * i ) ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < = 6 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , i * j ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) { printf ( " %d\t " , count ) ; count + + ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = ' * ' ; for ( i = 4 ; i > = 0 ; i-- ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) printf ( " %c " , ch ) ; } return ( 0 ) ; }
#include <iostream.h> int main ( ) { cout < < " Hello , Welcome to C + + " ; return ( 0 ) ; }
#include <iostream.h> int main ( ) { cout < < " Hello , Welcome to C + + " ; return ( 0 ) ; }
#include <stdio.h> void message ( ) ; void main ( ) { message ( ) ; } void message ( ) { printf ( " Hi , How are you ? " ) ; }
#include <stdio.h> void message ( ) ; void main ( ) { message ( ) ; } void message ( ) { printf ( " Hi , How are you ? " ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d " , i ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d " , i ) ; i + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " %d " , i ) ; i + + ; } while ( i < = 10 ) ; return ( 0 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; char ch ; for ( i = 0 ; i < 256 ; i + + ) { printf ( " %c " , ch ) ; ch = ch + 1 ; } }
#include <stdio.h> int main ( ) { int * ptr1 , * ptr2 ; int num ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , ptr1 , ptr2 ) ; num = * ptr1 + * ptr2 ; printf ( " Sum = %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> typedef struct XYZ { int far * fptr ; double dvar ; unsigned char ch ; } xyz ; int main ( ) { xyz * ptr = ( XYZ * ) 1000 ; printf ( " Size of Pointer to structure : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int far * ptr ; printf ( " Size of Integer Far Pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float a = 3.14 , * fptr ; fptr = & a ; printf ( " Size of Float Pointer : %d " , sizeof ( fptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char a = 'a' , * cptr ; cptr = & a ; printf ( " \n Size of Char Pointer : %d " , sizeof ( cptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a = 10 , * ptr ; ptr = & a ; printf ( " Size of int pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int side ; float area , r_4 ; r_4 = sqrt ( 3 ) / 4 ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = r_4 * side * side ; printf ( " \n Area of Equilateral Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float radius , area ; printf ( " \n Enter the radius of Circle : " ) ; scanf ( " %d " , & radius ) ; area = 3.14 * radius * radius ; printf ( " \n Area of Circle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int side , area ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = side * side ; printf ( " \n Area of Square : %d " , area ) ; return ( 0 ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x1 = 200 , y1 = 200 ; int x2 = 300 , y2 = 300 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; line ( x1 , y1 , x2 , y2 ) ; closegraph ( ) ; }
#include <stdio.h> int main ( int args , char * argv [ ] ) { int i = 0 ; for ( i = 0 ; i < args ; i + + ) printf ( " \n  %s " , argv [ i ] ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { unsigned int mask ; clrscr ( ) ; printf ( " Memory Required : %d butes " , sizeof ( mask ) ) ; getch ( ) ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 300 , 100 , 200 , 200 ) ; line ( 300 , 100 , 400 , 200 ) ; line ( 200 , 200 , 400 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x = 200 , y = 200 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; outtextxy ( x , y , " Hello World " ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; circle ( 300 , 300 , 50 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f % % %f = %fn " , a , b , a % b ) ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " \n Enter temp in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( 1.8 * celsius ) + 32 ; printf ( " \n Temperature in Fahrenheit : %f " , fahrenheit ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , sum ; printf ( " \n Enter two no : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> struct stud { int roll ; char name [ 10 ] ; int marks ; } ; int main ( ) { int size ; struct stud s ; size = sizeof ( s ) ; printf ( " nSize of Structure : %d " , size ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , digits ; char ch [ 10 ] ; printf ( " \n Enter the Number : " ) ; scanf ( " %d " , & num ) ; sprintf ( ch , " %d " , num ) ; digits = strlen ( ch ) ; printf ( " \n Number of Digits : %d " , digits ) ; return ( 0 ) ; }
#include <stdio.h> void main ( ) { int a = 3 , b = 3 , c ; asm { mov ax , a mov bx , a add ax , bx mov c , ax } printf ( " %d " , c ) ; }
#include <stdio.h> int main ( ) { char para [ 100 ] ; printf ( " Enter Paragraph : " ) ; scanf ( " % [ ^\t ] s " , para ) ; printf ( " Accepted Paragraph : %s " , para ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { while ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { switch ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { if ( printf ( " " ) ) { } else if ( printf ( " Hello " ) ) { } else { } }
#include <stdio.h> void main ( ) { while ( !printf ( " Hello " ) ) { } }
#include <stdio.h> #define PRINT printf ( " Hello " ) void main ( ) { if ( PRINT ) { } }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " %d " , printf ( " abcdefghijklmnopqrstuvwxyz " ) ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int num = 1342 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , num ) ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int number = 12354 ; int sum = 0 ; for ( ; number > 0 ; sum + = number % 10 , number / = 10 ) ; printf ( " \n Sum of the Digits : %d " , sum ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2 > 0 ) { num1 + + ; num2-- ; } printf ( " %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2-- ) { num1 + + ; } printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 ; num1 = num1 - ( -num2 ) ; printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> #include " myhead.h " void main ( ) { int num1 = 10 , num2 = 10 , num3 ; num3 = add ( num1 , num2 ) ; printf ( " Addition of Two numbers : %d " , num3 ) ; }
#include <stdio.h> #define begin main int begin ( ) { printf ( " Hello " ) ; return ( 0 ) ; }
#include <stdio.h> #define begin m##a##i##n void begin ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #define begin ( m , a , i , n ) m##a##i##n #define start begin ( m , a , i , n ) void start ( ) { printf ( " Hello " ) ; }
#include <dos.h> void main ( ) { char * path = " BIN " ; _AH = 0x39 ; _DX = ( unsigned int ) path ; __int__ ( 0x21 ) ; }
#include <dos.h> void main ( ) { char * message = " Pritesh Taral$ " ; _AH = 9 ; _DX = ( int ) message ; geninterrupt ( 0x21 ) ; }
#include <stdio.h> void main ( ) { printf ( " 1 " ) ; printf ( " 2 " ) ; printf ( " 3 " ) ; printf ( " 4 " ) ; printf ( " 5 " ) ; printf ( " 6 " ) ; printf ( " 7 " ) ; printf ( " 8 " ) ; printf ( " 9 " ) ; printf ( " 10 " ) ; }
#include <stdio.h> void printNumber ( int value ) { int i ; printf ( " %d\n  " , value ) ; i = value + 1 ; if ( i > 10 ) return ; printNumber ( i ) ; } void main ( ) { printNumber ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; Start : i = i + 1 ; printf ( " %d " , i ) ; if ( i < = 10 ) goto Start ; }
#include <stdio.h> void main ( ) { static int i = 1 ; if ( i < = 10 ) { printf ( " %d " , i + + ) ; main ( ) ; } }
#include <stdio.h> int main ( ) { printf ( " Hello World " ) ; return 0 ; }
#include void hello ( ) { printf ( " Hello World " ) ; } int main ( ) { hello ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) printf ( " %d is an even number " , num ) ; else printf ( " %d is an odd number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; if ( n & 1 ) printf ( " %d is an odd number " , n ) ; else printf ( " %d is an even number " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; printf ( " ASCII value of character %c is : %d " , ch , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 100 ] , i ; printf ( " Enter a string : \n  " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; + + i ) ; printf ( " \n Length of input string : %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { double arr [ ] = { 11 , 22 , 33 , 44 , 55 , 66 } ; int n ; n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( " Size of the array is : %d\n  " , n ) ; return 0 ; } Output :
#include <stdio.h> int main ( ) { float num1 , num2 , product ; printf ( " Enter first Number : " ) ; scanf ( " %f " , & num1 ) ; printf ( " Enter second Number : " ) ; scanf ( " %f " , & num2 ) ; product = num1 * num2 ; printf ( " Product of entered numbers is : %.3f " , product ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int triangle_side ; float triangle_area , temp_variable ; printf ( " \n Enter the Side of the triangle : " ) ; scanf ( " %d " , & triangle_side ) ; temp_variable = sqrt ( 3 ) / 4 ; triangle_area = temp_variable * triangle_side * triangle_side ; printf ( " \n Area of Equilateral Triangle is : %f " , triangle_area ) ; return ( 0 ) ; }
#include <stdio.h> void introduction ( ) { printf ( " Hi\n  " ) ; printf ( " My name is Chaitanya\n  " ) ; printf ( " How are you? " ) ; } int main ( ) { introduction ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; printf ( " The number entered by user is : %d " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of the entered numbers : %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 20 ; int y = 22 ; if ( x <y ) { printf ( " Variable x is less than y " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible for voting " ) ; } else { printf ( " You are not eligible for voting " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) printf ( " You are eligible for voting " ) ; else printf ( " You are not eligible for voting " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 3 ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { for ( int i = 0 ; i <2 ; i + + ) { for ( int j = 0 ; j <4 ; j + + ) { printf ( " %d , %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 , j = 1 ; i <3 || j <5 ; i + + , j + + ) { printf ( " %d , %d\n  " , i , j ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int count = 1 ; while ( count < = 4 ) { printf ( " %d " , count ) ; count + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int var = 1 ; while ( var < = 2 ) { printf ( " %d " , var ) ; } }
#include <stdio.h> int main ( ) { int var = 6 ; while ( var > = 5 ) { printf ( " %d " , var ) ; var + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; while ( var < = 10 ) { printf ( " %d " , var ) ; var-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 , j = 1 ; while ( i < = 4 || j < = 3 ) { printf ( " %d %d\n  " , i , j ) ; i + + ; j + + ; } return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { int c = a + b ; return c ; } int main ( { int var1 = 10 ; int var2 = 20 ; int var3 = sum ( var1 , var2 ) ; printf ( " %d " , var3 ) ; return 0 ; }
#include <stdio.h> int increment ( int var ) { var = var + 1 ; return var ; } int main ( ) { int num1 = 20 ; int num2 = increment ( num1 ) ; printf ( " num1 value is : %d " , num1 ) ; printf ( " \n num2 value is : %d " , num2 ) ; return 0 ; }
#include <stdio.h> void increment ( int * var ) { * var = * var + 1 ; } int main ( ) { int num = 20 ; increment ( & num ) ; printf ( " Value of num is : %d " , num ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char nickname [ 20 ] ; printf ( " Enter your Nick name : " ) ; scanf ( " %s " , nickname ) ; printf ( " %s " , nickname ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char nickname [ 20 ] ; puts ( " Enter your Nick name : " ) ; gets ( nickname ) ; puts ( nickname ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 20 ] = " BeginnersBook " ; printf ( " Length of string str1 : %d " , strlen ( str1 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 20 ] = " BeginnersBook " ; printf ( " Length of string str1 when maxlen is 30 : %d " , strnlen ( str1 , 30 ) ) ; printf ( " Length of string str1 when maxlen is 10 : %d " , strnlen ( str1 , 10 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 20 ] = " BeginnersBook " ; char s2 [ 20 ] = " BeginnersBook.COM " ; if ( strcmp ( s1 , s2 ) = = 0 ) { printf ( " string 1 and string 2 are equal " ) ; } else { printf ( " string 1 and 2 are different " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 20 ] = " BeginnersBook " ; char s2 [ 20 ] = " BeginnersBook.COM " ; if ( strncmp ( s1 , s2 , 8 ) = = 0 ) { printf ( " string 1 and string 2 are equal " ) ; } else { printf ( " string 1 and 2 are different " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 10 ] = " Hello " ; char s2 [ 10 ] = " World " ; strcat ( s1 , s2 ) ; printf ( " Output string after concatenation : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 10 ] = " Hello " ; char s2 [ 10 ] = " World " ; strncat ( s1 , s2 , 3 ) ; printf ( " Concatenation using strncat : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 30 ] = " string 1 " ; char s2 [ 30 ] = " string 2 : I’m gonna copied into s1 " ; strcpy ( s1 , s2 ) ; printf ( " String s1 is : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char first [ 30 ] = " string 1 " ; char second [ 30 ] = " string 2 : I’m using strncpy now " ; strncpy ( s1 , s2 , 12 ) ; printf ( " String s1 is : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char mystr [ 30 ] = " I’m an example of function strchr " ; printf ( " %s " , strchr ( mystr , 'f' ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char mystr [ 30 ] = " I’m an example of function strchr " ; printf ( " %s " , strrchr ( mystr , 'f' ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char inputstr [ 70 ] = " String Function in C at BeginnersBook.COM " ; printf ( " Output string is : %s " , strstr ( inputstr , 'Begi' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter your age : " ) ; scanf ( " %d " , & num ) ; if ( num <18 ) { printf ( " you are not eligible for voting " ) ; } else { printf ( " You can vote!! " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int j = 0 ; do { printf ( " Value of variable j is : %d\n  " , j ) ; j + + ; } while ( j < = 3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 ; while ( i = = 1 ) { printf ( " while vs do-while " ) ; } printf ( " Out of loop " ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { printf ( " while vs do-while\n  " ) ; } while ( i = = 1 ) ; printf ( " Out of loop " ) ; }
#include <stdio.h> int main ( ) { for ( int j = 0 ; j < = 8 ; j + + ) { if ( j = = 4 ) { continue ; } printf ( " %d " , j ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int counter = 10 ; while ( counter > = 0 ) { if ( counter = = 7 ) { counter-- ; continue ; } printf ( " %d " , counter ) ; counter-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int j = 0 ; do { if ( j = = 7 ) { j + + ; continue ; } printf ( " %d " , j ) ; j + + ; } while ( j <10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 0 ; while ( num < = 100 ) { printf ( " value of variable num is : %d\n  " , num ) ; if ( num = = 2 ) { break ; } num + + ; } printf ( " Out of while-loop " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var ; for ( var = 100 ; var> = 10 ; var -- ) { printf ( " var : %d\n  " , var ) ; if ( var = = 99 ) { break ; } } printf ( " Out of for-loop " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int sum = 0 ; for ( int i = 0 ; i < = 10 ; i + + ) { sum = sum + i ; if ( i = = 5 ) { goto addition ; } } addition : printf ( " %d " , sum ) ; return 0 ; }
#include <stdio.h> void disp ( char ch ) { printf ( " %c " , ch ) ; } int main ( ) { char arr [ ] = { 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' } ; for ( int x = 0 ; x <10 ; x + + ) { disp ( arr [ x ] ) ; } return 0 ; }
#include <stdio.h> struct numbers { int num1 , num2 ; } ; int main ( ) { struct numbers s1 = { .num2 = 22 , .num1 = 11 } ; struct numbers s2 = { .num2 = 30 } ; printf ( " num1 : %d , num2 : %d\n  " , s1.num1 , s1.num2 ) ; printf ( " num1 : %d " , s2.num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of variable num is : %d " , num ) ; printf ( " \n Address of variable num is : %p " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * p ; p = # printf ( " Address of variable num is : %p " , p ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 ; char c ; fp1 = fopen ( " C : \\myfiles\\n ewfile.txt " , " r " ) ; while ( 1 ) { c = fgetc ( fp1 ) ; if ( c = = EOF ) break ; else printf ( " %c " , c ) ; } fclose ( fp1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 ; char c ; fp1 = fopen ( " C : \\myfiles\\n ewfile.txt " , " r " ) ; while ( 1 ) { c = fgetc ( fp1 ) ; if ( c = = EOF ) break ; else printf ( " %c " , c ) ; } fclose ( fp1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Catch me if you can. " ) ; } < / stdio.h>
#include <stdio.h> #include <math.h> int main ( ) { float num , root ; printf ( " Enter a number : " ) ; scanf ( " %f " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2f = %.2f " , num , root ) ; return 0 ; }
#include <stdio.h> #include <stdbool.h> int main ( ) { bool a = true ; return 0 ; }
#include <stdio.h> #include <complex.h> int main ( ) { int complex z = 2 + 1 * I ; }
#include <stdio.h> int main ( ) { printf ( " C Programming " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger = 5 ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & testInteger ) ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; printf ( " Enter a number : " ) ; scanf ( " %f " , & f ) ; printf ( " Value = %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c.\n  " , chr ) ; printf ( " ASCII value of %c is %d. " , chr , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int chr = 69 ; printf ( " Character having ASCII value 69 is %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number < 0 ) { printf ( " You entered %d.\n  " , number ) ; } printf ( " The if statement is easy. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) printf ( " %d is an even integer. " , number ) ; else printf ( " %d is an odd integer. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; for ( count = 1 ; count < = num ; + + count ) { sum + = count ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; long long factorial ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; factorial = 1 ; while ( number > 0 ) { factorial * = number ; --number ; } printf ( " Factorial = %lld " , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number , sum = 0 ; do { printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; sum + = number ; } while ( number ! = 0.0 ) ; printf ( " Sum = %.2lf " , sum ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int n = 5 ; int main ( ) { + + n ; display ( ) ; return 0 ; } void display ( ) { + + n ; printf ( " n = %d " , n ) ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; } void display ( ) { static int c = 0 ; printf ( " %d " , c ) ; c + = 5 ; }
#include <stdio.h> void display ( int age ) { printf ( " %d " , age ) ; } int main ( ) { int ageArray [ ] = { 2 , 3 , 4 } ; display ( ageArray [ 2 ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 20 ] ; printf ( " Enter name : " ) ; scanf ( " %s " , name ) ; printf ( " Your name is %s. " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> void displayString ( char str [ ] ) ; int main ( ) { char str [ 50 ] ; printf ( " Enter string : " ) ; gets ( str ) ; displayString ( str ) ; return 0 ; } void displayString ( char str [ ] ) { printf ( " String Output : " ) ; puts ( str ) ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; printf ( " Value : %d\n  " , var ) ; printf ( " Address : %u " , & var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 4 ] ; int i ; for ( i = 0 ; i < 4 ; + + i ) { printf ( " & x [ %d ] = %u\n  " , i , & x [ i ] ) ; } printf ( " Address of array x : %u " , x ) ; return 0 ; }
#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main ( ) { j.salary = 12.3 ; j.workerNo = 100 ; printf ( " Salary = %.1f\n  " , j.salary ) ; printf ( " Number of workers = %d " , j.workerNo ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; printf ( " You entered : %d " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int firstNumber , secondNumber , sumOfTwoNumbers ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & firstNumber , & secondNumber ) ; sumOfTwoNumbers = firstNumber + secondNumber ; printf ( " %d + %d = %d " , firstNumber , secondNumber , sumOfTwoNumbers ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber , product ; printf ( " Enter two numbers : " ) ; scanf ( " %lf %lf " , & firstNumber , & secondNumber ) ; product = firstNumber * secondNumber ; printf ( " Product = %.2lf " , product ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; printf ( " ASCII value of %c = %d " , c , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number < 0 ) { printf ( " You entered %d.\n  " , number ) ; } printf ( " The if statement is easy. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) printf ( " %d is an even integer. " , number ) ; else printf ( " %d is an odd integer. " , number ) ; return 0 ; }
#include <stdio.h> #include <stdbool.h> int main ( ) { bool a = true ; return 0 ; }
#include <stdio.h> #include <complex.h> int main ( ) { int complex z = 2 + 1 * I ; }
#include <stdio.h> int main ( ) { printf ( " C Programming " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger = 5 ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & testInteger ) ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; printf ( " Enter a number : " ) ; scanf ( " %f " , & f ) ; printf ( " Value = %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c.\n  " , chr ) ; printf ( " ASCII value of %c is %d. " , chr , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int chr = 69 ; printf ( " Character having ASCII value 69 is %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; for ( count = 1 ; count < = num ; + + count ) { sum + = count ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; long long factorial ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; factorial = 1 ; while ( number > 0 ) { factorial * = number ; --number ; } printf ( " Factorial = %lld " , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number , sum = 0 ; do { printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; sum + = number ; } while ( number ! = 0.0 ) ; printf ( " Sum = %.2lf " , sum ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int n = 5 ; int main ( ) { + + n ; display ( ) ; return 0 ; } void display ( ) { + + n ; printf ( " n = %d " , n ) ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; } void display ( ) { static int c = 0 ; printf ( " %d " , c ) ; c + = 5 ; }
#include <stdio.h> void display ( int age ) { printf ( " %d " , age ) ; } int main ( ) { int ageArray [ ] = { 2 , 3 , 4 } ; display ( ageArray [ 2 ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; printf ( " Value : %d\n  " , var ) ; printf ( " Address : %u " , & var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 4 ] ; int i ; for ( i = 0 ; i < 4 ; + + i ) { printf ( " & x [ %d ] = %u\n  " , i , & x [ i ] ) ; } printf ( " Address of array x : %u " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 20 ] ; printf ( " Enter name : " ) ; scanf ( " %s " , name ) ; printf ( " Your name is %s. " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> void displayString ( char str [ ] ) ; int main ( ) { char str [ 50 ] ; printf ( " Enter string : " ) ; gets ( str ) ; displayString ( str ) ; return 0 ; } void displayString ( char str [ ] ) { printf ( " String Output : " ) ; puts ( str ) ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main ( ) { j.salary = 12.3 ; j.workerNo = 100 ; printf ( " Salary = %.1f\n  " , j.salary ) ; printf ( " Number of workers = %d " , j.workerNo ) ; return 0 ; }
#include <stdio.h> enum week { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum week today ; today = wednesday ; printf ( " Day %d " , today + 1 ) ; return 0 ; }
#include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main ( ) { card = club ; printf ( " Size of enum variable = %d bytes " , sizeof ( card ) ) ; return 0 ; }
#include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 } ; int main ( ) { int myDesign = BOLD | UNDERLINE ; printf ( " %d " , myDesign ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { printf ( " Catch me if you can. " ) ; } < / stdio.h>
#include <stdio.h> #include <math.h> int main ( ) { float num , root ; printf ( " Enter a number : " ) ; scanf ( " %f " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2f = %.2f " , num , root ) ; return 0 ; }
#include <stdio.h> enum week { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum week today ; today = wednesday ; printf ( " Day %d " , today + 1 ) ; return 0 ; }
#include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main ( ) { card = club ; printf ( " Size of enum variable = %d bytes " , sizeof ( card ) ) ; return 0 ; }
#include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 } ; int main ( ) { int myDesign = BOLD | UNDERLINE ; printf ( " %d " , myDesign ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { long long n ; int count = 0 ; printf ( " Enter an integer : " ) ; scanf ( " %lld " , & n ) ; while ( n ! = 0 ) { n / = 10 ; + + count ; } printf ( " Number of digits : %d " , count ) ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a & b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a|b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a^b ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Output = %d\n  " , ~35 ) ; printf ( " Output = %d\n  " , ~-12 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number % 2 = = 0 ) printf ( " %d is even. " , number ) ; else printf ( " %d is odd. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; ( number % 2 = = 0 ) ? printf ( " %d is even. " , number ) : printf ( " %d is odd. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; + + i ) { sum + = i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; i = 1 ; while ( i < = n ) { sum + = i ; + + i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = 10 ; + + i ) { printf ( " %d * %d = %d \n  " , n , i , n * i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { double number ; printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; if ( number < 0.0 ) printf ( " You entered a negative number. " ) ; else if ( number > 0.0 ) printf ( " You entered a positive number. " ) ; else printf ( " You entered 0. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; int c ; fp = fopen ( __FILE__ , " r " ) ; do { c = getc ( fp ) ; putchar ( c ) ; } while ( c ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " awesome " ; char str2 [ 10 ] ; char str3 [ 10 ] ; strcpy ( str2 , str1 ) ; strcpy ( str3 , " well " ) ; puts ( str2 ) ; puts ( str3 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " This is " , str2 [ ] = " programiz.com " ; strcat ( str1 , str2 ) ; puts ( str1 ) ; puts ( str2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " awesome " ; char str2 [ 10 ] ; char str3 [ 10 ] ; strcpy ( str2 , str1 ) ; strcpy ( str3 , " well " ) ; puts ( str2 ) ; puts ( str3 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " This is " , str2 [ ] = " programiz.com " ; strcat ( str1 , str2 ) ; puts ( str1 ) ; puts ( str2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] ; int i ; printf ( " Enter a string : " ) ; scanf ( " %s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; + + i ) ; printf ( " Length of string : %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; for ( c = 'A' ; c < = 'Z' ; + + c ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; while ( n1! = n2 ) { if ( n1 > n2 ) n1 - = n2 ; else n2 - = n1 ; } printf ( " GCD = %d " , n1 ) ; return 0 ; }
#include <stdio.h> void reverseSentence ( ) ; int main ( ) { printf ( " Enter a sentence : " ) ; reverseSentence ( ) ; return 0 ; } void reverseSentence ( ) { char c ; scanf ( " %c " , & c ) ; if ( c ! = '\n ' ) { reverseSentence ( ) ; printf ( " %c " , c ) ; } }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reversedNumber = 0 , remainder ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { remainder = n %10 ; reversedNumber = reversedNumber * 10 + remainder ; n / = 10 ; } printf ( " Reversed Number = %d " , reversedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a & b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a|b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a^b ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Output = %d\n  " , ~35 ) ; printf ( " Output = %d\n  " , ~-12 ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isalnum ( c ) = = 0 ) printf ( " %c is not an alphanumeric character. " , c ) ; else printf ( " %c is an alphanumeric character. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = '5' ; printf ( " Result when numeric character is passed : %d " , isdigit ( c ) ) ; c = ' + ' ; printf ( " \n Result when non-numeric character is passed : %d " , isdigit ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isdigit ( c ) = = 0 ) printf ( " %c is not a digit. " , c ) ; else printf ( " %c is a digit. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isalpha ( c ) = = 0 ) printf ( " %c is not an alphabet. " , c ) ; else printf ( " %c is an alphabet. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " The ASCII value of all control characters are " ) ; for ( i = 0 ; i < = 127 ; + + i ) { if ( iscntrl ( i ) ! = 0 ) printf ( " %d " , i ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 6 , squareRoot ; squareRoot = sqrt ( num ) ; printf ( " Square root of %lf = %lf " , num , squareRoot ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All graphic characters in C programming are : \n  " ) ; for ( i = 0 ; i < = 127 ; + + i ) { if ( isgraph ( i ) ! = 0 ) printf ( " %c " , i ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 't' ; printf ( " Return value when %c is passed to islower ( ) : %d " , c , islower ( c ) ) ; c = 'D' ; printf ( " \n Return value when %c is passed to islower ( ) : %d " , c , islower ( c ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char c ; c = 'Q' ; printf ( " Result when a printable character %c is passed to isprint ( ) : %d " , c , isprint ( c ) ) ; c = '\n ' ; printf ( " \n Result when a control character %c is passed to isprint ( ) : %d " , c , isprint ( c ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 127 ; + + c ) if ( isprint ( c ) ! = 0 ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = ' : ' ; result = ispunct ( c ) ; if ( result = = 0 ) { printf ( " %c is a punctuation " , c ) ; } else { printf ( " %c is not a punctuation " , c ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All punctuation marks in C programming are : \n  " ) ; for ( i = 0 ; i < = 127 ; + + i ) if ( ispunct ( i ) ! = 0 ) printf ( " %c " , i ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; result = isspace ( c ) ; if ( result = = 0 ) { printf ( " Not a white-space character. " ) ; } else { printf ( " White-space character. " ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = '5' ; printf ( " Result when hexadecimal character %c is passed : %d " , c , isxdigit ( c ) ) ; c = 'M' ; printf ( " \n Result when hexadecimal character %c is not passed : %d " , c , isxdigit ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'm' ; printf ( " %c -> %c " , c , toupper ( c ) ) ; c = 'D' ; printf ( " \n  %c -> %c " , c , toupper ( c ) ) ; c = '9' ; printf ( " \n  %c -> %c " , c , toupper ( c ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , facosx ; long double lx , ldacosx ; fx = -0.505405 ; facosx = acosf ( fx ) ; lx = -0.50540593 ; ldacosx = acosf ( lx ) ; printf ( " acosf ( x ) = %f in radians\n  " , facosx ) ; printf ( " acosl ( x ) = %Lf in radians " , ldacosx ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , facosx ; long double lx , ldacosx ; fx = 5.5054 ; facosx = acoshf ( fx ) ; lx = 5.50540593 ; ldacosx = acoshl ( lx ) ; printf ( " acoshf ( x ) = %f in radians\n  " , facosx ) ; printf ( " acoshl ( x ) = %Lf in radians " , ldacosx ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , fasinx ; long double lx , ldasinx ; fx = -0.505405 ; fasinx = asinf ( fx ) ; lx = -0.50540593 ; ldasinx = asinf ( lx ) ; printf ( " asinf ( x ) = %f in radians\n  " , fasinx ) ; printf ( " asinl ( x ) = %Lf in radians " , ldasinx ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double x , y , result ; y = 2.53 ; x = -10.2 ; result = atan2 ( y , x ) ; result = result * 180.0 / PI ; printf ( " Tangent inverse for ( x = %.1lf , y = %.1lf ) is %.1lf degrees. " , x , y , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 6 , cubeRoot ; cubeRoot = cbrt ( num ) ; printf ( " Cube root of %lf = %lf " , num , cubeRoot ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 8.33 ; int result ; result = ceil ( num ) ; printf ( " Ceiling integer of %.2f = %d " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double arg = 30 , result ; arg = ( arg * PI ) / 180 ; result = cos ( arg ) ; printf ( " cos of %.2lf radian = %.2lf " , arg , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x = 12.0 , result ; result = exp ( x ) ; printf ( " Exponential of %.2lf = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = -8.33 ; int result ; result = floor ( num ) ; printf ( " Floor integer of %.2f = %d " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double p , b ; double hypotenuse ; p = 5.0 ; b = 12.0 ; hypotenuse = hypot ( p , b ) ; printf ( " hypot ( %.2lf , %.2lf ) = %.2lf " , p , b , hypotenuse ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 5.6 , result ; result = log ( num ) ; printf ( " log ( %.1f ) = %.2f " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 4.00 , result ; result = log10 ( num ) ; printf ( " log10 ( %.1f ) = %.2f " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double angle = 2.50 , result ; result = sinh ( angle ) ; printf ( " Sine hyperbolic of %.2lf ( in radians ) = %.2lf " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double angle = 0.40 , result ; result = tanh ( angle ) ; printf ( " Tangent hyperbolic of %.2lf ( in radians ) = %.2lf " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " Hello Compiler , I am C " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char name [ 20 ] ; printf ( " Enter Your Name : " ) ; scanf ( " %s " , name ) ; printf ( " Hello , %s. You are at codescracker.com " , name ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " Hello World " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char name [ 20 ] ; int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " You entered %d " , num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num = 10 ; printf ( " The value of num is %d " , num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum of the two number is %d " , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) { printf ( " This is an even number " ) ; } else { printf ( " This is an odd number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int side , peri , area ; printf ( " Enter length of a side of square : " ) ; scanf ( " %d " , & side ) ; area = side * side ; peri = 4 * side ; printf ( " Area = %d\tPerimeter = %d " , area , peri ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float fah , cel ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fah ) ; cel = ( fah-32 ) / 1.8 ; printf ( " Temperature in Celsius = %f " , cel ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float cen , fah ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & cen ) ; fah = ( 1.8 * cen ) + 32 ; printf ( " \n Temperature in Fahrenheit = %f " , fah ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; int i ; for ( i = 1 ; i <255 ; i + + ) { ch = i ; printf ( " %d -> %c\t " , i , ch ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " * " ) ; } k = k + 2 ; printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , n = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d " , n ) ; n + + ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int sml = 1 , i , limit ; printf ( " How many smiley face you want to print ? " ) ; scanf ( " %d " , & limit ) ; for ( i = 0 ; i <limit ; i + + ) { printf ( " %c " , sml ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; printf ( " Enter your first name : " ) ; scanf ( " %s " , str ) ; printf ( " Hello , %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] , len ; printf ( " Enter a string : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " Length of the string is %d " , len ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter a string : " ) ; gets ( str1 ) ; printf ( " copying string 1 into string 2 ......\n  " ) ; strcpy ( str2 , str1 ) ; printf ( " String 2 after copying %s " , str2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter a character in uppercase : " ) ; scanf ( " %c " , & ch ) ; ch = ch + 32 ; printf ( " character in lowercase = %c " , ch ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; int i ; for ( i = 0 ; i <100 ; i + + ) { printf ( " %d\t " , rand ( ) ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <dos.h> void main ( ) { clrscr ( ) ; struct date d ; getdate ( & d ) ; printf ( " Current system date is %d / %d / %d " , d.da_day , d.da_mon , d.da_year ) ; getch ( ) ; }
#include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; system ( " C : \\Windows\\System32\\ipconfig " ) ; getch ( ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { system ( " C : \\Windows\\System32\\shutdown / s " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { system ( " C : \\Windows\\System32\\shutdown / s / t 0 " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch ; printf ( " Do you want to shutdown your computer ( y / n ) : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) { system ( " C : \\Windows\\System32\\shutdown -s " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> void main ( ) { int ival , remainder ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & ival ) ; remainder = ival % 2 ; if ( remainder = = 0 ) printf ( " %d is an even integer\n  " , ival ) ; else printf ( " %d is an odd integer\n  " , ival ) ; }
#include <stdio.h> void main ( ) { int number ; printf ( " Enter a number \n  " ) ; scanf ( " %d " , & number ) ; if ( number > = 0 ) printf ( " %d is a positive number \n  " , number ) ; else printf ( " %d is a negative number \n  " , number ) ; }
#include <stdio.h> void main ( ) { int m , n ; printf ( " Enter the values for M and N\n  " ) ; scanf ( " %d %d " , & m , & n ) ; if ( m = = n ) printf ( " M and N are equal\n  " ) ; else printf ( " M and N are not equal\n  " ) ; }
#include <stdio.h> void main ( ) { int num , sum = 0 ; for ( num = 1 ; num < = 50 ; num + + ) { sum = sum + num ; } printf ( " Sum = %4d\n  " , sum ) ; }
#include <stdio.h> void main ( ) { long number , tempnum ; printf ( " Enter an integer \n  " ) ; scanf ( " %ld " , & number ) ; tempnum = number ; number = number < < 2 ; printf ( " %ld x 4 = %ld\n  " , tempnum , number ) ; }
#include <stdio.h> #include <string.h> #include <sys / types.h> #include <sys / socket.h> #include <sys / ioctl.h> #include <netinet / in.h> #include <net / if.h> #include <unistd.h> #include <arpa / inet.h> int main ( ) { int n ; struct ifreq ifr ; char array [ ] = " eth0 " ; n = socket ( AF_INET , SOCK_DGRAM , 0 ) ;
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year , yr ; printf ( " Enter the year " ) ; scanf ( " %d " , & year ) ; yr = year % 100 ; printf ( " Last two digits of year is : %02d " , yr ) ; return 0 ; }
#include <stdio.h> #define decode ( s , t , u , m , p , e , d ) m##s##u##t#define begin decode ( a , n , i , m , a , t , e ) int begin ( ) { printf ( " helloworld " ) ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hi.. Welcome to sanfoundry " ) ) { } }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> void cube ( int * x ) ; int main ( ) { int num = 10 ; cube ( & num ) ; printf ( " the cube of the given number is %d " , num ) ; return 0 ; } void cube ( int * x ) { * x = ( * x ) * ( * x ) * ( * x ) ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i ; for ( i = 0 ; i < argc ; i + + ) { printf ( " %s " , argv [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { int array [ ] = { 15 , 50 , 34 , 20 , 10 , 79 , 100 } ; int n ; n = sizeof ( array ) ; printf ( " Size of the given array is %d\n  " , n / sizeof ( int ) ) ; return 0 ; }
#include <stdio.h> struct temp { int a [ 10 ] ; char p ; } ;
#include <stdio.h> main ( ) { int a = 1 ; printf ( " size of a is %d , " , sizeof ( + + a ) ) ; printf ( " value of a is %d " , a ) ; } ;
#include <stdio.h> printf ( " %d " , sizeof ( strlen ( " HELLOWORLD " ) ) ) ;
#include <stdio.h> ( sizeof double = 8 , float = 4 , void = 1 ) #define PI 3.14 int main ( ) { printf ( " %d " , sizeof ( PI ) ) ; }
#include <stdio.h> int main ( ) { float base , altitude ; float area ; printf ( " Enter base and altitude of the given Parallelogram : \n  " ) ; scanf ( " %f %f " , & base , & altitude ) ; area = base * altitude ; printf ( " Area of Parallelogram is : %.3f\n  " , area ) ; return 0 ; }
#include <stdio.h> void incrementArray ( int [ ] ) ; void main ( ) { int i ; int array [ 4 ] = { 10 , 20 , 30 , 40 } ; incrementArray ( array ) ; for ( i = 0 ; i < 4 ; i + + ) printf ( " %d\t " , array [ i ] ) ;
#include <stdio.h> int main ( ) { FILE * fileptr1 , * fileptr2 ; char filename [ 40 ] ; char ch ; int delete_line , temp = 1 ; printf ( " Enter file name : " ) ; scanf ( " %s " , filename ) ;
#include <dirent.h> #include <stdio.h> int main ( void ) { DIR * d ; struct dirent * dir ; d = opendir ( " . " ) ; if ( d ) { while ( ( dir = readdir ( d ) ) ! = NULL ) { printf ( " %s\n  " , dir-> d_name ) ; } closedir ( d ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( void ) { FILE * fileptr1 , * fileptr2 ; char filechar [ 40 ] ; char c ; int delete_line , temp = 1 ; printf ( " Enter file name : " ) ; scanf ( " %s " , filechar ) ; fileptr1 = fopen ( filechar , " r " ) ; c = getc ( fileptr1 ) ;
#include <stdio.h> int main ( ) { FILE * fileptr ; int count_lines = 0 ; char filechar [ 40 ] , chr ; printf ( " Enter file name : " ) ; scanf ( " %s " , filechar ) ; fileptr = fopen ( filechar , " r " ) ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; void print_reverse_recursive ( struct node * ) ; void print ( struct node * ) ; void create_new_node ( struct node * , int ) ;
#include <stdio.h> void main ( ) { int array [ 30 ] , temp [ 30 ] , i , j , k , l , num ;
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to lower case\n  " ) ; gets ( string ) ; printf ( " Input string in lower case : %s\n  " , strlwr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int top = -1 ; char stack [ 100 ] ;
#include <stdio.h> #include <stdlib.h> #define MAX 10 struct node { int data ; struct node * link ; } * front , * rear ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * link ; } * top = NULL ; #define MAX 5
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL , * ptr , * temp ;
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * left ; struct node * right ; } ; static struct node * prev = NULL ; int is_bst ( struct node * root ) { if ( root ) { if ( !is_bst ( root-> left ) )
#include <stdio.h> void main ( int argc , char * argv [ ] , char * envp [ ] ) { int i ; for ( i = 0 ; envp [ i ] ! = NULL ; i + + ) { printf ( " \n  %s " , envp [ i ] ) ; } }
#include <stdio.h> #include <math.h> #define PI 3.142 void main ( ) { float radius , area ; printf ( " Enter the radius of a circle \n  " ) ; scanf ( " %f " , & radius ) ; area = PI * pow ( radius , 2 ) ; printf ( " Area of a circle = %5.2f\n  " , area ) ; }
#include <stdio.h> int main ( ) { float height , width ; float area ; printf ( " Enter height and width of the given triangle : \n  " ) ; scanf ( " %f %f " , & height , & width ) ; area = 0.5 * height * width ; printf ( " Area of right angled triangle is : %.3f\n  " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float diagonal1 , diagonal2 ; float area ; printf ( " Enter diagonals of the given rhombus : \n  " ) ; scanf ( " %f %f " , & diagonal1 , & diagonal2 ) ; area = 0.5 * diagonal1 * diagonal2 ; printf ( " Area of rhombus is : %.3f \n  " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> void main ( ) { float side , surfacearea , volume ; printf ( " Enter the length of a side \n  " ) ; scanf ( " %f " , & side ) ; surfacearea = 6.0 * side * side ; volume = pow ( side , 3 ) ; printf ( " Surface area = %6.2f and Volume = %6.2f \n  " , surfacearea , volume ) ; }
#include <stdio.h> void countdown ( int ) ; int main ( void ) { int num = 100 ; countdown ( num ) ; return 0 ; } void countdown ( int count ) { if ( count > = 1 ) { printf ( " %d\n  " , count ) ; countdown ( count-- ) ; } }
#include <stdio.h> #include <limits.h> int MatrixChainOrder ( int p [ ] , int n ) { int m [ n ] [ n ] ; int s [ n ] [ n ] ; int i , j , k , L , q ;
#include <time.h> #include <stdio.h> #include <stdlib.h> int main ( void ) { int num ; srand ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; printf ( " \n Generating a random number using srand and rand function.\n  " ) ; num = rand ( ) ; printf ( " %d\n  " , num ) ; return EXIT_SUCCESS ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int gcd ( int x , int y ) { int r = 0 , a , b ; a = ( x > y ) ? x : y ;
#include <stdio.h> void printarray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void partition ( int n ) { int p [ n ] ;
#include <stdio.h> void printarray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void partition ( int n ) { int p [ n ] ;
#include <stdio.h> int max ( int a , int b ) { return ( a > b ) ? a : b ; }
#include <stdio.h> void selectionSort ( int arr [ ] , int size ) { int i , j ; for ( i = 0 ; i < size ; i + + ) { for ( j = i ; j < size ; j + + ) { if ( arr [ i ] > arr [ j ] ) swap ( & arr [ i ] , & arr [ j ] ) ; } } }
#include <stdio.h> int main ( ) { printf ( " Hello World! %d \n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int y = 10000 ; int y = 34 ; printf ( " Hello World! %d\n  " , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int main = 3 ; printf ( " %d " , main ) ; return 0 ; }
#include <stdio.h> int main ( ) { int ThisIsVariableName = 12 ; int ThisIsVariablename = 14 ; printf ( " %d " , ThisIsVariablename ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int i ; for ( i = 0 ; i < 5 ; i + + ) if ( ( char ) a [ i ] = = '5' ) printf ( " %d\n  " , a [ i ] ) ; else printf ( " FAIL\n  " ) ; }
#include <stdio.h> int main ( ) { signed char chr ; chr = 128 ; printf ( " %d\n  " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f1 = 0.1 ; if ( f1 = = 0.1 ) printf ( " equal\n  " ) ; else printf ( " not equal\n  " ) ; }
#include <stdio.h> int main ( ) { float f1 = 0.1 ; if ( f1 = = 0.1f ) printf ( " equal\n  " ) ; else printf ( " not equal\n  " ) ; }
#include <stdio.h> int main ( ) { int x = 10000 ; double y = 56 ; int * p = & x ; double * q = & y ; printf ( " p and q are %d and %d " , sizeof ( p ) , sizeof ( q ) ) ; return 0 ; }
#include <stdio.h> union Sti { int nu ; char m ; } ; int main ( ) { union Sti s ; printf ( " %d " , sizeof ( s ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 'a' ; printf ( " %f " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { enum { ORANGE = 5 , MANGO , BANANA = 4 , PEACH } ; printf ( " PEACH = %d\n  " , PEACH ) ; }
#include <stdio.h> int main ( ) { printf ( " C programming %s " , " Class by\n  %s Sanfoundry " , " WOW " ) ; }
#include <stdio.h> #define a 10 int main ( ) { const int a = 5 ; printf ( " a = %d\n  " , a ) ; }
#include <stdio.h> int main ( ) { int var = 010 ; printf ( " %d " , var ) ; }
#include <stdio.h> enum birds { SPARROW , PEACOCK , PARROT } ; enum animals { TIGER = 8 , LION , RABBIT , ZEBRA } ; int main ( ) { enum birds m = TIGER ; int k ; k = m ; printf ( " %d\n  " , k ) ; return 0 ; }
#include <stdio.h> #define MAX 2 enum bird { SPARROW = MAX + 1 , PARROT = SPARROW + MAX } ; int main ( ) { enum bird b = PARROT ; printf ( " %d\n  " , b ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " x " ; char c = 'x' ; char ary [ 1 ] ; ary [ 0 ] = c ; printf ( " %d %d " , strlen ( str ) , strlen ( ary ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sanfoundry\rclass\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sanfoundry\r\n class\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int p ; p = 4 ; printf ( " p is %d " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int k = 4 ; int * const p = & k ; int r = 3 ; p = & r ; printf ( " %d " , p ) ; }
#include <stdio.h> void main ( ) { int const k = 5 ; k + + ; printf ( " k is %d " , k ) ; }
#include <stdio.h> int const print ( ) { printf ( " Sanfoundry.com " ) ; return 0 ; } void main ( ) { print ( ) ; }
#include <stdio.h> void main ( ) { int k = 4 ; float k = 4 ; printf ( " %d " , k ) }
#include <stdio.h> int main ( ) { short int i = 20 ; char c = 97 ; printf ( " %d , %d , %d\n  " , sizeof ( i ) , sizeof ( c ) , sizeof ( c + i ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 ; a + = b - = a ; printf ( " %d %d " , a , b ) ; }
#include <stdio.h> int main ( ) { int a = 4 , n , i , result = 0 ; scanf ( " %d " , n ) ; for ( i = 0 ; i < n ; i + + ) result + = a ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( x < 1 ) printf ( " hello " ) ; if ( x = = 5 ) printf ( " hi " ) ; else printf ( " no " ) ; }
#include <stdio.h> int x ; void main ( ) { if ( x ) printf ( " hi " ) ; else printf ( " how are u " ) ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( true ) ; printf ( " hello " ) ; }
#include <stdio.h> void main ( ) { int x = 0 ; if ( x = = 0 ) printf ( " hi " ) ; else printf ( " how are u " ) ; printf ( " hello " ) ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( x < 1 ) ; printf ( " Hello " ) ; }
#include <stdio.h> void main ( ) { double ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %lf " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1 " ) ; break ; case 2 : printf ( " 2 " ) ; break ; } }
#include <stdio.h> void main ( ) { char * ch ; printf ( " enter a value between 1 to 3 : " ) ; scanf ( " %s " , ch ) ; switch ( ch ) { case " 1 " : printf ( " 1 " ) ; break ; case " 2 " : printf ( " 2 " ) ; break ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1\n  " ) ; default : printf ( " 2\n  " ) ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1\n  " ) ; break ; printf ( " Hi " ) ; default : printf ( " 2\n  " ) ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch , ch + 1 ) { case 1 : printf ( " 1\n  " ) ; break ; case 2 : printf ( " 2 " ) ; break ; } }
#include <stdio.h> int main ( ) { while ( ) printf ( " In while loop " ) ; printf ( " After loop\n  " ) ; }
#include <stdio.h> int main ( ) { do printf ( " In while loop " ) ; while ( 0 ) ; printf ( " After loop\n  " ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { i + + ; printf ( " In while loop\n  " ) ; } while ( i < 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { i + + ; printf ( " in while loop\n  " ) ; } while ( i < 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; while ( i < 3 ) i + + ; printf ( " In while loop\n  " ) ; }
#include <stdio.h> void main ( ) { int i = 2 ; do { printf ( " Hi " ) ; } while ( i < 2 ) }
#include <stdio.h> void main ( ) { int i = 0 ; while ( + + i ) { printf ( " H " ) ; } }
#include <stdio.h> void main ( ) { int i = 0 ; do { printf ( " Hello " ) ; } while ( i ! = 0 ) ; }
#include <stdio.h> void main ( ) { int i = 5 , k ; if ( i = = 0 ) goto label ; label : printf ( " %d " , i ) ; printf ( " Hey " ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; goto l1 ; printf ( " %d " , 2 ) ; l1 : goto l2 ; printf ( " %d " , 3 ) ; l2 : printf ( " %d " , 4 ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; l1 : l2 : printf ( " %d " , 2 ) ; printf ( " %d\n  " , 3 ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; goto l1 ; printf ( " %d " , 2 ) ; } void foo ( ) { l1 : printf ( " 3 " , 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; while ( i < 2 ) { l1 : i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; while ( l1 : i < 2 ) { i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; l1 : while ( i < 2 ) { i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int i ; int main ( ) { extern int i ; if ( i = = 0 ) printf ( " scope rules\n  " ) ; }
#include <stdio.h> int main ( ) { extern ary1 [ ] ; printf ( " scope rules\n  " ) ; }
#include <stdio.h> int main ( ) { extern ary1 [ ] ; printf ( " %d\n  " , ary1 [ 0 ] ) ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < 5 ; i + + ) int a = i ; printf ( " %d " , a ) ; }
#include <stdio.h> int b ; int main ( ) { int c ; return 0 ; } int a ;
#include <stdio.h> int main ( ) { foo ( ) ; foo ( ) ; } void foo ( ) { int i = 11 ; printf ( " %d " , i ) ; static int j = 12 ; j = j + 1 ; printf ( " %d\n  " , j ) ; }
#include <stdio.h> void func ( ) ; int main ( ) { static int b = 20 ; func ( ) ; } void func ( ) { static int b ; printf ( " %d " , b ) ; }
#include <stdio.h> int main ( ) { int one = 1 , two = 2 ; #ifdef next one = 2 ; two = 1 ; #endif printf ( " %d , %d " , one , two ) ; }
#include <stdio.h> #include " test.h " #include " test.h " int main ( ) {
#include <stdio.h> #define foo ( m , n ) m ## n void myfunc ( ) ; int main ( ) { myfunc ( ) ; } void myfunc ( ) { printf ( " %d\n  " , foo ( 2 , 3 ) ) ; }
#include <stdio.h> void main ( ) { #define max 37 ; printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define max 37 printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define const int const max = 32 ; printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define max 45 max = 32 ; printf ( " %d " , max ) ; }
#include <stdio.h> # define max void m ( ) { printf ( " hi " ) ; } void main ( ) { max ; m ( ) ; }
#include <stdio.h> #define A 1 + 2 #define B 3 + 4 int main ( ) { int var = A * B ; printf ( " %d\n  " , var ) ; }
#include <stdio.h> #define var 20 ) ; int main ( ) { printf ( " %d\n  " , var }
#include <stdio.h> void main ( ) { char * s = " hello " ; char * p = s * 3 ; printf ( " %c\t %c " , * p , s [ 1 ] ) ; }
#include <stdio.h> void main ( ) { char * s = " hello " ; char * p = s + 2 ; printf ( " %c\t %c " , * p , s [ 1 ] ) ; }
#include <stdio.h> int main ( ) { void * p ; int a [ 4 ] = { 1 , 2 , 3 , 8 } ; p = & a [ 3 ] ; int * ptr = & a [ 2 ] ; int n = p - ptr ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { void * p ; int a [ 4 ] = { 1 , 2 , 3 , 4 } ; p = & a [ 3 ] ; int * ptr = & a [ 2 ] ; int n = ( int * ) p - ptr ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int b [ 4 ] = { 1 , 2 , 3 , 4 } ; int n = & b [ 3 ] - & a [ 2 ] ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int * p = & a [ 1 ] ; int * ptr = & a [ 2 ] ; ptr = ptr * 1 ; printf ( " %d\n  " , * ptr ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int * ptr = & a [ 2 ] ; float n = 1 ; ptr = ptr + n ; printf ( " %d\n  " , * ptr ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; void * p = & a [ 1 ] ; void * ptr = & a [ 2 ] ; int n = 1 ; n = ptr - p ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * m ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * p ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; * * m = 6 ; printf ( " %d\n  " , k ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * r = & p ; printf ( " %d " , ( * * r ) ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * * r = & p ; printf ( " %p %p " , * r , a ) ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 , c = 3 ; int * ptr1 = & a , * ptr2 = & b , * ptr3 = & c ; int * * sptr = & ptr1 ;
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * * r = & p ; printf ( " %p %p " , * r , a ) ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 , c = 3 ; int * ptr1 = & a ; int * * sptr = & ptr1 ;
#include <stdio.h> int main ( ) { int a = 10 ; int * * c - = & & a ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * m ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * p ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; * * m = 6 ; printf ( " %d\n  " , k ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * r = & p ; printf ( " %d " , ( * * r ) ) ; }
#include <stdio.h> int main ( ) { char * a [ 2 ] = { " hello " , " hi " } ; printf ( " %d " , sizeof ( a ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 2 ] [ 6 ] = { " hello " , " hi " } ; printf ( " %d " , sizeof ( a ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 2 ] [ 6 ] = { " hello " , " hi " } ; printf ( " %s " , * a + 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * a [ 2 ] = { " hello " , " hi " } ; printf ( " %s " , * ( a + 1 ) ) ; return 0 ; }
#include <stdio.h> int mul ( int a , int b , int c ) { return a * b * c ; } void main ( ) { int * function_pointer ; function_pointer = mul ; printf ( " The product of three numbers is : %d " , function_pointer ( 2 , 3 , 4 ) ) ; }
#include <stdio.h> int sub ( int a , int b , int c ) { return a - b - c ; } void main ( ) { int ( * function_pointer ) ( int , int , int ) ; function_pointer = & sub ; printf ( " The difference of three numbers is : %d " , ( * function_pointer ) ( 2 , 3 , 4 ) ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( ) = f ; int main ( int argc , char * argv [ ] ) { foo ( 10 ) ; return 0 ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( void ) = f ; int main ( int argc , char * argv [ ] ) { foo ( 10 ) ; return 0 ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( float ) = f ; int main ( ) { foo ( 10 ) ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> struct student { char * name ; } ; void main ( ) { struct student s , m ; s.name = " st " ; m = s ; printf ( " %s %s " , s.name , m.name ) ; }
#include <stdio.h> struct temp { int a ; } s ; void func ( struct temp s ) { s.a = 10 ; printf ( " %d\t " , s.a ) ; } main ( ) { func ( s ) ; printf ( " %d\t " , s.a ) ; }
#include <stdio.h> struct student { char * name ; } ; struct student fun ( void ) { struct student s ; s.name = " alan " ; return s ; } void main ( ) { struct student m = fun ( ) ; s.name = " turing " ; printf ( " %s " , m.name ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; s-> c = " hello " ; printf ( " %s " , s-> c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student * s ; s-> c = " hello " ; printf ( " %s " , s-> c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; s-> c = " hello " ; printf ( " %s " , m.c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; ( * s ) .c = " hello " ; printf ( " %s " , m.c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student n ; struct student * s = & n ; ( * s ) .c = " hello " ; printf ( " %p\n  %p\n  " , s , & n ) ; }
#include <stdio.h> struct p { int x [ 2 ] ; } ; struct q { int * x ; } ; int main ( ) { struct p p1 = { 1 , 2 } ; struct q * ptr1 ; ptr1-> x = ( struct q * ) & p1.x ; printf ( " %d\n  " , ptr1-> x [ 1 ] ) ; }
#include <stdio.h> struct p { int x [ 2 ] ; } ; struct q { int * x ; } ; int main ( ) { struct p p1 = { 1 , 2 } ; struct q * ptr1 = ( struct q * ) & p1 ; ptr1-> x = ( struct q * ) & p1.x ; printf ( " %d\n  " , ptr1-> x [ 0 ] ) ; }
#include <stdio.h> struct p { int x ; int y ; } ; int main ( ) { struct p p1 [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; struct p * ptr1 = p1 ; printf ( " %d %d\n  " , ptr1-> x , ( ptr1 + 2 ) -> x ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student m ; s.c = m.c = " hi " ; m.point = & s ; ( m.point ) -> c = " hey " ; printf ( " %s\t %s\t " , s.c , m.c ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student m ; m.point = s ; ( m.point ) -> c = " hey " ; printf ( " %s " , s.c ) ; }
#include <stdio.h> struct student { char * c ; struct student point ; } ; void main ( ) { struct student s ; s.c = " hello " ; printf ( " %s " , s.c ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; printf ( " %d " , sizeof ( s ) ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student * m = & s ; printf ( " %d " , sizeof ( student ) ) ; }
#include <stdio.h> struct p { int x ; char y ; struct p * ptr ; } ; int main ( ) { struct p p = { 1 , 2 , & p } ; printf ( " %d\n  " , p.ptr-> x ) ; return 0 ; }
#include <stdio.h> typedef struct p * q ; struct p { int x ; char y ; q ptr ; } ; typedef struct p * q ; int main ( ) { struct p p = { 1 , 2 , & p } ; printf ( " %d\n  " , p.ptr-> x ) ; return 0 ; }
#include <stdio.h> typedef struct student { char * a ; } stu ; void main ( ) { struct stu s ; s.a = " hi " ; printf ( " %s " , s.a ) ; }
#include <stdio.h> typedef struct student { char * a ; } stu ; void main ( ) { struct student s ; s.a = " hey " ; printf ( " %s " , s.a ) ; }
#include <stdio.h> typedef int integer ; int main ( ) { int i = 10 , * ptr ; float f = 20 ; integer j = i ; ptr = & j ; printf ( " %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> typedef struct p { int x , y ; } ; int main ( ) { p k1 = { 1 , 2 } ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> typedef struct p { int x , y ; } k = { 1 , 2 } ; int main ( ) { p k1 = k ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> typedef struct p { int x , y ; } k ; int main ( ) { struct p p = { 1 , 2 } ; k k1 = p ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> struct p { char x : 2 ; int y : 2 ; } ; int main ( ) { struct p p ; p.x = 2 ; p.y = 1 ; p.x = p.x & p.y ; printf ( " %d\n  " , p.x ) ; }
#include <stdio.h> union u { struct p { unsigned char x : 2 ; unsigned int y : 2 ; } ; int x ; } ; int main ( ) { union u u ; u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u ; u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u = { 2 } ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u.p = { 2 } ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> struct p { unsigned int x : 2 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 3 ; p.y = 1 ; printf ( " %d\n  " , sizeof ( p ) ) ; }
#include <stdio.h> struct p { unsigned int x : 2 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 3 ; p.y = 4 ; printf ( " %d\n  " , p.y ) ; }
#include <stdio.h> struct p { unsigned int x : 7 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 110 ; p.y = 2 ; printf ( " %d\n  " , p.x ) ; }
#include <stdio.h> struct p { unsigned int x : 1 ; unsigned int y : 1 ; } ; int main ( ) { struct p p ; p.x = 1 ; p.y = 2 ; printf ( " %d\n  " , p.y ) ; }
#include <stdio.h> int main ( ) { FILE * fp = stdin ; int n ; fprintf ( fp , " %d " , 45 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d\n  " , 45 ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; fflush ( stdout ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * str = " hello , world " ; char * str1 = " hello , world " ; if ( strcmp ( str , str1 ) ) printf ( " equal " ) ; else printf ( " unequal " ) ; }
#include <stdio.h> int main ( ) { char * str = " hello , world " ; char str1 [ 15 ] = " hello wo 9 " ; strcpy ( str , str1 ) ; printf ( " %s " , str1 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " hello , world " ; char str1 [ 9 ] ; strncpy ( str1 , str , 9 ) ; printf ( " %s %d " , str1 , strlen ( str1 ) ) ; }
#include <stdio.h> int main ( ) { char * str = " hello , world\n  " ; printf ( " %d " , strlen ( str ) ) ; }
#include <stdio.h> int main ( ) { char str [ 11 ] = " hello " ; char * str1 = " world " ; strcat ( str , str1 ) ; printf ( " %s %d " , str , str [ 10 ] ) ; }
#include <stdio.h> int main ( ) { char str [ 10 ] = " hello " ; char * str1 = " world " ; strncat ( str , str1 , 9 ) ; printf ( " %s " , str ) ; }
#include <stdio.h> int main ( ) { int n ; scanf ( " %d " , & n ) ; ungetc ( n , stdin ) ; scanf ( " %d " , & n ) ; printf ( " %d\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 20 ] ; fgets ( n , 19 , stdin ) ; ungetc ( n [ 0 ] , stdin ) ; scanf ( " %s " , n ) ; printf ( " %s\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 20 ] ; fgets ( n , 19 , stdin ) ; ungetc ( n [ 0 ] , stdin ) ; printf ( " %s\n  " , n ) ; return 0 ; }
#include <stdio.h> void main ( ) { char * p = calloc ( 100 , 1 ) ; p = " welcome " ; printf ( " %s\n  " , p ) ; }
#include <stdio.h> printf ( " %.0f " , 2.89 ) ;
#include <stdio.h> int main ( ) { float a = 2.455555555555 ; printf ( " %f " , a ) ; }
#include <stdio.h> printf ( " %d " , sizeof ( 'a' ) ) ;
#include <stdio.h> union temp { char a ; char b ; int c ; } t ; int main ( ) { printf ( " %d " , sizeof ( t ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num1 , num2 ; int sum ; num1 = num2 = 10 ; sum = num1 + num2 ; * Result is assigned to sum by the assignment operator. * / -num1 ; --num1 ; return 0 ; }
#include <stdio.h> int main ( void ) { int one , two , three ; one = two = three = 68 ; printf ( " one two three " ) ; printf ( " First round score %4d %8d %8d\n  " , one , two , three ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num = 1 ; while ( num < = 25 ) { printf ( " %4d %6d\n  " , num , num * num ) ; num = num + 1 ; } return 0 ; }
#include <stdio.h> int main ( void ) { int hall = -16 ; printf ( " value of exp. hall > > = 3 is %d\n  " , hall > > = 3 ) ; printf ( " value of hall , -ve value , after right shift by 3 bits , " " is %d\n  " , hall ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int true , false ; true = ( 10 > 5 ) ; false = ( 10 = = 5 ) ; printf ( " true = %d ; false = %d \n  " , true , false ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 5 ; while ( n ) printf ( " %2d is true\n  " , n-- ) ; printf ( " %2d is false\n  " , n ) ; n = -5 ; while ( n ) printf ( " %2d is true\n  " , n + + ) ; printf ( " %2d is false\n  " , n ) ; return 0 ; }
#include <stdio.h> #define PERIOD '.' int main ( void ) { int ch ; int charcount = 0 ; while ( ( ch = getchar ( ) ) ! = PERIOD ) { if ( ch ! = ' " ' & & ch ! = '\'' ) charcount + + ; } printf ( " There are %d non-quote characters.\n  " , charcount ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num1 = 0 , num2 = 0 ; while ( num1 < 5 ) { num1 + + ; + + num2 ; printf ( " num1 %d , num2 = %d \n  " , num1 , num2 ) } return 0 ; }
#include <stdio.h> int main ( void ) { int x , y , z ; for ( x = getval ( ) , y = x + 1 ; y > = 0 ; x + + , y = x + 1 ) { ... x = getval ( ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a ; a = getval ( ) ; count ( a ) ; while ( a > 0 ) { ... a = getval ( ) ; count ( a ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a ; while ( a = getval ( ) , count ( a ) , a > 0 ) { ... } return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( void ) { int flag ; printf ( " User , type in some intger value...\n  " ) ; scanf ( " %d " , & flag ) ; if ( flag = = FALSE ) ( !flag ) ; if ( flag = = TRUE ) ( flag ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 0 ; size_t intsize ; intsize = sizeof ( int ) ; printf ( " n = %d , n has %zd bytes ; all ints have %zd bytes.\n  " , + + n , sizeof + + n , intsize ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( int argc , char * * argv ) { char buffer [ 10 ] ; strncpy ( buffer , argv [ 1 ] , sizeof buffer - sizeof buffer [ 0 ] ) ; buffer [ sizeof buffer - 1 ] = '\0' ; return 0 ; }
#include <stdio.h> struct flexarray { char val ; int array [ ] ; } ; int main ( int argc , char * * argv ) { printf ( " sizeof ( struct flexarray ) = %zu bytes\n  " , sizeof ( struct flexarray ) ) ; return 0 ; }
#include <stddef.h> #include <stdio.h> size_t flexsize ( int n ) { char b [ n + 3 ] ; return sizeof b ; } int main ( void ) { size_t size = flexsize ( 10 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int ultra = 0 , super = 0 ; while ( super < 5 ) { super + + ; + + ultra ; printf ( " super = %d , ultra = %d \n  " , super , ultra ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a = 1 , b = 1 ; int aplus , plusb ; aplus = a + + ; plusb = + + b ; printf ( " a aplus b plusb \n  " ) ; printf ( " %1d %5d %5d %5d\n  " , a , aplus , b , plusb ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 0 ; size_t intsize ; intsize = sizeof ( int ) ; printf ( " n = %d , n has %zd bytes ; all ints have %zd bytes.\n  " , + + n , sizeof + + n , intsize ) ; printf ( " now n has become %d\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int x = 10 , y = 20 ; float marks = 60.75 , u = 33.89 , v ; v = marks + u * x + y ; printf ( " Value of the exp. v = marks + u * x + y is %f\n  " , v ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 , j = 20 , k = 50 ; float cm = 10.5 , mm = 20.9 , inch = 12 ; 5 = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { char name = 'A' ; 'A' = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { int int_size ; printf ( " Size of all integers is %d bytes\n  " , sizeof ( int ) ) ; printf ( " Size of integer variable int_size is %d bytes\n  " , sizeof int_size ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int den = 11 ; int * ip = & den ; printf ( " In exp. \'ip = & den\' , \n Address of den is %p and\n contents of " " ip is %p\n  " , & den , ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int balls = 100 ; int * ip = & balls ; printf ( " Address of balls in exp. \ " balls = 100\ " is %p\n and Value of ip " " in exp. \ " * ip = & balls\ " is %p\n  " , & balls , ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; printf ( " Address of a is %p and value of a is %3d\n  " , & a , a ) ; & a = 100 ; printf ( " After & a = 100 ; Address of a is %p and value of a is %3d\n  " , & a , a ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; printf ( " \t\tAddress of a is %p and value of a is %3d\n  " , & a , a ) ; * ( & a ) = 100 ; printf ( " After * ( & a ) = 100 ; Address of a is %p and value of a is %3d\n  " , & a , a ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Program shows accessing the location by its address...\n  " ) ; * ( int * ) 10000 = 100 ; printf ( " After * ( int * ) 10000 = 1000 ; value at address ( int * ) 10000 is " " %d\n  " , * ( int * ) 10000 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 5 ; long double x ; int * pi = & n ; long double * pld = & x ; x = n ; pld = pi ; return 0 ; }
#include <stdio.h> int main ( void ) { const int gz = 122 ; gz = 111 ; return 0 ; }
#include <stdio.h> #define MONTHS 12 int main ( void ) { double rainfall [ MONTHS ] = { 2.12 , 3.1 , 0.34 , 4.00 , 1.1 , 1.23 , 2.345 , 3.121 , 3.232 , 0.023 , 1.023 , 2.234 } ; const double * dp = rainfall ; * dp = 3.12 ; rainfall [ 0 ] = 3.12 ; rainfall [ 2 ] = 2.22 ; return 0 ; }
#include <stdio.h> void show ( const double * ) ; int main ( void ) { ---- ---- show ( rainfall ) ; return 0 ; } void show ( const double * srf ) { double rfd ; while ( ( rfd = * srf + + ) ! = 0 ) printf ( " %lf\t " , rfd ) ; printf ( " \n  " ) ; }
#include <stdio.h> int main ( void ) { int me = 1 ; register int you = 2 ; printf ( " Address of me in exp. \ " int me = 1\ " is \t\t %p\n Address of you " " in exp. \ " register int you = 2\ " is %p\n  " , & me , & you ) ; return 0 ; }
#include <stdio.h> int main ( void ) { 500 ; 45.06 ; 'A' ; printf ( " Address of integer '500' is %p\n  " , & ( 500 ) ) ; printf ( " Address of float '45.06' is %p\n  " , & ( 45.06 ) ) ; printf ( " Address of character \'A\' is %p\n  " , & ( 'A' ) ) ; return 0 ; }
#include <stdio.h> void display ( void ) ; int main ( void ) { printf ( " main : going to call display...\n  " ) ; display ( ) ; return 0 ; } void display ( void ) { printf ( " i am display ( ) : I display massage!\n  " ) ; return ; }
#include <stdio.h> int sum2ints ( int , int ) ; int main ( void ) { int u = 5 , v = 10 ; printf ( " sum of %d and %d is %d\n  " , u , v , sum2ints ( u , v ) ) ; return 0 ; } int sum2ints ( int x , int y ) { return x + y ; }
#include <stdio.h> void hahaha ( void ) ; int main ( void ) { hahaha ( ) ; return 0 ; } void hahaha ( void ) { printf ( " ha ha ha!\n  " ) ; }
#include <stdio.h> double mul_floats ( float , float ) ; int main ( void ) { float x = 4.67 , y = 3.55 ; double result ; result = mul_floats ( x , y ) ; printf ( " multiplication of %f and %f is %lf\n  " , x , y , result ) ; return 0 ; } double mul_floats ( float u , float v ) { return u * v ; }
#include <stdio.h> void countdown ( int ) ; int main ( void ) { int num = 100 ; countdown ( num ) ; return 0 ; } void countdown ( int count ) { if ( count > = 1 ) { printf ( " %d\n  " , count ) ; countdown ( count-- ) ; } }
#include <stdio.h> int main ( void ) { int num = 100 ; for ( ; num > = 1 ; num-- ) { printf ( " %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { static int i ; printf ( " Default Value of \ " static variable i\ " is %d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i ; int jams [ 5 ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; for ( i = 0 ; i < 6 ; i + + ) printf ( " jams [ %d ] is %d\n  " , i , jams [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i ; int hats [ 5 ] = { 1 , 2 , 3 , 4 } ; for ( i = 0 ; i < 5 ; i + + ) printf ( " hats [ %d ] is %d\n  " , i , hats [ i ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char name [ ] = " christopher " ; char * name2 = " christopher " ; printf ( " name \ " %s\ " is an array and name2 \ " %s\ " is a string literal.\n  " , name , name2 ) ; return 0 ; }
#include <string.h> #include <stdio.h> int main ( void ) { char * src = " Hello , strcpy. " ; char dst [ 5 ] ; char * copied ; copied = strcpy ( dst , src ) ; printf ( " strcpy ( ) returns \ " %s\ " \n  " , copied ) ; return 0 ; }
#include <stdio.h> typedef struct A { char surname [ 15 ] ; int roll_no ; char initial [ 5 ] ; float marks ; } New ; int main ( void ) { New x = { " smith " , 34 , " J " , 67.38 } ; New y [ 10 ] ; New * pstruct = & x ; return 0 ; }
#include <stdio.h> typedef union { float marks ; char str [ 20 ] ; int count ; } Record ; int main ( void ) { Record new ; puts ( " * * Program computes size allocated to \'new\' * * " ) ; printf ( " %d bytes allocated to \'new\' Record.\n  " , sizeof ( new ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * x = 10 , y ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> typedef struct NODE { struct NODE * link ; int data ; } Node ; Node * * create_sll ( const int ) ; void insert_data ( Node * * ) ; void show_list ( Node * * ) ; void sort_list ( Node * * ) ; #include " sll_op.c "
#include <stdio.h> int main ( ) { printf ( " Hello World!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Hello World!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define TRUE 1 #define FALSE 0 #define SIZE 512 #define MAX ( a , b ) ( ( a ) > ( b ) ? ( a ) : ( b ) )
#include <stdio.h> #define TRUE 1 #define PRINT printf ( " values of x = %d and y = %d.\n  " , x , y ) ; int main ( void ) { if ( TRUE ) PRINT ; else printf ( " Bye!\n  " ) ; return 0 ; }
#include <stdio.h> #define X 10 #define Y 0 #define Z 100 int main ( void ) { int x = 10 , y = 0 , z = 100 ; #if X printf ( " x is %d\n  " , X ) ; #elif Y printf ( " y is %d\n  " , Y ) ; #else printf ( " z is %d\n  " , Z ) ; #endif return 0 ; }
#include <stdio.h> #define YES #define NO #undef YES #undef NO int main ( void ) { #ifdef YES #ifdef NO puts ( " Both YES and NO defined! " ) ; #else puts ( " YES defined! " ) ; #endif #elif NO puts ( " NO defined! " ) ; #else #error None of YES and NO defined! #endif return 0 ; }
#include <stdio.h> int main ( void ) { #if defined ( OS_LINUX ) #ifdef OPTION1 os_linux_version_option1 ( ) ; #endif #ifdef OPTION2 os_linux_version_option2 ( ) ; #endif #elif defined ( MS_DOS ) #ifdef OPTION2 os_ms_dos_version_option2 ( ) ; #endif #endif return 0 ; }
#include <stdio.h> #include <stdlib.h> #define BUFFSIZE 512 void sum2ints ( const int , const int ) ; void sum2floats ( const float , const float ) ;
#include <stdio.h> #define YES #define NO int main ( void ) { #ifdef YES #ifdef NO puts ( " Both YES and NO defined! " ) ; #else puts ( " YES defined! " ) ; #endif #elif NO puts ( " NO defined! " ) ; #else #error None of YES and NO defined! #endif return 0 ; }
#include <stdio.h> int main ( void ) { char * str ; printf ( " how are you , dear xyz?\n  " ) ; gets ( str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int ch ; while ( ( ch = getchar ( ) ) ! = '1' ) putchar ( ch ) ; ungetc ( ch , stdin ) ; ch = getchar ( ) ; putchar ( ch ) ; puts ( " " ) ; printf ( " Thank you!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define MY_RANGE 20 int main ( void ) { int i ; srand ( time ( 0 ) ) ; printf ( " Sequence of Pseudo-Random Numbers : \n  " ) ; for ( i = MY_RANGE ; i > = 0 ; i-- ) printf ( " %d " , rand ( ) % MY_RANGE ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter value for 'floor' evaluation...\n  " ) ; scanf ( " %lf " , & value ) ; result = floor ( value ) ; printf ( " 'floor' of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter value for 'ceiling' evaluation...\n  " ) ; scanf ( " %lf " , & value ) ; result = ceil ( value ) ; printf ( " 'ceil' of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( void ) { time_t * returned_value , tm1 ; time_t * p2tm = & tm1 ; char * str ; tm1 = time ( NULL ) ; str = ctime ( p2tm ) ; str = ctime ( p2tm ) ; printf ( " current date and time of the day : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_DFL ) ; while ( 1 ) return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_IGN ) ; while ( 1 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <signal.h> #include <stdio.h> void handler ( int signal ) { if ( signal = = SIGINT ) } int main ( void ) { signal ( SIGINT , handler ) ; return 0 ; }
#include <signal.h> #include <stdio.h> void handler ( int signal ) { if ( signal = = SIGBUS ) if ( signal = = SIGILL ) if ( signal = = SIGSEGV ) } int main ( void ) { signal ( SIGBUS , handler ) ; signal ( SIGILL , handler ) ; signal ( SIGSEGV , handler ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { abort ( ) ; printf ( " \ " abort ( ) called prior to printf ( ) \ " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { printf ( " %d\n  " , abs ( 92.09998 ) ) ; printf ( " %ld\n  " , labs ( 123.88L ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define NUM 23 #define DEN 87 int main ( void ) { div_t res ; res = div ( NUM , DEN ) ; printf ( " \ " div ( %d , %d ) \ " gives quotient : %d and remainder : %d\n  " , NUM , DEN , res.quot , res.rem ) ; }
#include <stdio.h> 1503 <div style = " text-align : justify " > #include <stdlib.h> #include <assert.h> int main ( void ) { FILE * fp ; fp = fopen ( " hello.txt " , " r " ) ; assert ( fp ! = NULL ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <assert.h> int main ( void ) { int status ; assert ( ( system ( NULL ) ) ! = 0 ) ; system ( " ls -l " ) ; exit ( 0 ) ; }
#include <stdio.h> int main ( void ) { int i , j = 0 ; for ( i = 0 ; i < 10 ; i + + ) j = j + 1 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_DFL ) ; while ( 1 ) return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_IGN ) ; while ( 1 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL ;
#include <stdio.h> #include <math.h> #include <time.h> #include <stdlib.h> void printArray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void printAllUniqueParts ( int n ) { int p [ n ] ;
#include <stdio.h> int getMax ( int arr [ ] , int n ) { int mx = arr [ 0 ] ; int i ; for ( i = 1 ; i < n ; i + + ) if ( arr [ i ] > mx ) mx = arr [ i ] ; return mx ; } void countSort ( int arr [ ] , int n , int exp ) { int output [ n ] ;
#include <stdio.h> void combinationUtil ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ;
#include <stdio.h> void combinationUtil ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ;
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> int total = 0 ; int sum ( int , int ) ; int main ( ) { printf ( " This is a C basic program \n  " ) ; total = sum ( 1 , 1 ) ; printf ( " Sum of two numbers : %d \n  " , total ) ; return 0 ; } int sum ( int a , int b ) { return a + b ; }
#include <stdio.h> int main ( ) { enum MONTH { Jan = 0 , Feb , Mar } ; enum MONTH month = Mar ; if ( month = = 0 ) printf ( " Value of Jan " ) ; else if ( month = = 1 ) printf ( " Month is Feb " ) ; if ( month = = 2 ) printf ( " Month is Mar " ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Directory = %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " FILE " , " / usr / bin / example.c " , 50 ) ; printf ( " File = %s\n  " , getenv ( " FILE " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int m = 40 , n = 20 ; if ( m = = n ) { printf ( " m and n are equal " ) ; } else { printf ( " m and n are not equal " ) ; } }
#include <stdio.h> int main ( ) { int m = 40 , n = 20 ; if ( m> n ) { printf ( " m is greater than n " ) ; } else if ( m <n ) { printf ( " m is less than n " ) ; } else { printf ( " m is equal to n " ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i = 3 ; while ( i <10 ) { printf ( " %d\n  " , i ) ; i + + ; } }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " Value of i is %d\n  " , i ) ; i + + ; } while ( i < = 4 & & i> = 2 ) ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 ) { printf ( " \n Coming out of for loop when i = 5 " ) ; break ; } printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 || i = = 6 ) { printf ( " \n Skipping %d from display using " \ " continue statement \n  " , i ) ; continue ; } printf ( " %d " , i ) ; } }
#include <stdio.h> void increment ( void ) ; int main ( ) { increment ( ) ; increment ( ) ; increment ( ) ; increment ( ) ; return 0 ; } void increment ( void ) { auto int i = 0 ; printf ( " %d " , i ) ; i + + ; }
#include <stdio.h> void increment ( void ) ; int main ( ) { increment ( ) ; increment ( ) ; increment ( ) ; increment ( ) ; return 0 ; } void increment ( void ) { static int i = 0 ; printf ( " %d " , i ) ; i + + ; }
#include <stdio.h> int x = 10 ; int main ( ) { extern int y ; printf ( " The value of x is %d \n  " , x ) ; printf ( " The value of y is %d " , y ) ; return 0 ; } int y = 50 ;
#include <stdio.h> int main ( ) { int i ; int arr [ 5 ] = { 10 , 20 , 30 , 40 , 50 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d \n  " , i , arr [ i ] ) ; } }
#include <stdio.h> int main ( ) { char string [ 20 ] = " fresh2refresh.com " ; printf ( " The string is : %s \n  " , string ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptr , q ; q = 50 ; ptr = & q ; printf ( " %d " , * ptr ) ; return 0 ; }
#include <stdio.h> void test ( ) ; int main ( ) { test ( ) ; return 0 ; } void test ( ) { int a = 50 , b = 80 ; printf ( " \n values : a = %d and b = %d " , a , b ) ; }
#include <stdio.h> int sum ( ) ; int main ( ) { int addition ; addition = sum ( ) ; printf ( " \n Sum of two given values = %d " , addition ) ; return 0 ; } int sum ( ) { int a = 50 , b = 80 , sum ; sum = a + b ; return sum ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] = " refresh " ; if ( !memcmp ( str1 , str2 , 5 * sizeof ( char ) ) ) printf ( " Elements in str1 and str2 are same.\n  " ) ; else printf ( " Elements in str1 and str2 are not same.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] = " FRESH " ; if ( !memicmp ( str1 , str2 , 5 * sizeof ( char ) ) ) printf ( " Elements in str1 and str2 are same.\n  " ) ; else printf ( " Elements in str1 and str2 are not same.\n  " ) ; return 0 ; }
#include <stdio.h> #include <dos.h> int main ( ) { struct date dt ; getdate ( & dt ) ; printf ( " Operating system's current date is %d- %d- %d\n  " , dt.da_day , dt.da_mon , dt.da_year ) ; return 0 ; }
#include <stdio.h> #include <time.h> #include <math.h> int main ( ) { int i ; clock_t CPU_time_1 = clock ( ) ; printf ( " CPU start time is : %d \n  " , CPU_time_1 ) ; for ( i = 0 ; i < 150000000 ; i + + ) ; clock_t CPU_time_2 = clock ( ) ; printf ( " CPU end time is : %d " , CPU_time_2 ) ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; seconds = time ( NULL ) ; printf ( " Number of hours since 1970 Jan 1st " \ " is %ld \n  " , seconds / 3600 ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t begin , end ; long i ; begin = time ( NULL ) ; for ( i = 0 ; i < 150000000 ; i + + ) ; end = time ( NULL ) ; printf ( " for loop used %f seconds to complete the " \ " execution\n  " , difftime ( end , begin ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { struct tm strtime ; time_t timeoftheday ; strtime.tm_year = 2008-1900 ; strtime.tm_mon = 1 ; strtime.tm_mday = 4 ; strtime.tm_hour = 02 ; strtime.tm_min = 30 ; strtime.tm_sec = 38 ; strtime.tm_isdst = 0 ; timeoftheday = mktime ( & strtime ) ; printf ( ctime ( & timeoftheday ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t orig_format ; time ( & orig_format ) ; printf ( " Universal Time is %s " , asctime ( gmtime ( & orig_format ) ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x ; x = ( float ) 7 / 5 ; printf ( " %f " , x ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Directory = %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " FILE " , " / usr / bin / example.c " , 50 ) ; printf ( " File = %s\n  " , getenv ( " FILE " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( ) { printf ( " 1st random number : %d\n  " , rand ( ) % 100 ) ; printf ( " 2nd random number : %d\n  " , rand ( ) % 100 ) ; printf ( " 3rd random number : %d\n  " , rand ( ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Suspends the execution of the program " \ " for particular time " ) ; delay ( 5000 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include " structure.h " int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { typedef long long int LLI ; printf ( " Storage size for long long int data " \ " type : %ld \n  " , sizeof ( LLI ) ) ; return 0 ; }
#include <stdio.h> #define RAJU 100 int main ( ) { #ifdef RAJU printf ( " RAJU is defined. So , this line will be added in " \ " this C file\n  " ) ; #else printf ( " RAJU is not defined\n  " ) ; #endif return 0 ; }
#include <stdio.h> #define RAJU 100 int main ( ) { #ifndef SELVA { printf ( " SELVA is not defined. So , now we are going to " \ " define here\n  " ) ; #define SELVA 300 } #else printf ( " SELVA is already defined in the program” ) ; #endif return 0 ; }
#include <stdio.h> #define a 100 int main ( ) { #if ( a = = 100 ) printf ( " This line will be added in this C file since " \ " a \ = 100\n  " ) ; #else printf ( " This line will be added in this C file since " \ " a is not equal to 100\n  " ) ; #endif return 0 ; }
#include <stdio.h> #define height 100 void main ( ) { printf ( " First defined value for height : %d\n  " , height ) ; #undef height #define height 600 printf ( " value of height after undef \ & redefine : %d " , height ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int a = 10 , b = 20 , c = 30 , d = 40 , X ; X = a / b + c * d-c ; printf ( " Value of X = %d\n  " , X ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void Exit1 ( void ) { printf ( " Exit1 function is called\n  " ) ; } void Exit2 ( void ) { printf ( " Exit2 function is called \n  " ) ; } int main ( void ) { atexit ( Exit1 ) ; atexit ( Exit2 ) ; printf ( " This is the end of this program.\n  " ) ; return 0 ; }
#include <stdio.h> #define concatination ( a , b ) a ## b int main ( ) { int ab = 1000 ; printf ( " The concatenated value is : %d \n  " , concatination ( a , b ) ) ; return 0 ; }
#include <stdio.h> #define max 100 int main ( ) { printf ( " max is %d " , max ) ; return 0 ; }
#include <stdio.h> #define INCREMENT ( x ) + + x int main ( ) { char * ptr = " GeeksQuiz " ; int x = 10 ; printf ( " %s " , INCREMENT ( ptr ) ) ; printf ( " %d " , INCREMENT ( x ) ) ; return 0 ; }
#include <stdio.h> #define MULTIPLY ( a , b ) a * b int main ( ) { printf ( " %d " , MULTIPLY ( 2 + 3 , 3 + 5 ) ) ; return 0 ; }
#include <stdio.h> #define MULTIPLY ( a , b ) ( a ) * ( b ) int main ( ) { printf ( " %d " , MULTIPLY ( 2 + 3 , 3 + 5 ) ) ; return 0 ; }
#include <stdio.h> #define merge ( a , b ) a##b int main ( ) { printf ( " %d " , merge ( 12 , 34 ) ) ; }
#include <stdio.h> #define get ( a ) #a int main ( ) { printf ( " %s " , get ( GeeksQuiz ) ) ; }
#include <stdio.h> #define PRINT ( i , limit ) while ( i < limit ) \ { \ printf ( " GeeksQuiz " ) ; \ i + + ; \ } int main ( ) { int i = 0 ; PRINT ( i , 3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current File : %s\n  " , __FILE__ ) ; printf ( " Current Date : %s\n  " , __DATE__ ) ; printf ( " Current Time : %s\n  " , __TIME__ ) ; printf ( " Line Number : %d\n  " , __LINE__ ) ; return 0 ; }
#include <stdio.h> #define LIMIT 100 int main ( ) { printf ( " %d " , LIMIT ) ; #undef LIMIT printf ( " %d " , LIMIT ) ; return 0 ; }
#include <stdio.h> #define LIMIT 1000 int main ( ) { printf ( " %d " , LIMIT ) ; #undef LIMIT int LIMIT = 1001 ; printf ( " \n  %d " , LIMIT ) ; return 0 ; }
#include <stdio.h> float div ( float , float ) ; #define div ( x , y ) x / y int main ( ) { printf ( " %0.2f " , div ( 10.0 , 5.0 ) ) ; #undef div printf ( " \n  %0.2f " , div ( 10.0 , 5.0 ) ) ; return 0 ; } float div ( float x , float y ) { return y / x ; }
#include <stdio.h> int main ( void ) { printf ( " My mobile number " " is 7\a8\a7\a3\a9\a2\a3\a4\a0\a8\a " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello Geeks\b\b\b\bF " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello\n  " ) ; printf ( " GeeksforGeeks " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello \t GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello friends " ) ; printf ( " \v Welcome to GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello fri \r ends " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello\\GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " \' Hello Geeks\n  " ) ; printf ( " \ " Hello Geeks " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " \?\?!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * s = " A\0725 " ; printf ( " %s " , s ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * s = " B\x4a " ; printf ( " %s " , s ) ; return 0 ; }
#include <stdio.h> static int animals = 8 ; const int i = 5 ; int call_me ( void ) { printf ( " %d %d " , i , animals ) ; }
#include <stdio.h> int main ( ) { call_me ( ) ; animals = 2 ; printf ( " %d " , animals ) ; return 0 ; }
#include <stdio.h> #include " animal.cpp " int main ( ) { call_me ( ) ; printf ( " \n  having fun washing! " ) ; animals = 10 ; printf ( " %d\n  " , animals ) ; return 0 ; }
#include <stdio.h> void foo ( ) { int a ; extern int b ; } void bar ( ) { int c ; c = b ; } int main ( ) { foo ( ) ; bar ( ) ; }
#include <stdio.h> int x = 10 ; int z = 5 ; int main ( ) { extern int y ; extern int z ; printf ( " %d %d %d " , x , y , z ) ; } int y = 2 ;
#include <stdio.h> int main ( ) { const int num = 1 ; num = 5 ; return 0 ; }
#include <iostream> int main ( ) { int var = 5 ; constexpr int k = var ; std : : cout < < k ; return 0 ; }
#include <stdio.h> #define var 5 int main ( ) { printf ( " %d " , var ) ; #ifdef var #undef var #define var 10 #endif printf ( " %d " , var ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { static int * p = ( int * ) malloc ( sizeof ( p ) ) ; * p = 10 ; printf ( " %d " , * p ) ; }
#include <stdio.h> #include <stdlib.h> int * p = ( int * ) malloc ( sizeof ( p ) ) ; int main ( void ) { * p = 10 ; printf ( " %d " , * p ) ; }
#include <stdio.h> int fun ( int x ) { return ( x + 5 ) ; } int y = fun ( 20 ) ; int main ( ) { printf ( " %d " , y ) ; }
#include <stdio.h> int main ( ) { char a = 30 , b = 40 , c = 10 ; char d = ( a * b ) / c ; printf ( " %d " , d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = 0xfb ; unsigned char b = 0xfb ; printf ( " a = %c " , a ) ; printf ( " \n b = %c " , b ) ; if ( a = = b ) printf ( " \n Same " ) ; else printf ( " \n Not Same " ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 0.1 ; if ( x = = 0.1 ) printf ( " IF " ) ; else if ( x = = 0.1f ) printf ( " ELSE IF " ) ; else printf ( " ELSE " ) ; }
#include <stdio.h> int main ( ) { float x = 0.1 ; printf ( " %d %d %d " , sizeof ( x ) , sizeof ( 0.1 ) , sizeof ( 0.1f ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 0.5 ; if ( x = = 0.5 ) printf ( " IF " ) ; else if ( x = = 0.5f ) printf ( " ELSE IF " ) ; else printf ( " ELSE " ) ; }
#include <stdio.h> int main ( ) { char ch1 = 125 , ch2 = 10 ; ch1 = ch1 + ch2 ; printf ( " %d\n  " , ch1 ) ; printf ( " %c\n  " , ch1 - ch2 - 4 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char ch = 65 ; cout < < ch < < endl ; cout < < ch + 0 < < endl ; cout < < char ( ch + 32 ) < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; printf ( " x = %d , z = %f " , x , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; printf ( " sum = %d " , sum ) ; return 0 ; }
#include " somefile.h " extern int var ; int main ( void ) { var = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { const volatile int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; const int * ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; ptr = & j ; printf ( " ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int const i = 10 ; int j = 20 ; int const * ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; ptr = & j ; printf ( " ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int const j = 20 ; int * ptr = & i ; printf ( " * ptr : %d\n  " , * ptr ) ; ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; int * const ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; printf ( " ptr : %d\n  " , * ptr ) ; ptr = & j ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; const int * const ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; ptr = & j ; * ptr = 100 ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string : " ) ; scanf ( " % [ A-Z ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string : " ) ; scanf ( " % [ ^o ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string with spaces : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char str [ 20 ] ; int i ; for ( i = 0 ; i <2 ; i + + ) { scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s\n  " , str ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char str [ 20 ] ; int i ; for ( i = 0 ; i <2 ; i + + ) { scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s\n  " , str ) ; fflush ( stdin ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; int y = 15 ; printf ( " %d " , ( x , y ) ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; int y = ( x + + , + + x ) ; printf ( " %d " , y ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 10 ; printf ( " %d \n  " , sizeof ( x = = y ) ) ; printf ( " %d \n  " , sizeof ( x < y ) ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , y = 10 ; cout < < sizeof ( x = = y ) < < endl ; cout < < sizeof ( x < y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = sizeof ( printf ( " hey " ) ) ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 ; int b = sizeof ( a = 6 ) ; printf ( " a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #define mkstr ( s ) #s int main ( void ) { printf ( mkstr ( geeksforgeeks ) ) ; return 0 ; }
#include <iostream> using namespace std ; #define a 8.3297 int main ( ) { cout < < " Value of a is " < < a < < endl ; return 0 ; }
#include <iostream> using namespace std ; #define MAX ( i , j ) ( ( ( i ) > ( j ) ) ? i : j ) int main ( ) { int a , b ; a = 250 ; b = 25 ; cout < < " The maximum is " < < MAX ( a , b ) < < endl ; return 0 ; }
#include <stdio.h> #define concat ( a , b ) a##b int main ( void ) { int xy = 30 ; printf ( " %d " , concat ( x , y ) ) ; return 0 ; }
#include <stdio.h> #define val 10 #define floatVal 4.5 #define charVal 'G' int main ( ) { printf ( " Integer Constant : %d\n  " , val ) ; printf ( " Floating point Constant : %f\n  " , floatVal ) ; printf ( " Character Constant : %c\n  " , charVal ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ }
#include <stdio.h> #include " myhead.h " int main ( ) { add ( 4 , 6 ) ; multiply ( 5 , 5 ) ; printf ( " BYE!See you Soon " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char generate [ L_tmpnam + 1 ] ; tmpnam ( generate ) ; puts ( generate ) ; return 0 ; }
#include <stdio.h> #define INC ( P ) + + P int main ( ) { char * p = " Geeks " ; int x = 10 ; printf ( " %s " , INC ( p ) ) ; printf ( " %d " , INC ( x ) ) ; return 0 ; }
#include <stdio.h> #define geeks ( T ) _Generic ( ( T ) , char : 1 , int : 2 , long : 3 , default : 0 ) int main ( void ) { printf ( " %d\n  " , geeks ( 'A' ) ) ; printf ( " %d " , geeks ( " A " ) ) ; return 0 ; }
#include <stdio.h> typedef unsigned char BYTE ; int main ( ) { BYTE b1 , b2 ; b1 = 'c' ; printf ( " %c " , b1 ) ; return 0 ; }
#include <stdio.h> #define HYD " Hyderabad " int main ( ) { printf ( " %s " , HYD ) ; return 0 ; }
#include <stdio.h> #include <unistd.h> int main ( ) { int i ; printf ( " I am EXEC.c called by execvp ( ) " ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { char * args [ ] = { " . / EXEC " , NULL } ; execvp ( args [ 0 ] , args ) ; printf ( " Ending----- " ) ; return 0 ; }
#include <stdio.h> #include <unistd.h> int main ( ) { int i ; printf ( " I am EXEC.c called by execv ( ) " ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { char * args [ ] = { " . / EXEC " , NULL } ; execv ( args [ 0 ] , args ) ; printf ( " Ending----- " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " Size of arr [ ] %d\n  " , sizeof ( arr ) ) ; printf ( " Size of ptr %d " , sizeof ( ptr ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 } , x = 10 ; int * ptr = & x ; arr = & x ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " Value of first element is %d " , * ptr ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ ] = " GeeksForGeeks " ; char * target = strdup ( source ) ; printf ( " %s " , source ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ ] = " GeeksForGeeks " ; char * target = strndup ( source , 5 ) ; printf ( " %s " , target ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string str = " geeksforgeeks " ; reverse ( str.begin ( ) , str.end ( ) ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void reverse ( string str ) { for ( int i = str.length ( ) -1 ; i> = 0 ; i-- ) cout < < str [ i ] ; } int main ( void ) { string s = " GeeksforGeeks " ; reverse ( s ) ; return ( 0 ) ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char str [ ] = " welcome! to GeeksForGeeks , " ; int i = 0 , count = 0 ; while ( str [ i ] ) { if ( ispunct ( str [ i ] ) ) count + + ; i + + ; } printf ( " Sentence contains %d punctuation " " characters.\n  " , count ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All punctuation characters in C " " programming are : \n  " ) ; for ( i = 0 ; i < = 255 ; + + i ) if ( ispunct ( i ) ! = 0 ) printf ( " %c " , i ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int len = strspn ( " geeks for geeks " , " geek " ) ; printf ( " Length of initial segment matching : %d\n  " , len ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int len = strspn ( " i am " , " xyz " ) ; printf ( " Length of initial segment matching : %d\n  " , len ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float x = 1.1 ; switch ( x ) { case 1.1 : printf ( " Choice is 1 " ) ; break ; default : printf ( " Choice other than 1 , 2 and 3 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1\n  " ) ; case 2 : printf ( " Choice is 2\n  " ) ; case 3 : printf ( " Choice is 3\n  " ) ; default : printf ( " Choice other than 1 , 2 and 3\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 4 ; switch ( x ) { default : printf ( " Choice other than 1 and 2 " ) ; break ; case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; int arr [ ] = { 1 , 2 , 3 } ; switch ( x ) { case arr [ 0 ] : printf ( " Choice 1\n  " ) ; case arr [ 1 ] : printf ( " Choice 2\n  " ) ; case arr [ 2 ] : printf ( " Choice 3\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 1 ; switch ( x ) { x = x + 1 ; case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; default : printf ( " Choice other than 1 and 2 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 1 ; switch ( x ) { case 2 : printf ( " Choice is 1 " ) ; break ; case 1 + 1 : printf ( " Choice is 2 " ) ; break ; } return 0 ; }
#include <errno.h> #include <stdio.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; return errno ; } printf ( " file exist\n  " ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * p = malloc ( sizeof ( int ) ) ; if ( p = = NULL ) { perror ( " malloc ( ) " ) ; return -1 ; } * p = 10 ; free ( p ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> _Noreturn void view ( ) { return 10 ; } int main ( void ) { printf ( " Ready to begin...\n  " ) ; view ( ) ; printf ( " NOT over till now\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> _Noreturn void show ( ) { printf ( " BYE BYE " ) ; } int main ( void ) { printf ( " Ready to begin...\n  " ) ; show ( ) ; printf ( " NOT over till now\n  " ) ; return 0 ; }
#include “studio.h” int main ( ) { printf ( “ %s” , __func__ ) ; return 0 ; }
#include “stdio.h” void foo ( void ) { printf ( “ %s” , __func__ ) ; } void bar ( void ) { printf ( “ %s” , __func__ ) ; } int main ( ) { foo ( ) ; bar ( ) ; return 0 ; }
#include “stdio.h” int __func__ = 10 ; int main ( ) { printf ( “ %d” , __func__ ) ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " In file : %s , function : %s ( ) and line : %d " , __FILE__ , __func__ , __LINE__ ) ; return 0 ; }
#include <stdio.h> void A ( ) { printf ( " I am function A\n  " ) ; } void B ( void ( * ptr ) ( ) ) { ( * ptr ) ( ) ; } int main ( ) { void ( * ptr ) ( ) = & A ; B ( ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Main " ) ; int fun ( ) { printf ( " fun " ) ; int view ( ) { printf ( " view " ) ; } return 1 ; } view ( ) ; }
#include <stdio.h> int main ( void ) { auto int view ( ) ; view ( ) ; printf ( " Main\n  " ) ; int view ( ) { printf ( " View\n  " ) ; return 1 ; } printf ( " GEEKS " ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char ch = 'G' ; printf ( " %c in lowercase is represented as = %c " , ch , tolower ( ch ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int j = 0 ; char str [ ] = " GEEKSFORGEEKS\n  " ; char ch = 'G' ; char ch ; while ( str [ j ] ) { ch = str [ j ] ; putchar ( tolower ( ch ) ) ; j + + ; } return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; seconds = time ( NULL ) ; printf ( " Seconds since January 1 , 1970 = %ld\n  " , seconds ) ; return ( 0 ) ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; time ( & seconds ; ) ; printf ( " Seconds since January 1 , 1970 = %ld\n  " , seconds ) ; return 0 ; }
#include <stdio.h> void fun ( int a ) { printf ( " Value of a is %d\n  " , a ) ; } int main ( ) { void ( * fun_ptr ) ( int ) = & fun ; ( * fun_ptr ) ( 10 ) ; return 0 ; }
#include <stdio.h> void fun ( int a ) { printf ( " Value of a is %d\n  " , a ) ; } int main ( ) { void ( * fun_ptr ) ( int ) = fun ; fun_ptr ( 10 ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { printf ( " Fun1\n  " ) ; } void fun2 ( ) { printf ( " Fun2\n  " ) ; } void wrapper ( void ( * fun ) ( ) ) { fun ( ) ; } int main ( ) { wrapper ( fun1 ) ; wrapper ( fun2 ) ; return 0 ; }
#include <stdio.h> struct date { unsigned int d ; unsigned int m ; unsigned int y ; } ; int main ( ) { printf ( " Size of date is %d bytes\n  " , sizeof ( struct date ) ) ; struct date dt = { 31 , 12 , 2014 } ; printf ( " Date is %d / %d / %d " , dt.d , dt.m , dt.y ) ; }
#include <stdio.h> struct test { unsigned int x : 5 ; unsigned int y : 5 ; unsigned int z ; } ; int main ( ) { struct test t ; printf ( " Address of t.x is %p " , & t.x ; ) ; printf ( " Address of t.z is %p " , & t.z ; ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x : 2 ; unsigned int y : 2 ; unsigned int z : 2 ; } ; int main ( ) { struct test t ; t.x = 5 ; printf ( " %d " , t.x ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x ; unsigned int y : 33 ; unsigned int z ; } ; int main ( ) { printf ( " %d " , sizeof ( struct test ) ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x ; long int y : 33 ; unsigned int z ; } ; int main ( ) { struct test t ; unsigned int * ptr1 = & t.x ; unsigned int * ptr2 = & t.z ; printf ( " %d " , ptr2 - ptr1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * p = ( int [ ] ) { 2 , 4 , 6 } ; printf ( " %d %d %d " , p [ 0 ] , p [ 1 ] , p [ 2 ] ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; void printPoint ( struct Point p ) { printf ( " %d , %d " , p.x , p.y ) ; } int main ( ) { printPoint ( ( struct Point ) { 2 , 3 } ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * ptr = ( int * ) malloc ( 10 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * ptr = ( int * ) malloc ( 10 ) ; realloc ( ptr , 0 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; fpos_t position ; fp = fopen ( " myfile.txt " , " w + " ) ; fgetpos ( fp , & position ; ) ; fputs ( " HelloWorld! " , fp ) ; fsetpos ( fp , & position ; ) ; fputs ( " geeksforgeeks " , fp ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { FILE * fp = fopen ( " test.txt " , " r " ) ; if ( fp = = NULL ) return 0 ; do { char c = fgetc ( fp ) ; if ( feof ( fp ) ) break ; printf ( " %c " , c ) ; } while ( 1 ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <pthread.h> int main ( ) { size_t stksize ; pthread_attr_t atr ; pthread_attr_getstacksize ( & atr ; , & stksize ; ) ; printf ( " Current stack size - > %d\n  " , stksize ) ; pthread_attr_setstacksize ( & atr ; , 320000034 ) ; pthread_attr_getstacksize ( & atr ; , & stksize ; ) ; printf ( " New stack size-> %d\n  " , stksize ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Welcome to GeeksforGeeks " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Welcome to GeeksforGeeks " ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( int & x ; ) { x = 20 ; } int main ( ) { int x = 10 ; fun ( x ) ; cout < < " New value of x is " < <x ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 50 ] = " geeksforgeeks " ; printf ( " The given string is = %s\n  " , str ) ; printf ( " After reversing string is = %s " , strrev ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 50 ] = " 123456789 " ; printf ( " The given string is = %s\n  " , str ) ; printf ( " After reversing string is = %s " , strrev ( str ) ) ; return 0 ; }
#include <stdio.h> struct s { int i ; char ch ; double d ; } ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> #pragma pack ( 1 ) struct s { int i ; char ch ; double d ; } ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> struct s { int i ; char ch ; double d ; } __attribute__ ( ( packed ) ) ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> void func1 ( ) ; void func2 ( ) ; #pragma startup func1 #pragma exit func2 void func1 ( ) { printf ( " Inside func1 ( ) \n  " ) ; } void func2 ( ) { printf ( " Inside func2 ( ) \n  " ) ; } int main ( ) { printf ( " Inside main ( ) \n  " ) ; return 0 ; }
#include <stdio.h> #pragma warn -rvl #pragma warn -par #pragma warn -rch int show ( int x ) { printf ( " GEEKSFORGEEKS " ) ; } int main ( ) { show ( 10 ) ; return 0 ; }
#include <stdio.h> #pragma GCC poison printf int main ( ) { int a = 10 ; if ( a = = 10 ) { printf ( " GEEKSFORGEEKS " ) ; } else printf ( " bye " ) ; return 0 ; }
#include <stdio.h> inline int foo ( ) { return 2 ; } int main ( ) { int ret ; ret = foo ( ) ; printf ( " Output is : %d\n  " , ret ) ; return 0 ; }
#include <stdio.h> static inline int foo ( ) { return 2 ; } int main ( ) { int ret ; ret = foo ( ) ; printf ( " Output is : %d\n  " , ret ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int var = 10 ; var = 15 ; printf ( " var = %d\n  " , var ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { const int var = 10 ; int * ptr = & var ; * ptr = 12 ; printf ( " var = %d\n  " , var ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " enter something\n  " ) ; scanf ( " %s " , str ) ; printf ( " you entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " enter something\n  " ) ; gets ( str ) ; printf ( " you entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " Enter something\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char ch [ ] = { 'g' , 'e' , 'e' , 'k' , 's' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " geeks " ; printf ( " Length of string is : %d " , strlen ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " geeks " ; printf ( " Length of string is : %d " , strlen ( str ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( x + + ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( int [ x + + ] ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( int [ + + x ] ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char ch ; ch = 'g' ; printf ( " %c in uppercase is represented as %c " , ch , toupper ( ch ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int j = 0 ; char str [ ] = " geekforgeeks\n  " ; char ch ; while ( str [ j ] ) { ch = str [ j ] ; putchar ( toupper ( ch ) ) ; j + + ; } return 0 ; }
#include <iostream> void init ( int a = 1 , int b = 2 , int c = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a = 1 , int b = 2 , int c = 3 ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> void init ( int a = 1 , int b = 2 , int c = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a , int b , int c ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> void init ( int = 1 , int = 2 , int = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a , int b , int c ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> using namespace std ; int main ( ) { float var = 37.66666 ; printf ( " %.2f " , var ) ; return 0 ; }
#include <iostream> using namespace std ; float round ( float var ) { float value = ( int ) ( var * 100 + .5 ) ; return ( float ) value / 100 ; } int main ( ) { float var = 37.66666 ; cout < < round ( var ) ; return 0 ; }
#include <iostream> using namespace std ; float round ( float var ) { char str [ 40 ] ; sprintf ( str , " %.2f " , var ) ; sscanf ( str , " %f " , & var ; ) ; return var ; } int main ( ) { float var = 37.66666 ; cout < < round ( var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 012 ; printf ( " %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " 31\01267 " ; printf ( " %s " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " 31\12367 " ; printf ( " %s " , str ) ; printf ( " \n  " ) ; char str2 [ ] = " 11\77967 " ; printf ( " %s " , str2 ) ; return 0 ; }
#include <stdbool.h> int main ( ) { bool arr [ 2 ] = { true , false } ; return 0 ; }
#include <stdio.h> int fun ( ) { static int count = 0 ; count + + ; return count ; } int main ( ) { printf ( " %d " , fun ( ) ) ; printf ( " %d " , fun ( ) ) ; return 0 ; }
#include <stdio.h> int fun ( ) { int count = 0 ; count + + ; return count ; } int main ( ) { printf ( " %d " , fun ( ) ) ; printf ( " %d " , fun ( ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { static int x ; int y ; printf ( " %d \n  %d " , x , y ) ; }
#include <stdio.h> int initializer ( void ) { return 50 ; } int main ( ) { static int i = initializer ( ) ; printf ( " value of i = %d " , i ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #define getName ( var ) #var int main ( ) { int myVar ; printf ( " %s " , getName ( myVar ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char buffer [ 50 ] ; int a = 10 , b = 20 , c ; c = a + b ; sprintf ( buffer , " Sum of %d and %d is %d " , a , b , c ) ; printf ( " %s " , buffer ) ; return 0 ; }
#include <stdio.h> enum week { Mon , Tue , Wed , Thur , Fri , Sat , Sun } ; int main ( ) { enum week day ; day = Wed ; printf ( " %d " , day ) ; return 0 ; }
#include <stdio.h> enum year { Jan , Feb , Mar , Apr , May , Jun , Jul , Aug , Sep , Oct , Nov , Dec } ; int main ( ) { int i ; for ( i = Jan ; i < = Dec ; i + + ) printf ( " %d " , i ) ; return 0 ; }
#include <stdio.h> enum State { Working = 1 , Failed = 0 , Freezed = 0 } ; int main ( ) { printf ( " %d , %d , %d " , Working , Failed , Freezed ) ; return 0 ; }
#include <stdio.h> enum day { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum day d = thursday ; printf ( " The day number stored in d is %d " , d ) ; return 0 ; }
#include <stdio.h> enum day { sunday = 1 , monday , tuesday = 5 , wednesday , thursday = 10 , friday , saturday } ; int main ( ) { printf ( " %d %d %d %d %d %d %d " , sunday , monday , tuesday , wednesday , thursday , friday , saturday ) ; return 0 ; }
#include <stdio.h> enum day { sunday = 1 , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum day d = thursday ; printf ( " The day number stored in d is %d " , d ) ; return 0 ; }
#include <stdio.h> enum State { WORKING = 0 , FAILED , FREEZED } ; enum State currState = 2 ; enum State FindState ( ) { return currState ; } int main ( ) { ( FindState ( ) = = WORKING ) ? printf ( " WORKING " ) : printf ( " NOT WORKING " ) ; return 0 ; }
#include <iostream> using namespace std ; constexpr long int fib ( int n ) { return ( n < = 1 ) ? n : fib ( n-1 ) + fib ( n-2 ) ; } int main ( ) { const long int res = fib ( 30 ) ; cout < < res ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " %d %d %d " , sizeof ( float ) , sizeof ( double ) , sizeof ( long double ) ) ; return 0 ; }
#include " stdio.h " #define PI 3.14 int main ( ) { printf ( " %d " , sizeof ( PI ) ) ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " %d %d " , sizeof ( 3.14F ) , sizeof ( 3.14L ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float b = 6.412355 ; int a = 3 ; printf ( " %. * f\n  " , a , b ) ; a = 5 ; printf ( " %. * f\n  " , a , b ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; cout < < " x = " < < x < < endl < < " y = " < < y < < endl < < " z = " < < z < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; cout < < " Sum = " < < sum ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { float f = 3.5 ; int b = static_cast <int> ( f ) ; cout < < b ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 } ; int i ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " arr [ %d ] = %d\n  " , i , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char a = 278 ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = -129 ; printf ( " %d " , a ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( float s , float t ) { cout < < " Function with float called " ; } void test ( int s , int t ) { cout < < " Function with int called " ; } int main ( ) { test ( 3.5 , 5.6 ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( float s , float t ) { cout < < " Function with float called " ; } void test ( int s , int t ) { cout < < " Function with int called " ; } int main ( ) { test ( 3.5f , 5.6f ) ; return 0 ; }
#include <stdio.h> #define MAX 100 int main ( ) { float x = 123.4567 ; char buf [ MAX ] ; gcvt ( x , 6 , buf ) ; printf ( " buffer is : %s\n  " , buf ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( 'G' ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'x' ; } catch ( int x ) { cout < < " Caught int " < < x ; } catch ( ... ) { cout < < " Defaule catch block " ; } }
#include <stdio.h> int main ( ) { FILE * fp1 , * fp2 ; char c ; fp1 = fopen ( " geeky.txt " , " r " ) ; fp2 = fopen ( " outgeeky.txt " , " w " ) ; fscanf ( fp1 , " %c " , & c ; ) ; fprintf ( fp2 , " %c " , c ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int fun ( int N ) { cout < < " fun ( int ) " ; } int fun ( char * s ) { cout < < " fun ( char * ) " ; } int main ( ) { fun ( NULL ) ; }
#include <stdio.h> int main ( ) { int x = NULL ; }
#include <stdio.h> int main ( ) { int x = nullptr ; }
#include <iostream> using namespace std ; int main ( ) { int * ptr = nullptr ; if ( ptr ) { cout < < " true " ; } else { cout < < " false " ; } }
#include <iostream> #define LIMIT 5 int main ( ) { for ( int i = 0 ; i < LIMIT ; i + + ) { std : : cout < < i < < " \n  " ; } return 0 ; }
#include <iostream> #define AREA ( l , b ) ( l * b ) int main ( ) { int l1 = 10 , l2 = 5 , area ; area = AREA ( l1 , l2 ) ; std : : cout < < " Area of rectangle is : " < < area ; return 0 ; }
#include <stdio.h> int getSum ( int n ) { int sum = 0 ; while ( n ! = 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; } int main ( ) { int n = 687 ; printf ( " %d " , getSum ( n ) ) ; return 0 ; }
#include <stdio.h> int sum_of_digit ( int n ) { if ( n = = 0 ) return 0 ; return ( n % 10 + sum_of_digit ( n / 10 ) ) ; } int main ( ) { int num = 12345 ; int result = sum_of_digit ( num ) ; printf ( " Sum of digits in %d is %d\n  " , num , result ) ; return 0 ; }
#include <iostream> using namespace std ; template <int n> struct funStruct { enum { val = 2 * funStruct <n-1> : : val } ; } ; template <> struct funStruct <0> { enum { val = 1 } ; } ; int main ( ) { cout < < funStruct <8> : : val < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { cout < < sizeof ( Empty ) ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { Empty a , b ; if ( & a ; = = & b ; ) cout < < " impossible " < < endl ; else cout < < " Fine " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { Empty * p1 = new Empty ; Empty * p2 = new Empty ; if ( p1 = = p2 ) cout < < " impossible " < < endl ; else cout < < " Fine " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; class Derived : Empty { int a ; } ; int main ( ) { cout < < sizeof ( Derived ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'G' ; putchar ( ch ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch = '1' ; for ( ch = '1' ; ch < = '9' ; ch + + ) putchar ( ch ) ; return ( 0 ) ; }
#include & lt ; iostream & gt ; using namespace std ; int main ( ) { cout & lt ; < " Hello World " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int a = 5 , b = 10 , sum ; sum = a + b ; cout < < sum ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int a = 5 , b = 10 ; if ( a > b ) cout < < a ; else cout < < b ; return 0 ; }
#include & lt ; iostream & gt ; using namespace std ; int main ( ) { cout & lt ; < " Hello World " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t dest [ 30 ] ; wchar_t src [ 30 ] ; wcscpy ( dest , L " Geekforgeeks " ) ; wcscpy ( src , L " is the best " ) ; wcscat ( dest , src ) ; wprintf ( L " %ls\n  " , dest ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d\n  " , sizeof ( char ) ) ; printf ( " %d\n  " , sizeof ( int ) ) ; printf ( " %d\n  " , sizeof ( float ) ) ; printf ( " %d " , sizeof ( double ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; double d = 10.21 ; printf ( " %d " , sizeof ( a + d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 7 , 98 , 0 , 12 , 35 , 99 , 14 } ; printf ( " Number of elements : %d " , sizeof ( arr ) / sizeof ( arr [ 0 ] ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( 'a' ) ) ; return 0 ; }
#include <stdio.h> int T ; int main ( ) { struct T { double x ; } ; printf ( " %d " , sizeof ( T ) ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x , y ; x = 1 ; y = compl x ; cout < < y ; return 0 ; }
#include <stdio.h> int main ( ) { foo ( ) ; } int foo ( ) { printf ( " Hello " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int const j = 20 ; int * ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { void * vptr ; int * iptr = vptr ; return 0 ; }
#include <stdio.h> int main ( ) { const int a ; return 0 ; }
#include <stdio.h> int main ( void ) { int new = 5 ; printf ( " %d " , new ) ; }
#include <stdio.h> int main ( ) { char * c = 333 ; printf ( " c = %u " , c ) ; return 0 ; }
#include <stdio.h> void main ( ) { printf ( " Hello World " ) ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int x = 250 ; int y = 250 ; int start_angle = 155 ; int end_angle = 300 ; int radius = 100 ; initgraph ( & gd ; , & gm ; , " " ) ; arc ( x , y , start_angle , end_angle , radius ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.UTF-8 " ) ; wchar_t first = L'\u05d0' , last = L'\u05ea' ; wcout < < L " All Hebrew Alphabets : " ; for ( wchar_t i = first ; i < = last ; i + + ) { putwchar ( i ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc ; wchar_t first = 'A' , last = 'Z' ; wcout < < L " All English Alphabets : " ; for ( wc = first ; wc < = last ; + + wc ) { putwchar ( wc ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ch1 = L'\n ' ; if ( iswcntrl ( ch1 ) ) wcout < < " It is a control Character " ; else wcout < < " It is not a control Character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ch1 = L'@' ; if ( iswcntrl ( ch1 ) ) wcout < < " It is a control Character " ; else wcout < < " It is not a control Character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str1 [ ] = L " geekforgeeks " ; ; wchar_t str2 [ ] = L " geekforgeeks " ; int print = wmemcmp ( str1 , str2 , 12 ) ; wprintf ( L " wmemcmp comparison : %ls\n  " , print ? L " not equal " : L " equal " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double a = 3.4 , b = 2.1 , c = 4.2 ; double ans = fma ( a , b , c ) ; cout < < " fma ( a , b , c ) = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double b = 2.1 , c = 4.2 ; long double lda = 9.4 , answer ; answer = fma ( lda , c , b ) ; cout < < " fma ( lda , c , b ) = " < < answer < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cout < < " Hello World! " < < endl ; system ( " pause " ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { cout < < " Hello World! " < < endl ; cin.get ( ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { if ( system ( NULL ) ) cout < < " Command processor exists " ; else cout < < " Command processor doesn't exists " ; return 0 ; }
#include <stdio.h> int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( void ) { int a = 10 , b = 20 ; int m = max ( a , b ) ; printf ( " m is %d " , m ) ; return 0 ; }
#include <stdio.h> void fun ( int x ) { x = 30 ; } int main ( void ) { int x = 20 ; fun ( x ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; s [ 0 ] = 'j' ; printf ( " \n  %s " , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * s = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { const char * s = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; public : void setX ( int x ) { this-> x = x ; } void print ( ) { cout < < " x = " < < x < < endl ; } } ; int main ( ) { Test obj ; int x = 20 ; obj.setX ( x ) ; obj.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; void findSize ( int arr [ ] ) { cout < < sizeof ( arr ) < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; void findSize ( int ( & arr ; ) [ 10 ] ) { cout < < sizeof ( arr ) < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; template <size_t n> void findSize ( int ( & arr ; ) [ n ] ) { cout < < sizeof ( int ) * n < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { int * arr = ( int * ) malloc ( sizeof ( float ) * 20 ) ; return 0 ; }
#include <cstring> #include <iostream> using namespace std ; int main ( ) { char dest [ 50 ] = " This is an " ; char src [ 50 ] = " example " ; strcat ( dest , src ) ; cout < < dest ; return 0 ; }
#include <cstring> #include <iostream> using namespace std ; int main ( ) { char dest [ 25 ] = " This is an example " ; char src [ 50 ] = " to show working of strncat ( ) this is not added " ; strncat ( dest , src , 29 ) ; cout < < dest ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int c = 10 ; switch ( c ) { case i : printf ( " Value of c = %d " , c ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { const int i = 10 ; int c = 10 ; switch ( c ) { case i : printf ( " Value of c = %d " , c ) ; break ; } return 0 ; }
#include <iostream> class Test { static Test * fun ( ) { return this ; } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( ) { } void fun ( ) { } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( ) const { return ; } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " geeks " ; char str2 [ ] = " geeks " ; int j = strcmpi ( str1 , str2 ) ; printf ( " The function returns = %d " , j ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " geeks " ; char str2 [ ] = " ForGeeks " ; int i = strcmpi ( str1 , str2 ) ; printf ( " The function returns = %d " , i ) ; return 0 ; }
#include <iostream> int main ( ) { int main = 10 ; std : : cout < < main ; return 0 ; }
#include <stdio.h> void myStartupFun ( void ) __attribute__ ( ( constructor ) ) ; void myStartupFun ( void ) { printf ( " GeeksforGeeks " ) ; } int main ( ) { }
#include <stdio.h> #include <stdlib.h> int main ( void ) { } void _start ( void ) { printf ( " GeeeksforGeeks " ) ; int var = main ( ) ; exit ( var ) ; }
#include <iostream> class MyClass { public : MyClass ( ) { std : : cout < < " GeeksforGeeks " ; } } m ; int main ( ) { }
#include <iostream> struct Mystruct { Mystruct ( ) { std : : cout < < " GeeksforGeeks " ; } } obj ; int main ( ) { }
#include <cstdio> int var = printf ( " GeeksforGeeks " ) ; int main ( ) { }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <3 , 9> ratio1 ; typedef ratio <1 , 3> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 3 / 9 is greater than or equal to 1 / 3 " ; else cout < < " 3 / 9 is less than 1 / 3 " ; return 0 ; }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <1 , 2> ratio1 ; typedef ratio <1 , 3> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 1 / 2 is greater than or equal to 1 / 3 " ; else cout < < " 1 / 2 is less than 1 / 3 " ; return 0 ; }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <1 , 10> ratio1 ; typedef ratio <1 , 8> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 1 / 10 is greater than or equal to 1 / 8 " ; else cout < < " 1 / 10 is less than 1 / 8 " ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " GeeksforGeeks " ; printf ( " Original String : %s\n  " , str ) ; printf ( " Modified String : %s\n  " , strnset ( str , ' * ' , 5 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " Computer Science " ; printf ( " Original String : %s\n  " , str ) ; printf ( " Modified String : %s\n  " , strnset ( str , ' * ' , 5 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " geeksforgeeks is the best " ; printf ( " %s\n  " , strupr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " CompuTer ScienCe PoRTAl fOr geeKS " ; printf ( " Given string is : %s\n  " , str ) ; printf ( " \n string after converting to the uppercase is : %s " , strupr ( str ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , NULL ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( NULL ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptr = NULL ; printf ( " %d " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( void ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( void * ) ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point p1 = { 0 , 1 } ; p1.x = 20 ; printf ( " x = %d , y = %d " , p1.x , p1.y ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point arr [ 10 ] ; arr [ 0 ] .x = 10 ; arr [ 0 ] .y = 20 ; printf ( " %d %d " , arr [ 0 ] .x , arr [ 0 ] .y ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point p1 = { 1 , 2 } ; struct Point * p2 = & p1 ; printf ( " %d %d " , p2-> x , p2-> y ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <sys / wait.h> #include <unistd.h> int main ( ) { pid_t cpid ; if ( fork ( ) = = 0 ) exit ( 0 ) ; else cpid = wait ( NULL ) ; printf ( " Parent pid = %d\n  " , getpid ( ) ) ; printf ( " Child pid = %d\n  " , cpid ) ; return 0 ; }
#include <stdio.h> #include <sys / wait.h> #include <unistd.h> int main ( ) { if ( fork ( ) = = 0 ) printf ( " HC : hello from child\n  " ) ; else { printf ( " HP : hello from parent\n  " ) ; wait ( NULL ) ; printf ( " CT : child has terminated\n  " ) ; } printf ( " Bye\n  " ) ; return 0 ; }
#include <stdio.h> union test { int x ; char y ; } ; int main ( ) { union test p1 ; p1.x = 65 ; union test * p2 = & p1 ; printf ( " %d %c " , p2-> x , p2-> y ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 0101 ; cout < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 020 ; cout < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 090 ; cout < < x ; return 0 ; }
#include <stdio.h> void ( foo ) ( int n ) { printf ( " Function : %d " , n ) ; } int main ( ) { ( foo ) ( 4 ) ; return 0 ; }
#include <stdio.h> #define foo ( n ) printf ( " \n Macro : %d " , n ) ; void ( foo ) ( int n ) { printf ( " Function : %d " , n ) ; } int main ( ) { ( foo ) ( 4 ) ; foo ( 4 ) ; return 0 ; }
#include <iostream> #include <locale.h> using namespace std ; int main ( ) { setlocale ( LC_MONETARY , " en_US.utf8 " ) ; struct lconv * lc = localeconv ( ) ; printf ( " %s " , lc-> currency_symbol ) ; return 0 ; }
#include <clocale> #include <iostream> using namespace std ; int main ( ) { char * s ; setlocale ( LC_ALL , " en_UA.utf8 " ) ; s = setlocale ( LC_ALL , NULL ) ; cout < < s < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x = 6 , result ; int exp = 2 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double result ; int x = 20 , exp = 9 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double result ; int x = 20 , exp = 10000 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " GEEKSFORGEEKS IS THE BEST " ; printf ( " %s\n  " , strlwr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " CompuTer ScienCe PoRTAl fOr geeKS " ; printf ( " Given string is : %s\n  " , str ) ; printf ( " \n String after converting to the " " lowercase is : %s " , strlwr ( str ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float f = 6.0F ; cout < < " isinf ( 6.0 / 0.0 ) is = " < < isinf ( f / 0.0 ) < < endl ; f = -1.2F ; cout < < " isinf ( -1.2 / 0.0 ) is = " < < isinf ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { cout < < " isinf ( 0.0 ) is = " < < isinf ( 0.0 ) < < endl ; cout < < " isinf ( sqrt ( -1.0 ) ) is = " < < isinf ( sqrt ( -1.0 ) ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { } ; } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { } ; Test t ; Test * tp ; } int main ( ) { Test t ; Test * tp ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : void method ( ) { cout < < " Local Class method ( ) called " ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : void method ( ) ; } ; void Test : : method ( ) { cout < < " Local Class method ( ) " ; } } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { static int i ; } ; } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : static void method ( ) { cout < < " Local Class method ( ) called " ; } } ; Test : : method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { int x ; class Test { public : void method ( ) { cout < < " x = " < < x < < endl ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 12.0f ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> using namespace std ; int main ( ) { any var = 12.0f ; auto * tval = any_cast <float> ( & var ; ) ; if ( !tval ) { cout < < " \n  Bad_any_cast " ; } else { cout < < " \n  Value : " < < * tval ; } return 0 ; }
#include <stdio.h> int main ( ) { char * p = NULL ; printf ( " %s " , p ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float num = 5.48958123 ; num = floor ( 10000 * num ) / 10000 ; printf ( " %f " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { float num = 5.48958123 ; printf ( " %0.4f " , num ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t curtime ; time ( & curtime ; ) ; printf ( " Current time = %s " , ctime ( & curtime ; ) ) ; return ( 0 ) ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , a ; a = + + x ; cout < < " Pre Increment Operation " ; cout < < " \n a = " < < a ; cout < < " \n x = " < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , a ; a = x + + ; cout < < " Post Increment Operation " ; cout < < " \n a = " < < a ; cout < < " \n x = " < < x ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGABRT , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGABRT ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGINT , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGINT ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGTERM , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGTERM ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGSEGV , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGSEGV ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGFPE , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGFPE ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { char a123 = 'a' ; float b ; int _c , _d45 , e ; printf ( " %c \n  " , a123 ) ; return 0 ; }
#include <iostream> #include <string> struct foo { int x , y , z ; } ; double f [ 3 ] ; int * p ; std : : string s ; int main ( int argc , char * argv [ ] ) { foo x = foo ( ) ; std : : cout < < x.x < < x.y < < x.z < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Geeks { public : string geekname ; void printname ( ) { cout < < " Geekname is : " < < geekname ; } } ; int main ( ) { Geeks obj1 ; obj1.geekname = " GeeksForGeeks " ; obj1.printname ( ) ; return 0 ; }
#include <iostream> using namespace std ; struct Point { int x , y ; } ; int main ( ) { struct Point arr [ 10 ] ; arr [ 0 ] .x = 10 ; arr [ 0 ] .y = 20 ; cout < < arr [ 0 ] .x < < " , " < < arr [ 0 ] .y ; return 0 ; }
#include <iostream> using namespace std ; enum week { Mon , Tue , Wed , Thur , Fri , Sat , Sun } ; int main ( ) { enum week day ; day = Wed ; cout < < day ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char ch ; float f ; int i ; double d ; long l ; cout < < ch < < endl ; cout < < f < < endl ; cout < < i < < endl ; cout < < d < < endl ; cout < < l < < endl ; return 0 ; }
#include <stdio.h> void f ( void ) ; int x = 38 ; int y = 39 ; int main ( ) { f ( ) ; printf ( " x = % d\n  " , x ) ; printf ( " y = % d\n  " , y ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { for ( char a = 0 ; a < = 225 ; a + + ) cout < < a ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { bool a = true ; for ( a = 1 ; a < = 5 ; a + + ) cout < < a ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { short a ; for ( a = 32767 ; a < 32770 ; a + + ) cout < < a < < " \n  " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { unsigned short a ; for ( a = 65532 ; a < 65536 ; a + + ) cout < < a < < " \n  " ; return 0 ; }
#include <iostream> using namespace std ; double add ( double a , double b ) { return a + b ; } int main ( ) { cout < < " Sum = " < < add ( 2.4 , 8.5 ) < < endl ; cout < < " Sum = " < < add ( 16 , 18 ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; namespace first { int val = 500 ; } int val = 100 ; int main ( ) { int val = 200 ; cout < < first : : val < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { class geek { public : void display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } } ; } int main ( ) { ns : : geek obj ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { class geek ; } class ns : : geek { public : void display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } } ; int main ( ) { ns : : geek obj ; obj.display ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unsigned root = chrono : : system_clock : : now ( ) .time_since_epoch ( ) .count ( ) ; default_random_engine generator ( root ) ; double can_val = generate_canonical <double , numeric_limits <double> : : digits> ( generator ) ; cout < < " Random canonical value : " < < can_val ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; printf ( " %c\n  " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 45 , y = 90 ; printf ( " %d\n  " , x ) ; printf ( " %i\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { float a = 12.67 ; printf ( " %f\n  " , a ) ; printf ( " %e\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 67 ; printf ( " %o\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 15 ; printf ( " %x\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ ] = " geeksforgeeks " ; printf ( " %s\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " geeksforgeeks " ; printf ( " %20s\n  " , str ) ; printf ( " %-20s\n  " , str ) ; printf ( " %20.5s\n  " , str ) ; printf ( " %-20.5s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; scanf ( " %d " , & a ; ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; scanf ( " %i " , & a ; ) ; printf ( " %d\n  " , a ) ; scanf ( " %i " , & a ; ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { float a = 0.0 ; scanf ( " %f " , & a ; ) ; printf ( " %f\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; scanf ( " %s " , str ) ; printf ( " %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; scanf ( " %c " , & ch ; ) ; printf ( " %c\n  " , ch ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { unsigned char i ; for ( i = 0 ; i <256 ; i + + ) printf ( " %d " , i ) ; } int main ( ) { fun1 ( ) ; return 0 ; }
#include <stdio.h> void fun2 ( ) { signed char i ; for ( i = 0 ; i <128 ; i + + ) printf ( " %d " , i ) ; } int main ( ) { fun2 ( ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { unsigned char i = 0 ; do { printf ( " %d " , i ) ; i + + ; } while ( i > 0 ) ; } int main ( ) { fun1 ( ) ; return 0 ; }
#include <stdio.h> void fun2 ( ) { signed char i = 0 ; do { printf ( " %d " , i ) ; i + + ; } while ( i > 0 ) ; } int main ( ) { fun2 ( ) ; return 0 ; }
#include <iostream> #include <setjmp.h> using namespace std ; jmp_buf buf ; int main ( ) { int x = 1 ; setjmp ( buf ) ; cout < < " 1 " ; x + + ; if ( x < = 100 ) longjmp ( buf , 1 ) ; return 0 ; }
#include <stdio.h> void mysubstr ( char str [ ] , int low , int high ) { if ( low < = high ) { printf ( " %c " , str [ low ] ) ; mysubstr ( str , low + 1 , high ) ; } } int main ( ) { char str [ ] = " geeksforgeeks " ; mysubstr ( str , 1 , 3 ) ; return 0 ; }
#include <stdio.h> void mysubstr ( char str [ ] , int low , int high ) { printf ( " %. * s " , high-low + 1 , ( str + low ) ) ; } int main ( ) { char str [ ] = " geeksforgeeks " ; mysubstr ( str , 1 , 3 ) ; return 0 ; }
#include <iostream> int foo ( ) { return 10 ; } char foo ( ) { return 'a' ; } int main ( ) { char x = foo ( ) ; getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( int i ) { } void fun ( int i ) { } } ; int main ( ) { Test t ; getchar ( ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; int f ( int x ) { return x + 10 ; } int f ( const int x ) { return x + 10 ; } int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; int f ( int x , int y ) { return x + 10 ; } int f ( int x , int y = 10 ) { return x + y ; } int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string b = " 5 " ; double a = stod ( b ) ; int c = stoi ( b ) ; cout < < b < < " " < < a < < " " < < c < < endl ; }
#include <iostream> #include <string> int main ( ) { std : : string x ; x = " 20 " ; float y = std : : stof ( x ) + 2.5 ; std : : cout < < y ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string str = " 5000.5 " ; float x = std : : stof ( str ) ; std : : cout < < x ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string str = " 500087 " ; long double x = std : : stold ( str ) ; std : : cout < < x ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string x ; x = " 2075 " ; long double y = std : : stof ( x ) + 2.5 ; std : : cout < < y ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " Hello World\n  " ) ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 10 ; i + + ) { cout < < " Hello World\n  " ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < 6 ) { printf ( " Hello World\n  " ) ; i + + ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int i = 1 ; while ( i < 6 ) { cout < < " Hello World\n  " ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 2 ; do { printf ( " Hello World\n  " ) ; i + + ; } while ( i < 1 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int i = 2 ; do { cout < < " Hello World\n  " ; i + + ; } while ( i < 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( ; ; ) { printf ( " This loop will run forever.\n  " ) ; } }
#include <iostream> using namespace std ; int main ( ) { int i ; for ( ; ; ) { cout < < " This loop will run forever.\n  " ; } }
#include <iostream> #define gfg 7 #if gfg > 200 #undef gfg #define gfg 200 #elif gfg < 50 #undef gfg #define gfg 50 #else #undef gfg #define gfg 100 #endif int main ( ) { std : : cout < < gfg ; }
#include <stdio.h> void swapnum ( int * i , int * j ) { int temp = * i ; * i = * j ; * j = temp ; } int main ( void ) { int a = 10 , b = 20 ; swapnum ( & a ; , & b ; ) ; printf ( " a is %d and b is %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; printf ( " x = %d , z = %f " , x , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; printf ( " sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; for ( i = 1 ; i < 5 ; i + + ) { for ( j = 1 ; j < = 6 - i ; j + + ) printf ( " %d " , j ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Hello Geeks\b\b\b\bF " ) ; return ( 0 ) ; }
#include <fenv.h> #include <iostream> #include <math.h> #pragma STDC FENV_ACCESS on using namespace std ; int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; sqrt ( -1 ) ; if ( fetestexcept ( FE_INVALID ) ) cout < < " sqrt ( -1 ) raises FE_INVALID " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Circle { public : double radius ; double compute_area ( ) { return 3.14 * radius * radius ; } } ; int main ( ) { Circle obj ; obj.radius = 5.5 ; cout < < " Radius is : " < < obj.radius < < " \n  " ; cout < < " Area is : " < < obj.compute_area ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Circle { private : double radius ; public : double compute_area ( ) { return 3.14 * radius * radius ; } } ; int main ( ) { Circle obj ; obj.radius = 1.5 ; cout < < " Area is : " < < obj.compute_area ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Car : public Vehicle { } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Car : public Vehicle { } ; class Bus : public Vehicle { } ; int main ( ) { Car obj1 ; Bus obj2 ; return 0 ; }
#include <iostream> using namespace std ; class Encapsulation { private : int x ; public : void set ( int a ) { x = a ; } int get ( ) { return x ; } } ; int main ( ) { Encapsulation obj ; obj.set ( 5 ) ; cout < <obj.get ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Enclosing { private : int x ; class Nested { int y ; void NestedFun ( Enclosing * e ) { cout < <e-> x ; } } ; } ; int main ( ) { }
#include <iostream> using namespace std ; class Enclosing { int x ; class Nested { int y ; } ; void EnclosingFun ( Nested * n ) { cout < <n-> y ; } } ; int main ( ) { }
#include <iostream> using namespace std ; class construct { public : int a , b ; construct ( ) { a = 10 ; b = 20 ; } } ; int main ( ) { construct c ; cout < < " a : " < < c.a < < endl < < " b : " < < c.b ; return 1 ; }
#include <iostream> using namespace std ; class Test { const int t ; public : Test ( int t ) : t ( t ) { } int getT ( ) { return t ; } } ; int main ( ) { Test t1 ( 10 ) ; cout < <t1.getT ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int & t ; public : Test ( int & t ; ) : t ( t ) { } int getT ( ) { return t ; } } ; int main ( ) { int x = 20 ; Test t1 ( x ) ; cout < <t1.getT ( ) < <endl ; x = 30 ; cout < <t1.getT ( ) < <endl ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; int getI ( ) const { return i ; } } ; A : : A ( int i ) : i ( i ) { } int main ( ) { A a ( 10 ) ; cout < <a.getI ( ) ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int foo ( ) { i = 3 ; A ob ; return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int & foo ( ) { i = 3 ; A ob ; return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int foo ( ) { i = 3 ; { A ob ; } return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 2 , 20 , 1 , 30 } ; cout < < " The largest element of valarray is : " ; cout < < varr.max ( ) < < endl ; cout < < " The smallest element of valarray is : " ; cout < < varr.min ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; int & ref = x ; ref = 20 ; cout < < " x = " < < x < < endl ; x = 30 ; cout < < " ref = " < < ref < < endl ; return 0 ; }
#include <iostream> using namespace std ; void swap ( int & first , int & second ) { int temp = first ; first = second ; second = temp ; } int main ( ) { int a = 2 , b = 3 ; swap ( a , b ) ; cout < < a < < " " < < b ; return 0 ; }
#include <iostream> using namespace std ; int & fun ; ( ) { static int x = 10 ; return x ; } int main ( ) { fun ( ) = 30 ; cout < < fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; int fun ( int & x ; ) { return x ; } int main ( ) { cout < < fun ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; int * ptr = & x ; int & * ptr1 = ptr ; }
#include <iostream> using namespace std ; int main ( ) { int * ptr = NULL ; int & ref ; = * ptr ; cout < < ref ; }
#include <iostream> using namespace std ; int & fun ; ( ) { int x = 10 ; return x ; } int main ( ) { fun ( ) = 30 ; cout < < fun ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t time_ptr ; time_ptr = time ( NULL ) ; tm * tm_local = localtime ( & time ; _ptr ) ; cout < < " Current local time is = " < < tm_local-> tm_hour < < " : " < < tm_local-> tm_min < < " : " < < tm_local-> tm_sec ; return 0 ; }
#include <iostream> using namespace std ; class Base { public : virtual int fun ( int i ) { } } ; class Derived : public Base { private : int fun ( int x ) { } } ; int main ( ) { }
#include <iostream> using namespace std ; int main ( ) { try { throw 10 ; } catch ( char * excp ) { cout < < " Caught " < < excp ; } catch ( ... ) { cout < < " Default Exception\n  " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'a' ; } catch ( int x ) { cout < < " Caught " < < x ; } catch ( ... ) { cout < < " Default Exception\n  " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'a' ; } catch ( int x ) { cout < < " Caught " ; } return 0 ; }
#include <iostream> using namespace std ; void fun ( int * ptr , int x ) { if ( ptr = = NULL ) throw ptr ; if ( x = = 0 ) throw x ; } int main ( ) { try { fun ( NULL , 0 ) ; } catch ( ... ) { cout < < " Caught exception from fun ( ) " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { try { throw 20 ; } catch ( int n ) { cout < < " Handle Partially " ; throw ; } } catch ( int n ) { cout < < " Handle remaining " ; } return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Size = %lu " , sizeof ( size_t ) ) ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; pieslice ( 300 , 300 , 0 , 120 , 150 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtextxy ( 200 , 150 , " Hello Geek , Have a good day ! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtext ( " Hello Geek , Have a good day ! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> #include <cctype> using namespace std ; int main ( ) { char x ; cin > > x ; if ( isupper ( x ) ) cout < < " Uppercase " ; else cout < < " Not uppercase. " ; return 0 ; }
#include <iostream> #include <cctype> using namespace std ; int main ( ) { char x ; cin > > x ; if ( islower ( x ) ) cout < < " Lowercase " ; else cout < < " Not Lowercase. " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 19.0 ; cout < < " The value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 9.6 / 0.0 ; cout < < " The value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x = 0.0 / 0.0 ; cout < < " Value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char * str1 = " This is GeeksForGeeks " ; cout < < str1 < < endl ; int size = 30 ; char * str2 = ( char * ) malloc ( sizeof ( char ) * size ) ; str2 = " GeeksForGeeks For Everyone " ; cout < < str2 ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char * str = " Hello " ; const char * str1 = " Hello " ; str [ 1 ] = 'o' ; cout < < str < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char str [ ] = " Hello " ; str [ 1 ] = 'o' ; cout < < str < < endl ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; int main ( ) { char str [ 10 ] = " Hello " ; cout < < " Before Concatenation : " < < str < < endl ; strcat ( str , " World " ) ; cout < < " After Concatenation : " < < str ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { wchar_t w = L'A' ; cout < < " Wide character value : : " < < w < < endl ; cout < < " Size of the wide char is : : " < < sizeof ( w ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char caname [ ] = " geeksforgeeks " ; cout < < caname < < endl ; wchar_t waname [ ] = L " geeksforgeeks " ; wcout < < waname < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t waname [ ] = L " geeksforgeeks " ; wcout < < L " The length of ' " < < waname < < L " ' is " < < wcslen ( waname ) < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t waname [ ] = L " geeksforgeeks " ; wchar_t wacopy [ 14 ] ; wcscpy ( wacopy , waname ) ; wcout < < L " Original = " < < waname < < L " \n Copy = " < < wacopy < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " geeksforgeeks " ; wchar_t string2 [ ] = L " is for Geeks " ; wcscat ( string1 , string2 ) ; wcout < < L " Concatenated wide string is = " < < string1 < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " Geeks Are Geeks " ; wchar_t * string2 = wcsstr ( string1 , L " Are " ) ; wcsncpy ( string2 , L " For " , 3 ) ; wcout < < string1 < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { int ch ; while ( ( ch = getchar ( ) ) ! = '1' ) putchar ( ch ) ; ungetc ( ch , stdin ) ; ch = getchar ( ) ; putchar ( ch ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x ; public : A ( ) { x = 0 ; } void fun ( ) { delete this ; cout < <x ; } } ;
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string invalid_num = " abcf$#@de " ; try { cout < < stoll ( invalid_num ) < < " \n  " ; } catch ( const std : : invalid_argument ) { cerr < < " Invalid argument " < < " \n  " ; } return 0 ; }
#include <iostream> using namespace std ; class Test { int value ; public : Test ( int v = 0 ) { value = v ; } int getValue ( ) const { return value ; } } ; int main ( ) { Test t ( 20 ) ; cout < <t.getValue ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int value ; public : Test ( int v = 0 ) { value = v ; } int getValue ( ) { return value ; } } ; int main ( ) { const Test t ; cout < < t.getValue ( ) ; return 0 ; }
#include <iostream> #include <thread> #include <chrono> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 5 ; + + i ) { cout < < i < < " " ; this_thread : : sleep_for ( chrono : : seconds ( 1 ) ) ; } cout < < endl ; return 0 ; }
#include <iostream> #include <thread> #include <chrono> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 5 ; + + i ) { cout < < i < < " " < < flush ; this_thread : : sleep_for ( chrono : : seconds ( 1 ) ) ; } return 0 ; }
#include <bits / stdc + + .h> int x = printf ( " Hello World " ) ; int main ( ) { }
#include <iostream> using namespace std ; class A { public : A ( ) { cout < < " Hello World " ; } } ; A obj ; int main ( ) { }
#include <stdio.h> void main ( ) { int a ; if ( a = = 2 ) a + + ; printf ( " value of a is " , a ) ; else printf ( " value of a is not equal to 2 " ) ; }
#include <stdio.h> void main ( ) { int a ; 10 = a ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] ; int i ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " Enter number : " ) ; scanf ( " %d " , arr ) ; arr + + ; } }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> myvector { 1 , 2 , 3 , 4 , 5 } ; myvector.push_back ( 6 ) ; for ( auto x : myvector ) cout < < x < < " " ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> myvector { 1 , 2 , 3 , 4 , 5 } ; auto it = myvector.begin ( ) ; myvector.erase ( it ) ; for ( auto x : myvector ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t time_ptr ; time ( & time ; _ptr ) ; cout < < " Current date and time = " < < asctime ( localtime ( & time ; _ptr ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int n = 7 ; int x = 5 ; int ans ; ans = scalbn ( x , n ) ; cout < < x < < " * " < < FLT_RADIX < < " ^ " < < n < < " = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int n = 7 ; double x = 3.9 ; int ans ; ans = scalbn ( x , n ) ; cout < < x < < " * " < < FLT_RADIX < < " ^ " < < n < < " = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 20 ] ; wchar_t source [ 20 ] ; wcscpy ( destination , L " Geekforgeeks " ) ; wcscpy ( source , L " is the best " ) ; wcsncat ( destination , source , 20 ) ; wprintf ( L " %ls\n  " , destination ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 40 ] ; wchar_t source [ 40 ] ; wcscpy ( destination , L " only some of the " ) ; wcscpy ( source , L " letters will be copied " ) ; wcsncat ( destination , source , 20 ) ; wprintf ( L " %ls\n  " , destination ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 1987 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , x ) ) ) ; return ( 0 ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * array = new int [ 10 ] ; delete [ ] array ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr = NULL ; delete ptr ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { void * ptr ; delete ptr ; cout < < " ptr deleted successfully " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr2 = ( int * ) malloc ( sizeof ( int ) ) ; delete ptr2 ; cout < < " ptr2 deleted successfully " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int x ; delete x ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int x ; int * ptr1 = & x ; delete ptr1 ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { string string1 = " Geeks.\n For.\n Geeks.\n  " ; string string2 = R " ( Geeks.\n For.\n Geeks.\n  ) " ; cout < < string1 < < endl ; cout < < string2 < < endl ; return 0 ; }
#include <iostream> using namespace std ; class B { public : B ( const char * str = " \0 " ) { cout < < " Constructor called " < < endl ; } B ( const B & b ; ) { cout < < " Copy constructor called " < < endl ; } } ; int main ( ) { B ob = " copy me " ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { cout < < " Hello " ; return ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void work ( ) { cout < < " The void function has returned " " a void ( ) !!! \n  " ; } void test ( ) { return work ( ) ; } int main ( ) { test ( ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( ) { cout < < " Hello " ; return ( void ) " Doesn't Print " ; } int main ( ) { test ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * pi = new int [ 5 ] { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i < 5 ; i + + ) cout < < * ( pi + i ) ; }
#include <iostream> using namespace std ; class A { public : A & operator = ( A & a ; ) { cout < < " base class assignment operator called " ; return * this ; } } ; class B : public A { } ; int main ( ) { B a , b ; a.A : : operator = ( b ) ; getchar ( ) ; return 0 ; }
#include <iostream> #include " Header1.h " #include " Header2.h " using namespace std ; using namespace one ; using namespace two ; int main ( ) { print ( ) ; }
#include <iostream> #include " Header1.h " #include " Header2.h " int main ( ) { one : : print ( ) ; two : : print ( ) ; }
#include <iostream> using namespace std ; template <class T> class Test { public : Test ( ) { cout < < " General template object \n  " ; } } ; template <> class Test <int> { public : Test ( ) { cout < < " Specialized template object\n  " ; } } ; int main ( ) { Test <int> a ; Test <char> b ; Test <float> c ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , " are " ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , " are here " , 10 ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string str = " FF " ; unsigned long num = stoul ( str , nullptr , 16 ) ; cout < < num < < " \n  " ; string st = " FFFFFF " ; unsigned long long val = stoull ( st , nullptr , 16 ) ; cout < < val ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int num ; cout < < " Enter the integer : " ; cin > > num ; cout < < " Entered integer is : " < < num ; return 0 ; }
#include <iostream> using namespace std ; class Parent { public : Parent ( ) { cout < < " Inside base class " < < endl ; } } ; class Child : public Parent { public : Child ( ) { cout < < " Inside sub class " < < endl ; } } ; int main ( ) { Child obj ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char sample [ ] = " GeeksforGeeks " ; cout < < sample < < " - A computer science portal for geeks " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int age ; cout < < " Enter your age : " ; cin > > age ; cout < < " \n Your age is : " < <age ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cerr < < " An error occured " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { clog < < " An error occured " ; return 0 ; }
#include <iostream> class Base { public : virtual ~Base ( ) = 0 ; } ; class Derived : public Base { public : ~Derived ( ) { std : : cout < < " ~Derived ( ) is executed " ; } } ; int main ( ) { Base * b = new Derived ( ) ; delete b ; return 0 ; }
#include <iostream> class Test { public : virtual ~Test ( ) = 0 ; } ; Test : : ~Test ( ) { } int main ( ) { Test p ; Test * t1 = new Test ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 1 , 4 , 5 } ; cout < < " The smallest element " < < " of valarray is = " < < varr.min ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 22 , 24 , 36 , 42 , 12 } ; cout < < " The smallest element " < < " of valarray is = " < < varr.min ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 15 , 10 , 30 , 33 , 40 } ; cout < < " The sum of valarray is = " < < varr.sum ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 1 , 2 , 3 , 4 , 5 } ; cout < < " The sum of valarray is = " < < varr.sum ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 1 , 4 , 5 } ; cout < < " The largest element of valarray is = " ; cout < < varr.max ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 22 , 24 , 36 , 42 , 12 } ; cout < < " The largest element of valarray is = " ; cout < < varr.max ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 ) { if ( ( s1.compare ( 0 , 5 , " Geeks " ) ) = = 0 ) cout < < s1 < < " are " < < " awesome people " ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; compareOperation ( s1 ) ; return 0 ; }
#include <iostream> using namespace std ; float Division ( float num , float den ) { return ( num / den ) ; } int main ( ) { float numerator = 12.5 ; float denominator = 0 ; float result ; result = Division ( numerator , denominator ) ; cout < < " The quotient of 12.5 / 0 is " < < result < < endl ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; fillpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; setfillstyle ( XHATCH_FILL , RED ) ; fillpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> using namespace std ; void pypart ( int n ) { for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; pypart ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void func ( ) { int age = 18 ; } int main ( ) { cout < < " Age is : " < <age ; return 0 ; }
#include <iostream> using namespace std ; void func ( ) { int age = 18 ; cout < <age ; } int main ( ) { cout < < " Age is : " ; func ( ) ; return 0 ; }
#include <iostream> using namespace std ; int global = 5 ; void display ( ) { cout < <global < <endl ; } int main ( ) { display ( ) ; global = 10 ; display ( ) ; }
#include <iostream> using namespace std ; int global = 5 ; int main ( ) { int global = 2 ; cout < < global < < endl ; }
#include <iostream> using namespace std ; int x = 0 ; int main ( ) { int x = 10 ; cout < < " Value of global x is " < < : : x ; cout < < " \n Value of local x is " < < x ; return 0 ; }
#include <iostream> int main ( ) { std : : string str = " abc " ; std : : cout < < " string size = " < < str.size ( ) < < '\n ' ; std : : cout < < " Element : " < < str [ 2 ] ; }
#include <stdio.h> int a = 5 ; int * b = & a ; int func ( double * b ) { a = 1 ; * b = 5.10 ; return ( a ) ; } int main ( ) { printf ( " %d " , func ( ( double * ) & a ; ) ) ; return 0 ; }
#include <bits / stdc + + .h> #include <cstdio> using namespace std ; int main ( ) { FILE * file_ ; char buffer [ 100 ] ; file_ = fopen ( " g4g.txt " , " aman " ) ; while ( !feof ( file_ ) ) { fread ( buffer , sizeof ( buffer ) , 1 , file_ ) ; cout < < buffer ; } return 0 ; }
#include <iostream> #include <sstream> #include <string> using namespace std ; int main ( ) { int num = 2016 ; ostringstream str1 ; str1 < < num ; string geek = str1.str ( ) ; cout < < " The newly formed string from number is : " ; cout < < geek < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str ; cout < < " Please enter your name : \n  " ; getline ( cin , str ) ; cout < < " Hello , " < < str < < " welcome to GfG !\n  " ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( " GeeksforGeeks " ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( 10 , '$' ) ; cout < < " After append ( ) : " ; cout < < str ; } int main ( ) { string str ( " ######### " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <regex> #include <string.h> using namespace std ; int main ( ) { string s = " I am looking for GeeksForGeeks " " articles " ; regex r ( " Geek [ a-zA-Z ] + " ) ; smatch m ; regex_search ( s , m , r ) ; for ( auto x : m ) cout < < x < < " " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int input ; int count = 0 ; cout < < " To stop enter any character " ; cout < < " \n Enter Your Input : : " ; while ( cin > > input ) count + + ; cout < < " \n Total number of inputs entered : " < < count ; return 0 ; }
#include <iostream> using namespace std ; template <typename T> void fun ( const T & x ) { static int i = 10 ; cout < < + + i ; return ; } int main ( ) { fun <int> ( 1 ) ; cout < < endl ; fun <int> ( 2 ) ; cout < < endl ; fun <double> ( 1.1 ) ; cout < < endl ; getchar ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The exp of " < < complexnumber < < " is " < < exp ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The exp of " < < complexnumber < < " is " < < exp ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , 0.0 ) ; cout < < " The atanh of " < < complexnumber < < " is " < < atanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , -0.0 ) ; cout < < " The atanh of " < < complexnumber < < " is " < < atanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The log10 of " < < complexnumber < < " is " < < log10 ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , -0.0 ) ; cout < < " The log10 of " < < complexnumber < < " is " < < log10 ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; varr.resize ( 2 , 3 ) ; cout < < " The contents of valarray " " after resizes are : " ; for ( int & x : varr ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; varr.resize ( 12 , 5 ) ; cout < < " The contents of valarray " " after resizes are : " ; for ( int & x : varr ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <stdio.h> void __attribute__ ( ( constructor ) ) calledFirst ( ) ; void __attribute__ ( ( destructor ) ) calledLast ( ) ; void main ( ) { printf ( " \n I am in main " ) ; } void calledFirst ( ) { printf ( " \n I am called first " ) ; } void calledLast ( ) { printf ( " \n I am called last " ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The acos of " < < complexnumber < < " is " < < acos ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , -0.0 ) ; cout < < " The acos of " < < complexnumber < < " is " < < acos ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; cout < < " The size of valarray is : " ; cout < < varr.size ( ) ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -20 , 40 , -50 , 60 , 80 , 0 , 0 } ; cout < < " The size of valarray is : " ; cout < < varr.size ( ) ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The atan of " < < complexnumber < < " is " < < atan ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 2.0 ) ; cout < < " The atan of " < < complexnumber < < " is " < < atan ( complexnumber ) < < endl ; return 0 ; }
#include <exception> #include <iostream> using namespace std ; void myhandler ( ) { cout < < " Inside new terminate handler\n  " ; abort ( ) ; } int main ( ) { set_terminate ( myhandler ) ; try { cout < < " Inside try block\n  " ; throw 100 ; } catch ( char a ) { cout < < " Inside catch block\n  " ; } return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; fillellipse ( 200 , 200 , 50 , 90 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; sector ( 200 , 200 , 0 , 150 , 50 , 65 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; lineto ( 250 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 100 ) ; lineto ( 250 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> using namespace std ; int x ; int main ( ) { int x = 10 ; cout < < " Value of global x is " < < : : x ; cout < < " \n Value of local x is " < < x ; return 0 ; }
#include <iostream> using namespace std ; class A { public : void fun ( ) ; } ; void A : : fun ( ) { cout < < " fun ( ) called " ; } int main ( ) { A a ; a.fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; string removeZero ( string str ) { int i = 0 ; while ( str [ i ] = = '0' ) i + + ; str.erase ( 0 , i ) ; return str ; } int main ( ) { string str ; str = " 00000123569 " ; str = removeZero ( str ) ; cout < < str < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The tanh of " < < complexnumber < < " is " < < tanh ( complexnumber ) < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 0.0 ) ; cout < < " The tanh of " < < complexnumber < < " is " < < tanh ( complexnumber ) < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( " GeeksforGeeks " ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( " GeeksforGeeks " , 5 ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( 10 , 'x' ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " ######### " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { tuple <char , int , float> geek ( 20 , 'g' , 17.5 ) ; cout < < " The size of tuple is : " ; cout < < tuple_size <decltype ( geek ) > : : value < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void resizeDemo ( string str ) { str.resize ( 5 ) ; cout < < " Using resize : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; resizeDemo ( str ) ; return 0 ; }
#include <iostream> #include <algorithm> int main ( ) { int A [ ] = { 10 , 13 , 16 , 16 , 18 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int * it = std : : adjacent_find ( A , A + n ) ; std : : cout < < * it ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 2.0 ) ; cout < < " ( 1.0 , 2.0 ) ^2 = " < < pow ( complexnumber , 2 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , 1.0 ) ; cout < < " ( 2.0 , 1.0 ) ^3 = " < < pow ( complexnumber , 3 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 5.0 , 12.0 ) ; cout < < " The argument of " < < complexnumber < < " is : " ; cout < < arg ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 4.0 , 3.0 ) ; cout < < " The argument of " < < complexnumber < < " is : " ; cout < < arg ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The asinh of " < < complexnumber < < " is " < < asinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -0.0 , -2.0 ) ; cout < < " The asinh of " < < complexnumber < < " is " < < asinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The log of " < < complexnumber < < " is " < < log ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , -0.0 ) ; cout < < " The log of " < < complexnumber < < " is " < < log ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The acosh of " < < complexnumber < < " is " < < acosh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.5 , 0.0 ) ; cout < < " The acosh of " < < complexnumber < < " is " < < acosh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The sinh of " < < complexnumber < < " is " < < sinh ( complexnumber ) < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 0.0 ) ; cout < < " The sinh of " < < complexnumber < < " is " < < sinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The asin of " < < complexnumber < < " is " < < asin ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , -0.0 ) ; cout < < " The asin of " < < complexnumber < < " is " < < asin ( complexnumber ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum Y coordinate for current " " graphics mode And driver = %d " , getmaxy ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int size ; char str1 [ ] = " geeksforgeeks " ; char str2 [ ] = " kfc " ; size = strcspn ( str1 , str2 ) ; printf ( " The unmatched characters before first matched character : %d\n  " , size ) ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> imagpart ( 20.3 , 4.9 ) ; cout < < " Complex Number = " < < imagpart < < endl ; cout < < " Imag part of the complex number is = " < < imag ( imagpart ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> imagpart ( 2 , 2 ) ; cout < < " Complex Number = " < < imagpart < < endl ; cout < < " Imag part of the complex number is = " < < imag ( imagpart ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 5.0 , 12.0 ) ; cout < < " The absolute value of " < < complexnumber < < " is : " ; cout < < abs ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 4.0 , 3.0 ) ; cout < < " The absolute value of " < < complexnumber < < " is : " ; cout < < abs ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2 , 2 ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( INFINITY , -2 ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2 , -INFINITY ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum X coordinate for current " " graphics mode And driver = %d " , getmaxx ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> realpart ( 20.3 , 4.9 ) ; cout < < " Complex Number = " < < realpart < < endl ; cout < < " Real part of the complex number is = " < < real ( realpart ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> realpart ( 2 , 2 ) ; cout < < " Complex Number = " < < realpart < < endl ; cout < < " Real part of the complex number is = " < < real ( realpart ) < < endl ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; setbkcolor ( GREEN ) ; outtext ( " Press any key to clear the screen. " ) ; getch ( ) ; cleardevice ( ) ; outtext ( " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color ; initgraph ( & gd ; , & gm ; , " " ) ; circle ( 100 , 100 , 50 ) ; setcolor ( GREEN ) ; circle ( 200 , 200 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtext ( " Press any key to close " " the graphics mode !! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; drawpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current background color = %d " , getbkcolor ( ) ) ; outtextxy ( 10 , 10 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; setbkcolor ( RED ) ; sprintf ( arr , " Current background color = %d " , getbkcolor ( ) ) ; outtextxy ( 10 , 10 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " This is output from my first program!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 5 ; b = 7 ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int b ; printf ( " Enter a value : " ) ; scanf ( " %d " , & b ) ; if ( b < 0 ) printf ( " The value is negative\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a ; printf ( " Enter a number : " ) ; scanf ( " %d " , & a ) ; if ( a ) { printf ( " The value is True\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a ; a = 0 ; while ( a < = 100 ) { printf ( " %4d degrees F = %4d degrees C\n  " , a , ( a - 32 ) * 5 / 9 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a ; a = 0 ; while ( a < = 100 ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { int a [ 5 ] ; int i ; for ( i = 0 ; i <5 ; i + + ) a [ i ] = i ; for ( i = 0 ; i <5 ; i + + ) printf ( " a [ %d ] = %d\n  " , i , a [ i ] ) ; }
#include <stdio.h> void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } int add ( int i , int j ) { return i + j ; }
#include <stdio.h> int add ( int , int ) ; void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } int add ( int i , int j ) { return i + j ; }
#include <stdio.h> void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } float add ( int i , int j ) { return i + j ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 1000 ] ; int count = 0 ; while ( gets ( s ) ) count + = strlen ( s ) ; printf ( " %d\n  " , count ) ; }
#include <stdio.h> #define MAX 10 int main ( ) { FILE * f ; int x ; f = fopen ( " out " , " w " ) ; if ( !f ) return 1 ; for ( x = 1 ; x < = MAX ; x + + ) fprintf ( f , " %d\n  " , x ) ; fclose ( f ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * f ; char s [ 1000 ] ; f = fopen ( " infile " , " r " ) ; if ( !f ) return 1 ; while ( fgets ( s , 1000 , f ) ! = NULL ) printf ( " %s " , s ) ; fclose ( f ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int * p ; p = & i ; * p = 5 ; j = i ; printf ( " %d %d %d\n  " , i , j , * p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int * p ; printf ( " %d %d\n  " , p , & i ) ; p = & i ; printf ( " %d %d\n  " , p , & i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * p ; printf ( " %d\n  " , * p ) ; }
#include <stdio.h> int main ( ) { int i ; int * p ; p = & i ; * p = 5 ; printf ( " %d %d\n  " , i , * p ) ; return 0 ; }
#include <stdio.h> void swap ( int i , int j ) { int t ; t = i ; i = j ; j = t ; } void main ( ) { int a , b ; a = 5 ; b = 10 ; printf ( " %d %d\n  " , a , b ) ; swap ( a , b ) ; printf ( " %d %d\n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int * p ; p = ( int * ) malloc ( sizeof ( int ) ) ; * p = 10 ; printf ( " %d\n  " , * p ) ; free ( p ) ; return 0 ; }
#include <string.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; strcpy ( s1 , " hello " ) ; strcpy ( s2 , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s [ 100 ] , * p ; gets ( s ) ; p = s ; while ( * p = = ' ' ) p + + ; printf ( " %s\n  " , p ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int x ; printf ( " %d\n  " , argc ) ; for ( x = 0 ; x <argc ; x + + ) printf ( " %s\n  " , argv [ x ] ) ; return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; for ( i = 0 ; i < MAX ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; for ( i = MAX ; i> = 0 ; i-- ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = 'A' ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %c " , ch + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char ch ; for ( i = 1 ; i < = 5 ; i + + ) { ch = 'A' ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %c " , ch + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 , k = 'A' ; j < = i ; j + + , k + + ) { printf ( " %d %c " , j , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , i ; long int fact ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; fact = 1 ; for ( i = num ; i> = 1 ; i-- ) fact = fact * i ; printf ( " \n Factorial of %d is = %ld " , num , fact ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; return 0 ; }
#include <stdio.h> void printMessage ( void ) { printf ( " Hello World! " ) ; } int main ( ) { printMessage ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) printf ( " %d is an EVEN number. " , num ) ; else printf ( " %d is an ODD number. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; for ( i = 1 ; i < = 20 ; i + + ) { num = i ; for ( j = 1 ; j < = 10 ; j + + ) { printf ( " %3d\t " , ( num * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { unsigned char count ; for ( count = 32 ; count < 255 ; count + = 1 ) { printf ( " %3d - %c " , count , count ) ; if ( count % 6 = = 0 ) printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " enter no : " ) ; scanf ( " %d " , & n ) ; if ( n & 1 = = 1 ) printf ( " it's odd no " ) ; else printf ( " it's even no " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello world\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = 'H' , b = 'e' , c = 'l' , d = 'o' ; char e = 'w' , f = 'r' , g = 'd' ; printf ( " %c %c %c %c %c %c %c %c %c %c " , a , b , c , c , d , e , d , f , c , g ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = { 'H' , 'e' , 'l' , 'l' , 'o' , ' ' , 'w' , 'o' , 'r' , 'l' , 'd' , '\0' } ; printf ( " %s\n  " , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c , n ; printf ( " How many times you want to display it?\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) printf ( " Hello world!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { while ( 1 )
#include <stdio.h> int main ( ) { int a ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & a ) ; printf ( " The integer is %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 100 ; c + + ) printf ( " %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 1000 ] ; printf ( " Input an integer\n  " ) ; scanf ( " %s " , n ) ; printf ( " %s " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two numbers to add\n  " ) ; scanf ( " %d %d " , & a , & b ) ; c = a + b ; printf ( " Sum of the numbers = %d\n  " , c ) ; return 0 ; }
#include <stdio.h> main ( ) { int a = 1 , b = 2 ; a = a + b ; printf ( " Sum of a and b = %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( n %2 = = 0 ) printf ( " Even\n  " ) ; else printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( n & 1 = = 1 ) printf ( " Odd\n  " ) ; else printf ( " Even\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; n %2 = = 0 ? printf ( " Even\n  " ) : printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( ( n / 2 ) * 2 = = n ) printf ( " Even\n  " ) ; else printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int first , second , add , subtract , multiply ; float divide ; printf ( " Enter two integers\n  " ) ; scanf ( " %d %d " , & first , & second ) ; add = first + second ; subtract = first - second ; multiply = first * second ; divide = first / ( float ) second ;
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter a character\n  " ) ; scanf ( " %c " , & ch ) ;
#include <stdio.h> int main ( ) { int year ; printf ( " Enter a year to check if it is a leap year\n  " ) ; scanf ( " %d " , & year ) ; if ( year %400 = = 0 )
#include <stdio.h> int main ( ) { int c , sum , t ; char n [ 1000 ] ; printf ( " Input an integer\n  " ) ; scanf ( " %s " , n ) ; sum = c = 0 ; while ( n [ c ] ! = '\0' ) { t = n [ c ] - '0' ;
#include <stdio.h> void swap ( int * , int * ) ;
#include <stdio.h> int main ( ) { int row , c , n , s ; printf ( " Enter the number of rows in pyramid of stars you wish to see\n  " ) ; scanf ( " %d " , & n ) ; s = n ; for ( row = 1 ; row < = n ; row + + )
#include <stdio.h> int power ( int , int ) ; int main ( ) { int n , sum = 0 , temp , remainder , digits = 0 ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; temp = n ;
#include <stdio.h> int main ( ) { char z [ 100 ] = " I am learning C programming language. " ; printf ( " %s " , z ) ;
#include <stdio.h> int main ( ) { char array [ 100 ] ; printf ( " Enter a string\n  " ) ; scanf ( " %s " , array ) ; printf ( " Your string : %s\n  " , array ) ; return 0 ; }
#include <stdio.h> int main ( ) { char z [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( z ) ; printf ( " The string : %s\n  " , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 100 ] ; int c = 0 ; gets ( s ) ; while ( s [ c ] ! = '\0' ) { printf ( " %c " , s [ c ] ) ; c + + ; } return 0 ; }
#include <stdio.h> void print ( char * ) ; int main ( ) { char s [ 100 ] ; gets ( s ) ; print ( s ) ; return 0 ; } void print ( char * t ) { if ( * t = = '\0' ) return ; printf ( " %c " , * t ) ; print ( + + t ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] ; int length ; printf ( " Enter a string to calculate it's length\n  " ) ; gets ( a ) ; length = strlen ( a ) ; printf ( " Length of the string = %d\n  " , length ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] ; int c = 0 ; printf ( " Input a string\n  " ) ; gets ( s ) ; while ( s [ c ] ! = '\0' ) c + + ; printf ( " Length of the string : %d\n  " , c ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ 1000 ] , destination [ 1000 ] ; printf ( " Input a string\n  " ) ; gets ( source ) ; strcpy ( destination , source ) ; printf ( " Source string : %s\n  " , source ) ; printf ( " Destination string : %s\n  " , destination ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 1000 ] , b [ 1000 ] ; printf ( " Enter the first string\n  " ) ; gets ( a ) ; printf ( " Enter the second string\n  " ) ; gets ( b ) ; strcat ( a , b ) ; printf ( " String obtained on concatenation : %s\n  " , a ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char arr [ 100 ] ; printf ( " Enter a string to reverse\n  " ) ; gets ( arr ) ; strrev ( arr ) ; printf ( " Reverse of the string is \n  %s\n  " , arr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] , r [ 1000 ] ; int begin , end , count = 0 ; printf ( " Input a string\n  " ) ; gets ( s ) ;
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] , b [ 100 ] ; printf ( " Enter a string to check if it is a palindrome\n  " ) ; gets ( a ) ; strcpy ( b , a ) ;
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to lower case\n  " ) ; gets ( string ) ; printf ( " The string in lower case : %s\n  " , strlwr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to upper case\n  " ) ; gets ( string ) ; printf ( " The string in upper case : %s\n  " , strupr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch , file_name [ 25 ] ; FILE * fp ; printf ( " Enter name of a file you wish to see\n  " ) ; gets ( file_name ) ; fp = fopen ( file_name , " r " ) ;
#include <stdio.h> #include <conio.h> #include <dir.h> int main ( ) { int done ; struct ffblk a ; printf ( " Press any key to view the files in the current directory\n  " ) ; getch ( ) ; done = findfirst ( " * . * " , & a , 0 ) ;
#include <stdio.h> #include <stdlib.h> int main ( ) { int c , n ; printf ( " Ten random numbers in [ 1 , 100 ] \n  " ) ; for ( c = 1 ; c < = 10 ; c + + ) { n = rand ( ) % 100 + 1 ; printf ( " %d\n  " , n ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> #include <dos.h> int main ( ) { struct date d ; getdate ( & d ) ; printf ( " Current system date : %d / %d / %d " , d.da_day , d.da_mon , d.da_year ) ; getch ( ) ; return 0 ; }
#include <stdlib.h> int main ( ) { system ( " C : \\Windows\\System32\\ipconfig " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { system ( " C : \\WINDOWS\\System32\\shutdown / s " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch ; printf ( " Do you want to shutdown your computer now ( y / n ) \n  " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) system ( " C : \\WINDOWS\\System32\\shutdown -s " ) ; return 0 ; }
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & x ) ;
#include <stdio.h> int main ( ) { int x = 1 ; if ( x = = 1 ) printf ( " x is equal to one.\n  " ) ; else printf ( " For comparison use ' = = ' as ' = ' is the assignment operator.\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c = 1 ;
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int c ; printf ( " Number of command line arguments passed : %d\n  " , argc ) ; for ( c = 0 ; c < argc ; c + + ) printf ( " %d argument is %s\n  " , c + 1 , argv [ c ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct game { char game_name [ 50 ] ; int number_of_players ; } ;
#include <stdio.h> #include <conio.h> int main ( ) { int c ; for ( c = 1 ; c < = 10 ; c + + ) printf ( " %d\n  " , c ) ; getch ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 10 ; c + + ) printf ( " %d\n  " , c ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int x = 320 , y = 240 , radius ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( radius = 25 ; radius < = 125 ; radius = radius + 20 ) circle ( x , y , radius ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; arc ( 100 , 100 , 0 , 135 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bar ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bar3d ( 100 , 100 , 200 , 200 , 20 , 1 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 100 , 100 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to clear the screen. " ) ; getch ( ) ; cleardevice ( ) ; outtext ( " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to close the graphics mode... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , points [ ] = { 320 , 150 , 420 , 300 , 250 , 300 , 320 , 150 } ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drawpoly ( 4 , points ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; fillellipse ( 100 , 100 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , points [ ] = { 320 , 150 , 440 , 340 , 230 , 340 , 320 , 150 } ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; fillpoly ( 4 , points ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( RED ) ; circle ( 100 , 100 , 50 ) ; floodfill ( 100 , 100 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , bkcolor ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bkcolor = getbkcolor ( ) ; sprintf ( a , " Current background color = %d " , bkcolor ) ; outtextxy ( 10 , 10 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , drawing_color ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drawing_color = getcolor ( ) ; sprintf ( a , " Current drawing color = %d " , drawing_color ) ; outtextxy ( 10 , 10 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char * drivername ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drivername = getdrivername ( ) ; outtextxy ( 200 , 200 , drivername ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sprintf ( array , " Current position of x = %d " , getx ( ) ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , y ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; y = gety ( ) ; sprintf ( array , " Current position of y = %d " , y ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( RED ) ; setbkcolor ( YELLOW ) ; circle ( 250 , 250 , 50 ) ; getch ( ) ; graphdefaults ( ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; line ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 100 , 100 ) ; lineto ( 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 250 , 250 ) ; linerel ( 100 , -100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " To display text at a particular position on the screen use outtextxy " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtextxy ( 100 , 100 , " Outtextxy function " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; pieslice ( 200 , 200 , 0 , 135 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; putpixel ( 25 , 25 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; rectangle ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sector ( 100 , 100 , 0 , 135 , 25 , 35 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to change the background color to GREEN. " ) ; getch ( ) ; setbkcolor ( GREEN ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 100 , 100 , 50 ) ; setcolor ( RED ) ; circle ( 200 , 200 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setfillstyle ( XHATCH_FILL , RED ) ; circle ( 100 , 100 , 50 ) ; floodfill ( 100 , 100 , WHITE ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , height ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; height = textheight ( " C programming " ) ; sprintf ( array , " Textheight = %d " , height ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> void print ( int ) ; int main ( ) { int n ; scanf ( " %d " , & n ) ; print ( n ) ; return 0 ; } void print ( int n ) { static int c = 1 ; if ( c = = n + 1 ) return ; printf ( " %d\n  " , c ) ; c + + ; print ( n ) ; }
#include <stdio.h> int main ( ) { int n , c = 1 ; scanf ( " %d " , & n ) ;
#include <stdio.h> #include <math.h> int main ( ) { long n , t , r = 0 , c , d ; printf ( " Enter an integer\n  " ) ; scanf ( " %ld " , & n ) ; while ( 1 ) { n + + ; t = n ;
#include <stdio.h> #include <conio.h> int main ( ) { printf ( " Press any key to clear the screen.\n  " ) ; getch ( ) ; clrscr ( ) ; printf ( " This appears after clearing the screen.\n  " ) ; printf ( " Press any key to exit...\n  " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " This line will be deleted when you press a key. " ) ; getch ( ) ; delline ( ) ; printf ( " Line deleted successfully. " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " Waiting for a character to be pressed from the keyboard to exit.\n  " ) ; getch ( ) ; return 0 ; }
#include <iostream.h> #include <conio.h> main ( ) { cout < < " Enter a character " ; getch ( ) ; }
#include <stdio.h> main ( ) { int c ; c = getchar ( ) ; putchar ( c ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " Waiting for a character to be pressed from the keyboard to exit. " ) ; getche ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { while ( !kbhit ( ) ) printf ( " You haven't pressed a key.\n  " ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { int x ; printf ( " Hello " ) ; x = wherex ( ) ; printf ( " Horizontal cursor position from where this text appears = %d\n  " , x ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { int y ; printf ( " Hello\n  " ) ; y = wherey ( ) ; printf ( " Vertical cursor position from where this text appears = %d " , y ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { textcolor ( RED ) ; cprintf ( " C programming " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { textcolor ( MAGENTA + BLINK ) ; cprintf ( " C programming " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { textbackground ( RED ) ; cprintf ( " C program to change background color. " ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <math.h> int main ( ) { int n , result ; printf ( " Enter an integer to calculate it's absolute value\n  " ) ; scanf ( " %d " , & n ) ; result = abs ( n ) ; printf ( " Absolute value of %d = %d\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to round it up\n  " ) ; scanf ( " %lf " , & n ) ; result = ceil ( n ) ; printf ( " Original number = %.2lf\n  " , n ) ; printf ( " Number rounded up = %.2lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double result , x = 1.0471 ; result = cos ( x ) ; printf ( " cos ( %.4lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to round it down\n  " ) ; scanf ( " %lf " , & n ) ; result = floor ( n ) ; printf ( " Original number = %.2lf\n  " , n ) ; printf ( " Number rounded down = %.2lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's natural log ( base is e ) \n  " ) ; scanf ( " %lf " , & n ) ; result = log ( n ) ; printf ( " Natural log of %.2lf = %lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's log ( base is 10 ) \n  " ) ; scanf ( " %lf " , & n ) ; result = log10 ( n ) ; printf ( " Common log of %.2lf = %.2lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double c , d , result ; printf ( " Enter c and d to calculate c^d\n  " ) ; scanf ( " %lf %lf " , & c , & d ) ; result = pow ( c , d ) ; printf ( " %.2lf raised to %.2lf = %.2lf\n  " , c , d , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int x = 5 ; double result ; result = pow10 ( x ) ; printf ( " Ten raised to %d is %lf\n  " , x , result ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <math.h> int main ( ) { double result , x = M_PI / 6 ; result = sin ( x ) ; printf ( " The sin ( %lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's square root\n  " ) ; scanf ( " %lf " , & n ) ; result = sqrt ( n ) ; printf ( " Square root of %.2lf = %.2lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num ; printf ( " \n Hello world!\n Welcome to Studytonight : Best place to learn\n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 10 , y = 15 , temp ; temp = x ; x = y ; y = temp ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 10 , y = 15 ; x = x + y - ( y = x ) ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 6 , y = 4 ; x = x^y ; y = x^y ; x = x^y ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 6 , y = 4 ; x = x * y ; y = x / y ; x = x / y ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int * ptrA , * ptrB ; ptrA = ( int * ) 1 ; ptrB = ( int * ) 2 ; if ( ptr2 > ptr1 ) printf ( " PtrB is greater than ptrA " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int * ptrA ; float * ptrB ; ptrA = ( int * ) 1000 ; ptrB = ( float * ) 2000 ; if ( ptrB > ptrA ) printf ( " PtrB is greater than ptrA " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int * ptr = NULL ; printf ( " \n \n  The value of ptr is : %x " , ptr ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; c = 'A' ; printf ( " value of c is %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; i = 123 ; printf ( " value of i is %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; f = 12.001234 ; printf ( " value of f is %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { double d ; d = 12.001234 ; printf ( " value of d is %e " , d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int op1 , op2 , sum ; op1 = 5 ; op2 = 3 ; sum = op1 + op2 ; printf ( " sum of %d and %d is %d " , op1 , op2 , sum ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , sub ; op1 = 5 ; op2 = 3 ; sub = op1 - op2 ; printf ( " Output of %d − %d is %d " , op1 , op2 , sub ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , mul ; op1 = 5 ; op2 = 3 ; mul = op1 * op2 ; printf ( " Output of %d multiplied by %d is %d " , op1 , op2 , mul ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , div ; op1 = 6 ; op2 = 3 ; div = 6 / 3 ; printf ( " Output of %d divide by %d is %d " , op1 , op2 , div ) ; }
#include <stdio.h> int main ( ) { int a , b ; a = 11 ; b = 99 ; if ( a > b ) printf ( " a is greater than b " ) ; else printf ( " a is not greater than b " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int even = 24 ; int odd = 31 ; if ( even % 2 = = 0 ) printf ( " %d is even\n  " , even ) ; if ( odd % 2 ! = 0 ) printf ( " %d is odd\n  " , odd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number = -2 ; if ( number > = 0 ) printf ( " %d is positive\n  " , number ) ; else printf ( " %d is negative\n  " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; year = 2016 ; if ( ( ( year % 4 = = 0 ) & & ( year % 100! = 0 ) ) || ( year %400 = = 0 ) ) printf ( " %d is a leap year " , year ) ; else printf ( " %d is not a leap year " , year ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; start = 1 ; end = 10 ; for ( i = start ; i < = end ; i + + ) printf ( " %2d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = i ; j < = 100 ; j + = 10 ) printf ( " %3d " , j ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; n = 3 ; j = 1 ; for ( i = n ; i < = ( n * 10 ) ; i + = n ) { printf ( " %3d x %2d = %3d\n  " , n , j , i ) ; j + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; start = 1 ; end = 10 ; for ( i = end ; i > = start ; i-- ) printf ( " %2d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i %2 = = 0 ) printf ( " %2d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i %2 ! = 0 ) printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = n ; i > = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j , k = 1 ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) printf ( " %3d " , k + + ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop ; for ( loop = 0 ; loop < 10 ; loop + + ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop ; for ( loop = 9 ; loop > = 0 ; loop-- ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " Hello World " ; printf ( " %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; int i = 0 ; while ( s1 [ i ] ! = '\0' ) { i + + ; } printf ( " Length of string ' %s' is %d " , s1 , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int loop ; int factorial = 1 ; int number = 5 ; for ( loop = 1 ; loop < = number ; loop + + ) { factorial = factorial * loop ; } printf ( " Factorial of %d = %d \n  " , number , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { float percentage ; int total_marks = 1200 ; int scored = 1122 ; percentage = ( float ) scored / total_marks * 100.0 ; printf ( " Percentage = %.2f % % " , percentage ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n = 5 ; printf ( " Cube of %d = %d " , n , ( n * n * n ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , i , hcf ; a = 12 ; b = 16 ; for ( i = 1 ; i < = a || i < = b ; i + + ) { if ( a %i = = 0 & & b %i = = 0 ) hcf = i ; } printf ( " HCF = %d " , hcf ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include " myfile.h " #include void printValue ( ) { printf ( " Global variable : %d " , global_variable ) ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " You\n are\n learning\n \'c\' language\n \ " Do you know C language\ " " ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; PI = 4.5 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } else { printf ( " %d is odd number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age? " ) ; scanf ( " %d " , & age ; ) ; if ( age> = 18 ) { printf ( " You are eligible to vote... " ) ; } else { printf ( " Sorry ... you can't vote " ) ; } }
#include <stdio.h> int main ( ) { int x = 10 , y = 5 ; switch ( x> y & & x + y> 0 ) { case 1 : printf ( " hi " ) ; break ; case 0 : printf ( " bye " ) ; break ; default : printf ( " Hello bye " ) ; } }
#include int main ( ) { int i = 1 ; do { printf ( " %d \n  " , i ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; do { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d \n  " , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 , b = 9 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( i < = 10 ) { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } return 0 ; }
#include <stdio.h> void main ( ) { int j = 1 ; while ( j + = 2 , j < = 10 ) { printf ( " %d " , j ) ; } printf ( " %d " , j ) ; }
#include <stdio.h> void main ( ) { while ( ) { printf ( " hello Javatpoint " ) ; } }
#include <stdio.h> void main ( ) { int x = 10 , y = 2 ; while ( x + y-1 ) { printf ( " %d %d " , x-- , y-- ) ; } }
#include int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , ( number * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; for ( a = 0 , b = 12 , c = 23 ; a <2 ; a + + ) { printf ( " %d " , a + b + c ) ; } }
#include <stdio.h> int main ( ) { int i = 1 ; for ( ; i <5 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 , j = 0 , k = 0 ; i <4 , k <8 , j <10 ; i + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; j + = 2 ; k + = 3 ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { int i = 0 , j = 2 ; for ( i = 0 ; i <5 ; i + + , j = j + 2 ) { printf ( " %d %d\n  " , i , j ) ; } }
#include <stdio.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { int i = 20 ; printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { for ( ; ; ) { printf ( " welcome to javatpoint " ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; if ( i = = 5 ) break ; } printf ( " came outside of loop i = %d " , i ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( 1 ) { printf ( " %d " , i ) ; i + + ; if ( i = = 10 ) break ; } printf ( " came out of while loop " ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( i! = 10 ) { printf ( " %d " , i ) ; continue ; i + + ; } }
#include int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i = = 5 ) { continue ; } printf ( " %d \n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , i = 1 ; printf ( " Enter the number whose table you want to print? " ) ; scanf ( " %d " , & num ; ) ; table : printf ( " %d x %d = %d\n  " , num , i , num * i ) ; i + + ; if ( i < = 10 ) goto table ; }
#include int main ( ) { float f = ( float ) 9 / 4 ; printf ( " f : %f\n  " , f ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include <stdio.h> void printName ( ) ; void main ( ) { printf ( " Hello " ) ; printName ( ) ; } void printName ( ) { printf ( " Javatpoint " ) ; }
#include <stdio.h> int main ( ) { int a ; char b ; float c ; printf ( " %d %c %f " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , i ; printf ( " %d " , + + a ) ; { int a = 20 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %d " , a ) ; } } printf ( " %d " , a ) ; }
#include <stdio.h> static char c ; static int i ; static float f ; static char s [ 100 ] ; void main ( ) { printf ( " %d %d %f %s " , c , i , f ) ; }
#include void sum ( ) { static int a = 10 ; static int b = 24 ; printf ( " %d %d \n  " , a , b ) ; a + + ; b + + ; } void main ( ) { int i ; for ( i = 0 ; i < 3 ; i + + ) { sum ( ) ; } }
#include <stdio.h> int main ( ) { register int a ; printf ( " %d " , a ) ; }
#include <stdio.h> int main ( ) { register int a = 0 ; printf ( " %u " , & a ; ) ; }
#include <stdio.h> int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a = 0 ; printf ( " %d " , a ) ; }
#include int main ( ) { extern int a ; printf ( " %d " , a ) ; } int a = 20 ;
#include int main ( ) { int i = 0 ; int marks [ 5 ] = { 20 , 30 , 40 , 50 , 60 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of p variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " value of number is %d , address of number is %u " , number , & number ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 1 ; printf ( " After increment : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * p = arr ; int i ; printf ( " printing array elements...\n  " ) ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " %d " , * ( p + i ) ) ; } }
#include void main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-1 ; printf ( " After decrement : Address of p variable is %u \n  " , p ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 3 ; printf ( " After adding 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-3 ; printf ( " After subtracting 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 100 ; int * p = & i ; int * temp ; temp = p ; p = p + 3 ; printf ( " Pointer Subtraction : %d - %d = %d " , p , temp , p-temp ) ; }
#include <stdio.h> void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " %s " , s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " % [ ^\n  ] s " , s ) ; printf ( " You entered %s " , s ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; char * p = s ; printf ( " %s " , p ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " String p : %s\n  " , p ) ; char * q ; printf ( " copying the content of p into q...\n  " ) ; q = p ; printf ( " String q : %s\n  " , q ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " Before assigning : %s\n  " , p ) ; p = " hello " ; printf ( " After assigning : %s\n  " , p ) ; }
#include void main ( ) { char s [ 30 ] ; printf ( " Enter the string? " ) ; gets ( s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char str [ 20 ] ; printf ( " Enter the string? " ) ; fgets ( str , 20 , stdin ) ; printf ( " %s " , str ) ; }
#include #include int main ( ) { char name [ 50 ] ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Your name is : " ) ; puts ( name ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 20 ] ; strcpy ( ch2 , ch ) ; printf ( " Value of second string is : %s " , ch2 ) ; return 0 ; }
#include #include int main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Reverse String is : %s " , strrev ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Lower String is : %s " , strlwr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Upper String is : %s " , strupr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; sub = strstr ( str , " java " ) ; printf ( " \n Substring is : %s " , sub ) ; return 0 ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include struct employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include #include union employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include <stdio.h> void main ( ) { FILE * fp ; char ch ; fp = fopen ( " file_handle.c " , " r " ) ; while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) break ; printf ( " %c " , ch ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file.txt " , " w " ) ; fprintf ( fp , " Hello file by fprintf...\n  " ) ; fclose ( fp ) ; }
#include main ( ) { FILE * fp ; char buff [ 255 ] ; fp = fopen ( " file.txt " , " r " ) ; while ( fscanf ( fp , " %s " , buff ) ! = EOF ) { printf ( " %s " , buff ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file1.txt " , " w " ) ; fputc ( 'a' , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " myfile.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " w " ) ; fputs ( " hello c programming " , fp ) ; fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; char text [ 300 ] ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " r " ) ; printf ( " %s " , fgets ( text , 200 , fp ) ) ; fclose ( fp ) ; getch ( ) ; }
#include void main ( ) { FILE * fp ; fp = fopen ( " myfile.txt " , " w + " ) ; fputs ( " This is javatpoint " , fp ) ; fseek ( fp , 7 , SEEK_SET ) ; fputs ( " sonoo jaiswal " , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; int length ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fclose ( fp ) ; printf ( " Size of file : %d bytes " , length ) ; getch ( ) ; }
#include int main ( ) { printf ( " File : %s\n  " , __FILE__ ) ; printf ( " Date : %s\n  " , __DATE__ ) ; printf ( " Time : %s\n  " , __TIME__ ) ; printf ( " Line : %d\n  " , __LINE__ ) ; printf ( " STDC : %d\n  " , __STDC__ ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include #define PI 3.14 main ( ) { printf ( " %f " , PI ) ; }
#include #define MIN ( a , b ) ( ( a ) < ( b ) ? ( a ) : ( b ) ) void main ( ) { printf ( " Minimum between 10 and 20 is : %d\n  " , MIN ( 10 , 20 ) ) ; }
#include #define PI 3.14 #undef PI main ( ) { printf ( " %f " , PI ) ; }
#include #define number 15 int square = number * number ; #undef number main ( ) { printf ( " %d " , square ) ; }
#include #include #define NOINPUT void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define INPUT void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define NUMBER 0 void main ( ) { #if ( NUMBER = = 0 ) printf ( " Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { clrscr ( ) ; #if ( NUMBER = = 0 ) printf ( " 1 Value of Number is : %d " , NUMBER ) ; #endif #if ( NUMBER = = 1 ) printf ( " 2 Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { #if NUMBER = = 0 printf ( " Value of Number is : %d " , NUMBER ) ; #else print ( " Value of Number is non-zero " ) ; #endif getch ( ) ; }
#include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include void func ( ) ; #pragma startup func #pragma exit func void main ( ) { printf ( " \n I am in main " ) ; getch ( ) ; } void func ( ) { printf ( " \n I am in func " ) ; getch ( ) ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include void main ( int argc , char * argv [ ] ) { printf ( " Program name is : %s\n  " , argv [ 0 ] ) ; if ( argc < 2 ) { printf ( " No argument passed through command line.\n  " ) ; } else { printf ( " First argument is : %s\n  " , argv [ 1 ] ) ; } }
#include int main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include int main ( ) { int i , fact = 1 , number ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; return 0 ; }
#include int main ( ) { int n , sum = 0 , m ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { m = n %10 ; sum = sum + m ; n = n / 10 ; } printf ( " Sum is = %d " , sum ) ; return 0 ; }
#include int main ( ) { int n , reverse = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include int main ( ) { if ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { switch ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { while ( !printf ( " hello world " ) ) { } return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 , b = 20 , c ; asm { mov ax , a mov bx , b add ax , bx mov c , ax } printf ( " c = %d " , c ) ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> int calculate_fact ( int ) ; int main ( ) { int n = 5 , f ; f = calculate_fact ( n ) ; printf ( " factorial of a number is %d " , f ) ; return 0 ; } int calculate_fact ( int a ) { if ( a = = 1 ) { return 1 ; } else return a * calculate_fact ( a-1 ) ; }
#include <stdio.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i <5 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int a = 5 ; p = & a ; printf ( " Address value of 'a' variable is %u " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; ptr = NULL ; }
#include <stdio.h> int main ( ) { char a [ 20 ] ; int n = sprintf ( a , " javaToint " ) ; printf ( " value of n is %d " , n ) ; return 0 ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char ch ; printf ( " Enter a character " ) ; ch = getch ( ) ; printf ( " \n value of ch is %c " , ch ) ; printf ( " \n Enter a character again " ) ; ch = getche ( ) ; printf ( " \n value of ch is %c " , ch ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " hello world " ) ) { } }
#include <stdio.h> #include <conio.h> main ( ) { int a = 10 , b = 20 ; clrscr ( ) ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; getch ( ) ; }
#include #include void main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ; ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include " myfile.h " #include void printValue ( ) { printf ( " Global variable : %d " , global_variable ) ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " You\n are\n learning\n \'c\' language\n \ " Do you know C language\ " " ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; PI = 4.5 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } else { printf ( " %d is odd number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age? " ) ; scanf ( " %d " , & age ; ) ; if ( age> = 18 ) { printf ( " You are eligible to vote... " ) ; } else { printf ( " Sorry ... you can't vote " ) ; } }
#include <stdio.h> int main ( ) { int x = 10 , y = 5 ; switch ( x> y & & x + y> 0 ) { case 1 : printf ( " hi " ) ; break ; case 0 : printf ( " bye " ) ; break ; default : printf ( " Hello bye " ) ; } }
#include int main ( ) { int i = 1 ; do { printf ( " %d \n  " , i ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; do { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d \n  " , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 , b = 9 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( i < = 10 ) { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } return 0 ; }
#include <stdio.h> void main ( ) { int j = 1 ; while ( j + = 2 , j < = 10 ) { printf ( " %d " , j ) ; } printf ( " %d " , j ) ; }
#include <stdio.h> void main ( ) { while ( ) { printf ( " hello Javatpoint " ) ; } }
#include <stdio.h> void main ( ) { int x = 10 , y = 2 ; while ( x + y-1 ) { printf ( " %d %d " , x-- , y-- ) ; } }
#include int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , ( number * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; for ( a = 0 , b = 12 , c = 23 ; a <2 ; a + + ) { printf ( " %d " , a + b + c ) ; } }
#include <stdio.h> int main ( ) { int i = 1 ; for ( ; i <5 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 , j = 0 , k = 0 ; i <4 , k <8 , j <10 ; i + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; j + = 2 ; k + = 3 ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { int i = 0 , j = 2 ; for ( i = 0 ; i <5 ; i + + , j = j + 2 ) { printf ( " %d %d\n  " , i , j ) ; } }
#include <stdio.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { int i = 20 ; printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { for ( ; ; ) { printf ( " welcome to javatpoint " ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; if ( i = = 5 ) break ; } printf ( " came outside of loop i = %d " , i ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( 1 ) { printf ( " %d " , i ) ; i + + ; if ( i = = 10 ) break ; } printf ( " came out of while loop " ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( i! = 10 ) { printf ( " %d " , i ) ; continue ; i + + ; } }
#include int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i = = 5 ) { continue ; } printf ( " %d \n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , i = 1 ; printf ( " Enter the number whose table you want to print? " ) ; scanf ( " %d " , & num ; ) ; table : printf ( " %d x %d = %d\n  " , num , i , num * i ) ; i + + ; if ( i < = 10 ) goto table ; }
#include int main ( ) { float f = ( float ) 9 / 4 ; printf ( " f : %f\n  " , f ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include <stdio.h> void printName ( ) ; void main ( ) { printf ( " Hello " ) ; printName ( ) ; } void printName ( ) { printf ( " Javatpoint " ) ; }
#include <stdio.h> int main ( ) { int a ; char b ; float c ; printf ( " %d %c %f " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , i ; printf ( " %d " , + + a ) ; { int a = 20 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %d " , a ) ; } } printf ( " %d " , a ) ; }
#include <stdio.h> static char c ; static int i ; static float f ; static char s [ 100 ] ; void main ( ) { printf ( " %d %d %f %s " , c , i , f ) ; }
#include void sum ( ) { static int a = 10 ; static int b = 24 ; printf ( " %d %d \n  " , a , b ) ; a + + ; b + + ; } void main ( ) { int i ; for ( i = 0 ; i < 3 ; i + + ) { sum ( ) ; } }
#include <stdio.h> int main ( ) { register int a ; printf ( " %d " , a ) ; }
#include <stdio.h> int main ( ) { register int a = 0 ; printf ( " %u " , & a ; ) ; }
#include <stdio.h> int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a = 0 ; printf ( " %d " , a ) ; }
#include int main ( ) { extern int a ; printf ( " %d " , a ) ; } int a = 20 ;
#include int main ( ) { int i = 0 ; int marks [ 5 ] = { 20 , 30 , 40 , 50 , 60 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of p variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " value of number is %d , address of number is %u " , number , & number ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 1 ; printf ( " After increment : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * p = arr ; int i ; printf ( " printing array elements...\n  " ) ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " %d " , * ( p + i ) ) ; } }
#include void main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-1 ; printf ( " After decrement : Address of p variable is %u \n  " , p ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 3 ; printf ( " After adding 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-3 ; printf ( " After subtracting 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 100 ; int * p = & i ; int * temp ; temp = p ; p = p + 3 ; printf ( " Pointer Subtraction : %d - %d = %d " , p , temp , p-temp ) ; }
#include <stdio.h> void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " %s " , s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " % [ ^\n  ] s " , s ) ; printf ( " You entered %s " , s ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; char * p = s ; printf ( " %s " , p ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " String p : %s\n  " , p ) ; char * q ; printf ( " copying the content of p into q...\n  " ) ; q = p ; printf ( " String q : %s\n  " , q ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " Before assigning : %s\n  " , p ) ; p = " hello " ; printf ( " After assigning : %s\n  " , p ) ; }
#include void main ( ) { char s [ 30 ] ; printf ( " Enter the string? " ) ; gets ( s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char str [ 20 ] ; printf ( " Enter the string? " ) ; fgets ( str , 20 , stdin ) ; printf ( " %s " , str ) ; }
#include #include int main ( ) { char name [ 50 ] ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Your name is : " ) ; puts ( name ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 20 ] ; strcpy ( ch2 , ch ) ; printf ( " Value of second string is : %s " , ch2 ) ; return 0 ; }
#include #include int main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Reverse String is : %s " , strrev ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Lower String is : %s " , strlwr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Upper String is : %s " , strupr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; sub = strstr ( str , " java " ) ; printf ( " \n Substring is : %s " , sub ) ; return 0 ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include struct employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include #include union employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include <stdio.h> void main ( ) { FILE * fp ; char ch ; fp = fopen ( " file_handle.c " , " r " ) ; while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) break ; printf ( " %c " , ch ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file.txt " , " w " ) ; fprintf ( fp , " Hello file by fprintf...\n  " ) ; fclose ( fp ) ; }
#include main ( ) { FILE * fp ; char buff [ 255 ] ; fp = fopen ( " file.txt " , " r " ) ; while ( fscanf ( fp , " %s " , buff ) ! = EOF ) { printf ( " %s " , buff ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file1.txt " , " w " ) ; fputc ( 'a' , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " myfile.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " w " ) ; fputs ( " hello c programming " , fp ) ; fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; char text [ 300 ] ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " r " ) ; printf ( " %s " , fgets ( text , 200 , fp ) ) ; fclose ( fp ) ; getch ( ) ; }
#include void main ( ) { FILE * fp ; fp = fopen ( " myfile.txt " , " w + " ) ; fputs ( " This is javatpoint " , fp ) ; fseek ( fp , 7 , SEEK_SET ) ; fputs ( " sonoo jaiswal " , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; int length ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fclose ( fp ) ; printf ( " Size of file : %d bytes " , length ) ; getch ( ) ; }
#include int main ( ) { printf ( " File : %s\n  " , __FILE__ ) ; printf ( " Date : %s\n  " , __DATE__ ) ; printf ( " Time : %s\n  " , __TIME__ ) ; printf ( " Line : %d\n  " , __LINE__ ) ; printf ( " STDC : %d\n  " , __STDC__ ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include #define PI 3.14 main ( ) { printf ( " %f " , PI ) ; }
#include #define MIN ( a , b ) ( ( a ) < ( b ) ? ( a ) : ( b ) ) void main ( ) { printf ( " Minimum between 10 and 20 is : %d\n  " , MIN ( 10 , 20 ) ) ; }
#include #define PI 3.14 #undef PI main ( ) { printf ( " %f " , PI ) ; }
#include #define number 15 int square = number * number ; #undef number main ( ) { printf ( " %d " , square ) ; }
#include #include #define NOINPUT void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define INPUT void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define NUMBER 0 void main ( ) { #if ( NUMBER = = 0 ) printf ( " Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { clrscr ( ) ; #if ( NUMBER = = 0 ) printf ( " 1 Value of Number is : %d " , NUMBER ) ; #endif #if ( NUMBER = = 1 ) printf ( " 2 Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { #if NUMBER = = 0 printf ( " Value of Number is : %d " , NUMBER ) ; #else print ( " Value of Number is non-zero " ) ; #endif getch ( ) ; }
#include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include void func ( ) ; #pragma startup func #pragma exit func void main ( ) { printf ( " \n I am in main " ) ; getch ( ) ; } void func ( ) { printf ( " \n I am in func " ) ; getch ( ) ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include void main ( int argc , char * argv [ ] ) { printf ( " Program name is : %s\n  " , argv [ 0 ] ) ; if ( argc < 2 ) { printf ( " No argument passed through command line.\n  " ) ; } else { printf ( " First argument is : %s\n  " , argv [ 1 ] ) ; } }
#include int main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include int main ( ) { int i , fact = 1 , number ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; return 0 ; }
#include int main ( ) { int n , sum = 0 , m ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { m = n %10 ; sum = sum + m ; n = n / 10 ; } printf ( " Sum is = %d " , sum ) ; return 0 ; }
#include int main ( ) { int n , reverse = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include int main ( ) { if ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { switch ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { while ( !printf ( " hello world " ) ) { } return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 , b = 20 , c ; asm { mov ax , a mov bx , b add ax , bx mov c , ax } printf ( " c = %d " , c ) ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include #include int main ( ) { printf ( " \n  Result : %f " , ceil ( 1.44 ) ) ; printf ( " \n  Result : %f " , ceil ( 1.66 ) ) ; printf ( " \n  Result : %f " , floor ( 1.44 ) ) ; printf ( " \n  Result : %f " , floor ( 1.66 ) ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include int main ( ) { int j = 1 ; while ( ) { printf ( " %d\n  " , j + + ) ; if ( j> 5 ) break ; } return 0 ; }
#include main ( ) { int j ; char s [ ] = " javaTpoint " ; for ( j = 0 ; s [ j ] ; + + j ) ; printf ( " %d \n  " , j ) ; j = 0 ; while ( s [ j + + ] ) ; printf ( " %d " , j ) ; }
#include main ( ) float a = 3.14 ; double b = 3.14 ;
#include int main ( ) { int P = 10 ; switch ( P ) { case 10 : printf ( " Case 1 " ) ; case 20 : printf ( " Case 2 " ) ; break ; case P : printf ( " Case 2 " ) ; break ; } return 0 ; }
#include int main ( ) { int i = 1 ; switch ( i ) { case 1 : printf ( " Case1 " ) ; break ; case 1 * 2 + 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include int main ( ) { int x = 100 , y = 100 %80 , j ; for ( j = 1 ; j <10 ; j + + ) if ( x ! = y ) ; printf ( " x = %d y = %d\n  " , x , y ) ; return 0 ; }
#include int main ( ) { short int i = 0 ; for ( i < = 5 & & i> = -1 ; + + i ; i> 0 ) printf ( " %u , " , i ) ; return 0 ; }
#include int main ( ) { int a = 5 ; do { printf ( " %d\n  " , a ) ; a = -1 ; } while ( a> 0 ) ; return 0 ; }
#include int function1 ( int ) ; int main ( ) { int k = 30 ; k = function1 ( k = function1 ( k = function1 ( k ) ) ) ; printf ( " k = %d\n  " , k ) ; return 0 ; } int function1 ( int k ) { k + + ; return k ; }
#include int main ( ) { int b = 15 ; void f1 ( ) ; b = f1 ( ) ; printf ( " %d\n  " , b ) ; return 0 ; } void f1 ( ) { printf ( " Hello " ) ; }
#include int main ( ) { printf ( " %p\n  " , main ( ) ) ; return 0 ; }
#include int mul ( int , int ) ; int main ( ) { int x = 5 , y = 4 , z ; z = mul ( x , y ) ; printf ( " z = %d\n  " , z ) ; return 0 ; } int mul ( int x , int y ) { return ( x * y ) ; return ( x - y ) ; } Output : z = 20
#include int j ; int function ( ) ; int main ( ) { while ( j ) { function ( ) ; main ( ) ; } printf ( " Hi\n  " ) ; return 0 ; } int function ( ) { printf ( " Hello " ) ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include main ( ) { int x [ ] = { 100 , 200 , 300 } ; printf ( " %d " , * x + 1 ) ; }
#include void main ( ) { char a [ ] = " C + + " ; printf ( " %s " , a ) ; a + + ; printf ( " %s " , a ) ; }
#include int main ( ) { int size , j ; scanf ( " %d " , & size ; ) ; int arr [ size ] ; for ( j = 1 ; j < = size ; j + + ) { scanf ( " %d " , arr [ j ] ) ; printf ( " %d " , arr [ j ] ) ; } return 0 ; }
#include int main ( ) { int arr [ 2 ] = { 20 } ; printf ( " %d\n  " , 0 [ arr ] ) ; return 0 ; }
#include int main ( ) { int arr [ ] = { 10 , 11 , 12 , 15 , 23 } ; printf ( " %u , %u\n  " , arr , & arr ; ) ; return 0 ; }
#include int main ( ) { typedef char ( * ( * arrfptr [ 4 ] ) ( ) ) [ 20 ] ; arrfptr y ; return 0 ; }
#include main ( ) { struct { int y ; } var = { 4 } , * a = & var ; printf ( " %d %d %d " , var.y , a-> y , ( * a ) .y ) ; }
#include main ( ) { int a [ 3 ] = { 1 , , 2 } ; printf ( " %d " , a [ a [ 0 ] ] ) ; }
#include main ( ) { int j ; char s [ ] = " javaTpoint " ; for ( j = 0 ; s [ j ] ; + + j ) ; printf ( " %d \n  " , j ) ; j = 0 ; while ( s [ j + + ] ) ; printf ( " %d " , j ) ; }
#include #include int main ( ) { int j , k ; char * z = " Hello " ; k = strlen ( z ) ; * z = z [ k ] ; for ( j = 0 ; j < = k ; j + + ) { printf ( " %s " , z ) ; z + + ; } printf ( " \n  " , z ) ; return 0 ; }
#include int main ( ) { int * i ; void fun ( int * * ) ; fun ( & i ; ) ; return 0 ; } void fun ( int * * j ) { int b = 10 ; }
#include int main ( ) { float j = 12 , * i ; void * a ; a = & j ; i = a ; printf ( " %f\n  " , * i ) ; return 0 ; }
#include main ( ) { int * a , * * b ; printf ( " %u\n  " , sizeof ( a ) ) ; printf ( " %u\n  " , sizeof ( b ) ) ; }
#include void main ( ) { char * a = " C + + " ; printf ( " %s " , a ) ; a + + ; printf ( " %s " , a ) ; }
#include main ( ) { char * x = NULL ; printf ( " %c " , * x ) ; }
#include int main ( ) { int b = 10 , * i ; void * p ; i = p = & b ; i + + ; p + + ; printf ( " %u %u\n  " , i , p ) ; return 0 ; }
#include int main ( ) { int j = 10 ; int * i = & j ; return 0 ; }
#include main ( ) { char * p = " Xyz " ; while ( * p ) printf ( " %c " , * p + + ) ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include int main ( ) { printf ( " %d\n  " , strlen ( " javaTpoint " ) ) ; return 0 ; }
#include #include int main ( ) { char stri [ ] = " Java\0\Tpoint\0 " ; printf ( " %s\n  " , stri ) ; return 0 ; }
#include void main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; }
#include #include #include void main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; clrscr ( ) ; sub = strstr ( str , " java " ) ; printf ( " \n  %s " , sub ) ; getch ( ) ; }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { char * stri [ ] = { " Java " , " C " , " Android " , " Embedded " , " JS " } ; printf ( " %d , %d " , sizeof ( stri ) , strlen ( stri [ 0 ] ) ) ; return 0 ; }
#include #include int main ( ) { printf ( " %c\n  " , " javatpoint " [ 5 ] ) ; return 0 ; }
#include int main ( ) { printf ( " %u %s\n  " , & " Welcome " , & " Programming " ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include int main ( ) { union b { int j ; char ch [ 2 ] ; } ; union b un ; un.ch [ 0 ] = 3 ; un.ch [ 1 ] = 2 ; printf ( " %d , %d , %d\n  " , un.ch [ 0 ] , un.ch [ 1 ] , un.j ) ; return 0 ; }
#include int main ( ) { enum months { JAN = -1 , FEB , MARCH = 6 , APRIL , MAY , JUNE } ; printf ( " %d , %d , %d , %d , %d , %d\n  " , + + JAN , FEB , MARCH , APRIL , MAY , JUNE ) ; return 0 ; }
#include int main ( ) { struct employ { char name [ 22 ] ; int age ; float bs ; } ; struct employ e ; e.name = " Nakul " ; e.age = 22 ; printf ( " %s %d\n  " , e.name , e.age ) ; return 0 ; }
#include main ( ) { enum { GREAT , is = 7 , india } ; printf ( " %d %d " , GREAT , india ) ; }
#include union xyz { char x , y , z , a , b , c , d , e ; int i ; } xyz ; main ( ) { printf ( " %d " , sizeof ( xyz ) ) ; }
#include main ( ) { struct { int y ; } var = { 4 } , * a = & var ; printf ( " %d %d %d " , var.y , a-> y , ( * a ) .y ) ; }
#include union Pointer { unsigned int a : 4 ; unsigned int b : 4 ; int res ; } ; int main ( ) { union Pointer pt ; pt.a = 2 ; pt.b = 6 ; pt.res = pt.b ; printf ( " \n  The value of res is : %d " , pt.res ) ; return 0 ; }
#include int main ( ) { struct values { int bit1 : 1 ; int bit3 : 3 ; int bit4 : 4 ; } bit ; printf ( " %d \n  " , sizeof ( bit ) ) ; return 0 ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include #define DEF int main ( ) { int j = 3 ; #ifdef DEF printf ( " square of j = %d\n  " , j * j ) ; #else printf ( " j = %d\n  " , j ) ; #endif return 0 ; }
#include #define IT 0.1 #define HRA 0.2 #define DA 0.3 int main ( ) { float bas_sal , net_sal ; bas_sal = 1000 ; net_sal = bas_sal * ( 1 + HRA + DA-IT ) ; printf ( " Gross salary = %f\n  " , net_sal ) ; return 0 ; }
#include int main ( ) { int j ; #if A printf ( " Enter the number : " ) ; scanf ( " %d " , & j ; ) ; #elif B printf ( " The number is even " ) ; return 0 ; }
#include int main ( ) { int p = 1 , q = 2 , r = 3 , s = 4 , t = 5 , mn ; m = ( p + q + r + s + t ) / 5 ; printf ( " Mean of 5 numbers = %d\n  " , mn ) ; return 0 ; }
#include #define MAX ( x , y ) ( x > y ? x : y ) int main ( ) { int a ; a = MAX ( 3 + 1 , 2 + 4 ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int calculate_fact ( int ) ; int main ( ) { int n = 5 , f ; f = calculate_fact ( n ) ; printf ( " factorial of a number is %d " , f ) ; return 0 ; } int calculate_fact ( int a ) { if ( a = = 1 ) { return 1 ; } else return a * calculate_fact ( a-1 ) ; }
#include <stdio.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i <5 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int a = 5 ; p = & a ; printf ( " Address value of 'a' variable is %u " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; ptr = NULL ; }
#include <stdio.h> int main ( ) { char a [ 20 ] ; int n = sprintf ( a , " javaToint " ) ; printf ( " value of n is %d " , n ) ; return 0 ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char ch ; printf ( " Enter a character " ) ; ch = getch ( ) ; printf ( " \n value of ch is %c " , ch ) ; printf ( " \n Enter a character again " ) ; ch = getche ( ) ; printf ( " \n value of ch is %c " , ch ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " hello world " ) ) { } }
#include <stdio.h> #include <conio.h> main ( ) { int a = 10 , b = 20 ; clrscr ( ) ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; getch ( ) ; }
#include #include void main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ; ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char grade ; printf ( " Enter student grade : " ) ; grade = getchar ( ) ; putchar ( grade ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d\n  " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( celsius * 9 / 5 ) + 32 ; printf ( " %.2f Celsius = %.2f Fahrenheit " , celsius , fahrenheit ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fahrenheit ) ; celsius = ( fahrenheit - 32 ) * 5 / 9 ; printf ( " %.2f Fahrenheit = %.2f Celsius " , fahrenheit , celsius ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num , root ; printf ( " Enter any number to find square root : " ) ; scanf ( " %lf " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2lf = %.2lf " , num , root ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two angles of triangle : " ) ; scanf ( " %d %d " , & a , & b ) ; c = 180 - ( a + b ) ; printf ( " Third angle of the triangle = %d " , c ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float side , area ; printf ( " Enter side of an equilateral triangle : " ) ; scanf ( " %f " , & side ) ; area = ( sqrt ( 3 ) / 4 ) * ( side * side ) ; printf ( " Area of equilateral triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } else { printf ( " %d is maximum " , num2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) max = num1 ; else max = num2 ; printf ( " %d is maximum. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Learn at Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 10 ; b = + + a ; c = a + + printf ( " a = %d , b = %d , c = %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; int max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum is %d. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible to vote in India. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " First number is maximum. " ) ; } else { printf ( " Second number is maximum. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int count ; for ( count = 1 ; count < = 10 ; count + + ) { printf ( " %d " , count ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; while ( n < = 10 ) { printf ( " %d " , n ) ; n + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; do { printf ( " %d " , n ) ; n + + ; } while ( n < = 10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 5 ; j + + ) { printf ( " %d\t " , ( i * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Even numbers between 1 to 100 : \n  " ) ; for ( num = 1 ; num < = 100 ; num + + ) { if ( num % 2 = = 1 ) continue ; printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 ; start : goto print ; print : printf ( " %d " , i ) ; goto next ; increment : i + + ; goto print ; next : if ( i < 10 ) goto increment ; else goto exit ; printf ( " I cannot execute. " ) ; exit : return 0 ; }
#include <stdio.h> void print ( int n ) ; int main ( ) { print ( 5 ) ; return 0 ; } void print ( int n ) { printf ( " %d " , n ) ; if ( n < = 1 ) { return ; } print ( n - 1 ) ; }
#include <stdio.h> int main ( ) { int outervariable = 10 ; { printf ( " I can access outervariable in inner block = %d\n  " , outervariable ) ; } printf ( " I can also access outervariable in same block = %d " , outervariable ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " 'num' is accessible within same block = %d\n  " , num ) ; { int num = 20 ; printf ( " Inner block 'num' shadows outer block 'num' = %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; printf ( " 'num1 = %d' and 'num2 = %d' declared in outer block is accessible within same block.\n  " , num1 , num2 ) ; { int sum = num1 + num2 ; printf ( " sum = %d\n  " , sum ) ; } return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 ; static int n2 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> int num ; void display ( ) { int i ; for ( i = 1 ; i < = num ; i + + ) { printf ( " num = %d\n  " , i ) ; } }
#include <stdio.h> #define SIZE 5 int main ( ) { int array [ SIZE ] ; int index ; for ( index = 0 ; index < = SIZE ; index + + ) { scanf ( " %d " , & array [ index ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Address of num in hexadecimal = %x " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , * ( & num ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int * const const_ptr = & num1 ; * const_ptr = 10 ; const_ptr = & num2 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * const_ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; const int * ptr_const ; ptr_const = & num ; num = 20 ; * ptr_const = 100 ; printf ( " Num = %d\n  " , num ) ; printf ( " Num = %d\n  " , * ptr_const ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; const int * const ptr = & num1 ; ptr = & num2 ; * ptr = 100 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #include " main.h " #include " win / display.c "
#include <stdio.h> int sum ( int a , int b ) { return ( a + b ) ; } #define SUM ( a , b ) ( a + b ) int main ( ) { printf ( " SUM using function : %d\n  " , sum ( 100 , 200 ) ) ; printf ( " SUM using macro : %d\n  " , SUM ( 100 , 200 ) ) ; return 0 ; }
#include <stdio.h> #define COUNTRY " INDIA " int main ( ) { #ifdef COUNTRY printf ( " Country is defined\n  " ) ; #endif #ifndef STATE printf ( " State is not defined. Defining state. \n  " ) ; #define STATE " PATNA " #endif printf ( " State is : %s\n  " , STATE ) ; return 0 ; }
#include <stdio.h> #define IND 1 #define USA 2 #define UK 3 #define COUNTRY IND int main ( ) { #if COUNTRY = = IND printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #elif COUNTRY = = USA printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #else printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #endif return 0 ; }
#include <stdio.h> #define PRINT ( msg ) #msg int main ( ) { printf ( PRINT ( C Programming in Codeforwin ) ) ; return 0 ; }
#include <stdio.h> #define CONCAT ( a , b ) a##b int main ( ) { printf ( " CONCAT ( 10 , 20 ) = %d\n  " , CONCAT ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) printf ( " LSB of %d is set ( 1 ) . " , num ) ; else printf ( " LSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( ! ( num & 1 ) ) { count + + ; num > > = 1 ; } printf ( " Total number of trailing zeros = %d. " , count ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { int num , count ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; while ( ! ( num & ( ~INT_MAX ) ) ) { count + + ; num < < = 1 ; } printf ( " Total number of leading zeros = %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , flippedNumber ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; flippedNumber = ~num ; printf ( " Original number = %d ( in decimal ) \n  " , num ) ; printf ( " Number after bits are flipped = %d ( in decimal ) " , flippedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) { printf ( " %d is odd. " , num ) ; } else { printf ( " %d is even. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; ( num & 1 ) ? printf ( " %d is odd. " , num ) : printf ( " %d is even. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; switch ( num % 2 ) { case 0 : printf ( " Number is Even " ) ; break ; case 1 : printf ( " Number is Odd " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum between %d and %d is %d " , num1 , num2 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { printf ( " %d\n  " , num ) ; num = num / 10 ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter your text : " ) ; gets ( str ) ; strupr ( str ) ; printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; strlwr ( str ) ; printf ( " Lowercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #define EVEN_ODD ( num ) \ if ( num & 1 ) \ printf ( " %d is odd\n  " , num ) ; \ else \ printf ( " %d is even\n  " , num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; EVEN_ODD ( num ) ; return 0 ; }
#include <stdio.h> #define EVEN_ODD ( num ) \ if ( num & 1 ) \ printf ( " %d is odd\n  " , num ) ; \ else \ printf ( " %d is even\n  " , num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; EVEN_ODD ( num ) ; return 0 ; }
#include <stdio.h> #define SUM ( x , y ) ( x + y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Sum ( %d , %d ) = %d\n  " , num1 , num2 , SUM ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> #define SUM ( x , y ) ( x + y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Sum ( %d , %d ) = %d\n  " , num1 , num2 , SUM ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14 int main ( ) { printf ( " Value of PI : %f\n  " , PI ) ; #ifdef PI #undef PI #endif #define PI 3.14159 printf ( " Value of PI after redefinition : %f " , PI ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14 int main ( ) { printf ( " Value of PI : %f\n  " , PI ) ; #ifdef PI #undef PI #endif #define PI 3.14159 printf ( " Value of PI after redefinition : %f " , PI ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerVar ; printf ( " Size of char = %d\n  " , sizeof ( char ) ) ; printf ( " Size of int = %d\n  " , sizeof ( integerVar ) ) ; printf ( " Size of expression ( 3 + 2.5 ) = %d\n  " , sizeof ( 3 + 2.5 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( num % 2 = = 0 ) { printf ( " Number is Even. " ) ; } else { printf ( " Number is Odd. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Enter any number : " ) ; scanf ( " %d " , & n ) ; printf ( " Natural numbers from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; for ( i = start ; i> = 1 ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; ( num %2 = = 0 ) ? printf ( " The number is EVEN " ) : printf ( " The number is ODD " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; printf ( " The number is %s " , ( num %2 = = 0 ? " EVEN " : " ODD " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ? printf ( " It is ALPHABET " ) : printf ( " It is NOT ALPHABET " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 8 ; printf ( " 1s complement of %d = %d\n  " , num , ( ~num ) ) ; printf ( " 2s complement of %d = %d\n  " , num , ( ~num + 1 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , end ; printf ( " Print all natural numbers from 1 to : " ) ; scanf ( " %d " , & end ) ; i = 1 ; while ( i < = end ) { printf ( " %d\n  " , i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; while ( n> = 1 ) { printf ( " %d\n  " , n ) ; n-- ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'a' ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 'z' ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch = 97 ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 122 ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { sum + = i ; } printf ( " Sum of first %d natural numbers = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , reverse = 0 ; printf ( " Enter any number to find reverse : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { reverse = ( reverse * 10 ) + ( num % 10 ) ; num / = 10 ; } printf ( " Reverse = %d " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 255 ; i + + ) { printf ( " ASCII value of character %c = %d\n  " , i , i ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; int num ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; num = atoi ( number ) ; printf ( " Converted integer = %d\n  " , num ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long long int bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atoll ( number ) ; printf ( " Converted long long int = %lld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 5 ) ; if ( ptr = = NULL ) return 0 ; free ( ptr ) ; * ptr = 50 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 10 ) ; if ( !ptr ) { printf ( " Unable to allocate memory " ) ; return ; } free ( ptr ) ; ptr = NULL ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #define PRINT ( msg ) #msg int main ( ) { printf ( PRINT ( C Programming in Codeforwin ) ) ; return 0 ; }
#include <stdio.h> #define CONCAT ( a , b ) a##b int main ( ) { printf ( " CONCAT ( 10 , 20 ) = %d\n  " , CONCAT ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> #include " main.h " #include " win / display.c "
#include <stdio.h> int sum ( int a , int b ) { return ( a + b ) ; } #define SUM ( a , b ) ( a + b ) int main ( ) { printf ( " SUM using function : %d\n  " , sum ( 100 , 200 ) ) ; printf ( " SUM using macro : %d\n  " , SUM ( 100 , 200 ) ) ; return 0 ; }
#include <stdio.h> #define COUNTRY " INDIA " int main ( ) { #ifdef COUNTRY printf ( " Country is defined\n  " ) ; #endif #ifndef STATE printf ( " State is not defined. Defining state. \n  " ) ; #define STATE " PATNA " #endif printf ( " State is : %s\n  " , STATE ) ; return 0 ; }
#include <stdio.h> #define IND 1 #define USA 2 #define UK 3 #define COUNTRY IND int main ( ) { #if COUNTRY = = IND printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #elif COUNTRY = = USA printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #else printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #endif return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 5 ) ; if ( ptr = = NULL ) return 0 ; free ( ptr ) ; * ptr = 50 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 10 ) ; if ( !ptr ) { printf ( " Unable to allocate memory " ) ; return ; } free ( ptr ) ; ptr = NULL ; free ( ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; ( year %4 = = 0 & & year %100! = 0 ) ? printf ( " LEAP YEAR " ) : ( year %400 = = 0 ) ? printf ( " LEAP YEAR " ) : printf ( " COMMON YEAR " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; printf ( " %s " , ( ( year %4 = = 0 & & year %100! = 0 ) ? " LEAP YEAR " : ( year %400 = = 0 ) ? " LEAP YEAR " : " COMMON YEAR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Alphabets from a - z are : \n  " ) ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { printf ( " %c\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; printf ( " Alphabets from a - z are : \n  " ) ; for ( i = 97 ; i < = 122 ; i + + ) { printf ( " %c\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter number to print table : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d * %d = %d\n  " , num , i , ( num * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atol ( number ) ; printf ( " Converted long int = %ld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; double decimalNumber ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; decimalNumber = atof ( number ) ; printf ( " Converted floating point number = %lf\n  " , decimalNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 8 ; printf ( " 1s complement of %d = %d\n  " , num , ( ~num ) ) ; printf ( " 2s complement of %d = %d\n  " , num , ( ~num + 1 ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long long int bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atoll ( number ) ; printf ( " Converted long long int = %lld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; double decimalNumber ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; decimalNumber = atof ( number ) ; printf ( " Converted floating point number = %lf\n  " , decimalNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atol ( number ) ; printf ( " Converted long int = %ld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; int num ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; num = atoi ( number ) ; printf ( " Converted integer = %d\n  " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int * const const_ptr = & num1 ; * const_ptr = 10 ; const_ptr = & num2 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * const_ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; const int * ptr_const ; ptr_const = & num ; num = 20 ; * ptr_const = 100 ; printf ( " Num = %d\n  " , num ) ; printf ( " Num = %d\n  " , * ptr_const ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; const int * const ptr = & num1 ; ptr = & num2 ; * ptr = 100 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Address of num in hexadecimal = %x " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , * ( & num ) ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int array [ SIZE ] ; int index ; for ( index = 0 ; index < = SIZE ; index + + ) { scanf ( " %d " , & array [ index ] ) ; } return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> int num ; void display ( ) { int i ; for ( i = 1 ; i < = num ; i + + ) { printf ( " num = %d\n  " , i ) ; } }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 ; static int n2 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; }
#include <stdio.h> int main ( ) { int outervariable = 10 ; { printf ( " I can access outervariable in inner block = %d\n  " , outervariable ) ; } printf ( " I can also access outervariable in same block = %d " , outervariable ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " 'num' is accessible within same block = %d\n  " , num ) ; { int num = 20 ; printf ( " Inner block 'num' shadows outer block 'num' = %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; printf ( " 'num1 = %d' and 'num2 = %d' declared in outer block is accessible within same block.\n  " , num1 , num2 ) ; { int sum = num1 + num2 ; printf ( " sum = %d\n  " , sum ) ; } return 0 ; }
#include <stdio.h> void print ( int n ) ; int main ( ) { print ( 5 ) ; return 0 ; } void print ( int n ) { printf ( " %d " , n ) ; if ( n < = 1 ) { return ; } print ( n - 1 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; start : goto print ; print : printf ( " %d " , i ) ; goto next ; increment : i + + ; goto print ; next : if ( i < 10 ) goto increment ; else goto exit ; printf ( " I cannot execute. " ) ; exit : return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Even numbers between 1 to 100 : \n  " ) ; for ( num = 1 ; num < = 100 ; num + + ) { if ( num % 2 = = 1 ) continue ; printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 5 ; j + + ) { printf ( " %d\t " , ( i * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; do { printf ( " %d " , n ) ; n + + ; } while ( n < = 10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; while ( n < = 10 ) { printf ( " %d " , n ) ; n + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int count ; for ( count = 1 ; count < = 10 ; count + + ) { printf ( " %d " , count ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " First number is maximum. " ) ; } else { printf ( " Second number is maximum. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible to vote in India. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char grade ; printf ( " Enter student grade : " ) ; grade = getchar ( ) ; putchar ( grade ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerVar ; printf ( " Size of char = %d\n  " , sizeof ( char ) ) ; printf ( " Size of int = %d\n  " , sizeof ( integerVar ) ) ; printf ( " Size of expression ( 3 + 2.5 ) = %d\n  " , sizeof ( 3 + 2.5 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; int max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum is %d. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 10 ; b = + + a ; c = a + + printf ( " a = %d , b = %d , c = %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Learn at Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { printf ( " %d\n  " , num ) ; num = num / 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { int num , count ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; while ( ! ( num & ( ~INT_MAX ) ) ) { count + + ; num < < = 1 ; } printf ( " Total number of leading zeros = %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( ! ( num & 1 ) ) { count + + ; num > > = 1 ; } printf ( " Total number of trailing zeros = %d. " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , flippedNumber ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; flippedNumber = ~num ; printf ( " Original number = %d ( in decimal ) \n  " , num ) ; printf ( " Number after bits are flipped = %d ( in decimal ) " , flippedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) { printf ( " %d is odd. " , num ) ; } else { printf ( " %d is even. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; ( num & 1 ) ? printf ( " %d is odd. " , num ) : printf ( " %d is even. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) printf ( " LSB of %d is set ( 1 ) . " , num ) ; else printf ( " LSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'a' ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 'z' ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch = 97 ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 122 ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; while ( n> = 1 ) { printf ( " %d\n  " , n ) ; n-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; for ( i = start ; i> = 1 ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , end ; printf ( " Print all natural numbers from 1 to : " ) ; scanf ( " %d " , & end ) ; i = 1 ; while ( i < = end ) { printf ( " %d\n  " , i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 255 ; i + + ) { printf ( " ASCII value of character %c = %d\n  " , i , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , reverse = 0 ; printf ( " Enter any number to find reverse : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { reverse = ( reverse * 10 ) + ( num % 10 ) ; num / = 10 ; } printf ( " Reverse = %d " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { sum + = i ; } printf ( " Sum of first %d natural numbers = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter number to print table : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d * %d = %d\n  " , num , i , ( num * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Alphabets from a - z are : \n  " ) ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { printf ( " %c\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; printf ( " Alphabets from a - z are : \n  " ) ; for ( i = 97 ; i < = 122 ; i + + ) { printf ( " %c\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Enter any number : " ) ; scanf ( " %d " , & n ) ; printf ( " Natural numbers from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; switch ( num % 2 ) { case 0 : printf ( " Number is Even " ) ; break ; case 1 : printf ( " Number is Odd " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ? printf ( " It is ALPHABET " ) : printf ( " It is NOT ALPHABET " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; ( year %4 = = 0 & & year %100! = 0 ) ? printf ( " LEAP YEAR " ) : ( year %400 = = 0 ) ? printf ( " LEAP YEAR " ) : printf ( " COMMON YEAR " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; printf ( " %s " , ( ( year %4 = = 0 & & year %100! = 0 ) ? " LEAP YEAR " : ( year %400 = = 0 ) ? " LEAP YEAR " : " COMMON YEAR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; ( num %2 = = 0 ) ? printf ( " The number is EVEN " ) : printf ( " The number is ODD " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; printf ( " The number is %s " , ( num %2 = = 0 ? " EVEN " : " ODD " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum between %d and %d is %d " , num1 , num2 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fahrenheit ) ; celsius = ( fahrenheit - 32 ) * 5 / 9 ; printf ( " %.2f Fahrenheit = %.2f Celsius " , fahrenheit , celsius ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( num % 2 = = 0 ) { printf ( " Number is Even. " ) ; } else { printf ( " Number is Odd. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } else { printf ( " %d is maximum " , num2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) max = num1 ; else max = num2 ; printf ( " %d is maximum. " , max ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num , root ; printf ( " Enter any number to find square root : " ) ; scanf ( " %lf " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2lf = %.2lf " , num , root ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float side , area ; printf ( " Enter side of an equilateral triangle : " ) ; scanf ( " %f " , & side ) ; area = ( sqrt ( 3 ) / 4 ) * ( side * side ) ; printf ( " Area of equilateral triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two angles of triangle : " ) ; scanf ( " %d %d " , & a , & b ) ; c = 180 - ( a + b ) ; printf ( " Third angle of the triangle = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( celsius * 9 / 5 ) + 32 ; printf ( " %.2f Celsius = %.2f Fahrenheit " , celsius , fahrenheit ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d\n  " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; strlwr ( str ) ; printf ( " Lowercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter your text : " ) ; gets ( str ) ; strupr ( str ) ; printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
