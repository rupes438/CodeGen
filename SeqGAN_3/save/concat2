 #include <stdlib.h> int *a, *b; int n; #ifdef STACK_SIZE #define BLOCK_SIZE (STACK_SIZE / (sizeof (*a) + sizeof (*b))) #else #define BLOCK_SIZE 32768 #endif foo () { int i; for (i = 0; i < n; i++) a[i] = -1; for (i = 0; i < BLOCK_SIZE - 1; i++) b[i] = -1; } main () { n = BLOCK_SIZE; a = malloc (n * sizeof(*a)); b = malloc (n * sizeof(*b)); *b++ = 0; foo (); if (b[-1]) abort (); exit (0); } void _mesa_DrawPixels (int width, int height, unsigned format, unsigned type, const void * pixels) { switch (format) { case 0x1900: func1 (); break; case 0x1907: case 0x80E0: case 0x1908: case 0x80E1: case 0x8000: func2 (); break; } } char *buf; int buflen; inline int sub (int length) { if (length <= buflen) buf[length] = '\0'; return 0; } int sub2 (void) { return sub (0x7fffffff); } typedef enum { C = 1, D = 2 } B; extern void abort (void); struct S { B __attribute__ ((mode (byte))) a; B __attribute__ ((mode (byte))) b; }; void foo (struct S *x) { if (x->a != C || x->b != D) abort (); } int main (void) { struct S s; s.a = C; s.b = D; foo (&s); return 0; } #if __SIZEOF_INT__ < 4 __extension__ typedef __INT32_TYPE__ int32_t; #else typedef int int32_t; #endif #pragma pack(1) struct S { int32_t b:18; int32_t c:1; int32_t d:24; int32_t e:15; int32_t f:14; } i, j; void foo () { i.e = 0; i.b = 5; i.c = 0; i.d = -5; i.f = 5; } void bar () { j.b = 5; j.c = 0; j.d = -5; j.e = 0; j.f = 5; } int main () { foo (); bar (); asm volatile ("" : : : "memory"); if (i.b != j.b || i.c != j.c || i.d != j.d || i.e != j.e || i.f != j.f) __builtin_abort (); } struct S { int i; }; extern void bar (struct S); void foo (void) { int i = 0; bar (*(struct S *) &i); } unsigned long b; unsigned long foo (float *a, float *x) { __builtin_memcpy (a, x, sizeof (float)); return *a; } int * foo (int *x, int b) { *(x++) = 55; if (b) *(x++) = b; return x; } main() { int a[5]; memset (a, 1, sizeof (a)); if (foo(a, 0) - a != 1 || a[0] != 55 || a[1] != a[4]) abort(); memset (a, 1, sizeof (a)); if (foo(a, 2) - a != 2 || a[0] != 55 || a[1] != 2) abort(); exit (0); } int a, b, c, d; int f1 (int p1, int p2) { return p1 - p2; } void f2 (short p1, short p2) { for (;;) { if (5 < (1 ^ p2)) for (; a;) for (;;) { b = 0xE7BC92A3EDA01CD8 < (d = p2) || (0, 0); break; } if (p1) break; p2 = 5; } } void f3 (int x) { int tmp = -2L; c = f1 (90, x != 10); f2 (c, tmp); } #define LIM1(x) x##0: x##1: x##2: x##3: x##4: x##5: x##6: x##7: x##8: x##9: #define LIM2(x) LIM1(x##0) LIM1(x##1) LIM1(x##2) LIM1(x##3) LIM1(x##4) \ LIM1(x##5) LIM1(x##6) LIM1(x##7) LIM1(x##8) LIM1(x##9) #define LIM3(x) LIM2(x##0) LIM2(x##1) LIM2(x##2) LIM2(x##3) LIM2(x##4) \ LIM2(x##5) LIM2(x##6) LIM2(x##7) LIM2(x##8) LIM2(x##9) #define LIM4(x) LIM3(x##0) LIM3(x##1) LIM3(x##2) LIM3(x##3) LIM3(x##4) \ LIM3(x##5) LIM3(x##6) LIM3(x##7) LIM3(x##8) LIM3(x##9) #define LIM5(x) LIM4(x##0) LIM4(x##1) LIM4(x##2) LIM4(x##3) LIM4(x##4) \ LIM4(x##5) LIM4(x##6) LIM4(x##7) LIM4(x##8) LIM4(x##9) #define LIM6(x) LIM5(x##0) LIM5(x##1) LIM5(x##2) LIM5(x##3) LIM5(x##4) \ LIM5(x##5) LIM5(x##6) LIM5(x##7) LIM5(x##8) LIM5(x##9) #define LIM7(x) LIM6(x##0) LIM6(x##1) LIM6(x##2) LIM6(x##3) LIM6(x##4) \ LIM6(x##5) LIM6(x##6) LIM6(x##7) LIM6(x##8) LIM6(x##9) void q19_func (long i) { switch (i) { LIM5 (case 1) break; } } #include <stdlib.h> typedef signed short SInt16; typedef struct { SInt16 minx; SInt16 maxx; SInt16 miny; SInt16 maxy; } IOGBounds; int expectedwidth = 50; unsigned int *global_vramPtr = (unsigned int *)0xa000; IOGBounds global_bounds = { 100, 150, 100, 150 }; IOGBounds global_saveRect = { 75, 175, 75, 175 }; main() { unsigned int *vramPtr; int width; IOGBounds saveRect = global_saveRect; IOGBounds bounds = global_bounds; if (saveRect.minx < bounds.minx) saveRect.minx = bounds.minx; if (saveRect.maxx > bounds.maxx) saveRect.maxx = bounds.maxx; vramPtr = global_vramPtr + (saveRect.miny - bounds.miny) ; width = saveRect.maxx - saveRect.minx; if (width != expectedwidth) abort (); exit (0); } int f(char); int init_emit_regs (int mode) { f(mode == 4 || mode == 13); } int var = 0; g () { var = 1; } f () { int f2 = 0; if (f2 == 0) ; g (); } main () { f (); if (var != 1) abort (); exit (0); } int sum; void g (int i) { sum += i; } void f(int j) { int i; for (i = 0; i < 9; i++) { j++; g (j); j = 9; } } int main () { f (0); if (sum != 81) abort (); exit (0); } static void f() { long long a[2]; int i; if (g()) if (h()) ; *a |= (long long)i << 65 ; } m32 (a) int *a; { a[1] = a[0]; } m16 (a) short *a; { a[1] = a[0]; } m8 (a) char *a; { a[1] = a[0]; } float d; int e, f; void foo (void) { struct { float u, v; } a = {0.0, 0.0}; float b; int c; c = e; if (c == 0) c = f; b = d; if (a.v < b) a.v = b; } #include "pr71626-1.c" typedef void *(*T)(void); f1 () { ((T) 0)(); } f2 () { ((T) 1000)(); } f3 () { ((T) 10000000)(); } f4 (r) { ((T) r)(); } f5 () { int (*r)() = f3; ((T) r)(); } #include "lib/memset.c" typedef int gboolean; typedef struct{ gboolean names : 1; gboolean types : 1; } ParamOptions; int p_param(ParamOptions* o){ return o->types && o->names; } foo (short a, int *p, short *s) { int i; for (i = 10; i >= 0; i--) { a = (short) bar (); p[i] = a; s[i] = a; } } struct s { int i[18]; char f; char b[2]; }; struct s s1; int main() { struct s s2; s2.b[0] = 100; __builtin_memcpy(&s2, &s1, ((unsigned int) &((struct s *)0)->b)); if (s2.b[0] != 100) abort(); exit(0); } #include <stdlib.h> #include <string.h> char *list[] = { "*", "e" }; static int bar (const char *fmt) { return (strchr (fmt, '*') != 0); } static void foo () { int i; for (i = 0; i < sizeof (list) / sizeof (*list); i++) { const char *fmt = list[i]; if (bar (fmt)) continue; if (i == 0) abort (); else exit (0); } } int main () { foo (); } typedef union { long align; struct { short h, l; } b; } T; f (x) int x; { int num = 0; T reg; reg.b.l = x; while ((reg.b.l & 1) == 0) { num++; reg.b.l >>= 1; } return num; } main () { if (f (2) != 1) abort (); exit (0); } double x(){int x1,x2;double v; if(((long)(x1-x2))<1)return -1.0;v=t(v);v=y(1,v>0.0?(int)v:((int)v-1));} __attribute__ ((noinline)) double direct(int x, ...) { return x*x; } __attribute__ ((noinline)) double broken(double (*indirect)(int x, ...), int v) { return indirect(v); } int main () { double d1, d2; int i = 2; d1 = broken (direct, i); if (d1 != i*i) { __builtin_abort (); } return 0; } #ifdef STACK_SIZE #define SIZE STACK_SIZE / 8 #else #define SIZE 65536 #endif memtst (int *p, int a) { do { if (p[a] == 1) break; } while (--a); } main () { int a[SIZE]; int i; bzero (a, SIZE * 4); for (i = 0; i < 100; i++) { memtst (a, SIZE); } } f (void (*func) ()) { func (); } main () { void t0 () { } void t1 () { f (t0); } void t2 () { t1 (); } t1 (); t1 (); t2 (); exit (0); } extern void abort (void); typedef unsigned long HARD_REG_SET[2]; HARD_REG_SET reg_class_contents[2]; struct du_chain { struct du_chain *next_use; int cl; }; void __attribute__((noinline)) merge_overlapping_regs (HARD_REG_SET *p) { if ((*p)[0] != -1 || (*p)[1] != -1) abort (); } void __attribute__((noinline)) regrename_optimize (struct du_chain *this) { HARD_REG_SET this_unavailable; unsigned long *scan_fp_; int n_uses; struct du_chain *last; this_unavailable[0] = 0; this_unavailable[1] = 0; n_uses = 0; for (last = this; last->next_use; last = last->next_use) { scan_fp_ = reg_class_contents[last->cl]; n_uses++; this_unavailable[0] |= ~ scan_fp_[0]; this_unavailable[1] |= ~ scan_fp_[1]; } if (n_uses < 1) return; scan_fp_ = reg_class_contents[last->cl]; this_unavailable[0] |= ~ scan_fp_[0]; this_unavailable[1] |= ~ scan_fp_[1]; merge_overlapping_regs (&this_unavailable); } int main() { struct du_chain du1 = { 0, 0 }; struct du_chain du0 = { &du1, 1 }; reg_class_contents[0][0] = -1; reg_class_contents[0][1] = -1; reg_class_contents[1][0] = 0; reg_class_contents[1][1] = 0; regrename_optimize (&du0); return 0; } typedef unsigned char t;int i,j; t*f(t*p){t c;c=*p++;i=((c&2)?1:0);j=(c&7)+1;return p;} main(){t*p0="ab",*p1;p1=f(p0);if(p0+1!=p1)abort();exit(0);} unsigned calc_mp(unsigned mod) { unsigned a,b,c; c=-1; a=c/mod; b=0-a*mod; if (b > mod) { a += 1; b-=mod; } return b; } int main(int argc, char *argv[]) { unsigned x = 1234; unsigned y = calc_mp(x); if ((sizeof (y) == 4 && y != 680) || (sizeof (y) == 2 && y != 134)) abort (); exit (0); } typedef struct { short v, h; } S; S a; f (S pnt) { S mpnt, mtp; (&pnt)->v -= 1; mpnt = pnt; mtp = a; if (mtp.v != mpnt.v) { S tpnt; tpnt = mtp; mtp = mpnt; mpnt = tpnt; } } struct s { int f; }; f (w, v0, v1, v2, v3) struct s *w; { g (v0 ? 1 : w->f, v1 ? v3 : v2); } long a; void foo (void) { for (;; a--) if ((int) a) break; } extern int f(void); extern int g(int); static char buf[512]; void h(int l) { while (l) { char *op = buf; if (f() == 0) break; if (g(op - buf + 1)) break; } } x(a){struct{int p[a],i;}l;l.i;} int f (int **, int *, int *, int **, int **) __attribute__ ((__noinline__)); int f (int **ipp, int *i1p, int *i2p, int **i3, int **i4) { **ipp = *i1p; *ipp = i2p; *i3 = *i4; **ipp = 99; return 3; } extern void exit (int); extern void abort (void); int main (void) { int i = 42, i1 = 66, i2 = 1, i3 = -1, i4 = 55; int *ip = &i; int *i3p = &i3; int *i4p = &i4; f (&ip, &i1, &i2, &i3p, &i4p); if (i != 66 || ip != &i2 || i2 != 99 || i3 != -1 || i3p != i4p || i4 != 55) abort (); exit (0); } foo (a) double a; { return -a; } struct A { void *a; unsigned int b, c, d; }; struct B { struct A *e; }; void bar (struct A *); void baz (struct A *); static inline unsigned int inl (unsigned int v, unsigned char w, unsigned char x, unsigned char y, unsigned char z) { switch (v) { case 2: return ((w & 0xf8) << 8) | ((x & 0xfc) << 3) | ((y & 0xf8) >> 3); case 4: return (z << 24) | (w << 16) | (x << 8) | y; default: return 0; } } void foo (struct B *x, int y, const float *z) { struct A *a = x->e; if (y) { if (x->e->a) bar (x->e); } else { unsigned char c[4]; unsigned int b; c[0] = z[0]; c[1] = z[1]; c[2] = z[2]; c[3] = z[3]; b = inl (a->b, c[0], c[1], c[2], c[3] ); if (a->a) bar (a); else baz (a); a->c = b; } } extern void abort (void); struct A { int i; int j; }; struct B { struct A *a; struct A *b; }; struct C { struct B *c; struct A *d; }; struct C e = { &(struct B) { &(struct A) { 1, 2 }, &(struct A) { 3, 4 } }, &(struct A) { 5, 6 } }; int main (void) { if (e.c->a->i != 1 || e.c->a->j != 2) abort (); if (e.c->b->i != 3 || e.c->b->j != 4) abort (); if (e.d->i != 5 || e.d->j != 6) abort (); return 0; } long long x=0;y(){x=0;} extern void *bar (void); int foo (unsigned int *p, unsigned int *q) { const void *r = bar (); if (r >= (const void *) *p && r < (const void *) *q) return 1; return 0; } typedef struct { short f:3, g:3, h:10; } small; struct { int i; small s[10]; } x; main () { int i; for (i = 0; i < 10; i++) x.s[i].f = 0; exit (0); } char line[4] = { '1', '9', '9', '\0' }; int main() { char *ptr = line + 3; while ((*--ptr += 1) > '9') *ptr = '0'; if (line[0] != '2' || line[1] != '0' || line[2] != '0') abort(); return 0; } #pragma pack(1) struct S { int f0:15; int f1:29; }; int e = 1, i; static struct S d[6]; int main (void) { if (e) { d[i].f0 = 1; d[i].f1 = 1; } if (d[0].f1 != 1) __builtin_abort (); return 0; } extern __attribute__ ((__noreturn__)) void exit(int); extern __attribute__ ((__noreturn__)) void abort(void); __attribute__ ((__noinline__)) int add512(int a, int *b) { int c = a + 512; if (c != 0) *b = a; return c; } __attribute__ ((__noinline__)) int add513(int a, int *b) { int c = a + 513; if (c == 0) *b = a; return c; } int main(void) { int b0 = -1; int b1 = -1; if (add512(-512, &b0) != 0 || b0 != -1 || add513(-513, &b1) != 0 || b1 != -513) abort (); exit (0); } extern void abort (void); int bar (int, int) __attribute__((noinline)); int bar (int a, int b) { if (b != 1) abort (); } void foo(int, int) __attribute__((noinline)); void foo (int e, int n) { int i, bb2, bb5; if (e > 0) e = -e; for (i = 0; i < n; i++) { if (e >= 0) { bb2 = 0; bb5 = 0; } else { bb5 = -e; bb2 = bb5; } bar (bb5, bb2); } } int main(void) { foo (1, 1); return 0; } extern void abort (void); int foo (int x) { return ((x << 8) & 65535) | 255; } int main (void) { if (foo (0x32) != 0x32ff || foo (0x174) != 0x74ff) abort (); return 0; } int foo(int bar) { return (&bar)[-1]; } int f(unsigned short usVlanID) __attribute__((noinline,noclone)); int f(unsigned short usVlanID) { unsigned int uiVlanID = 0xffffffff; int i; if ((unsigned short)0xffff != usVlanID) uiVlanID = (unsigned int)usVlanID; return uiVlanID; } int main(void) { if (f(1) != 1) __builtin_abort (); if (f(0xffff) != -1) __builtin_abort (); return 0; } extern void abort(void); extern void exit(int); struct baz { int a, b, c, d, e; }; void bar(struct baz *x, int f, int g, int h, int i, int j) { if (x->a != 1 || x->b != 2 || x->c != 3 || x->d != 4 || x->e != 5 || f != 6 || g != 7 || h != 8 || i != 9 || j != 10) abort(); } void foo(char *z, struct baz x, char *y) { bar(&x,6,7,8,9,10); } int main() { struct baz x; x.a = 1; x.b = 2; x.c = 3; x.d = 4; x.e = 5; foo((char *)0,x,(char *)0); exit(0); } extern void abort(void); extern int inside_main; typedef __SIZE_TYPE__ size_t; __attribute__ ((__noinline__)) char * strncpy(char *s1, const char *s2, size_t n) { char *dest = s1; #ifdef __OPTIMIZE__ if (inside_main) abort(); #endif for (; *s2 && n; n--) *s1++ = *s2++; while (n--) *s1++ = 0; return dest; } #include <string.h> void foo (int *BM_tab, int j) { int *BM_tab_base; BM_tab_base = BM_tab; BM_tab += 0400; while (BM_tab_base != BM_tab) { *--BM_tab = j; *--BM_tab = j; *--BM_tab = j; *--BM_tab = j; } } int main () { int BM_tab[0400]; memset (BM_tab, 0, sizeof (BM_tab)); foo (BM_tab, 6); if (BM_tab[0] != 6) abort (); return 0; } typedef int *loop_p; typedef struct VEC_loop_p_base { unsigned num; loop_p vec[1]; } VEC_loop_p_base; __inline__ int VEC_loop_p_base_iterate (const VEC_loop_p_base * vec_, unsigned ix_, loop_p * ptr) { if (vec_ && ix_ < vec_->num) { *ptr = vec_->vec[ix_]; return 1; } else { return 0; } } typedef struct VEC_loop_p_heap { VEC_loop_p_base base; } VEC_loop_p_heap; static __inline__ int am_vector_index_for_loop (VEC_loop_p_heap * loop_nest, int loop_num) { int i; loop_p l; for (i = 0; VEC_loop_p_base_iterate ((loop_nest) ? &(loop_nest)->base : 0, i, &(l)); i++) if (l == loop_num) return i; __builtin_unreachable (); } unsigned char build_access_matrix (unsigned max) { unsigned i; for (i = 0; i < max; i++) { if (am_vector_index_for_loop (foo (), 0)) return 0; } } struct d_info { int **subs; }; static int * d_substitution (struct d_info *di, int prefix) { char c; c='_'; if (c == '_') { unsigned int id; if (c != '_') { do { unsigned int new_id; if (new_id < id) return 0; id = new_id; } while (c != '_'); } return di->subs[id]; } else { int verbose; int code; int simple_len; code=0; simple_len=0; verbose=0; if (! code && prefix) { char peek; peek='A'; if (peek == 'C' || peek == 'D') verbose = 1; } if (verbose) { code = simple_len; } } } typedef __SIZE_TYPE__ size_t; extern void *memcpy (void *__restrict, const void *__restrict, size_t); extern void abort (void); extern void exit (int); typedef struct t { unsigned a : 16; unsigned b : 8; unsigned c : 8; long d[4]; } *T; typedef struct { long r[3]; } U; T bar (U, unsigned int); T foo (T x) { U d, u; memcpy (&u, &x->d[1], sizeof u); d = u; return bar (d, x->b); } T baz (T x) { U d, u; d.r[0] = 0x123456789; d.r[1] = 0xfedcba987; d.r[2] = 0xabcdef123; memcpy (&u, &x->d[1], sizeof u); d = u; return bar (d, x->b); } T bar (U d, unsigned int m) { if (d.r[0] != 21 || d.r[1] != 22 || d.r[2] != 23) abort (); return 0; } struct t t = { 26, 0, 0, { 0, 21, 22, 23 }}; int main (void) { baz (&t); foo (&t); exit (0); } int a, b; unsigned int c; int main () { int d = b; b = ~(~a + (~d | b)); a = ~(~c >> b); c = a % b; return 0; } extern void abort (void); extern int inside_main; __attribute__ ((__noinline__)) char * strchr (const char *s, int c) { #ifdef __OPTIMIZE__ if (inside_main) abort (); #endif for (;;) { if (*s == c) return (char *) s; if (*s == 0) return 0; s++; } } __attribute__ ((__noinline__)) char * index (const char *s, int c) { return strchr (s, c); } inline f(x){switch(x){case 6:case 4:case 3:case 1:;}return x;} g(){f(sizeof("xxxxxx"));} int a, b, c, *d = &b, g, h, i; unsigned char e; char f; int main () { while (a) { for (a = 0; a; a++) for (; c; c++) ; if (i) break; } char j = c, k = -1, l; l = g = j >> h; f = l == 0 ? k : k % l; e = 0 ? 0 : f; *d = e; if (b != 255) __builtin_abort (); return 0; } union u{int i;float f;}; x(p)int p;{union u x;for(x.i=0;x.i<p;x.i++)if(x.f>(float)3.0)break;} extern void abort (void); unsigned long long jmp_buf[5]; __attribute__((noinline, noclone)) void baz (void) { __builtin_longjmp (&jmp_buf, 1); } void bar (void) { baz (); } __attribute__((noinline, noclone)) int foo (int x) { int a = 0; if (__builtin_setjmp (&jmp_buf) == 0) { while (1) { a = 1; } } else { if (a == 0) return 0; else return x; } } int main () { if (foo (1) == 0) abort (); return 0; } int f1 (int a, int b) { int i, j, k; switch (b) { case (-9): j = 4; break; case (-10): j = 10; break; case (-8): j = 15; break; } i = f2 (f3 (b == (-9) ? k : a), j); return 0; } struct foo { char a; }; foo () { struct foo bar[3]; bar[0].a = '0'; bar[1].a = '1'; bar[2].a = '2'; foof (bar); } struct tree_common { int uid; unsigned int code : 8; unsigned int code2 : 8; unsigned external_attr : 1; unsigned public_attr : 1; }; static int duplicate_decls (x) register struct tree_common *x; { if (x->external_attr) if (x->code) if (x->code2) x->public_attr = 1; } struct s { char p[2]; }; static struct s v; const int o0 = (int) ((void *) &v.p[0] - (void *) &v) + 0U; const int o1 = (int) ((void *) &v.p[0] - (void *) &v) + 1U; #if defined(STACK_SIZE) && (STACK_SIZE < 65536) # define HISTO_SIZE 9 #else # define HISTO_SIZE 36 #endif extern int N; extern int nrows; extern int or_num_angles; typedef struct { double value; int count; }Histo; Histo add_histo[10][2][HISTO_SIZE][HISTO_SIZE]; void cmd_connection_statistics( ) { int i,j,k,m; for(i=0; i<nrows; i++){ for(j=0; j< 2; j++) for(k=0; k< or_num_angles; k++) ; } } void foo (int unit) { int i; for (i = 0; unit; i++, unit--) { if (i >= 0) { int j = i; while (j) j--; } } } void bar (const unsigned short *); void foo (void) { static const unsigned short array[] = (const unsigned short []) { 0x0D2B }; const unsigned short *ptr = array; bar (ptr); } struct foo { unsigned : 12; unsigned field : 4; } foo; unsigned oldfoo; int bar (unsigned k) { oldfoo = foo.field; foo.field = k; if (k) return 1; return 2; } main () { if (bar (1U) != 1) abort (); exit (0); } void rc (int cx) { int mq; if (mq == 0 && (cx / 0) != 0) for (;;) { } } extern void abort (); int __attribute__ ((__noinline__)) foo (unsigned int x) { if (! (x == 4 || x == 6) || (x == 2 || x == 6)) return 1; return -1; } int main () { int i; for (i = -10; i < 10; i++) if (foo (i) != 1 - 2 * (i == 4)) abort (); return 0; } int main () { void *label = &&out; int i = 0; void test (void) { label = &&out2; goto *label; out2:; i++; } goto *label; out: i += 2; test (); if (i != 3) __builtin_abort (); return 0; } typedef signed char int8_t; typedef short int16_t; typedef unsigned char uint8_t; typedef unsigned int uint32_t; union unaligned_32 {uint32_t l;} __attribute__((packed)) __attribute__((may_alias)); static inline uint32_t NEG_USR32(uint32_t a, int8_t s){return a << (32 - s);} typedef struct GetBitContext { const uint8_t *buffer, *buffer_end; int index;}GetBitContext; typedef struct VLC {int16_t (*table)[2];} VLC; static __attribute__((always_inline)) inline int get_vlc2(GetBitContext *s, int16_t (*table)[2], int bits, int max_depth) { unsigned int re_index= (s)->index; int re_cache= 0; { int n, nb_bits; unsigned int index; index= NEG_USR32(re_cache, bits); n = table[index][1]; if(max_depth > 1 && n < 0){ re_cache= bswap_32((((const union unaligned_32 *) (((const uint8_t *)(s)->buffer)+(re_index>>3)))->l)) << (re_index&0x07); } } } typedef struct HYuvContext{GetBitContext gb; int decorrelate; int bitstream_bpp; uint8_t *temp[3]; VLC vlc[6];} HYuvContext; static __attribute__((always_inline)) inline void decode_bgr_1(HYuvContext *s, int count, int decorrelate, int alpha){ int i; int code = get_vlc2(&s->gb, s->vlc[3].table, 11, 1); if(code != -1){ s->temp[0][4*i+0] = get_vlc2(&s->gb, s->vlc[0].table, 11, 3); s->temp[0][4*i+1] = get_vlc2(&s->gb, s->vlc[1].table, 11, 3); s->temp[0][4*i+2] = get_vlc2(&s->gb, s->vlc[2].table, 11, 3); } } void decode_bgr_bitstream(HYuvContext *s, int count){ if(s->decorrelate){ if(s->bitstream_bpp==24) decode_bgr_1(s, count, 1, 0); else decode_bgr_1(s, count, 1, 1); } } struct s { int f[4]; }; int foo (struct s s, int x1, int x2, int x3, int x4, int x5, int x6, int x7) { return s.f[3] + x7; } int main () { struct s s = { 1, 2, 3, 4 }; if (foo (s, 100, 200, 300, 400, 500, 600, 700) != 704) abort (); exit (0); } int baz(int k2) { int i, j, *p, k = 1, k1 = 0; if (k2) p = &j; else p = &i; if (k1) *p = 0 , p = &k; *p = 1; return k; } typedef unsigned uint; inline g (uint *s, uint *d, uint c) { while (c != 0) { *--d = *--s; c--; } } f (uint *p1, uint c, uint *p2) { while (c > 0 && *p1 == 0) { p1++; c--; } if (c == 0) return 1; g (p2, p1, c); } void abort (void) __attribute__ ((noreturn)); void foo (char *d, unsigned long int n) { if (d + n > d) abort (); } foo (a, b, c, d, e, f, g, h, i) { return foo () + i; } typedef __SIZE_TYPE__ size_t; extern void dont_optimize_away(size_t); void crashGcc(char*a) { size_t b=(size_t)a - ((size_t)a & 1); size_t c=(size_t)a - (b & (size_t)a); dont_optimize_away(b+c); } #define STACK_REQUIREMENT (100000 * 4 + 1024) #if defined (STACK_SIZE) && STACK_SIZE < STACK_REQUIREMENT main () { exit (0); } #else g(){} f() { int i; float a[100000]; for (i = 0; i < 1; i++) { g(1.0, 1.0 + i / 2.0 * 3.0); g(2.0, 1.0 + i / 2.0 * 3.0); } } main () { f(); exit(0); } #endif foo (a) { int b = a + 1; int c = (short) a; if (b) return b; return 1; } #undef __vector #define __vector __attribute__((vector_size(16) )) typedef __vector signed char qword; typedef __vector unsigned int VU32; extern short g[192 +16]; void f(qword); void f1 (unsigned ctr) { VU32 pin; pin = (VU32){(__SIZE_TYPE__)&g[16]}; do { f((qword)pin); ctr--; } while(ctr); } void f (long *limit, long *base, long minLen, long maxLen) __attribute__ ((__noinline__)); void f (long *limit, long *base, long minLen, long maxLen) { long i; long vec; vec = 0; for (i = minLen; i <= maxLen; i++) { vec += (base[i+1] - base[i]); limit[i] = vec-1; } } extern void abort (void); extern void exit (int); long b[] = {1, 5, 11, 23}; int main (void) { long l[3]; f (l, b, 0, 2); if (l[0] != 3 || l[1] != 9 || l[2] != 21) abort (); exit (0); } extern void abort (void); struct S { volatile int a; int b, c, d, e; } f; static struct S g, h; int i = 1; char foo (void) { return i; } static struct S bar (void) { if (foo ()) return f; return g; } int main () { h = bar (); f.b = 1; if (h.b != 0) abort (); return 0; } struct VEC_char_base { unsigned num; unsigned alloc; short vec[1]; }; short __attribute__((noinline)) foo (struct VEC_char_base *p, int i) { short *q; p->vec[i] = 0; q = &p->vec[8]; *q = 1; return p->vec[i]; } extern void abort (void); extern void *malloc (__SIZE_TYPE__); int main() { struct VEC_char_base *p = malloc (sizeof (struct VEC_char_base) + 256); if (foo (p, 8) != 1) abort (); return 0; } struct barstruct { char const* some_string; } x; extern void abort (void); void __attribute__((noinline)) foo(void) { if (!x.some_string) abort (); } void baz(int b) { struct barstruct bar; struct barstruct* barptr; if (b) barptr = &bar; else { barptr = &x + 1; barptr = barptr - 1; } barptr->some_string = "Everything OK"; foo(); barptr->some_string = "Everything OK"; } int main() { x.some_string = (void *)0; baz(0); if (!x.some_string) abort (); return 0; } #include <stdio.h> #include <stdlib.h> int main (void) { #define test(ret, args...) \ fprintf (stdout, args); \ if (fprintf (stdout, args) != ret) \ abort (); test (5, "hello"); test (6, "hello\n"); test (1, "a"); test (0, ""); test (5, "%s", "hello"); test (6, "%s", "hello\n"); test (1, "%s", "a"); test (0, "%s", ""); test (1, "%c", 'x'); test (7, "%s\n", "hello\n"); test (2, "%d\n", 0); return 0; } int a, b, *c = &a; unsigned short d; int main () { unsigned int e = a; *c = 1; if (!b) { d = e; *c = d | e; } if (a != 0) __builtin_abort (); return 0; } union y { int a; unsigned short b; }; extern void bar (unsigned short u, union y v); void foo (int check) { union y x; if (check != 0) x.b = 1; else x.b = 2; bar (x.b, x); } void gl_fog_index_pixels(float f, unsigned int n, unsigned int index[]) { unsigned int i; for (i=0; i<n; i++) index[i] = (unsigned int) ((float) index[i] + (1.0F-f)); } extern void abort (void); typedef __SIZE_TYPE__ size_t; extern void *memmove (void *, const void *, size_t); extern void bcopy (const void *, void *, size_t); extern int memcmp (const void *, const void *, size_t); char p[32] = "abcdefg"; char *q = p + 4; void main_test (void) { if (memmove (p + 2, p + 3, 1) != p + 2 || memcmp (p, "abddefg", 8)) abort (); if (memmove (p + 1, p + 1, 1) != p + 1 || memcmp (p, "abddefg", 8)) abort (); if (memmove (q, p + 4, 1) != p + 4 || memcmp (p, "abddefg", 8)) abort (); bcopy (p + 5, p + 6, 1); if (memcmp (p, "abddeff", 8)) abort (); bcopy (p + 1, p + 1, 1); if (memcmp (p, "abddeff", 8)) abort (); bcopy (q, p + 4, 1); if (memcmp (p, "abddeff", 8)) abort (); } extern void abort (void); int foo (int i) { return -2 * __builtin_abs(i - 2); } int main() { if (foo(1) != -2 || foo(3) != -2) abort (); return 0; } void abort (); void exit (int); void test(int x, int y) { if (x == y) abort (); } void foo(int x, int y) { if (x == y) goto a; else { a:; if (x == y) goto b; else { b:; if (x != y) test (x, y); } } } int main(void) { foo (0, 0); exit (0); } #include <stdbool.h> bool x; unsigned char y; void fn (void) { x = y & 0x1 ? 1 : 0; } extern void abort(void); extern void exit(int); int bar(void); int baz(void); struct foo { struct foo *next; }; struct foo *test(struct foo *node) { while (node) { if (bar() && !baz()) break; node = node->next; } return node; } int bar (void) { return 0; } int baz (void) { return 0; } int main(void) { struct foo a, b, *c; a.next = &b; b.next = (struct foo *)0; c = test(&a); if (c) abort(); exit (0); } extern void _text; static unsigned long x = (unsigned long) &_text - 0x10000000L - 1; typedef struct _foo foo; extern foo bar; struct _foo { int a; }; int tst[__alignof__ (bar) >= __alignof__ (int) ? 1 : -1]; extern void abort (void); short a = 1, f; int b, c, d, *g = &b, h, i, j; unsigned int e; static int foo (char p) { int k; for (c = 0; c < 2; c++) { i = (j = 0) || p; k = i * p; if (e < k) { short *l = &f; a = d && h; *l = 0; } } return 0; } int main () { *g = foo (a); if (a != 0) abort (); return 0; } /* { dg-options "-fgnu89-inline" } */ extern void abort (); typedef struct { int i, dummy; } A; inline A foo (const A* p, const A* q) { return (A){p->i+q->i}; } void bar (A* __restrict__ p) { *p=foo(p,p); if (p->i!=2) abort(); } int main () { A a={1}; bar(&a); return 0; } static double pzero = +0.0; static double nzero = -0.0; static double pinf = +1.0 / 0.0; static double ninf = -1.0 / 0.0; static double nan = 0.0 / 0.0; void expect (double value, double expected) { { abort (); } else if (value != value) else if (memcmp ((void *)&value, (void *)&expected, sizeof (double)) != 0) } main () { expect (pzero + pzero, pzero); expect (pzero + nzero, pzero); expect (nzero + pzero, pzero); expect (nzero + nzero, nzero); expect (pzero - pzero, pzero); expect (pzero - nzero, pzero); expect (nzero - pzero, nzero); expect (nzero - nzero, pzero); expect (pzero * pzero, pzero); expect (pzero * nzero, nzero); expect (nzero * pzero, nzero); expect (nzero * nzero, pzero); expect (+1.00 * pzero, pzero); expect (-1.00 * pzero, nzero); expect (+1.00 * nzero, nzero); expect (-1.00 * nzero, pzero); #ifndef _TMS320C6700 expect (pzero / pzero, nan); expect (pzero / nzero, nan); expect (nzero / pzero, nan); expect (nzero / nzero, nan); expect (+1.00 / pzero, pinf); expect (-1.00 / pzero, ninf); expect (+1.00 / nzero, ninf); expect (-1.00 / nzero, pinf); #endif exit (0); } #include <string.h> #include <stdio.h> void a(void *x,int y) { if (y != 1234) abort (); } int main() { a(strcpy(alloca(100),"abc"),1234); return 0; } typedef unsigned short (FUNC_P) (void *, unsigned char *, unsigned short); void crashIt(int id, FUNC_P *func, unsigned char *funcparm) { unsigned char buff[5], reverse[4]; unsigned char *bp = buff; unsigned char *rp = reverse; unsigned short int count = 0; unsigned short cnt; while (id > 0) { *rp++ = (unsigned char) (id & 0x7F); id >>= 7; count++; } cnt = count + 1; while ((count--) > 1) { *bp++ = (unsigned char)(*(--rp) | 0x80); } *bp++ = *(--rp); (void)(*func)(funcparm, buff, cnt); } typedef union { char a2[8]; }aun; void abort (void); int main(void) { aun a = {{0}}; if (a.a2[2] != 0) abort (); return 0; } extern void abort (void); static union { char buf[12 * sizeof (long long)]; } u; int main () { int off, len, i; char *p, *q; for (off = 0; off < (sizeof (long long)); off++) for (len = 1; len < (10 * sizeof (long long)); len++) { for (i = 0; i < (12 * sizeof (long long)); i++) u.buf[i] = 'a'; p = (__extension__ (__builtin_constant_p ('\0') && ('\0') == '\0' ? ({void *__s = (u.buf + off); __s;}) : __builtin_memset (u.buf + off, '\0', len))); if (p != u.buf + off) abort (); for (i = 0; i < off; i++, q++) if (*q != 'a') abort (); } return 0; } extern void exit (int); extern void abort (void); float rintf (float x) { static const float TWO23 = 8388608.0; if (__builtin_fabs (x) < TWO23) { if (x > 0.0) { x += TWO23; x -= TWO23; } else if (x < 0.0) { x = TWO23 - x; x = -(x - TWO23); } } return x; } int main (void) { if (rintf (-1.5) != -2.0) abort (); exit (0); } int main () { fputs (""); fputs_unlocked (""); return 0; } char *p; int x; static inline void f1 (int n) { asm volatile ("" : "=m" (*(struct { char x[n]; } *) p)); } static inline void f2 (void) { x ? f1 (1) : f1 (2); } static inline void f3 (void) { f2 (); } void f4 (void) { f3 (); } void *memset (void *, int, unsigned long); typedef struct bfd_section { unsigned long size; unsigned char *contents; } asection; int _bfd_mips_elf_finish_dynamic_sections (asection *s) { long long dummy_offset; dummy_offset = s->size - 16; memset (s->contents + dummy_offset, 0, 16); return 1; } static int ap(int i); static void testit(void){ int ir[4] = {0,1,2,3}; int ix,n,m; n=1; m=3; for (ix=1;ix<=4;ix++) { if (n == 1) m = 4; else m = n-1; ap(ir[n-1]); n = m; } } static int t = 0; static int a[4]; static int ap(int i){ if (t > 3) abort(); a[t++] = i; return 1; } int main(void) { testit(); if (a[0] != 0) abort(); if (a[1] != 3) abort(); if (a[2] != 2) abort(); if (a[3] != 1) abort(); exit(0); } long f1(long a){return a&0xff000000L;} long f2 (long a){return a&~0xff000000L;} long f3(long a){return a&0x000000ffL;} long f4(long a){return a&~0x000000ffL;} long f5(long a){return a&0x0000ffffL;} long f6(long a){return a&~0x0000ffffL;} main () { long a = 0x89ABCDEF; if (f1(a)!=0x89000000L|| f2(a)!=0x00ABCDEFL|| f3(a)!=0x000000EFL|| f4(a)!=0x89ABCD00L|| f5(a)!=0x0000CDEFL|| f6(a)!=0x89AB0000L) abort(); exit(0); } void fn_4parms (unsigned char a, long *b, long *c, unsigned int *d) { if (*b != 1 || *c != 2 || *d != 3) abort (); } int main () { unsigned char a = 0; unsigned long b = 1, c = 2; unsigned int d = 3; fn_4parms (a, &b, &c, &d); return 0; } static void compare (long long foo) { if (foo < 4294967297LL) abort(); } int main(void) { compare (8589934591LL); exit (0); } char *f(char *x, int flag) { char *ret = (char*)0; if( x > (char*)1 ) { if(x) return (char*)0; } else { if( flag & 1 ) ret = (char*)1; flag |= 2; } return ret; } extern void abort (void); typedef struct { long r[(19 + sizeof (long))/(sizeof (long))]; } realvaluetype; typedef void *tree; static realvaluetype real_value_from_int_cst (tree x, tree y) { realvaluetype r; int i; for (i = 0; i < sizeof(r.r)/sizeof(long); ++i) r.r[i] = -1; return r; } struct brfic_args { tree type; tree i; realvaluetype d; }; static void build_real_from_int_cst_1 (data) void * data; { struct brfic_args *args = (struct brfic_args *) data; args->d = real_value_from_int_cst (args->type, args->i); } int main() { struct brfic_args args; __builtin_memset (&args, 0, sizeof(args)); build_real_from_int_cst_1 (&args); if (args.d.r[0] == 0) abort (); return 0; } #if __CHAR_BIT__ == 8 && __SIZEOF_INT__ == 4 && __SIZEOF_LONG_LONG__ == 8 __attribute__((noinline, noclone)) unsigned int foo (int x) { unsigned long long y = -1ULL >> x; return (unsigned int) y >> 31; } #endif int main () { #if __CHAR_BIT__ == 8 && __SIZEOF_INT__ == 4 && __SIZEOF_LONG_LONG__ == 8 if (foo (15) != 1 || foo (32) != 1 || foo (33) != 0) __builtin_abort (); #endif return 0; } static int foo (int si1, int si2) { return si1 > 0 && si2 > 0 && si1 > -si2 || si1 < 0 && si2 < 0 && si1 < -si2 ? : si1 + si2; } struct S0 { unsigned short f1; }; int g_4; struct S0 g_54 = { 3428 }; int func_21 (int * p_22, int * const int32p_24, unsigned p_25, const int * p_26); void int324 (unsigned p_15, int * p_16, int * p_17, int * p_18) { if (foo (g_4, func_21 (p_18, &g_4, 0, 0))) { for (g_54.f1; g_54.f1; g_54.f1 += 1) { } } } int func_21 (int * p_22, int * const int32p_24, unsigned p_25, const int * p_26) { for (0; 1; p_25 += 1) lbl_29:if (p_25) goto lbl_28; lbl_28:for (p_25 = 0; p_25 < 9; p_25 += 1) if (p_25) goto lbl_29; unsigned short l_53; for (0; l_53; l_53 = foo) { } return 0; } #include <string.h> #define TESTSIZE 80 char src[TESTSIZE] __attribute__ ((aligned)); char dst[TESTSIZE] __attribute__ ((aligned)); void check (char *test, char *match, int n) { if (memcmp (test, match, n)) abort (); } #define TN(n) \ { memset (dst, 0, n); memcpy (dst, src, n); check (dst, src, n); } #define T(n) \ TN (n) \ TN ((n) + 1) \ TN ((n) + 2) \ TN ((n) + 3) main () { int i,j; for (i = 0; i < sizeof (src); ++i) src[i] = 'a' + i % 26; T (0); T (4); T (8); T (12); T (16); T (20); T (24); T (28); T (32); T (36); T (40); T (44); T (48); T (52); T (56); T (60); T (64); T (68); T (72); T (76); return 0; } struct x { int a, b; } z = { -4028, 4096 }; int foo(struct x *p, int y) { if ((y & 0xff) != y || -p->b >= p->a) return 1; return 0; } main() { if (foo (&z, 10)) abort (); exit (0); } static struct A { char f[6]; } a[] = { {"01000"} }; void foo (void) { __builtin_stpcpy (a[0].f, "S0022"); } typedef __WCHAR_TYPE__ wchar_t; wchar_t x[] = L"Ä"; wchar_t y = L'Ä'; extern void abort (void); extern void exit (int); int main (void) { if (sizeof (x) / sizeof (wchar_t) != 2) abort (); if (x[0] != L'Ä' || x[1] != L'\0') abort (); if (y != L'Ä') abort (); exit (0); } int foo (unsigned short a, unsigned short b) { return a + b; } void f1 (float x, float y) { if (x == y) __builtin_trap (); } void f2 (double x, double y) { if (x == y) __builtin_trap (); } char buf[40]; extern int sprintf (char*, const char*, ...); extern void abort (void); int main() { int i = 0; int l = sprintf (buf, "%s", i++ ? "string" : "other string"); if (l != sizeof ("other string") - 1 || i != 1) abort (); return 0; } /* { dg-options "-mno-mmx" { target { x86_64-*-* i?86-*-* } } } */ extern void abort (void); typedef unsigned short v4hi __attribute__ ((vector_size (8))); typedef float v4sf __attribute__ ((vector_size (16))); union { v4hi v; short s[4]; } u; union { v4sf v; float f[4]; } v; void foo (void) { unsigned int i; for (i = 0; i < 2; i++) u.v += (v4hi) { 12, 32768 }; for (i = 0; i < 2; i++) v.v += (v4sf) { 18.0, 20.0, 22 }; } int main (void) { foo (); if (u.s[0] != 24 || u.s[1] != 0 || u.s[2] || u.s[3]) abort (); if (v.f[0] != 36.0 || v.f[1] != 40.0 || v.f[2] != 44.0 || v.f[3] != 0.0) abort (); return 0; } #include <stdarg.h> int bar (int a, va_list ap) { int b; do b = va_arg (ap, int); while (b > 10); return a + b; } int foo (int a, ...) { va_list ap; va_start (ap, a); return bar (a, ap); } int main () { if (foo (1, 2, 3) != 3) abort (); return 0; } int t(int m) { int value; if (!(value = (m?1:2))) value = 0; return value; } extern void abort (); extern void exit (int); signed char c = (signed char) 0xffffffff; int foo (void) { return (unsigned short) c ^ (signed char) 0x99999999; } int main (void) { if ((unsigned char) -1 != 0xff || sizeof (short) != 2 || sizeof (int) != 4) exit (0); if (foo () != (int) 0xffff0066) abort (); exit (0); } int a; struct S { unsigned int f:1; } b; int main () { a = (0 < b.f) | b.f; return a; } static inline int foo (unsigned _si1) { if (_si1 != 0) if (_si1 > 2147483647) return 1; return 0; } static inline unsigned bar (unsigned _left, int _right) { return (unsigned) _right >= 8 ? 1 : _left >> _right; } unsigned g_2; unsigned g_67; volatile unsigned g_162; static inline int func_62 (unsigned p_63) { p_63 = g_2 & g_67; if (g_2) ; else if (p_63) return 1; g_67 = bar (p_63, g_2); return 0; } unsigned baz (void) { if (g_2) for (; g_2 <= -16; g_2 = foo (g_2)) { for (; g_162; g_162) func_62 (func_62 (0)); if (g_67) break; } return g_2; } int main(void) { float reale = 1.0f; float oneplus; int i; if (sizeof (float) != 4) exit (0); for (i = 0; ; i++) { oneplus = 1.0f + reale; if (oneplus == 1.0f) break; reale=reale/2.0f; } if (i != 24) abort (); else exit (0); } foo (a) { int b = a; return b + 8762345; } #include <stdarg.h> struct s { int x, y; }; f (int attr, ...) { struct s va_values; va_list va; int i; va_start (va, attr); if (attr != 2) abort (); va_values = va_arg (va, struct s); if (va_values.x != 0xaaaa || va_values.y != 0x5555) abort (); attr = va_arg (va, int); if (attr != 3) abort (); va_values = va_arg (va, struct s); if (va_values.x != 0xffff || va_values.y != 0x1111) abort (); va_end (va); } main () { struct s a, b; a.x = 0xaaaa; a.y = 0x5555; b.x = 0xffff; b.y = 0x1111; f (2, a, 3, b); exit (0); } typedef struct x { int a; int b; } __attribute__((aligned(32))) X; typedef struct y { X x; X y[31]; int c; } Y; Y y[2]; int main(void) { if (((char *)&y[1] - (char *)&y[0]) & 31) abort (); exit (0); } struct s1 { int f1; }; struct s2 { struct s1 a; int f2; }; foo (struct s2 *ptr) { *ptr = (struct s2) {{}, 0}; } #define vector __attribute__((vector_size(16) )) vector float g(void) { float t = 1.0f; return (vector float){0.0, 0.0, t, 0.0}; } static int func1 (int a, int b) { return b ? a : a / b; } static unsigned char func2 (unsigned char a, int b) { return b ? a : b; } int i; void func3 (const int arg) { for (i = 0; i != 10; i = foo ()) { if (!arg) { int j; for (j = 0; j < 5; j += 1) { int *ptr; *ptr = func2 (func1 (arg, *ptr), foo (arg)); } } } } extern void abort (void); extern int inside_main; __attribute__ ((__noinline__)) char * strstr(const char *s1, const char *s2) { const char *p, *q; #ifdef __OPTIMIZE__ if (inside_main) abort (); #endif for (; *s1; s1++) { p = s1, q = s2; while (*q && *p) { if (*q != *p) break; p++, q++; } if (*q == 0) return (char *)s1; } return 0; } typedef long unsigned int size_t; struct RangeMapRange { unsigned fromMin; unsigned fromMax; unsigned toMin; }; void reserve1(void); void f(struct RangeMapRange *q1, size_t t) { const struct RangeMapRange *q2 = q1 + t; size_t n = q2 - q1; if (n > 0) reserve1(); } struct g { int i; }; struct f { struct g i; }; int GSM_RingNoteGetFullDuration(struct g)__attribute__((const)); void savewav(struct f *gg) { struct g *Note; long i = 0,j,length=0; Note = &gg->i; for (j=0;j<GSM_RingNoteGetFullDuration(*Note);j++) ; } struct S { char c; char arr[4]; float f; }; char A[4] = { '1', '2', '3', '4' }; void foo (struct S s) { if (__builtin_memcmp (s.arr, A, 4)) __builtin_abort (); } int main (void) { struct S s; __builtin_memcpy (s.arr, A, 4); foo (s); return 0; } typedef struct RangeCoder { unsigned char one_state[256]; } RangeCoder; static inline void put_rac(RangeCoder *c, unsigned char* const state) { *state= c->one_state[*state]; } typedef struct PlaneContext{ unsigned (*state)[32]; } PlaneContext; static inline void put_symbol(RangeCoder *c, unsigned char *state) { int i; const int e; put_rac(c, state); for(i=e-1; i>=0; i--) put_rac(c, state+22+i); } int encode_line(void) { PlaneContext * const p; RangeCoder * const c; int a; put_symbol(c, p->state[a]); } main() { double db1 = 1.7976931348623157e+308; long double ldb1 = db1; if (sizeof (double) != 8 || sizeof (long double) != 16) exit (0); if (ldb1 != 1.7976931348623157e+308) abort (); exit (0); } void bar (void); void foo (void) { asm volatile goto ("" : : : : a, b); a: bar (); b: return; } void store16 (p, a) short *p; short a; { *p = a; } signed int sign_extend16 (p) signed short *p; { return *p; } unsigned int zero_extend16 (p) unsigned short *p; { return *p; } void store8 (p, a) char *p; char a; { *p = a; } signed int sign_extend8 (p) signed char *p; { return *p; } unsigned int zero_extend8 (p) unsigned char *p; { return *p; } extern void abort (void); void * memcpy (void *dst, const void *src, __SIZE_TYPE__ n) { const char *srcp; char *dstp; srcp = src; dstp = dst; if (dst < src) { if (dst + n > src) abort (); } else { if (src + n > dst) abort (); } while (n-- != 0) *dstp++ = *srcp++; return dst; } foo(bufp) char *bufp; { int x = 80; return (*bufp++ = x ? 'a' : 'b'); } main() { char x; if (foo (&x) != 'a') abort (); exit (0); } #define lit_from_int(in) ((in<0)?(((-in)<<1)|1):(in<<1)) void init_clause(int *literals, int size, int *lits) { int i; for(i=0; i < size; i++) lits[i] = lit_from_int(literals[i]); } void asn1_length_der (unsigned long int len, unsigned char *ans, int *ans_len) { int k; unsigned char temp[4]; if (len < 128) { if (ans != ((void *) 0)) ans[0] = (unsigned char) len; *ans_len = 1; } else { k = 0; while (len) { temp[k++] = len & 0xFF; len = len >> 8; } *ans_len = k + 1; if (ans != ((void *) 0)) { ans[0] = ((unsigned char) k & 0x7F) + 128; while (k--) ans[*ans_len - 1 - k] = temp[k]; } } } struct a { unsigned int bitfield : 1; }; unsigned int x; main() { struct a a = {0}; x = 0xbeef; a.bitfield |= x; if (a.bitfield != 1) abort (); exit (0); } static inline int bar(void) { return 1; } static int mem[3]; static int foo(int x) { if (x != 0) return x; mem[x++] = foo(bar()); if (x != 1) abort(); return 0; } int main() { foo(0); return 0; } int x[60]; char *y = ((char*)&(x[2*8 + 2]) - 8); int z = (&"Foobar"[1] - &"Foobar"[0]); test () { short *p, q[3]; int x; p = q; for (x = 0; x < 3; x++) *p++ = 0; } typedef short Q __attribute__((vector_size(8))); Q q1 = {1, 2}, q2 = {3, 4}, q3 = {5, 6}, q4 = {7, 8}; Q w1, w2, w3, w4; Q z1, z2, z3, z4; volatile int dummy; void __attribute__((__noinline__)) func0 (void) { dummy = 1; } void __attribute__((__noinline__)) func1 (void) { Q a, b; a = q1 * q2; b = q3 * q4; w1 = a; w2 = b; func0 (); w3 = a; w4 = b; } void __attribute__((__noinline__)) func2 (void) { Q a, b; a = q1 + q2; b = q3 - q4; z1 = a; z2 = b; func1 (); z3 = a; z4 = b; } int main (void) { func2 (); if (memcmp (&w1, &w3, sizeof (Q)) != 0) abort (); if (memcmp (&w2, &w4, sizeof (Q)) != 0) abort (); if (memcmp (&z1, &z3, sizeof (Q)) != 0) abort (); if (memcmp (&z2, &z4, sizeof (Q)) != 0) abort (); return 0; } #include <string.h> static int special_format (fmt) const char *fmt; { return (strchr (fmt, '*') != 0 || strchr (fmt, 'V') != 0 || strchr (fmt, 'S') != 0 || strchr (fmt, 'n') != 0); } main() { if (special_format ("ee")) abort (); if (!special_format ("*e")) abort (); exit (0); } int g1, g2; void write_at (addr, off, val) int *addr; int off; int val; { g2 = 1; addr[off] = val; g2++; } main () { g2 = 12; write_at (&g1, &g2 - &g1, 12345); printf ("%d\n", g2); } int main () { int nResult; int b=0; int i = -1; do { if (b!=0) { abort (); nResult=1; } else { nResult=0; } i++; b=(i+2)*4; } while (i < 0); exit (0); } f (char *p) { char c; c = *++p; if (c != ' ') return 0; for (;;) { c = *p; if (g (c)) p++; else { if (c == ' ') break; else return 0; } } return 1; } struct list_head { struct list_head *next, *prev; }; struct dm_exception { struct list_head hash_list; unsigned long long old_chunk; unsigned long long new_chunk; }; struct dm_exception *dm_lookup_exception(struct list_head *table, unsigned long long chunk) { struct list_head *slot; struct dm_exception *e; slot = &table[0]; e = (struct dm_exception *)slot->next; for (; &e->hash_list != (slot);) if (chunk <= (e->new_chunk>>56)) return e; } int sub1 (int i, int j) { typedef struct { int c[i+2]; }c; int x[10], y[10]; if (j == 2) { memcpy (x, y, 10 * sizeof (int)); return sizeof (c); } else return sizeof (c) * 3; } int main () { typedef struct { int c[22]; }c; if (sub1 (20, 3) != sizeof (c)*3) abort (); return 0; } #ifndef SIGNAL_SUPPRESS #include <signal.h> #endif double dnan = 1.0/0.0 - 1.0/0.0; double x = 1.0; void leave () { exit (0); } main () { #if ! defined (__vax__) && ! defined (_CRAY) #ifndef SIGNAL_SUPPRESS signal (SIGFPE, leave); #endif if (dnan == dnan) abort (); if (dnan != x) x = 1.0; else abort (); if (dnan < x) abort (); if (dnan > x) abort (); if (dnan <= x) abort (); if (dnan >= x) abort (); if (dnan == x) abort (); #endif exit (0); } struct display { struct disphist *hstent; int pid; int status; }; struct disphist { struct disphist *next; char *name; int startTries; unsigned rLogin:2, sd_how:2, sd_when:2, lock:1, goodExit:1; char *nuser, *npass, **nargs; }; void StartDisplay (struct display *d) { d->pid = 0; d->status = 0; d->hstent->lock = d->hstent->rLogin = d->hstent->goodExit = d->hstent->sd_how = d->hstent->sd_when = 0; } extern void abort (void); struct A { struct A *a; }; struct B { struct A *b; }; __attribute__((noinline)) struct A * foo (struct A *x) { asm volatile ("" : : "g" (x) : "memory"); return x; } __attribute__((noinline)) void bar (struct B *w, struct A *x, struct A *y, struct A *z) { struct A **c; c = &w->b; *c = foo (x); while (*c) c = &(*c)->a; *c = foo (y); while (*c) c = &(*c)->a; *c = foo (z); } struct B d; struct A e, f, g; int main (void) { f.a = &g; bar (&d, &e, &f, 0); if (d.b == 0 || d.b->a == 0 || d.b->a->a == 0 || d.b->a->a->a != 0) abort (); return 0; } extern double sin (double), cos (double); __inline double atan (double __x) { register double __result; #if defined(__i386__) || defined(__x86_64__) __asm __volatile__ ("" : "=t" (__result) : "0" (__x)); #else __result = __x; #endif return __result; } double f(double x) { double t = atan (x); return cos (t) + sin (t); } extern void abort(void); extern void exit(int); typedef short __attribute__((__may_alias__)) short_a; int main (void) { int a = 0x12345678; short_a *b = (short_a*) &a; b[1] = 0; if (a == 0x12345678) abort(); exit(0); } #include "lib/strstr.c" int a = 1; extern int b __attribute__ ((alias ("a"))); int c = 1; extern int d __attribute__ ((alias ("c"))); main (int argc) { int *p; int *q; if (argc) p = &a, q = &b; else p = &c, q = &d; *p = 1; *q = 2; if (*p == 1) __builtin_abort (); return 0; } typedef unsigned long grub_uint64_t; typedef grub_uint64_t grub_size_t; grub_cmdline_get (unsigned max_len, int echo_char) { unsigned xpos, ypos, ystart; grub_size_t lpos, llen; char buf[max_len]; void cl_print (int pos, int c) { char *p; for (p = buf + pos; *p; p++) { if (xpos++ > 78) grub_putchar ('\n'); grub_putchar (*p); } } void cl_delete (unsigned len) { cl_set_pos (); cl_print (lpos, ' '); grub_memmove (); cl_print (lpos, echo_char); cl_set_pos (); } cl_delete (llen); grub_size_t n = lpos; cl_delete (n); } double __complex__ f (void) { return ~(1.0 + 2.0i); } foo (a) { if (a & 38) return 1; return 0; } extern void abort(void); void test(int *ptr) { int i = 1; goto useless; if (0) { useless: i = 0; } else i = 1; *ptr = i; } int main() { int i = 1; test(&i); if (i) abort (); return 0; } /* Origin: Joseph Myers <joseph@codesourcery.com> */ #include <stdarg.h> extern void exit (int); extern void abort (void); va_list ap; float f; va_list * foo (void) { exit (0); return &ap; } void bar (int i, ...) { va_start (ap, i); f = va_arg (*foo (), float); va_end (ap); } int main (void) { bar (1, 0); abort (); } static void print_wkb_byte(unsigned char val) { print_wkb_bytes((unsigned char *)&val, 1, 1); } void InsertMultiPoint(int b) { char a = 1; if (b) a = 0; print_wkb_byte(a); } main() { int i, j, k; k = 0; while (k < 10) { k++; if (j > i) j = 5; else j =3; } if (k != 10) abort (); return 0; } main () { int i, j, k[3]; j = 0; for (i=0; i < 3; i++) { k[i] = j++; } for (i=2; i >= 0; i--) { if (k[i] != i) abort (); } exit (0); } int a, b, d; int main (void) { int c = a && 1; d = 1 << (((c | (b - 842)) << 1) + 1); return 0; } foo (a, b) { return a % b; } f(x){int i;for(i=0;i<8&&(x&1)==0;x>>=1,i++);return i;} main(){if(f(4)!=2)abort();exit(0);} extern void abort (void); int main () { _Complex double a[12], *c = a, s = 3.0 + 1.0i; double b[12] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }, *d = b; int i; for (i = 0; i < 6; i++) *c++ = *d++ * s; if (c != a + 6 || d != b + 6) abort (); return 0; } void af (void *a) { } void bf (void) { int i = 1; char v[i]; af (v); } typedef unsigned short Uint16; typedef unsigned int Uint; Uint f () { Uint16 token; Uint count; static Uint16 values[1] = {0x9300}; token = values[0]; count = token >> 8; return count; } int main () { if (f () != 0x93) abort (); exit (0); } typedef struct _geom_elem { double coeffs[6]; } pGeomDefRec, *pGeomDefPtr; typedef struct _mpgeombanddef { int yOut; int in_width; } mpGeometryBandRec, *mpGeometryBandPtr; typedef void *pointer; typedef unsigned char CARD8; typedef CARD8 BytePixel; void BiGL_B (OUTP,srcimg,width,sline,pedpvt,pvtband) pointer OUTP; pointer *srcimg; register int width; int sline; pGeomDefPtr pedpvt; mpGeometryBandPtr pvtband; { register float s, t, st; register int isrcline,isrcpix; register int srcwidth = pvtband->in_width - 1; register BytePixel val; register BytePixel *ptrIn, *ptrJn; register double a = pedpvt->coeffs[0]; register double c = pedpvt->coeffs[2]; register double srcpix = a * ((double)(0.0000)) + pedpvt->coeffs[1] * (pvtband->yOut + ((double)(0.0000)) ) + pedpvt->coeffs[4]; register double srcline = c * ((double)(0.0000)) + pedpvt->coeffs[3] * (pvtband->yOut + ((double)(0.0000)) ) + pedpvt->coeffs[5]; if ( (isrcpix >= 0) && (isrcpix < srcwidth) ) val = ptrIn[isrcpix] * ((float)1. - s - t + st) + ptrIn[isrcpix+1] * (s - st) + ptrJn[isrcpix] * (t - st) + ptrJn[isrcpix+1] * (st) + (float)0.5 ; } void f(int n) { bugcauser: if (n != 0) f(n-1); return; } extern void abort (void); unsigned int test (unsigned int x) { return x / 0x80000001U / 0x00000002U; } int main() { if (test(2) != 0) abort (); return 0; } #include <stdarg.h> static int foo (int a, ...) { va_list va; int i, res; va_start (va, a); for (i = 0; i < 4; ++i) (void) va_arg (va, int); res = va_arg (va, int); va_end (va); return res; } int main (void) { if (foo (5, 4, 3, 2, 1, 0)) abort (); exit (0); } void __add_entropy_words(void); void __wake_up(void); void SHATransform(void); static inline __attribute__((always_inline)) void add_entropy_words(void){} void extract_entropy(void); static inline __attribute__((always_inline)) void xfer_secondary_pool(void) { extract_entropy(); add_entropy_words(); } void extract_entropy(void) { xfer_secondary_pool(); __wake_up(); } void init_std_data(void) { add_entropy_words(); } void rand_initialize(void) { init_std_data(); } #include <stdarg.h> struct tiny { char c; }; f (int n, ...) { struct tiny x; int i; va_list ap; va_start (ap,n); for (i = 0; i < n; i++) { x = va_arg (ap,struct tiny); if (x.c != i + 10) abort(); } { long x = va_arg (ap, long); if (x != 123) abort(); } va_end (ap); } main () { struct tiny x[3]; x[0].c = 10; x[1].c = 11; x[2].c = 12; f (3, x[0], x[1], x[2], (long) 123); exit(0); } void _IO_vfprintf_internal ( char *f ) { static const void *const step0_jumps[] = { &&do_form_unknown, &&do_flag_plus, &&do_form_float }; const void * ptr = step0_jumps[0]; do { char spec; spec = (*++f); goto *ptr; do_flag_plus: read_int (&f); do_number: _itoa_word (spec); do_form_float: if (ptr != ((void *)0)) { spec = 'x'; goto do_number; } if (spec != 'S') __strnlen (); return; do_form_unknown:; } while (*f != '\0'); } extern void exit (int); extern void abort (void); static int i; int main (void) { i = -1; switch ((signed char) i) { case 255: abort (); default: exit (0); } } struct foo { int a,b,c; }; f(struct foo*a,struct foo*b) { *a=*b; } typedef short int16_t; int round_sample(int *sum); #define MULS(ra, rb) ((ra) * (rb)) #define SUM8(sum, op, w, p) \ { \ sum op MULS((w)[0 * 64], p[0 * 64]); \ sum op MULS((w)[1 * 64], p[1 * 64]); \ sum op MULS((w)[2 * 64], p[2 * 64]); \ sum op MULS((w)[3 * 64], p[3 * 64]); \ sum op MULS((w)[4 * 64], p[4 * 64]); \ sum op MULS((w)[5 * 64], p[5 * 64]); \ sum op MULS((w)[6 * 64], p[6 * 64]); \ sum op MULS((w)[7 * 64], p[7 * 64]); \ } void foo(int *dither_state, int *samples) { int16_t *synth_buf; const int16_t *w, *p; int sum; sum = *dither_state; p = synth_buf + 16; SUM8(sum, +=, w, p); p = synth_buf + 48; SUM8(sum, -=, w + 32, p); *samples = round_sample(&sum); } static inline unsigned int foo (unsigned int x) { return (x >> 24) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | (x << 24); } __attribute__((noinline, noclone)) unsigned int bar (unsigned long long *x) { return foo (*x); } int main () { if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4 || sizeof (unsigned long long) != 8) return 0; unsigned long long l = foo (0xdeadbeefU) | 0xfeedbea800000000ULL; if (bar (&l) != 0xdeadbeefU) __builtin_abort (); return 0; } typedef char a; a b, c; int d, e; void f(void *g) { *(volatile int *)g; } void j() { a h, i; for (; b; b += 2) { d = b; i = i >> b; if (i) continue; f(&c + (b >> 2)); h = 0; for (; h < 8 / 2; h++) if (i << h) e = 0; } } unsigned a; unsigned short b; unsigned foo (unsigned x) { b = x; a >>= (b & 1); b = 1 | (b << 5); b >>= 15; x = (unsigned char) b > ((2 - (unsigned char) b) & 1); b = 0; return x; } int main () { if (__CHAR_BIT__ != 8 || sizeof (short) != 2 || sizeof (int) < 4) return 0; unsigned x = foo (12345); if (x != 0) __builtin_abort (); return 0; } typedef struct { char hours, day, month; short year; } T; T g (void) { T now; now.hours = 1; now.day = 2; now.month = 3; now.year = 4; return now; } T f (void) { T virk; virk = g (); return virk; } main () { if (f ().hours != 1 || f ().day != 2 || f ().month != 3 || f ().year != 4) abort (); exit (0); } extern int flags; struct r { int code; int val;}; void bar (void); void baz (void); int foo (struct r *home) { int n = 0; int regno = -1; if (home->code == 0) regno = home->val; if (home->code == 1) bar (); else if (regno >= 0) n = (regno == 16 ? 16 : (regno - (unsigned long long) (flags != 0 ? 63 : 15) ? regno - 128 : -1)); baz (); return n; } extern void abort (void); int a = 3; int b = 1; __attribute__((noinline)) long long foo (int x, int y) { return x / y; } __attribute__((noinline)) int bar (void) { int c = 2; c &= foo (1, b) > b; b = (a != 0) | c; return c; } int main (void) { if (bar () != 0 || b != 1) abort (); return 0; } f () { long long i; int j; long long k = i = j; int inner () {return j + i;} return k; } extern void abort (void); int main (void) { int n; long double x; x = 1/0.0; n = (x == 1/0.0); if (n == 1) return 0; else abort (); } foo (a) { __builtin_ffs (a); } void zgemm_ (const int*, const double*); extern void matmul_c8 (_Complex double * dest) { const int ldc = 0; const double zero = 0; zgemm_ ( &zero, &ldc); dest[1] += 1 ; } typedef _Complex double ar[]; int f(ar *a, unsigned int n) { unsigned int i; for(i = 0; i< n; i++) { (*a)[i*4] = __real__ (*a)[(i+1)*4] + __real__ (*a)[i*4]; } } int foo(int i) { int a[32]; a[1] = 3; a[0] = 1; a[i] = 2; return a[0]; } extern void abort (void); int main() { if (foo (0) != 2 || foo (1) != 1) abort (); return 0; } typedef unsigned long uint32; typedef signed long sint32; uint32 ext (sint32 src, unsigned o5, unsigned w5) { return (w5 == 0) ? src >> o5 : (src << (( - o5 - w5) & 31)) >> (32 - w5); } uint32 extu (uint32 src, unsigned o5, unsigned w5) { return (w5 == 0) ? src >> o5 : (src << (( - o5 - w5) & 31)) >> (32 - w5); } uint32 mak (uint32 src, unsigned o5, unsigned w5) { return (w5 == 0) ? src << o5 : (src << (32 - w5)) >> (( - o5 - w5) & 31); } uint32 rot (uint32 src, unsigned o5) { return (src >> o5) | (src << (( - o5) & 31)); } main (int argc, char **argv) { printf ("%x\n", clr (0xffffffff, atoi (argv[2]), atoi (argv[1]))); } int blah; foo() { int i; for (i=0 ; i< 7 ; i++) { if (i == 7 - 1) blah = 0xfcc; else blah = 0xfee; } return blah; } main() { if (foo () != 0xfcc) abort (); exit (0); } logic (a, b) int *a, b; { if (*a & 123) b = 1; if (*a & ~222) b = 2; if (124 & *a) b = 3; if (~111 & *a) b = 4; if (~*a & 23) b = 1; if (~*a & ~22) b = 2; if (24 & ~*a) b = 3; if (~11 & ~*a) b = 4; if (~*a & b) b = 1; if (~*a & ~b) b = 2; if (*a & ~*a) b = 3; return b; } x (a, b, c) { for (a = 0; --a > 0;); for (b = -1; --b > 0;); for (c = -65536; --c > 0;); return a + b + c; } struct bp { void *v, *b, *e; }; f () { struct bp x = { &&L2 }; if (&&L3 - &&L1 > 1) abort (); L1:return 1; L2:abort (); L3:; } extern void abort (void); unsigned int a, b = 1, c; void __attribute__ ((noinline)) foo (int x) { if (x != 5) abort (); } int main () { unsigned int d, e; for (d = 1; d < 5; d++) if (c) a = b; a = b; e = a << 1; if (e) e = (e << 1) ^ 1; foo (e); return 0; } extern void bar (long double *); int foo (long double x) { bar (&x); return 0; } int regex_subst(void) { const void *subst = ""; return (*(int (*)(int))subst) (0); } int foobar (void) { int x; return (*(int (*)(void))&x) (); } extern void abort (void); extern void exit (int); struct B { int x; int y; }; struct A { int z; struct B b; }; struct A f () { struct B b = { 0, 1 }; struct A a = { 2, b }; return a; } int main (void) { struct A a = f (); if (a.z != 2 || a.b.x != 0 || a.b.y != 1) abort (); exit (0); } int f(float * ); __SIZE_TYPE__ FcCharSetFreeze (int *fcs, int b) { int i; int a = 0; for (i = 0; i < *fcs; i++) { float *leaf = (float *)fcs; int hash = f (leaf); if (hash) a = b; if (!a) return; } return (__SIZE_TYPE__) fcs; } extern void abort (void); static inline unsigned int mod_rhs(int rhs) { if (rhs == 0) return 1; return rhs; } void func_44 (unsigned int p_45); void func_44 (unsigned int p_45) { if (!((p_45 * -9) % mod_rhs (-9))) { abort(); } } int main (void) { func_44 (2); return 0; } int foo (int a) { static const short ar[] = { &&l1 - &&l1, &&l2 - &&l1 }; void *p = &&l1 + ar[a]; goto *p; l1: return 1; l2: return 2; } #define m(L) (L'1' + (L)) main () { exit (m (0) != L'1'); } struct Collision { int edge; int triangle; float _M_instance[3] __attribute__((__aligned__)); }; void get_collisions(struct Collision a) { struct Collision b = a; } typedef int (*FARPROC)(); typedef int (*LPFN_ACCEPTEX)(void*); static LPFN_ACCEPTEX acceptex_fn; int xWSAIoctl(void*); static void get_fn(FARPROC* fn) { FARPROC func; if (!xWSAIoctl( &func)) *fn = func; } void get_fn_pointers() { get_fn((FARPROC*)&acceptex_fn); } struct node { struct node *next; int value; }; struct node *current_node, global_list; void bar (void) { struct node *node, *next; node = current_node; next = node->next; if (node != &global_list) current_node = next; else { node = global_list.next; global_list.value = node->value; global_list.next = node->next; } foo (node); } extern void abort (void); int x(int a, int b) { __label__ xlab; __label__ xlab2; void y(int b) { switch (b) { case 1: goto xlab; case 2: goto xlab; } } a = a + 2; y (b); xlab: return a; xlab2: a++; return a; } int main () { int i, j; for (j = 1; j <= 2; ++j) for (i = 1; i <= 2; ++i) { int a = x (j, i); if (a != 2 + j) abort (); } return 0; } void func_18 ( int t ) { unsigned l_889; int l_895 = 1; for (0; 1; ++l_889) { int t1 = 0; if (func_81 (1)) { int rhs = l_895; if (rhs == 0) rhs = 1; if (1 & (t % rhs)) t1 = 1; } func_98 (t1); l_895 = 0; } } void cpplib_macroExpand (char * pfile) { int nargs; int rest_args; int token = -1; rest_args = 0; do { if (rest_args != 0) continue; if (nargs == 0) { rest_args = 1; token = macarg (pfile, rest_args); } } while (token == 20); } typedef struct {int a; char b;} T; int h (T *); T g (T); #if COMPILER != 1 h (T *x) { if (x->a != 0 || x->b != 1) abort (); } #endif #if COMPILER != 2 T g (T x) { if (x.a != 13 || x.b != 47) abort (); x.a = 0; x.b = 1; h (&x); return x; } #endif #if COMPILER != 1 f () { T x; x.a = 13; x.b = 47; g (x); if (x.a != 13 || x.b != 47) abort (); x = g (x); if (x.a != 0 || x.b != 1) abort (); } #endif #if COMPILER != 2 main () { f (); exit (0); } #endif #include <stdio.h> #include <math.h> int main() { if (floor (0.1) != 0.) abort (); return 0; } volatile int a; int main (void) { int i; char buf[64]; if (__builtin_sprintf (buf, "%#hho", a) != 1) __builtin_abort (); if (__builtin_sprintf (buf, "%#hhx", a) != 1) __builtin_abort (); a = 1; if (__builtin_sprintf (buf, "%#hho", a) != 2) __builtin_abort (); if (__builtin_sprintf (buf, "%#hhx", a) != 3) __builtin_abort (); a = 127; if (__builtin_sprintf (buf, "%#hho", a) != 4) __builtin_abort (); if (__builtin_sprintf (buf, "%#hhx", a) != 4) __builtin_abort (); return 0; } int f (unsigned bitcount, int mant) { int mask = -1 << bitcount; { if (! (mant & -mask)) goto ab; if (mant & ~mask) goto auf; } ab: return 0; auf: return 1; } main () { if (f (0, -1)) abort (); exit (0); } double x[5][10] = { { 10, 11, 12, 13, 14, 15, -1, -1, -1, -1 },  { 21, 22, 23, 24, 25, 26, -1, -1, -1, -1 },  { 32, 33, 34, 35, 36, 37, -1, -1, -1, -1 },  { 43, 44, 45, 46, 47, 48, -1, -1, -1, -1 },  { 54, 55, 56, 57, 58, 59, -1, -1, -1, -1 } }; double tmp[5][6]; void __attribute__((noinline)) test (void) { int i, j; for (i = 0; i < 5; ++i) { tmp[i][0] = x[i][0]; tmp[i][1] = x[i][1]; tmp[i][2] = x[i][2]; tmp[i][3] = x[i][3]; tmp[i][4] = x[i][4]; tmp[i][5] = x[i][5]; } } extern void abort (void); int main() { int i, j; test(); for (i = 0; i < 5; ++i) for (j = 0; j < 6; ++j) if (tmp[i][j] == -1) abort (); return 0; } #include <assert.h> #define ALIGNMENT 64 unsigned test(unsigned n, unsigned p) { static struct { char __attribute__((__aligned__(ALIGNMENT))) c; } s; unsigned x; assert(__alignof__(s) == ALIGNMENT); asm ("" : "=g" (x), "+m" (s) : "0" (&x)); return n ? test(n - 1, x) : (x ^ p); } unsigned test2(unsigned n, unsigned p) { static struct { char c; } s; unsigned x; assert(__alignof__(s) != ALIGNMENT); asm ("" : "=g" (x), "+m" (s) : "0" (&x)); return n ? test2(n - 1, x) : (x ^ p); } int main (int argc, char *argv[] __attribute__((unused))) { unsigned int x, y; x = test(argc, 0); x |= test(argc + 1, 0); x |= test(argc + 2, 0); y = test2(argc, 0); y |= test2(argc + 1, 0); y |= test2(argc + 2, 0); return (x & (ALIGNMENT - 1)) == 0 && (y & (ALIGNMENT - 1)) != 0 ? 1 : 0; } struct b{}; f(struct b(*f)()) { struct b d=f(); } static struct { char buf[15]; } u2; void test6 (void) { int len; char *p; for (len = 0; len < 2; len++) { p = __builtin___memset_chk (u2.buf, '\0', len, 15); if (p != u2.buf) return; } } int c = -1; foo (p) int *p; { int x; int a; a = p[0]; x = a + 5; a = c; p[0] = x - 15; return a; } int main() { int b = 1; int a = foo(&b); if (a != -1 || b != (1 + 5 - 15)) abort (); exit (0); } int f (foo, bar, com) { unsigned align; if (foo) return 0; while (1) { switch (bar) { case 1: if (com != 0) return align; *(char *) 0 = 0; } } } main () { f (0, 1, 1); exit (0); } char ** foo (char **p, char *cmp, unsigned i) { for (; *p; p++) if (__builtin_strncmp (*p, cmp, i)) if (i == __builtin_strlen (*p)) break; return p; } #ifndef STACK_SIZE #define VLEN 2055 #else #define VLEN ((STACK_SIZE/16) - 1) #endif main () { long dx[VLEN+1]; long dy[VLEN+1]; long s1[VLEN]; int cyx, cyy; int i; long size; for (;;) { size = VLEN; mpn_random2 (s1, size); for (i = 0; i < 1; i++) ; dy[size] = 0x12345678; for (i = 0; i < 1; i++) cyy = mpn_mul_1 (dy, s1, size); if (cyx != cyy || mpn_cmp (dx, dy, size + 1) != 0 || dx[size] != 0x12345678) { foo ("", 8, cyy); mpn_print (dy, size); } exxit(); } } foo (){} mpn_mul_1(){} mpn_print (){} mpn_random2(){} mpn_cmp(){} exxit(){exit(0);} typedef unsigned long long u64; unsigned long foo = 0; u64 f() __attribute__((noinline)); u64 f() { return ((u64)40) + ((u64) 24) * (int)(foo - 1); } int main () { if (f () != 16) abort (); exit (0); } typedef struct { char c[510]; } s510; typedef struct { char c[511]; } s511; s510 G510, s1; s511 G511; int I, J; double D; void main(void); void f0(double D, ...); s510 f1(double D, ...); void f2a(s510 S); void f2b(s511 S); void main(void) { f0(D, I, J); s1 = f1(D, I, D); f2a(G510); f2b(G511); } unsigned long x[4]; void foo(void) { ((void (*)())(x+2))(); } long a = 1; foo () { switch (a % 2 % 2 % 2 % 2 % 2 % 2 % 2 % 2) { case 0: return 0; case 1: return 1; default: return -1; } } main () { if (foo () != 1) abort (); exit (0); } long int a; __attribute__((noinline, noclone)) long int foo (long int x) { long int b; while (a < 1) { b = a && x; ++a; } return b; } int main () { if (foo (0) != 0) __builtin_abort (); a = 0; if (foo (1) != 0) __builtin_abort (); a = 0; if (foo (25) != 0) __builtin_abort (); a = -64; if (foo (0) != 0) __builtin_abort (); a = -64; if (foo (1) != 0) __builtin_abort (); a = -64; if (foo (25) != 0) __builtin_abort (); return 0; } extern void abort(void); struct test1 { int a; int b; }; struct test2 { float d; struct test1 sub; }; int global; int bla(struct test1 *xa, struct test2 *xb) { global = 1; xb->sub.a = 1; xa->a = 8; return xb->sub.a; } int main(void) { struct test2 pom; if (bla (&pom.sub, &pom) != 8) abort (); return 0; } typedef __SIZE_TYPE__ size_t; int memcmp (const void *, const void *, size_t); void abort (void); void __attribute__((noinline)) bar (void *x, void *y) { struct S { char w[8]; } *p = x, *q = y; if (memcmp (p->w, "zyxwvut", 8) != 0) abort (); if (memcmp (q[0].w, "abcdefg", 8) != 0) abort (); if (memcmp (q[1].w, "ABCDEFG", 8) != 0) abort (); if (memcmp (q[2].w, "zyxwvut", 8) != 0) abort (); if (memcmp (q[3].w, "zyxwvut", 8) != 0) abort (); } void __attribute__((noinline)) foo (void *x, int y) { struct S { char w[y]; } *p = x, a; int i; a = ({ struct S b; b = p[2]; p[3] = b; }); bar (&a, x); } int main (void) { struct S { char w[8]; } p[4] = { "abcdefg", "ABCDEFG", "zyxwvut", "ZYXWVUT" }; foo (p, 8); return 0; } #define ASMNAME(cname) ASMNAME2 (__USER_LABEL_PREFIX__, cname) #define ASMNAME2(prefix, cname) STRING (prefix) cname #define STRING(x) #x extern inline int foo (void) { return 23; } int xxx(void) __asm__(ASMNAME ("xxx")); int xxx(void) { return 23; } extern int foo (void) __attribute__ ((weak, alias ("xxx"))); struct foo { unsigned long long b:40; } x; extern void abort (void); void test1(unsigned long long res) { if ((x.b<<8) + (x.b>>32) != res) abort (); } int main() { x.b = 0x0100000001; test1(0x0000000101); x.b = 0x0100000000; test1(0x0000000001); return 0; } foo (long long *p) { p[0] = p[1]; } typedef float V2SF __attribute__ ((vector_size (8))); int test0 (V2SF, V2SF); int main (void) { V2SF a = (V2SF) {1.0f/0.0f - 1.0f/0.0f, 1.0f/0.0f - 1.0f/0.0f}; V2SF b = (V2SF) {567.345, 1984.0}; int i; i = test0 (a, b); return i; } typedef struct { double x, y; } p; typedef struct { int s; float r; } t; t *e, i; int i1; f(t *op) { int i2 = e->r; p pt; int c = g(); t p; if (c) { i = *e; e -= 3; return 8; } if (op > e) return 1; op->r = pt.x; op->r = pt.y; p = *e; ++e; e->r = i1, e->s = i1; *++e = p; return 3; } main () { struct { signed int s:3; unsigned int u:3; int i:3; } x = {-1, -1, -1}; if (x.u != 7) abort (); if (x.s != - 1) abort (); if (x.i != -1 && x.i != 7) abort (); exit (0); } void abort (void); int i; void g (void) { i = 1; } void f (int a, int b) { int c = 0; if (a == 0) c = 1; if (c) return; if (c == 1) c = 0; if (b == 0) c = 1; if (c) g (); } int main (void) { f (1, 0); if (i != 1) abort (); return 0; } main () { int tmp; unsigned long long utmp1, utmp2; tmp = 16; utmp1 = (~((unsigned long long) 0)) >> tmp; utmp2 = (~((unsigned long long) 0)) >> 16; if (utmp1 != utmp2) abort (); exit (0); } typedef struct { char x; } s1; s1 f (int arg0,...) { int args; s1 back; va_start (args, arg0); va_end (args); return back; } int a, c, d, *e; unsigned char b; char baz (char p1) { return p1 * a; } void func_65 (); func_1 () { func_65 (); func_65 (); } void func_65 () { d = baz (b--); if (*e) b--; c = 0; } foo (a) { int r = 0; if (a) r = 1; return r; } foo1 (p) char *p; { p[0] = p[1]; return p[0]; } foo2 (p, x) char *p; { p[0] = x; return p[0]; } #include <stdlib.h> #include <stdint.h> uint32_t f0a (uint64_t arg2) __attribute__((noinline)); uint32_t f0a (uint64_t arg) { return ~((unsigned) (arg > -3)); } int main() { uint32_t r1; r1 = f0a (12094370573988097329ULL); if (r1 != ~0U) abort (); return 0; } void fun (nb) int nb; { int th, h, em, nlwm, nlwS, nlw, sy; while (nb--) while (h--) { nlw = nlwm; while (nlw) { if (nlwS == 1) { } else if (nlwS == 1) { } nlwS--; nlw--; } if (em) nlwS--; if (++sy == th) sy = 0; } } typedef __builtin_va_list va_list; void gftp_config_parse_args (int numargs, char **first, ...) { char **dest = first; va_list argp; __builtin_va_start (argp, first); while (numargs-- > 0) { *dest = __builtin_malloc (1); dest = __builtin_va_arg(argp, char **); *dest = ((void *)0); } __builtin_va_end(argp); } typedef unsigned char __uint8_t; typedef __uint8_t uint8_t; typedef uint8_t u8_t; typedef struct ip_addr ip_addr_t; char * ipaddr_ntoa_r (const ip_addr_t * addr, char *buf, int buflen) { char inv[3]; char *rp; u8_t *ap; u8_t n; u8_t i; int len = 0; for (n = 0; n < 4; n++) { while (*ap); while (i--) { if (len++ >= buflen) return ((void *) 0); *rp++ = inv[i]; } ap++; } } #include <float.h> #if DBL_MANT_DIG > FLT_MANT_DIG typedef double floatvect2 __attribute__((vector_size (16))); typedef union { floatvect2 vector; double f[2]; }resfloatvect2; void tempf(double *x, double *y) { floatvect2 temp={x[0],x[1]}; floatvect2 temp1={y[0],y[1]}; resfloatvect2 temp2; temp2.vector=temp+temp1; x[0]=temp2.f[0]; x[1]=temp2.f[1]; } #endif struct a {int a,b;}; const static struct a a[1]={{1,2}}; struct a b,c; t() { int idx = 0; b=a[idx]; c=a[idx]; } void bar (short); void foo (void) { short a[5]; int b; for (b = -1290603998; b < 5; b++) a[b] = 0; bar (a[3]); } extern void abort (void); extern void exit (int); unsigned char cx = 7; unsigned short sx = 14; unsigned int ix = 21; unsigned long lx = 28; unsigned long long Lx = 35; int main () { unsigned char cy; unsigned short sy; unsigned int iy; unsigned long ly; unsigned long long Ly; cy = cx / 6; if (cy != 1) abort (); cy = cx % 6; if (cy != 1) abort (); sy = sx / 6; if (sy != 2) abort (); sy = sx % 6; if (sy != 2) abort (); iy = ix / 6; if (iy != 3) abort (); iy = ix % 6; if (iy != 3) abort (); ly = lx / 6; if (ly != 4) abort (); ly = lx % 6; if (ly != 4) abort (); Ly = Lx / 6; if (Ly != 5) abort (); Ly = Lx % 6; if (Ly != 5) abort (); exit(0); } void adjust_xy (short *, short *); struct adjust_template { short kx_x; short kx_y; short kx; short kz; }; static struct adjust_template adjust = {0, 0, 1, 1}; main () { short x = 1, y = 1; adjust_xy (&x, &y); if (x != 1) abort (); exit (0); } void adjust_xy (x, y) short *x; short *y; { *x = adjust.kx_x * *x + adjust.kx_y * *y + adjust.kx; } int *__attribute__((__aligned__(16))) *p; int main (void) { return **p; } void bar (void); int foo (int i) { static const void *const table[] = { &&begin, &&end }; goto *(table[i]); begin: bar (); end: return 0; } foo () { return (int)foo; } void ucs2reverse_internal_loop_single (long *irreversible, int foo) { unsigned char bytebuf[2]; const unsigned char *inptr = bytebuf; if (irreversible == (void *)0) ; else inptr += 2; if (inptr != bytebuf) ((inptr - bytebuf > foo) ? (void) (0) : __assert_fail ()); } extern void exit (int); extern void abort (void); struct { int a; int b[5]; } x; int *y; int foo (void) { return y - x.b; } int main (void) { y = x.b; if (foo ()) abort (); exit (0); } long x = -1L; int main() { long b = (x != -1L); if (b) abort(); exit(0); } int a; void bar (int, unsigned, unsigned); void foo (unsigned x) { unsigned b = a ? x : 0; if (x || b) bar (0, x, b); } extern void abort (void); struct S { int a, b, c; }; int foo2 (struct S x, struct S y) { if (x.a != 3 || x.b != 4 || x.c != 5) abort (); if (y.a != 6 || y.b != 7 || y.c != 8) abort (); return 0; } int foo3 (struct S x, struct S y, struct S z) { foo2 (x, y); if (z.a != 9 || z.b != 10 || z.c != 11) abort (); return 0; } int bar2 (struct S x, struct S y) { return foo2 (y, x); } int bar3 (struct S x, struct S y, struct S z) { return foo3 (y, x, z); } int baz3 (struct S x, struct S y, struct S z) { return foo3 (y, z, x); } int main (void) { struct S a = { 3, 4, 5 }, b = { 6, 7, 8 }, c = { 9, 10, 11 }; bar2 (b, a); bar3 (b, a, c); baz3 (c, a, b); return 0; } foo (a) double a; { printf ("%d\n", (int) a); } main () { foo (1.6); foo (1.4); foo (-1.4); foo (-1.6); } extern void foo (int *); static void bar (char *buf) { int a; foo (&a); while (a > 0) { *buf++ = '0'; a--; } } struct node234_Tag { int t1; int kids[4]; void *elems[3]; }; void *add234_internal(struct node234_Tag *n, int ei) { int j; for (j = ei; j < 2 && n->elems[j+1];) j++; n->kids[j+1] = 0; } struct A { int p; }; struct B { struct A n; struct A m; int x; int y; int z; }; extern int g1, g2; static void __attribute__((noinline)) foo (struct B *b) { int t; t = b->n.p; g1 = t; b->n.p = t+1; g2 = b->m.p; b->m = b->n; } void bar (struct B *b) { foo (b); } f () { if (g ()) h (); else { do { return 0; break; } while (1); } return 1; } static int gl_cnt = 0; static char gl_buf[1024]; void gl_yank() { int i; for (i=gl_cnt; i >= 0; i--) gl_buf[i+10] = gl_buf[i]; } typedef unsigned long long uint64; void g(uint64 x, int y, int z, uint64 *p) { unsigned w = ((x >> y) & 0xffffffffULL) << (z & 0x1f); *p |= (w & 0xffffffffULL) << z; } int main(void) { uint64 a = 0; g(0xdeadbeef01234567ULL, 0, 0, &a); return (a == 0x01234567) ? 0 : 1; } struct o_fsm_t; struct o_fsm_event_t; typedef void (*fn_t) (struct o_fsm_t *, struct o_fsm_event_t const *); struct o_fsm_state_t { fn_t dispatch; }; struct o_fsm_t { fn_t dispatch; }; extern struct o_fsm_state_t o_fsm_tran(struct o_fsm_t *fsm, struct o_fsm_state_t next_state); static void plist_parser_state_start(struct o_fsm_t *fsm, struct o_fsm_event_t const *fsm_event); struct o_fsm_state_t o_fsm_state(fn_t dispatch_fcn) { return *(struct o_fsm_state_t *)&dispatch_fcn; } typedef struct _o_plist_parser_t { struct o_fsm_t fsm; } o_plist_parser_t; static void plist_parser_state_start(struct o_fsm_t *fsm, struct o_fsm_event_t const *fsm_event) { } void o_plist_deserialize_xml(int fin) { o_plist_parser_t parser; o_fsm_tran(&parser.fsm, o_fsm_state(plist_parser_state_start)); } typedef char __attribute__ ((vector_size (4))) v4qi; void retv (int a,int b,int c,int d, v4qi *ret) { v4qi v = { a, b , c, d }; *ret = v; } void retv2 (int a,int b,int c,int d, v4qi *ret) { v4qi v = { a, b , c, d }; *ret = v; } int f(void) { static _Complex double t; int i, j; for(i = 0;i<2;i++) for(j = 0;j<2;j++) t = .5 * 1.0; return t; } struct termios { unsigned int a; unsigned int b; unsigned int c; unsigned int d; unsigned char pad[28]; }; struct tty_driver { unsigned char pad1[38]; struct termios t __attribute__ ((aligned (8))); }; static struct termios zero_t; static struct tty_driver pty; void ini (void) { pty.t = zero_t; pty.t.a = 1; pty.t.b = 2; pty.t.c = 3; pty.t.d = 4; } int main (void) { extern void abort (void); ini (); if (pty.t.a != 1 || pty.t.b != 2 || pty.t.c != 3 || pty.t.d != 4) abort (); return 0; } foo (a, b, p) short *p; { p[0] = a; p[1] = b; } typedef struct { int data[1024]; } Lint; Lint lint_operate (Lint a, long long ammount) { int index; Lint ret; for (index = 0; index < 24; index++) ret.data[index] = a.data[index + ammount / 32 + 1] << a.data[index + ammount / 32]; return ret; } #include <stdarg.h> typedef struct{int A;}T; T f(int x,...) { va_list ap; T X; va_start(ap,x); X=va_arg(ap,T); if(X.A!=10)abort(); X=va_arg(ap,T); if(X.A!=20)abort(); va_end(ap); return X; } main() { T X,Y; int i; X.A=10; Y.A=20; f(2,X,Y); exit(0); } int a, b, c; void foo () { c = b >> 16; if (c > 32767) c = 0; a = b; } int a = 1, b, d, *e = &d; long long c, *g = &c; volatile long long f; int foo (int h) { int j = *g = b; return h == 0 ? j : 0; } int main () { int h = a; for (; b != -20; b--) { (int) f; *e = 0; *e = foo (h); } return 0; } struct foo { char a[3]; char b; char c; }; struct foo bs; int x; char y[3]; void bar(void) { memcpy(bs.a, y, 3); bs.a[1] = ((x ? &bs.b : &bs.c) - (char *)&bs) - 2; } int inb(int); void is870(unsigned int wkport, unsigned char j) { unsigned int tmport; unsigned char i; for (i = 0; i < 16; i++) { tmport = wkport + 0x18; tmport += 0x07; while ((inb(tmport) & 0x80) == 0) { if ((inb(tmport) & 0x01) != 0) { tmport -= 0x06; tmport += 0x06; } } tmport = wkport + 0x14; tmport += 0x04; tmport += 0x07; widep_in1: if ((j & 0x01) != 0) { tmport -= 0x06; tmport += 0x06; goto widep_in1; } while ((inb(tmport) & 0x80) == 0) {} } } double x = 0x1.fp1; int main() { if (x != 3.875) abort (); exit (0); } int main () { long winds = 0; while (winds != 0) { if (*(char *) winds) break; } if (winds == 0 || winds != 0 || *(char *) winds) exit (0); abort (); } foo (a) double a; { if (a >= 0) return 1; return a; } extern void abort(void); typedef int word __attribute__((mode(word))); struct foo { word x; word y[0]; }; int main() { if (sizeof(word) != sizeof(struct foo)) abort(); if (__alignof__(word) != __alignof__(struct foo)) abort(); return 0; } struct D { int n; int c [8]; }; struct A { int i; char *p; }; struct B { struct A *a; struct D *d; }; int dtInsert1 (struct B *b) { struct A a = { 0, 0 }; struct D *d; b->a = &a; d = b->d; &d->c [d->n]; return 0; } extern int f2(void); extern int f3(void); extern void f1(void); void ff(int fname, int part, int nparts) { { } else while (f3() /* bb 10 */) { { nparts = part; break; } } } int main(void) { ff(0, 1, 0); return 0; } int f3(void) { static int x = 0; x = !x; return x; } void f1(void) { abort(); } int f2(void) { abort(); } typedef struct rtx_def *rtx; typedef struct rtvec_def *rtvec; enum rtx_code { PARALLEL, SET }; union rtunion_def { rtx rt_rtx; rtvec rt_rtvec; }; typedef union rtunion_def rtunion; struct rtx_def { rtunion fld; }; struct rtvec_def { int num_elem; }; extern rtx operand; rtx peephole2_insns (rtx x0, enum rtx_code code) { switch (code) { case SET: operand = (((x0)->fld).rt_rtx); return operand; case PARALLEL: if ((((((x0)->fld).rt_rtvec))->num_elem) == 2) return 0; break; } } extern void abort (void); int tar (int i) { if (i != 36863) abort (); return -1; } void bug(int q, int bcount) { int j = 0; int outgo = 0; while(j != -1) { outgo++; if (outgo > q-1) outgo = q-1; j = tar (outgo*bcount); } } int main(void) { bug(5, 36863); return 0; } f() { long l2; unsigned short us; unsigned long ul; short s2; ul = us = l2 = s2 = -1; return ul; } main() { if (f()!=(unsigned short)-1) abort(); exit(0); } struct a { unsigned int bitfield : 3; }; int main() { struct a a; a.bitfield = 131; foo (a.bitfield); exit (0); } foo(unsigned int z) { if (z != 3) abort (); } typedef int thread_state_flavor_t; typedef int exception_behavior_t; typedef unsigned int exception_mask_t; typedef unsigned int exception_handler_t; typedef unsigned int mach_msg_type_number_t; static struct { mach_msg_type_number_t count; exception_mask_t masks[16]; exception_handler_t ports[16]; thread_state_flavor_t flavors[16]; } GC_old_exc_ports; typedef exception_handler_t *exception_handler_array_t; typedef thread_state_flavor_t *exception_flavor_array_t; int task_get_exception_ports ( mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_flavor_array_t old_flavors ); void GC_dirty_init() { task_get_exception_ports(GC_old_exc_ports.masks,  GC_old_exc_ports.ports,  GC_old_exc_ports.flavors); } __attribute__((__noinline__)) void dummy () { asm volatile(""); } int a, g, i, k, *p; signed char b; char e; short c, h; static short *d = &c; char foo (int p1, int p2) { return p1 - p2; } int bar () { short *q = &c; *q = 1; *p = 0; return 0; } int main () { for (b = -22; b >= -29; b--) { short *l = &h; char *m = &e; *l = a; g = foo (*m = k && *d, 1 > i) || bar (); } dummy(); return 0; } extern void exit (int); volatile signed char *q; volatile signed int n; void foo (void) { signed char *p; for (;;) { p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; p = (signed char *) q; n = p[2]; } } int main () { exit (0); } extern int baz (void); static int foo (void) { return 1; } int bar (void) { return foo () >= 1 ^ (baz () || 0) || 0; } typedef struct { int c, d, e, f, g; } D; void bar (unsigned long, unsigned long); void foo (D *y) { int x = 0; if (y->f == 0) x |= 0x1; if (y->g == 0) x |= 0x2; bar ((x << 16) | (y->c & 0xffff), (y->d << 16) | (y->e & 0xffff)); } static int a[] = { 1 }; static inline void bar (int **x) { static int *c[2] = { 0, a }; *x = c[1]; } int foo (int **x) { bar (x); } int v; __attribute__ ((noinline, noclone)) void bar (void) { v++; } __attribute__ ((noinline, noclone)) void foo (unsigned int x) { signed int y = ((-__INT_MAX__ - 1) / 2); signed int r; if (__builtin_mul_overflow (x, y, &r)) bar (); } int main () { foo (2); if (v) __builtin_abort (); return 0; } #if __INT_MAX__ >= 2147483647L extern int f (char *, int); void test (void) { char buffer[65536]; char *bufptr; char *bufend; int bytes; bufptr = buffer; bufend = buffer + sizeof(buffer) - 1; while ((bytes = f (bufptr, bufend - bufptr)) > 0) bufptr += bytes; } #endif #ifndef __vax__ static const unsigned long static const double double cbrtl (double x) { long hx; double r,s,w; double lt; unsigned sign; typedef unsigned unsigned32 __attribute__((mode(SI))); union { double t; unsigned32 pt[2]; } ut, ux; int n0; ut.t = 1.0; n0 = (ut.pt[0] == 0); ut.t = 0.0; ux.t = x; hx ^=sign; if((hx| ux.pt[1-n0])==0) ux.pt[n0] = hx; ut.t*=x; ut.pt[n0]=ut.pt[n0]/3+B2; } else ut.pt[n0]=hx/3+B1; r=ut.t*ut.t/ux.t; s=C+r*ut.t; ut.t*=G+F/(s+E+D/s); ut.pt[1-n0]=0; ut.pt[n0]+=0x00000001; r=ux.t/s; w=ut.t+ut.t; ut.t=ut.t+ut.t*r; ut.pt[n0] |= sign; lt = ut.t; lt -= (lt - (x/(lt*lt))) * 0.333333333333333333333; return lt; } main () { if ((int) (cbrtl (27.0) + 0.5) != 3) abort (); exit (0); } #else main () { exit (0); } #endif #include <limits.h> #if INT_MAX <= 32767 int main () { exit (0); } #else void get_addrs (const char**x, int *y) { x[0] = "a1111" + (y[0] - 0x10000) * 2; x[1] = "a1112" + (y[1] - 0x20000) * 2; x[2] = "a1113" + (y[2] - 0x30000) * 2; x[3] = "a1114" + (y[3] - 0x40000) * 2; x[4] = "a1115" + (y[4] - 0x50000) * 2; x[5] = "a1116" + (y[5] - 0x60000) * 2; x[6] = "a1117" + (y[6] - 0x70000) * 2; x[7] = "a1118" + (y[7] - 0x80000) * 2; } int main () { const char *x[8]; int y[8]; int i; for (i = 0; i < 8; i++) y[i] = 0x10000 * (i + 1); get_addrs (x, y); for (i = 0; i < 8; i++) if (*x[i] != 'a') abort (); exit (0); } #endif register unsigned int c3r1 asm ("$c3r1"); extern unsigned int b, c; void __attribute__ ((nomips16)) foo () { unsigned int a, d; c3r1 = a; b = c3r1; c3r1 = c; d = c3r1; printf ("%d\n", d); } g (); f () { long ldata[2]; int seed; seed = (ldata[0]) + (ldata[1] << 16); g (seed); } typedef __SIZE_TYPE__ size_t; extern int printf (const char *, ...); extern void *memset (void *, int, size_t); int bar (int (*)(), int, void *); int main(int argc, char **argv) { struct s { int a; char b[argc]; }; int nested (struct s x) { return x.a + sizeof(x); } struct s t; memset (&t, 0, sizeof(t)); t.a = 123; printf("%d\n", bar (nested, argc, &t)); return 0; } #define SIZE 15 void f(char *a) __attribute__((noinline)); void f(char *a) { __builtin_memset (a, 0, SIZE); } int main(void) { int i; char b[SIZE]; for(i = 0; i < sizeof(b); i++) { b[i] = i; } f(b); for(i = 0; i < sizeof(b); i++) { if (0 != b[i]) __builtin_abort (); } return 0; } struct S { unsigned long long l1 : 48; }; static inline unsigned int foo (unsigned int x) { return (x >> 24) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | (x << 24); } __attribute__((noinline, noclone)) unsigned int bar (struct S *x) { return foo (x->l1); } int main () { if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4 || sizeof (unsigned long long) != 8) return 0; struct S s; s.l1 = foo (0xdeadbeefU) | (0xfeedULL << 32); if (bar (&s) != 0xdeadbeefU) __builtin_abort (); return 0; } typedef unsigned long long uint64_t; void f(uint64_t *a, uint64_t aa) __attribute__((noinline)); void f(uint64_t *a, uint64_t aa) { uint64_t new_value = aa; uint64_t old_value = *a; int bit_size = 32; uint64_t mask = (uint64_t)(unsigned)(-1); uint64_t tmp = old_value & mask; new_value &= mask; if (tmp > new_value) new_value += 1ull<<bit_size; new_value += old_value & ~mask; *a = new_value; } int main(void) { uint64_t value, new_value, old_value; value = 0x100000001; old_value = value; new_value = (value+1)&(uint64_t)(unsigned)(-1); f(&value, new_value); if (value != old_value+1) __builtin_abort (); return 0; } int f1() { { int ___() { foo(1); } bar(___); } return( { int ___() { foo(2); } bar(___);} ); } int f2(int j) { { int ___() { foo(j); } bar(___); } return( { int ___() { foo(j); } bar(___);} ); } double glob_dbl; f (pdbl, value) double *pdbl; double value; { if (pdbl == 0) pdbl = &glob_dbl; *pdbl = value; } main () { f ((void *) 0, 55.1); if (glob_dbl != 55.1) abort (); exit (0); } foo (a) { if (a) goto a1; goto a2; a1: goto a3; a2: goto a4; a3: goto a5; a4: goto a6; a5: goto a7; a6: goto a8; a7: goto a9; a8: goto a10; a9: goto a11; a10: goto a12; a11: goto a13; a12:; a13:; return -a; } #include "20031023-1.c" foo (short *p, short a) { return a < *p; } struct clock { long sec; long usec; }; int foo(void) { struct clock clock_old = {0, 0}; for (;;) { long foo; if (foo == clock_old.sec && 0 == clock_old.usec); } return 0; }   #include <limits.h> extern void abort (void); int f1() { return (int)2147483648.0f; } int f2() { return (int)(float)(2147483647); } int main() { #if INT_MAX == 2147483647 if (f1() != 2147483647) abort (); #ifdef __SPU__ if (f2() != 0x7fffff80) abort (); #else if (f2() != 2147483647) abort (); #endif #endif return 0; } g (x, y) { if (x != 3) abort (); } static inline f (int i) { int *tmp; tmp = (int *) alloca (sizeof (i)); *tmp = i; g (*tmp, 0); } main () { f (3); exit (0); }; typedef union { struct {int a; int b;} s; double d; } T; int h (T *); T g (T); #if COMPILER != 1 h (T *x) { if (x->s.a != 0 || x->s.b != 1) abort (); } #endif #if COMPILER != 2 T g (T x) { if (x.s.a != 13 || x.s.b != 47) abort (); x.s.a = 0; x.s.b = 1; h (&x); return x; } #endif #if COMPILER != 1 f () { T x; x.s.a = 13; x.s.b = 47; g (x); if (x.s.a != 13 || x.s.b != 47) abort (); x = g (x); if (x.s.a != 0 || x.s.b != 1) abort (); } #endif #if COMPILER != 2 main () { f (); exit (0); } #endif unsigned long long g(unsigned long long a) __attribute__((noinline)); unsigned long long g(unsigned long long a) { return __builtin_bswap64(a); } unsigned long long f(unsigned long long c) { union { unsigned long long a; unsigned char b[8]; } a, b; a.a = c; b.b[0] = a.b[7]; b.b[1] = a.b[6]; b.b[2] = a.b[5]; b.b[3] = a.b[4]; b.b[4] = a.b[3]; b.b[5] = a.b[2]; b.b[6] = a.b[1]; b.b[7] = a.b[0]; return b.a; } int main(void) { unsigned long long i; if (sizeof(i) != sizeof(char)*8) return 0; if (f(0x12) != g(0x12)) __builtin_abort(); if (f(0x1234) != g(0x1234)) __builtin_abort(); if (f(0x123456) != g(0x123456)) __builtin_abort(); if (f(0x12345678ull) != g(0x12345678ull)) __builtin_abort(); if (f(0x1234567890ull) != g(0x1234567890ull)) __builtin_abort(); if (f(0x123456789012ull) != g(0x123456789012ull)) __builtin_abort(); if (f(0x12345678901234ull) != g(0x12345678901234ull)) __builtin_abort(); if (f(0x1234567890123456ull) != g(0x1234567890123456ull)) __builtin_abort(); return 0; } struct S { double for_alignment; struct { int x, y, z; } a[16]; }; void f(struct S *s) __attribute__((noinline)); void f(struct S *s) { unsigned int i; for (i = 0; i < 16; ++i) { s->a[i].x = 0; s->a[i].y = 0; s->a[i].z = 0; } } int main (void) { struct S s; f (&s); return 0; } static int rule_text_needs_stack_pop = 0; static int input_stack_pos = 1; f (void) { rule_text_needs_stack_pop = 1; if (input_stack_pos <= 0) return 1; else return 0; } main () { f (); exit (0); } #include <stdarg.h> void foo(va_list v) { unsigned long long x = va_arg (v, unsigned long long); if (x != 16LL) abort(); } void bar(char c, char d, ...) { va_list v; va_start(v, d); foo(v); va_end(v); } int main(void) { bar(0, 0, 16LL); exit(0); } extern void abort (void); #define MIN(a, b) ((a) < (b) ? (a) : (b)) #define MAX(a, b) ((a) > (b) ? (a) : (b)) int main () { unsigned int u; int i = -1; u = MAX ((unsigned int) MAX (i, 0), 1); if (u != 1) abort (); u = MIN ((unsigned int) MAX (i, 0), (unsigned int) i); if (u != 0) abort (); return 0; } typedef struct sreal { } sreal; sreal_compare (sreal *a, sreal *b) { if (a->exp > b->exp) return 1; if (a->exp < b->exp) return -1; if (a->sig > b->sig) return 1; if (a->sig < b->sig) return -1; return 0; } sreal a[] = { { 0, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 } }; int main() { int i, j; for (i = 0; i <= 3; i++) { for (j = 0; j < 3; j++) { if (i < j && sreal_compare(&a[i], &a[j]) != -1) abort(); if (i == j && sreal_compare(&a[i], &a[j]) != 0) abort(); if (i > j && sreal_compare(&a[i], &a[j]) != 1) abort(); } } return 0; } typedef void foo (void); f (x) { if (x) { const foo* v; (*v)(); } else g (0); } extern void abort(void); struct packed_ushort { unsigned short ucs; } __attribute__((packed)); struct source { int pos, length; int flag; }; static void __attribute__((noinline)) fetch(struct source *p) { p->length = 128; } static struct packed_ushort __attribute__((noinline)) next(struct source *p) { struct packed_ushort rv; if (p->pos >= p->length) { if (p->flag) { p->flag = 0; fetch(p); return next(p); } p->flag = 1; rv.ucs = 0xffff; return rv; } rv.ucs = 0; return rv; } int main(void) { struct source s; int i; s.pos = 0; s.length = 0; s.flag = 0; for (i = 0; i < 16; i++) { struct packed_ushort rv = next(&s); if ((i == 0 && rv.ucs != 0xffff) || (i > 0 && rv.ucs != 0)) abort(); } return 0; } long double C = 2; long double U = 1; long double Y2 = 3; long double Y1 = 1; long double X, Y, Z, T, R, S; main () { X = (C + U) * Y2; Y = C - U - U; Z = C + U + U; T = (C - U) * Y1; X = X - (Z + U); R = Y * Y1; S = Z * Y2; T = T - Y; Y = (U - Y) + R; Z = S - (Z + U + U); R = (Y2 + U) * Y1; Y1 = Y2 * Y1; R = R - Y2; Y1 = Y1 - 0.5L; if (Z != 6) abort (); exit (0); } int r, t; static void initRGB() { t = ((r*255/3) & 0xff) << 16; } void bar (void); void foo (char *x) { char a; _Bool b, c, d, e, f, g, h, i, j, k, l, m; a = *x; b = a == 100; c = a == 105; d = b | c; e = a != 111; f = !d; g = e & f; h = a != 117; i = g & h; j = a != 120; k = i & j; l = a != 88; m = k & l; if (m == 0) bar (); } #if defined(__i386__) && defined(__FreeBSD__) #include <ieeefp.h> #endif double d (unsigned long long k) { double x; x = (double) k; return x; } float s (unsigned long long k) { float x; x = (float) k; return x; } main () { unsigned long long int k; double x; #if defined(__i386__) && defined(__FreeBSD__) fpsetprec (FP_PE); #endif if (sizeof (double) >= 8) { k = 0x8693ba6d7d220401ULL; x = d (k); k = (unsigned long long) x; if (k != 0x8693ba6d7d220800ULL) abort (); } k = 0x8234508000000001ULL; x = s (k); k = (unsigned long long) x; #ifdef __SPU__ if (k != 0x8234500000000000ULL) abort (); #else if (k != 0x8234510000000000ULL) abort (); #endif exit (0); } f() { int x[20] = {[0] = 5, [10] = 12}; } #if __SIZEOF_INT__ > 2 struct __attribute__((packed)) S { unsigned s : 22; }; #else struct __attribute__((packed)) S { unsigned s : 12; }; #endif struct __attribute__((packed)) T { struct S t; } c; int a, b, d; void foo (void) { if (1 ? (!c.t.s & (d < 0)) < a : 0) b = 0; } int lx (int oi, int mb) { return (oi < mb) < (mb < oi); } __attribute__((noinline, noclone)) long long int foo (long long int x, long long int y) { if (((int) x | (int) y) != 0) return 6; return x + y; } int main () { if (sizeof (long long) == sizeof (int)) return 0; int shift_half = sizeof (int) * __CHAR_BIT__ / 2; long long int x = (3LL << shift_half) << shift_half; long long int y = (5LL << shift_half) << shift_half; long long int z = foo (x, y); if (z != ((8LL << shift_half) << shift_half)) __builtin_abort (); return 0; } void g (int s, int f) { &&ff; s = f; ff: goto end; f = s; end:; } /* { dg-options "-Wno-psabi" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } */ struct A { int i; int x[]; }; int foo(struct A a) { return (a,a).x[0]; } extern char foo; char foo __attribute__ ((__section__(".mysection"))); #define OP1(L, N, R, I, J) L N##I##J R #define OP2(L, N, R, I) \ OP1(L, N, R, 0, I), OP1(L, N, R, 1, I), \ OP1(L, N, R, 2, I), OP1(L, N, R, 3, I) #define OP(L, N, R) \ OP2(L, N, R, 0), OP2(L, N, R, 1), OP2(L, N, R, 2), OP2(L, N, R, 3), \ OP2(L, N, R, 4), OP2(L, N, R, 5), OP2(L, N, R, 6), OP2(L, N, R, 7) #define DECLARE(N) OP (, N,) #define COPYIN(N, ADDR) OP (, N, = *(ADDR++)) #define COPYOUT(N, ADDR) OP (*(ADDR++) =, N,) #define ADD(N, ADDR) OP (, N, += *(ADDR++)) volatile double gd[32]; volatile float gf[32]; void foo (int n) { double DECLARE(d); float DECLARE(f); volatile double *pd; volatile float *pf; int i; pd = gd; COPYIN (d, pd); for (i = 0; i < n; i++) { pf = gf; COPYIN (f, pf); pd = gd; ADD (d, pd); pd = gd; ADD (d, pd); pd = gd; ADD (d, pd); pf = gf; COPYOUT (f, pf); } pd = gd; COPYOUT (d, pd); } int main () { int i; for (i = 0; i < 32; i++) gd[i] = i, gf[i] = i; foo (1); for (i = 0; i < 32; i++) if (gd[i] != i * 4 || gf[i] != i) abort (); exit (0); } extern void abort (void); extern void exit (int); int f(j)int j;{return++j>0;} int main(){if(f((~0U)>>1))abort();exit(0);} int foo (double x, long double y) { return __builtin_isgreater (x, y); } struct s { char c1, c2; }; void foo (struct s s) { static struct s s1; s1 = s; } int main () { static struct s s2; foo (s2); exit (0); } main() { char ca = 1; if (i >> ca != -1073741824L) abort (); if (i >> i / -2000000000L != -1073741824L) abort (); exit (0); } extern void foo (int); void bar (unsigned long l) { foo(l == 0); } void __attribute__((noinline)) foo (int *p, int d1, int d2, int d3, short count, int s1, int s2, int s3, int s4, int s5) { int n = count; while (n--) { *p++ = s1; *p++ = s2; *p++ = s3; *p++ = s4; *p++ = s5; } } int main() { int x[10], i; foo (x, 0, 0, 0, 2, 100, 200, 300, 400, 500); for (i = 0; i < 10; i++) if (x[i] != (i % 5 + 1) * 100) abort (); exit (0); } expand_to_ascii (int *i, int *o) { unsigned x, y, out; unsigned x1; x = *i++; y = x >> (32 - 13); out = (y / 91); out = (out << 8) | (y % 91); x <<= 13; y = x >> (32 - 13); out = (out << 8) | (y / 91); out = (out << 8) | (y % 91); *o++ = out + 0x20202020; x1 = *i++; x = (x << 26) | (x1 >> 6); } extern void abort (void); int cnt; __attribute__((noinline, noclone)) void foo (unsigned int x, unsigned int y) { unsigned int minv, maxv; if (x == 1 || y == -2U) return; minv = x < y ? x : y; maxv = x > y ? x : y; if (minv == 1) ++cnt; if (maxv == -2U) ++cnt; } int main () { foo (-2U, 1); if (cnt != 2) abort (); return 0; } extern void abort(void); int foo () { int mat[2][1]; int (*a)[1] = mat; int det = 0; int i; mat[0][0] = 1; mat[1][0] = 2; for (i = 0; i < 2; ++i) det += a[i][0]; return det; } int main() { if (foo () != 3) abort (); return 0; } extern int bar (); extern void baz (); void foo () { int x; do { if ((x = bar ()) == 1) baz (); } while (x == 1); } #include <stdarg.h> va_double (int n, ...) { va_list args; va_start (args, n); if (va_arg (args, double) != 3.141592) abort (); if (va_arg (args, double) != 2.71827) abort (); if (va_arg (args, double) != 2.2360679) abort (); if (va_arg (args, double) != 2.1474836) abort (); va_end (args); } va_long_double (int n, ...) { va_list args; va_start (args, n); if (va_arg (args, long double) != 3.141592L) abort (); if (va_arg (args, long double) != 2.71827L) abort (); if (va_arg (args, long double) != 2.2360679L) abort (); if (va_arg (args, long double) != 2.1474836L) abort (); va_end (args); } main () { va_double (4, 3.141592, 2.71827, 2.2360679, 2.1474836); va_long_double (4, 3.141592L, 2.71827L, 2.2360679L, 2.1474836L); exit (0); } union { char *p; float f; } u; void f (void) { u.p = ""; u.f += 1.1f; } int a, b, d = 1, e, f, o, u, w = 1, z; short c, q, t; int main () { char g; for (; d; d--) { while (o) for (; e;) { c = b; int h = o = z; for (; u;) for (; a;) ; } if (t < 1) g = w; f = g; g && (q = 1); } if (q != 1) __builtin_abort (); return 0; } int _IO_getc(int*); read_long(int *fp) { unsigned char b0, b1, b2, b3; b0 = _IO_getc (fp); b1 = _IO_getc (fp); b2 = _IO_getc (fp); b3 = _IO_getc (fp); return ((int)(((((b3 << 8) | b2) << 8) | b1) << 8) | b0); } struct big { int data[1000000]; }; struct small { int data[10]; }; union both { struct big big; struct small small; }; extern void *calloc (__SIZE_TYPE__, __SIZE_TYPE__); extern void free (void *); static int __attribute__((noinline)) foo (int fail, union both *agg) { int r; if (fail) r = agg->big.data[999999]; else r = agg->small.data[0]; return r; } int main (int argc, char *argv[]) { union both *agg = calloc (1, sizeof (struct small)); int r; r = foo ((argc > 2000), agg); free (agg); return r; } typedef int Int32; void use_it(int); void FindAndReadSignature(int processedSize) { int numPrevBytes = 1; for (;;) { int numBytesInBuffer = numPrevBytes + processedSize; Int32 numTests = numBytesInBuffer - 1; use_it (numTests); numPrevBytes = numBytesInBuffer - numTests; } } typedef __SIZE_TYPE__ size_t; typedef void *XtPointer; typedef struct _WidgetRec *Widget; typedef struct _WidgetClassRec *WidgetClass; extern WidgetClass commandWidgetClass; typedef void (*XtCallbackProc)( Widget , XtPointer , XtPointer ); extern const char XtStrings[]; typedef struct { char *Name, *Label; XtCallbackProc Callback; XtPointer ClientData; Widget W; } DialogButtonType, *DialogButtonTypePtr; Widget AddButtons(Widget Parent, Widget Top, DialogButtonTypePtr Buttons, size_t Count) { int i; for (i = 0; i < Count; i++) { if (!Buttons[i].Label) continue; Buttons[i].W = XtVaCreateManagedWidget(Buttons[i].Name, commandWidgetClass, Parent, ((char*)&XtStrings[429]) , Buttons[i].Label, "fromHoriz" , i ? Buttons[i-1].W : ((void *)0) , "fromVert" , Top, "resizable" , 1 , ((void *)0) ); XtAddCallback(((char*)&XtStrings[136]), Buttons[i].Callback, Buttons[i].ClientData); } return(Buttons[Count-1].W); } x(a)double a;{int i;return i>a?i:i+1;} long long signed_poly (long long sum, long x) { sum += (long long) (long) sum * (long long) x; return sum; } unsigned long long unsigned_poly (unsigned long long sum, unsigned long x) { sum += (unsigned long long) (unsigned long) sum * (unsigned long long) x; return sum; } int main (void) { if (signed_poly (2LL, -3) != -4LL) abort (); if (unsigned_poly (2ULL, 3) != 8ULL) abort (); exit (0); } register unsigned long c3r1 asm ("$c3r1"), c3r2 asm ("$c3r2"); extern unsigned long b, c; void __attribute__ ((nomips16)) foo () { unsigned long a, d; c3r1 = a; b = c3r1; c3r2 = c; d = c3r1; printf ("%d\n", d); } const signed char nunmap[] = { 17, -1, 1 }; __attribute__((noinline)) void ff(int i) { asm volatile(""); } __attribute__((noinline)) void f(short delta) { short p0 = 2, s; for (s = 0; s < 2; s++) { p0 += delta; ff(s); if (nunmap[p0] == 17) asm volatile(""); } } int main(void) { f(-1); return 0; } double u2d (unsigned int u) { return u; } double i2d (signed int i) { return i; } unsigned int d2u (double d) { return d; } signed int d2i (double d) { return d; } main () { printf ("%lf, %lf, %lf\n", u2d (~0), u2d (1 << 31), u2d (1)); printf ("%lf, %lf, %lf\n", i2d (~0), i2d (1 << 31), i2d (1)); printf ("%u, %u, %u\n", d2u (u2d (~0)), d2u (u2d (1 << 31)), d2u (u2d (1))); printf ("%d, %d, %d\n", d2i (i2d (~0)), d2i (i2d (1 << 31)), d2i (i2d (1))); } extern void abort (void); int g(int i, int j) { if (i>-1) if (i<2) { if (i != j) { if (j != 0) return 0; } } return 1; } int main(void) { if (!g(1, 0)) abort (); return 0; } void f(void) { unsigned int butterfly, block, offset; double *Z; for (block = 0; block < 512; block += 512) { double T1re, T2re; offset = butterfly + block; T1re += T2re; T2re = Z[offset] + T1re; } } f() { unsi