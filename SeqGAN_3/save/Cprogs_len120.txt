#include <stdio.h> int main ( ) { int rad ; float PI = 3.14 , area , ci ; printf ( " \n  Enter radius of circle : " ) ; scanf ( " %d " , & rad ) ; area = PI * rad * rad ; printf ( " \n Area of circle : %f " , area ) ; ci = 2 * PI * rad ; printf ( " \n Circumference : %f " , ci ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int side ; float area , r_4 ; r_4 = sqrt ( 3 ) / 4 ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = r_4 * side * side ; printf ( " \n Area of Equilateral Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int base , height ; float area ; printf ( " \n Enter the base of Right Angle Triangle : " ) ; scanf ( " %d " , & base ) ; printf ( " \n Enter the height of Right Angle Triangle : " ) ; scanf ( " %d " , & height ) ; area = 0.5 * base * height ; printf ( " \n Area of Right Angle Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float radius , area ; printf ( " \n Enter the radius of Circle : " ) ; scanf ( " %d " , & radius ) ; area = 3.14 * radius * radius ; printf ( " \n Area of Circle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int length , breadth , area ; printf ( " \n Enter the Length of Rectangle : " ) ; scanf ( " %d " , & length ) ; printf ( " \n Enter the Breadth of Rectangle : " ) ; scanf ( " %d " , & breadth ) ; area = length * breadth ; printf ( " \n Area of Rectangle : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int side , area ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = side * side ; printf ( " \n Area of Square : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int numArray [ 10 ] ; int i , sum = 0 ; int * ptr ; printf ( " \n Enter 10 elements : " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %d " , & numArray [ i ] ) ; ptr = numArray ; for ( i = 0 ; i < 10 ; i + + ) { sum = sum + * ptr ; ptr + + ; } printf ( " The sum of array elements : %d " , sum ) ; }
#include <stdio.h> int main ( ) { int gross_salary , basic , da , ta ; printf ( " Enter basic salary : " ) ; scanf ( " %d " , & basic ) ; da = ( 10 * basic ) / 100 ; ta = ( 12 * basic ) / 100 ; gross_salary = basic + da + ta ; printf ( " \n Gross salary : %d " , gross_salary ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , rem , rev = 0 ; printf ( " \n Enter any no to be reversed : " ) ; scanf ( " %d " , & num ) ; while ( num > = 1 ) { rem = num % 10 ; rev = rev * 10 + rem ; num = num / 10 ; } printf ( " \n Reversed Number : %d " , rev ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int s1 , s2 , s3 , s4 , s5 , sum , total = 500 ; float per ; printf ( " \n Enter marks of 5 subjects : " ) ; scanf ( " %d %d %d %d %d " , & s1 , & s2 , & s3 , & s4 , & s5 ) ; sum = s1 + s2 + s3 + s4 + s5 ; printf ( " \n Sum : %d " , sum ) ; per = ( sum * 100 ) / total ; printf ( " \n Percentage : %f " , per ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " \n Enter temp in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( 1.8 * celsius ) + 32 ; printf ( " \n Temperature in Fahrenheit : %f " , fahrenheit ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int amount , rate , time , si ; printf ( " \n Enter Principal Amount : " ) ; scanf ( " %d " , & amount ) ; printf ( " \n Enter Rate of Interest : " ) ; scanf ( " %d " , & rate ) ; printf ( " \n Enter Period of Time : " ) ; scanf ( " %d " , & time ) ; si = ( amount * rate * time ) / 100 ; printf ( " \n Simple Interest : %d " , si ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , sum ; printf ( " \n Enter two no : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int fact ( int ) ; int main ( ) { int factorial , num ; printf ( " Enter the value of num : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial is %d " , factorial ) ; return ( 0 ) ; } int fact ( int n ) { if ( n = = 0 ) { return ( 1 ) ; } return ( n * fact ( n - 1 ) ) ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " \n Enter value for num1 & num2 : " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " \n After swapping value of a : %d " , a ) ; printf ( " \n After swapping value of b : %d " , b ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " % d " , i ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d " , i ) ; i + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " %d " , i ) ; i + + ; } while ( i < = 10 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , i , count = 0 ; char str1 [ 10 ] , str2 [ 10 ] ; printf ( " nEnter a number : " ) ; scanf ( " %d " , & num ) ; sprintf ( str1 , " %d " , num ) ; strcpy ( str2 , str1 ) ; strrev ( str2 ) ; count = strcmp ( str1 , str2 ) ; if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , i , count = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num % i = = 0 ) { count + + ; break ; } } if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , temp , sum = 0 , rem ; printf ( " \n Enter number for checking Armstrong : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( num ! = 0 ) { rem = num % 10 ; sum = sum + ( rem * rem * rem ) ; num = num / 10 ; } if ( temp = = sum ) printf ( " %d is Amstrong Number " , temp ) ; else printf ( " %d is Amstrong Number " , temp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , i = 1 , sum = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; while ( i < num ) { if ( num % i = = 0 ) { sum = sum + i ; } i + + ; } if ( sum = = num ) printf ( " %d is a Perfect Number " , i ) ; else printf ( " %d is Non Perfect Number " , i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; char ch ; for ( i = 0 ; i < 256 ; i + + ) { printf ( " %c " , ch ) ; ch = ch + 1 ; } }
#include <stdio.h> int main ( int args , char * argv [ ] ) { int i = 0 ; for ( i = 0 ; i < args ; i + + ) printf ( " \n  %s " , argv [ i ] ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { unsigned int mask ; clrscr ( ) ; printf ( " Memory Required : %d butes " , sizeof ( mask ) ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void binary ( unsigned int ) ; void main ( ) { unsigned int num ; printf ( " Enter Decimal Number : " ) ; scanf ( " %u " , & num ) ; binary ( num ) ; getch ( ) ; } void binary ( unsigned int num ) { unsigned int mask = 32768 ; printf ( " Binary Eqivalent : " ) ; while ( mask > 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i , sum = 0 ; if ( argc ! = 3 ) { printf ( " You have forgot to type numbers. " ) ; exit ( 1 ) ; } printf ( " The sum is : " ) ; for ( i = 1 ; i < argc ; i + + ) sum = sum + atoi ( argv [ i ] ) ; printf ( " %d " , sum ) ; }
#include <stdio.h> int main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f + %f = %f\n  " , a , b , a + b ) ; printf ( " %f - %f = %f\n  " , a , b , a - b ) ; printf ( " %f * %f = %f\n  " , a , b , a * b ) ; printf ( " %f / %f = %f\n  " , a , b , a / b ) ; return ( 0 ) ; }
#include <stdio.h> main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f % % %f = %fn " , a , b , a % b ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { FILE * fp1 , * fp2 ; char ch ; clrscr ( ) ; fp1 = fopen ( " Sample.txt " , " r " ) ; fp2 = fopen ( " Output.txt " , " w " ) ; while ( 1 ) { ch = fgetc ( fp1 ) ; if ( ch = = EOF ) break ; else putc ( ch , fp2 ) ; } printf ( " File copied Successfully! " ) ; fclose ( fp1 ) ; fclose ( fp2 ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x1 = 200 , y1 = 200 ; int x2 = 300 , y2 = 300 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; line ( x1 , y1 , x2 , y2 ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 100 , 175 , 110 , 200 ) ; line ( 100 , 175 , 125 , 175 ) ; outtextxy ( 200 , 150 , " PNP Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 140 , 190 , 150 , 210 ) ; line ( 130 , 210 , 150 , 210 ) ; outtextxy ( 100 , 250 , " NPN Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; outtextxy ( 110 , 60 , " C " ) ; line ( 80 , 100 , 100 , 100 ) ; line ( 100 , 80 , 100 , 120 ) ; line ( 120 , 80 , 120 , 120 ) ; line ( 120 , 100 , 140 , 100 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 300 , 100 , 200 , 200 ) ; line ( 300 , 100 , 400 , 200 ) ; line ( 200 , 200 , 400 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x = 200 , y = 200 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; outtextxy ( x , y , " Hello World " ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; circle ( 300 , 300 , 50 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; int main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) { printf ( " Mouse support not available.n " ) ; } else { showmouseptr ( ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; union REGS i , o ; int main ( ) { int flag ; flag = initmouse ( ) ; if ( flag = = 0 ) { printf ( " Mouse support not available. " ) ; } else { printf ( " Mouse support available. " ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; }
#include <stdio.h> #include <conio.h> int string_ln ( char * ) ; void main ( ) { char str [ 20 ] ; int length ; clrscr ( ) ; printf ( " \n Enter any string : " ) ; gets ( str ) ; length = string_ln ( str ) ; printf ( " The length of the given string %s is : %d " , str , length ) ; getch ( ) ; } int string_ln ( char * p ) { int count = 0 ; while ( * p ! = '\0' ) { count + + ; p + + ; } return count ; }
#include <stdio.h> int main ( ) { int * ptr1 , * ptr2 ; int num ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , ptr1 , ptr2 ) ; num = * ptr1 + * ptr2 ; printf ( " Sum = %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch = ' * ' ; int i , j , no_of_spaces = 4 , spaceCount ; for ( i = 1 ; i < = 5 ; i + + ) { for ( spaceCount = no_of_spaces ; spaceCount > = 1 ; spaceCount-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %2c " , ch ) ; } printf ( " \n  " ) ; no_of_spaces-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k = 1 ; int range ; printf ( " Enter the range : " ) ; scanf ( " %d " , & range ) ; printf ( " \n FLOYD'S TRIANGLE : \n  " ) ; for ( i = 1 ; i < = range ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , num , j , xpos = 30 , ypos = 10 ; clrscr ( ) ; printf ( " Enter n ( between 2 & 9 ) : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { gotoxy ( xpos , ypos ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %d " , i ) ; xpos = xpos - 1 ; ypos + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , num = 2 ; for ( i = 0 ; i < 4 ; i + + ) { num = 2 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , num ) ; num = num + 2 ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 10 ; j + + ) { if ( i = = 0 || i = = 9 || j = = 0 || j = = 9 ) printf ( " ▲ " ) ; else printf ( " - " ) ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; printf ( " Enter the number of Digits : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < = num ; i + + ) { for ( j = 0 ; j < i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < = 6 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , i * j ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) { printf ( " %d\t " , count ) ; count + + ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = ' * ' ; for ( i = 4 ; i > = 0 ; i-- ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) printf ( " %c " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 1 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , count % 2 ) ; count + + ; } if ( i % 2 = = 0 ) count = 1 ; else count = 0 ; } return ( 0 ) ; }
#include <stdio.h> int calculateSum ( int ) ; int main ( ) { int i , num ; int result ; printf ( " Input a number : " ) ; scanf ( " %d " , & num ) ; result = calculateSum ( num ) ; printf ( " \n Sum of Number From 1 to %d : %d " , num , result ) ; return ( 0 ) ; } int calculateSum ( int num ) { int res ; if ( num = = 1 ) { return ( 1 ) ; } else { res = num + calculateSum ( num - 1 ) ; } return ( res ) ; }
#include <stdio.h> int calsum ( int num ) { int rem , sum ; if ( num ! = 0 ) { rem = num % 10 ; sum = sum + rem ; calsum ( num / 10 ) ; } return sum ; } int main ( ) { int num , val ; printf ( " \n Enter a number : " ) ; scanf ( " %d " , & num ) ; val = calsum ( num ) ; printf ( " \n Sum of the digits of %d is : %d " , num , val ) ; return 0 ; }
#include <stdio.h> struct stud { int roll ; char name [ 10 ] ; int marks ; } ; int main ( ) { int size ; struct stud s ; size = sizeof ( s ) ; printf ( " nSize of Structure : %d " , size ) ; return ( 0 ) ; }
#include <stdio.h> typedef struct XYZ { int far * fptr ; double dvar ; unsigned char ch ; } xyz ; int main ( ) { xyz * ptr = ( XYZ * ) 1000 ; printf ( " Size of Pointer to structure : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int far * ptr ; printf ( " Size of Integer Far Pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float a = 3.14 , * fptr ; fptr = & a ; printf ( " Size of Float Pointer : %d " , sizeof ( fptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char a = 'a' , * cptr ; cptr = & a ; printf ( " \n Size of Char Pointer : %d " , sizeof ( cptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a = 10 , * ptr ; ptr = & a ; printf ( " Size of int pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; char marks [ 3 ] ; printf ( " Please Enter Marks : " ) ; scanf ( " %s " , marks ) ; num = atoi ( marks ) ; printf ( " \n Marks : %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " String before to strupr : %sn " , string ) ; strupr ( string ) ; printf ( " String after strupr : %sn " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strupr ( string ) ; printf ( " String after strupr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " \n String before to strlwr : %s " , string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; strcpy ( str2 , str1 ) ; printf ( " \n Copied String : %s " , str2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; char str3 [ 100 ] ; int len ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; printf ( " \n Enter the String 2 : " ) ; gets ( str2 ) ; strcpy ( str3 , str1 ) ; strcat ( str3 , str2 ) ; printf ( " \n Concated String : %s " , str3 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] ; int len ; printf ( " \n Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " \n Length of Given String : %d " , len ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> char * encode ( char * str ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { str [ i ] = str [ i ] - 30 ; i + + ; } return ( str ) ; } void main ( ) { char * str ; printf ( " \n Enter the String to be Encode : " ) ; gets ( str ) ; str = encode ( str ) ; printf ( " \n Encoded String : %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] , temp ; int i , j = 0 ; printf ( " \n Enter the string : " ) ; gets ( str ) ; i = 0 ; j = strlen ( str ) - 1 ; while ( i < j ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; i + + ; j-- ; } printf ( " \n Reverse string is : %s " , str ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; int i ; printf ( " \n Enter the string : " ) ; gets ( s1 ) ; i = 0 ; while ( s1 [ i ] ! = '\0' ) { s2 [ i ] = s1 [ i ] ; i + + ; } s2 [ i ] = '\0' ; printf ( " \n Copied String is %s " , s2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " Character is uppercase Letters " ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " Character is Not Lowercase Letters " ) ; } else { printf ( " Non alphabet character " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 97 & & ch < = 122 ) printf ( " Character is Lowercase Letters " ) ; else printf ( " Character is Not Lowercase Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 65 & & ch < = 90 ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int FindLength ( char str [ ] ) ; int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = FindLength ( str ) ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; } int FindLength ( char str [ ] ) { int len = 0 ; while ( str [ len ] ! = '\0' ) len + + ; return ( len ) ; }
#include <stdio.h> int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = 0 ; while ( str [ length ] ! = '\0' ) length + + ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , digits ; char ch [ 10 ] ; printf ( " \n Enter the Number : " ) ; scanf ( " %d " , & num ) ; sprintf ( ch , " %d " , num ) ; digits = strlen ( ch ) ; printf ( " \n Number of Digits : %d " , digits ) ; return ( 0 ) ; }
#include <stdio.h> void main ( ) { int a = 3 , b = 3 , c ; asm { mov ax , a mov bx , a add ax , bx mov c , ax } printf ( " %d " , c ) ; }
#include <stdio.h> int main ( ) { char para [ 100 ] ; printf ( " Enter Paragraph : " ) ; scanf ( " % [ ^\t ] s " , para ) ; printf ( " Accepted Paragraph : %s " , para ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { while ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { switch ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { if ( printf ( " " ) ) { } else if ( printf ( " Hello " ) ) { } else { } }
#include <stdio.h> void main ( ) { while ( !printf ( " Hello " ) ) { } }
#include <stdio.h> #define PRINT printf ( " Hello " ) void main ( ) { if ( PRINT ) { } }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " %d " , printf ( " abcdefghijklmnopqrstuvwxyz " ) ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int num = 1342 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , num ) ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " nEnte the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed + Original Num = %d " , num1 + num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " \n Ente the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed Number : " ) ; printf ( " %d " , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int number = 12354 ; int sum = 0 ; for ( ; number > 0 ; sum + = number % 10 , number / = 10 ) ; printf ( " \n Sum of the Digits : %d " , sum ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " \n Enter First Number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " \n Enter Second Number : " ) ; scanf ( " %d " , & num2 ) ; num1 = num1 ^ num2 ; num2 = num1 ^ num2 ; num1 = num1 ^ num2 ; printf ( " \n  Numbers after Exchange : " ) ; printf ( " \n  Num1 = %d and Num2 = %d " , num1 , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int add ( int , int ) ; int main ( ) { int num1 , num2 ; printf ( " \n Enter the two Numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n Addition of two num is : %d " , add ( num1 , num2 ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { if ( !num1 ) return num2 ; else return add ( ( num1 & num2 ) < < 1 , num1 ^ num2 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2 > 0 ) { num1 + + ; num2-- ; } printf ( " %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2-- ) { num1 + + ; } printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int sum ( int , int ) ; int main ( ) { int a , b ; printf ( " Enter the two Numbers : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Addition of two num. is : %d " , add ( a , b ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { int i ; for ( i = 0 ; i < num2 ; i + + ) num1 + + ; return num1 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 ; num1 = num1 - ( -num2 ) ; printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> #include " myhead.h " void main ( ) { int num1 = 10 , num2 = 10 , num3 ; num3 = add ( num1 , num2 ) ; printf ( " Addition of Two numbers : %d " , num3 ) ; }
#include <stdio.h> #define begin main int begin ( ) { printf ( " Hello " ) ; return ( 0 ) ; }
#include <stdio.h> #define begin m##a##i##n void begin ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #define begin ( m , a , i , n ) m##a##i##n #define start begin ( m , a , i , n ) void start ( ) { printf ( " Hello " ) ; }
#include <dos.h> void main ( ) { char * path = " BIN " ; _AH = 0x39 ; _DX = ( unsigned int ) path ; __int__ ( 0x21 ) ; }
#include <dos.h> void main ( ) { char * message = " Pritesh Taral$ " ; _AH = 9 ; _DX = ( int ) message ; geninterrupt ( 0x21 ) ; }
#include <stdio.h> void main ( ) { printf ( " 1 " ) ; printf ( " 2 " ) ; printf ( " 3 " ) ; printf ( " 4 " ) ; printf ( " 5 " ) ; printf ( " 6 " ) ; printf ( " 7 " ) ; printf ( " 8 " ) ; printf ( " 9 " ) ; printf ( " 10 " ) ; }
#include <stdio.h> void printNumber ( int value ) { int i ; printf ( " %d\n  " , value ) ; i = value + 1 ; if ( i > 10 ) return ; printNumber ( i ) ; } void main ( ) { printNumber ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; Start : i = i + 1 ; printf ( " %d " , i ) ; if ( i < = 10 ) goto Start ; }
#include <stdio.h> void main ( ) { static int i = 1 ; if ( i < = 10 ) { printf ( " %d " , i + + ) ; main ( ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { FILE * fp ; char str [ 80 ] , fname [ 50 ] ; printf ( " Enter the file name : " ) ; scanf ( " %s " , fname ) ; if ( ( fp = fopen ( fname , " r " ) ) = = NULL ) { printf ( " cannot open file " ) ; exit ( 1 ) ; } while ( !feof ( fp ) ) { fgets ( str , 79 , fp ) ; printf ( " %s " , str ) ; } fclose ( fp ) ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { FILE * fp ; char str [ 80 ] , fname [ 50 ] ; printf ( " Enter the file name : " ) ; scanf ( " %s " , fname ) ; if ( ( fp = fopen ( fname , " r " ) ) = = NULL ) { printf ( " cannot open file " ) ; exit ( 1 ) ; } while ( !feof ( fp ) ) { fgets ( str , 79 , fp ) ; printf ( " %s " , str ) ; } fclose ( fp ) ; }
#include <stdio.h> void main ( ) { float a = 15.0 ; float b = 4.0 ; printf ( " %f + %f = %fn " , a , b , a + b ) ; printf ( " %f - %f = %fn " , a , b , a - b ) ; printf ( " %f * %f = %fn " , a , b , a * b ) ; printf ( " %f / %f = %fn " , a , b , a / b ) ; }
#include <stdio.h> void main ( ) { float a = 15.0 ; float b = 4.0 ; printf ( " %f + %f = %fn " , a , b , a + b ) ; printf ( " %f - %f = %fn " , a , b , a - b ) ; printf ( " %f * %f = %fn " , a , b , a * b ) ; printf ( " %f / %f = %fn " , a , b , a / b ) ; }
#include <stdio.h> main ( ) { int a = 25 ; int b = 5 ; printf ( " %d + %d = %d\n  " , a , b , a + b ) ; printf ( " %d - %d = %d\n  " , a , b , a - b ) ; printf ( " %d * %d = %d\n  " , a , b , a * b ) ; printf ( " %d / %d = %d\n  " , a , b , a / b ) ; printf ( " %d % % %d = %d\n  " , a , b , a % b ) ; }
#include <stdio.h> main ( ) { int a = 25 ; int b = 5 ; printf ( " %d + %d = %d\n  " , a , b , a + b ) ; printf ( " %d - %d = %d\n  " , a , b , a - b ) ; printf ( " %d * %d = %d\n  " , a , b , a * b ) ; printf ( " %d / %d = %d\n  " , a , b , a / b ) ; printf ( " %d % % %d = %d\n  " , a , b , a % b ) ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = number ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum-- ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = number ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum-- ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = 1 ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = 1 ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; displayNum = number ; for ( row = 1 ; row < = number ; row + + , displayNum-- ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , displayNum ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; displayNum = number ; for ( row = 1 ; row < = number ; row + + , displayNum-- ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , displayNum ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , row = 1 , i ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; row < = num ; row + + ) { for ( i = 1 ; i < = row ; i + + ) { printf ( " @ " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , row = 1 , i ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; row < = num ; row + + ) { for ( i = 1 ; i < = row ; i + + ) { printf ( " @ " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , r = 1 , i , space ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( ; num > = 1 ; num-- , r + + ) { for ( space = r ; space > 1 ; space-- ) { printf ( " \t " ) ; } for ( i = 1 ; i < = num ; i + + ) { printf ( " @\t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , r = 1 , i , space ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( ; num > = 1 ; num-- , r + + ) { for ( space = r ; space > 1 ; space-- ) { printf ( " \t " ) ; } for ( i = 1 ; i < = num ; i + + ) { printf ( " @\t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " C\tF " ) ; printf ( " \n ------------ " ) ; celsius = lower ; while ( celsius < = upper ) { fahrenheit = ( 9.0 / 5.0 ) * celsius + 32.0 ; printf ( " \n  %3.0f %6.1f " , celsius , fahrenheit ) ; celsius = celsius + step ; } return 0 ; }
#include <stdio.h> int main ( ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " C\tF " ) ; printf ( " \n ------------ " ) ; celsius = lower ; while ( celsius < = upper ) { fahrenheit = ( 9.0 / 5.0 ) * celsius + 32.0 ; printf ( " \n  %3.0f %6.1f " , celsius , fahrenheit ) ; celsius = celsius + step ; } return 0 ; }
#include <stdio.h> int main ( void ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " F\tC " ) ; printf ( " \n ------------ " ) ; fahrenheit = lower ; while ( fahrenheit < = upper ) { celsius = ( 5.0 / 9.0 ) * ( fahrenheit - 32.0 ) ; printf ( " \n  %3.0f %6.1f " , fahrenheit , celsius ) ; fahrenheit = fahrenheit + step ; } return 0 ; }
#include <stdio.h> int main ( void ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " F\tC " ) ; printf ( " \n ------------ " ) ; fahrenheit = lower ; while ( fahrenheit < = upper ) { celsius = ( 5.0 / 9.0 ) * ( fahrenheit - 32.0 ) ; printf ( " \n  %3.0f %6.1f " , fahrenheit , celsius ) ; fahrenheit = fahrenheit + step ; } return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { printf ( " \n Hello , world\a " ) ; printf ( " \n Hello , world\b " ) ; printf ( " \n Hello , world\c " ) ; printf ( " \n Hello , world\d " ) ; printf ( " \n Hello , world\e " ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { printf ( " \n Hello , world\a " ) ; printf ( " \n Hello , world\b " ) ; printf ( " \n Hello , world\c " ) ; printf ( " \n Hello , world\d " ) ; printf ( " \n Hello , world\e " ) ; return 0 ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) }
#include <stdio.h> main ( ) { printf ( " hello , world\n  " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) }
#include <stdio.h> main ( ) { printf ( " hello , world\n  " ) ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; number > = row ; row + + ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , row ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; number > = row ; row + + ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , row ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " \n Enter value for num1 & num2 : " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " \n After swapping value of a : %d " , a ) ; printf ( " \n After swapping value of b : %d " , b ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , row , column ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; num > = row ; row + + ) { for ( column = 1 ; column < = num ; column + + ) { printf ( " # " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { FILE * fp1 , * fp2 ; char ch ; clrscr ( ) ; fp1 = fopen ( " Sample.txt " , " r " ) ; fp2 = fopen ( " Output.txt " , " w " ) ; while ( 1 ) { ch = fgetc ( fp1 ) ; if ( ch = = EOF ) break ; else putc ( ch , fp2 ) ; } printf ( " File copied Successfully! " ) ; fclose ( fp1 ) ; fclose ( fp2 ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " \n Enter First Number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " \n Enter Second Number : " ) ; scanf ( " %d " , & num2 ) ; num1 = num1 ^ num2 ; num2 = num1 ^ num2 ; num1 = num1 ^ num2 ; printf ( " \n  Numbers after Exchange : " ) ; printf ( " \n  Num1 = %d and Num2 = %d " , num1 , num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int string_ln ( char * ) ; void main ( ) { char str [ 20 ] ; int length ; clrscr ( ) ; printf ( " \n Enter any string : " ) ; gets ( str ) ; length = string_ln ( str ) ; printf ( " The length of the given string %s is : %d " , str , length ) ; getch ( ) ; } int string_ln ( char * p ) { int count = 0 ; while ( * p ! = '\0' ) { count + + ; p + + ; } return count ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] , temp ; int i , j = 0 ; printf ( " \n Enter the string : " ) ; gets ( str ) ; i = 0 ; j = strlen ( str ) - 1 ; while ( i < j ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; i + + ; j-- ; } printf ( " \n Reverse string is : %s " , str ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; int i ; printf ( " \n Enter the string : " ) ; gets ( s1 ) ; i = 0 ; while ( s1 [ i ] ! = '\0' ) { s2 [ i ] = s1 [ i ] ; i + + ; } s2 [ i ] = '\0' ; printf ( " \n Copied String is %s " , s2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; char marks [ 3 ] ; printf ( " Please Enter Marks : " ) ; scanf ( " %s " , marks ) ; num = atoi ( marks ) ; printf ( " \n Marks : %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " Character is uppercase Letters " ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " Character is Not Lowercase Letters " ) ; } else { printf ( " Non alphabet character " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 97 & & ch < = 122 ) printf ( " Character is Lowercase Letters " ) ; else printf ( " Character is Not Lowercase Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 65 & & ch < = 90 ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " String before to strupr : %sn " , string ) ; strupr ( string ) ; printf ( " String after strupr : %sn " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strupr ( string ) ; printf ( " String after strupr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " \n String before to strlwr : %s " , string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; strcpy ( str2 , str1 ) ; printf ( " \n Copied String : %s " , str2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; char str3 [ 100 ] ; int len ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; printf ( " \n Enter the String 2 : " ) ; gets ( str2 ) ; strcpy ( str3 , str1 ) ; strcat ( str3 , str2 ) ; printf ( " \n Concated String : %s " , str3 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] ; int len ; printf ( " \n Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " \n Length of Given String : %d " , len ) ; return ( 0 ) ; }
#include <stdio.h> int FindLength ( char str [ ] ) ; int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = FindLength ( str ) ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; } int FindLength ( char str [ ] ) { int len = 0 ; while ( str [ len ] ! = '\0' ) len + + ; return ( len ) ; }
#include <stdio.h> int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = 0 ; while ( str [ length ] ! = '\0' ) length + + ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , row , column ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; num > = row ; row + + ) { for ( column = 1 ; column < = num ; column + + ) { printf ( " # " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int row , column , first_no = 0 , second_no = 1 , sum = 1 ; for ( row = 1 ; row < = 4 ; row + + ) { for ( column = 1 ; column < = row ; column + + ) { if ( row = = 1 & & column = = 1 ) { printf ( " 0 " ) ; continue ; } printf ( " %d\t " , sum ) ; sum = first_no + second_no ; first_no = second_no ; second_no = sum ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int row , column , first_no = 0 , second_no = 1 , sum = 1 ; for ( row = 1 ; row < = 4 ; row + + ) { for ( column = 1 ; column < = row ; column + + ) { if ( row = = 1 & & column = = 1 ) { printf ( " 0 " ) ; continue ; } printf ( " %d\t " , sum ) ; sum = first_no + second_no ; first_no = second_no ; second_no = sum ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int row , column ; for ( row = 0 ; row < 4 ; row + + ) { for ( column = 0 ; column < = row ; column + + ) { if ( ( ( row + column ) % 2 ) = = 0 ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } printf ( " \t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int row , column ; for ( row = 0 ; row < 4 ; row + + ) { for ( column = 0 ; column < = row ; column + + ) { if ( ( ( row + column ) % 2 ) = = 0 ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } printf ( " \t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j ; clrscr ( ) ; for ( i = 0 ; i < = 9 ; i + + ) { for ( j = 0 ; j < ( 1 + 2 * i ) ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j ; clrscr ( ) ; for ( i = 0 ; i < = 9 ; i + + ) { for ( j = 0 ; j < ( 1 + 2 * i ) ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { char ch = ' * ' ; int i , j , no_of_spaces = 4 , spaceCount ; for ( i = 1 ; i < = 5 ; i + + ) { for ( spaceCount = no_of_spaces ; spaceCount > = 1 ; spaceCount-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %2c " , ch ) ; } printf ( " \n  " ) ; no_of_spaces-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k = 1 ; int range ; printf ( " Enter the range : " ) ; scanf ( " %d " , & range ) ; printf ( " \n FLOYD'S TRIANGLE : \n  " ) ; for ( i = 1 ; i < = range ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , num , j , xpos = 30 , ypos = 10 ; clrscr ( ) ; printf ( " Enter n ( between 2 & 9 ) : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { gotoxy ( xpos , ypos ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %d " , i ) ; xpos = xpos - 1 ; ypos + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , num = 2 ; for ( i = 0 ; i < 4 ; i + + ) { num = 2 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , num ) ; num = num + 2 ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 10 ; j + + ) { if ( i = = 0 || i = = 9 || j = = 0 || j = = 9 ) printf ( " ▲ " ) ; else printf ( " - " ) ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; printf ( " Enter the number of Digits : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < = num ; i + + ) { for ( j = 0 ; j < i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < = 6 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , i * j ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) { printf ( " %d\t " , count ) ; count + + ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = ' * ' ; for ( i = 4 ; i > = 0 ; i-- ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) printf ( " %c " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 1 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , count % 2 ) ; count + + ; } if ( i % 2 = = 0 ) count = 1 ; else count = 0 ; } return ( 0 ) ; }
#include <iostream.h> int main ( ) { cout < < " Hello , Welcome to C + + " ; return ( 0 ) ; }
#include <iostream.h> int main ( ) { cout < < " Hello , Welcome to C + + " ; return ( 0 ) ; }
#include <stdio.h> int calculateSum ( int ) ; int main ( ) { int i , num ; int result ; printf ( " Input a number : " ) ; scanf ( " %d " , & num ) ; result = calculateSum ( num ) ; printf ( " \n Sum of Number From 1 to %d : %d " , num , result ) ; return ( 0 ) ; } int calculateSum ( int num ) { int res ; if ( num = = 1 ) { return ( 1 ) ; } else { res = num + calculateSum ( num - 1 ) ; } return ( res ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 , res ; printf ( " \n Enter the two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; res = sum ( num1 , num2 ) ; printf ( " nAddition of two number is : " ) ; return ( 0 ) ; } int sum ( int num1 , int num2 ) { int num3 ; num3 = num1 + num2 ; return ( num3 ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 , res ; printf ( " \n Enter the two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; res = sum ( num1 , num2 ) ; printf ( " nAddition of two number is : " ) ; return ( 0 ) ; } int sum ( int num1 , int num2 ) { int num3 ; num3 = num1 + num2 ; return ( num3 ) ; }
#include <stdio.h> void message ( ) ; void main ( ) { message ( ) ; } void message ( ) { printf ( " Hi , How are you ? " ) ; }
#include <stdio.h> void message ( ) ; void main ( ) { message ( ) ; } void message ( ) { printf ( " Hi , How are you ? " ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d " , i ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d " , i ) ; i + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " %d " , i ) ; i + + ; } while ( i < = 10 ) ; return ( 0 ) ; }
#include <stdio.h> int calsum ( int num ) { int rem , sum ; if ( num ! = 0 ) { rem = num % 10 ; sum = sum + rem ; calsum ( num / 10 ) ; } return sum ; } int main ( ) { int num , val ; printf ( " \n Enter a number : " ) ; scanf ( " %d " , & num ) ; val = calsum ( num ) ; printf ( " \n Sum of the digits of %d is : %d " , num , val ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , i , count = 0 ; char str1 [ 10 ] , str2 [ 10 ] ; printf ( " nEnter a number : " ) ; scanf ( " %d " , & num ) ; sprintf ( str1 , " %d " , num ) ; strcpy ( str2 , str1 ) ; strrev ( str2 ) ; count = strcmp ( str1 , str2 ) ; if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , i , count = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num % i = = 0 ) { count + + ; break ; } } if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , temp , sum = 0 , rem ; printf ( " \n Enter number for checking Armstrong : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( num ! = 0 ) { rem = num % 10 ; sum = sum + ( rem * rem * rem ) ; num = num / 10 ; } if ( temp = = sum ) printf ( " %d is Amstrong Number " , temp ) ; else printf ( " %d is Amstrong Number " , temp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , i = 1 , sum = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; while ( i < num ) { if ( num % i = = 0 ) { sum = sum + i ; } i + + ; } if ( sum = = num ) printf ( " %d is a Perfect Number " , i ) ; else printf ( " %d is Non Perfect Number " , i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; char ch ; for ( i = 0 ; i < 256 ; i + + ) { printf ( " %c " , ch ) ; ch = ch + 1 ; } }
#include <stdio.h> int main ( ) { int * ptr1 , * ptr2 ; int num ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , ptr1 , ptr2 ) ; num = * ptr1 + * ptr2 ; printf ( " Sum = %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> typedef struct XYZ { int far * fptr ; double dvar ; unsigned char ch ; } xyz ; int main ( ) { xyz * ptr = ( XYZ * ) 1000 ; printf ( " Size of Pointer to structure : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int far * ptr ; printf ( " Size of Integer Far Pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float a = 3.14 , * fptr ; fptr = & a ; printf ( " Size of Float Pointer : %d " , sizeof ( fptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char a = 'a' , * cptr ; cptr = & a ; printf ( " \n Size of Char Pointer : %d " , sizeof ( cptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a = 10 , * ptr ; ptr = & a ; printf ( " Size of int pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int rad ; float PI = 3.14 , area , ci ; printf ( " \n Enter radius of circle : " ) ; scanf ( " %d " , & rad ) ; area = PI * rad * rad ; printf ( " \n Area of circle : %f " , area ) ; ci = 2 * PI * rad ; printf ( " \n Circumference : %f " , ci ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int side ; float area , r_4 ; r_4 = sqrt ( 3 ) / 4 ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = r_4 * side * side ; printf ( " \n Area of Equilateral Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int base , height ; float area ; printf ( " \n Enter the base of Right Angle Triangle : " ) ; scanf ( " %d " , & base ) ; printf ( " \n Enter the height of Right Angle Triangle : " ) ; scanf ( " %d " , & height ) ; area = 0.5 * base * height ; printf ( " \n Area of Right Angle Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float radius , area ; printf ( " \n Enter the radius of Circle : " ) ; scanf ( " %d " , & radius ) ; area = 3.14 * radius * radius ; printf ( " \n Area of Circle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int length , breadth , area ; printf ( " \n Enter the Length of Rectangle : " ) ; scanf ( " %d " , & length ) ; printf ( " \n Enter the Breadth of Rectangle : " ) ; scanf ( " %d " , & breadth ) ; area = length * breadth ; printf ( " \n Area of Rectangle : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int side , area ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = side * side ; printf ( " \n Area of Square : %d " , area ) ; return ( 0 ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x1 = 200 , y1 = 200 ; int x2 = 300 , y2 = 300 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; line ( x1 , y1 , x2 , y2 ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int numArray [ 10 ] ; int i , sum = 0 ; int * ptr ; printf ( " \n Enter 10 elements : " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %d " , & numArray [ i ] ) ; ptr = numArray ; for ( i = 0 ; i < 10 ; i + + ) { sum = sum + * ptr ; ptr + + ; } printf ( " The sum of array elements : %d " , sum ) ; }
#include <stdio.h> int main ( int args , char * argv [ ] ) { int i = 0 ; for ( i = 0 ; i < args ; i + + ) printf ( " \n  %s " , argv [ i ] ) ; return 0 ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i , sum = 0 ; if ( argc ! = 3 ) { printf ( " You have forgot to type numbers. " ) ; exit ( 1 ) ; } printf ( " The sum is : " ) ; for ( i = 1 ; i < argc ; i + + ) sum = sum + atoi ( argv [ i ] ) ; printf ( " %d " , sum ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { unsigned int mask ; clrscr ( ) ; printf ( " Memory Required : %d butes " , sizeof ( mask ) ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void binary ( unsigned int ) ; void main ( ) { unsigned int num ; printf ( " Enter Decimal Number : " ) ; scanf ( " %u " , & num ) ; binary ( num ) ; getch ( ) ; } void binary ( unsigned int num ) { unsigned int mask = 32768 ; printf ( " Binary Eqivalent : " ) ; while ( mask > 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; int main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) { printf ( " Mouse support not available.n " ) ; } else { showmouseptr ( ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; union REGS i , o ; int main ( ) { int flag ; flag = initmouse ( ) ; if ( flag = = 0 ) { printf ( " Mouse support not available. " ) ; } else { printf ( " Mouse support available. " ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 100 , 175 , 110 , 200 ) ; line ( 100 , 175 , 125 , 175 ) ; outtextxy ( 200 , 150 , " PNP Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 140 , 190 , 150 , 210 ) ; line ( 130 , 210 , 150 , 210 ) ; outtextxy ( 100 , 250 , " NPN Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; outtextxy ( 110 , 60 , " C " ) ; line ( 80 , 100 , 100 , 100 ) ; line ( 100 , 80 , 100 , 120 ) ; line ( 120 , 80 , 120 , 120 ) ; line ( 120 , 100 , 140 , 100 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 300 , 100 , 200 , 200 ) ; line ( 300 , 100 , 400 , 200 ) ; line ( 200 , 200 , 400 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x = 200 , y = 200 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; outtextxy ( x , y , " Hello World " ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; circle ( 300 , 300 , 50 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> int main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f + %f = %f\n  " , a , b , a + b ) ; printf ( " %f - %f = %f\n  " , a , b , a - b ) ; printf ( " %f * %f = %f\n  " , a , b , a * b ) ; printf ( " %f / %f = %f\n  " , a , b , a / b ) ; return ( 0 ) ; }
#include <stdio.h> main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f % % %f = %fn " , a , b , a % b ) ; }
#include <stdio.h> int main ( ) { int gross_salary , basic , da , ta ; printf ( " Enter basic salary : " ) ; scanf ( " %d " , & basic ) ; da = ( 10 * basic ) / 100 ; ta = ( 12 * basic ) / 100 ; gross_salary = basic + da + ta ; printf ( " \n Gross salary : %d " , gross_salary ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , rem , rev = 0 ; printf ( " \n Enter any no to be reversed : " ) ; scanf ( " %d " , & num ) ; while ( num > = 1 ) { rem = num % 10 ; rev = rev * 10 + rem ; num = num / 10 ; } printf ( " \n Reversed Number : %d " , rev ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int s1 , s2 , s3 , s4 , s5 , sum , total = 500 ; float per ; printf ( " \n Enter marks of 5 subjects : " ) ; scanf ( " %d %d %d %d %d " , & s1 , & s2 , & s3 , & s4 , & s5 ) ; sum = s1 + s2 + s3 + s4 + s5 ; printf ( " \n Sum : %d " , sum ) ; per = ( sum * 100 ) / total ; printf ( " \n Percentage : %f " , per ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " \n Enter temp in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( 1.8 * celsius ) + 32 ; printf ( " \n Temperature in Fahrenheit : %f " , fahrenheit ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int amount , rate , time , si ; printf ( " \n Enter Principal Amount : " ) ; scanf ( " %d " , & amount ) ; printf ( " \n Enter Rate of Interest : " ) ; scanf ( " %d " , & rate ) ; printf ( " \n Enter Period of Time : " ) ; scanf ( " %d " , & time ) ; si = ( amount * rate * time ) / 100 ; printf ( " \n Simple Interest : %d " , si ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , sum ; printf ( " \n Enter two no : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int fact ( int ) ; int main ( ) { int factorial , num ; printf ( " Enter the value of num : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial is %d " , factorial ) ; return ( 0 ) ; } int fact ( int n ) { if ( n = = 0 ) { return ( 1 ) ; } return ( n * fact ( n - 1 ) ) ; }
#include <stdio.h> struct stud { int roll ; char name [ 10 ] ; int marks ; } ; int main ( ) { int size ; struct stud s ; size = sizeof ( s ) ; printf ( " nSize of Structure : %d " , size ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " \n Enter value for num1 & num2 : " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " \n After swapping value of a : %d " , a ) ; printf ( " \n After swapping value of b : %d " , b ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , digits ; char ch [ 10 ] ; printf ( " \n Enter the Number : " ) ; scanf ( " %d " , & num ) ; sprintf ( ch , " %d " , num ) ; digits = strlen ( ch ) ; printf ( " \n Number of Digits : %d " , digits ) ; return ( 0 ) ; }
#include <stdio.h> void main ( ) { int a = 3 , b = 3 , c ; asm { mov ax , a mov bx , a add ax , bx mov c , ax } printf ( " %d " , c ) ; }
#include <stdio.h> int main ( ) { char para [ 100 ] ; printf ( " Enter Paragraph : " ) ; scanf ( " % [ ^\t ] s " , para ) ; printf ( " Accepted Paragraph : %s " , para ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { while ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { switch ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { if ( printf ( " " ) ) { } else if ( printf ( " Hello " ) ) { } else { } }
#include <stdio.h> void main ( ) { while ( !printf ( " Hello " ) ) { } }
#include <stdio.h> #define PRINT printf ( " Hello " ) void main ( ) { if ( PRINT ) { } }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " %d " , printf ( " abcdefghijklmnopqrstuvwxyz " ) ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int num = 1342 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , num ) ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " nEnte the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed + Original Num = %d " , num1 + num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " \n Ente the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed Number : " ) ; printf ( " %d " , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int number = 12354 ; int sum = 0 ; for ( ; number > 0 ; sum + = number % 10 , number / = 10 ) ; printf ( " \n Sum of the Digits : %d " , sum ) ; }
#include <stdio.h> int add ( int , int ) ; int main ( ) { int num1 , num2 ; printf ( " \n Enter the two Numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n Addition of two num is : %d " , add ( num1 , num2 ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { if ( !num1 ) return num2 ; else return add ( ( num1 & num2 ) < < 1 , num1 ^ num2 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2 > 0 ) { num1 + + ; num2-- ; } printf ( " %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2-- ) { num1 + + ; } printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int sum ( int , int ) ; int main ( ) { int a , b ; printf ( " Enter the two Numbers : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Addition of two num. is : %d " , add ( a , b ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { int i ; for ( i = 0 ; i < num2 ; i + + ) num1 + + ; return num1 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 ; num1 = num1 - ( -num2 ) ; printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> #include " myhead.h " void main ( ) { int num1 = 10 , num2 = 10 , num3 ; num3 = add ( num1 , num2 ) ; printf ( " Addition of Two numbers : %d " , num3 ) ; }
#include <stdio.h> #define begin main int begin ( ) { printf ( " Hello " ) ; return ( 0 ) ; }
#include <stdio.h> #define begin m##a##i##n void begin ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #define begin ( m , a , i , n ) m##a##i##n #define start begin ( m , a , i , n ) void start ( ) { printf ( " Hello " ) ; }
#include <dos.h> void main ( ) { char * path = " BIN " ; _AH = 0x39 ; _DX = ( unsigned int ) path ; __int__ ( 0x21 ) ; }
#include <dos.h> void main ( ) { char * message = " Pritesh Taral$ " ; _AH = 9 ; _DX = ( int ) message ; geninterrupt ( 0x21 ) ; }
#include <stdio.h> void main ( ) { printf ( " 1 " ) ; printf ( " 2 " ) ; printf ( " 3 " ) ; printf ( " 4 " ) ; printf ( " 5 " ) ; printf ( " 6 " ) ; printf ( " 7 " ) ; printf ( " 8 " ) ; printf ( " 9 " ) ; printf ( " 10 " ) ; }
#include <stdio.h> void printNumber ( int value ) { int i ; printf ( " %d\n  " , value ) ; i = value + 1 ; if ( i > 10 ) return ; printNumber ( i ) ; } void main ( ) { printNumber ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; Start : i = i + 1 ; printf ( " %d " , i ) ; if ( i < = 10 ) goto Start ; }
#include <stdio.h> void main ( ) { static int i = 1 ; if ( i < = 10 ) { printf ( " %d " , i + + ) ; main ( ) ; } }
#include <stdio.h> int main ( ) { printf ( " Hello World " ) ; return 0 ; }
#include void hello ( ) { printf ( " Hello World " ) ; } int main ( ) { hello ( ) ; return 0 ; }
#include <stdio.h> void main ( ) { int num ; printf ( " Enter a number : \n  " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) printf ( " %d is a positive number \n  " , num ) ; else if ( num < 0 ) printf ( " %d is a negative number \n  " , num ) ; else printf ( " 0 is neither positive nor negative " ) ; }
#include <stdio.h> int main ( ) { int num , reverse_number ; printf ( " \n Enter any number : " ) ; scanf ( " %d " , & num ) ; reverse_number = reverse_function ( num ) ; printf ( " \n After reverse the no is : %d " , reverse_number ) ; return 0 ; } int sum = 0 , rem ; reverse_function ( int num ) { if ( num ) { rem = num %10 ; sum = sum * 10 + rem ; reverse_function ( num / 10 ) ; } else return sum ; return sum ; }
#include <stdio.h> int main ( ) { int num , rem , reverse_num = 0 ; printf ( " \n Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num> = 1 ) { rem = num % 10 ; reverse_num = reverse_num * 10 + rem ; num = num / 10 ; } printf ( " \n Reverse of input number is : %d " , reverse_num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; printf ( " \n Enter value of num1 , num2 and num3 : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1> num2 ) & & ( num1> num3 ) ) printf ( " \n  Number1 is greatest " ) ; else if ( ( num2> num3 ) & & ( num2> num1 ) ) printf ( " \n  Number2 is greatest " ) ; else printf ( " \n  Number3 is greatest " ) ; return 0 ; }
#include <stdio.h> int find_factorial ( int ) ; int main ( ) { int num , fact ; printf ( " \n Enter any integer number : " ) ; scanf ( " %d " , & num ) ; fact = find_factorial ( num ) ; printf ( " \n factorial of %d is : %d " , num , fact ) ; return 0 ; } int find_factorial ( int n ) { if ( n = = 0 ) return ( 1 ) ; return ( n * find_factorial ( n-1 ) ) ; }
#include <stdio.h> int main ( ) { int num , reverse_num = 0 , remainder , temp ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( temp! = 0 ) { remainder = temp %10 ; reverse_num = reverse_num * 10 + remainder ; temp / = 10 ; } if ( reverse_num = = num ) printf ( " %d is a palindrome number " , num ) ; else printf ( " %d is not a palindrome number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) printf ( " %d is an even number " , num ) ; else printf ( " %d is an odd number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; if ( n & 1 ) printf ( " %d is an odd number " , n ) ; else printf ( " %d is an even number " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; printf ( " ASCII value of character %c is : %d " , ch , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Size of char : %ld byte\n  " , sizeof ( char ) ) ; printf ( " Size of int : %ld bytes\n  " , sizeof ( int ) ) ; printf ( " Size of float : %ld bytes\n  " , sizeof ( float ) ) ; printf ( " Size of double : %ld bytes " , sizeof ( double ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; bool isVowel = false ; printf ( " Enter an alphabet : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'a'||ch = = 'A'||ch = = 'e'||ch = = 'E'||ch = = 'i'||ch = = 'I' ||ch = = 'o'||ch = = 'O'||ch = = 'u'||ch = = 'U' ) { isVowel = true ; } if ( isVowel = = true ) printf ( " %c is a Vowel " , ch ) ; else printf ( " %c is a Consonant " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , count , sum = 0 ; printf ( " Enter the value of n ( positive integer ) : " ) ; scanf ( " %d " , & n ) ; for ( count = 1 ; count < = n ; count + + ) { sum = sum + count ; } printf ( " Sum of first %d natural numbers is : %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , count , sum = 0 ; printf ( " Enter the value of n ( positive integer ) : " ) ; scanf ( " %d " , & n ) ; count = 1 ; while ( count < = n ) { sum = sum + count ; count + + ; } printf ( " Sum of first %d natural numbers is : %d " , n , sum ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 25 ] ; int i ; printf ( " Enter the string : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 65 & & str [ i ] < = 90 ) str [ i ] = str [ i ] + 32 ; } printf ( " \n Lower Case String is : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 25 ] ; int i ; printf ( " Enter the string : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 97 & & str [ i ] < = 122 ) str [ i ] = str [ i ] -32 ; } printf ( " \n Upper Case String is : %s " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 100 ] , i ; printf ( " Enter a string : \n  " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; + + i ) ; printf ( " \n Length of input string : %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int sum ; sum = sum_array_elements ( array , 6 ) ; printf ( " \n Sum of array elements is : %d " , sum ) ; return 0 ; } int sum_array_elements ( int arr [ ] , int n ) { if ( n < 0 ) { return 0 ; } else { return arr [ n ] + sum_array_elements ( arr , n-1 ) ; } }
#include <stdio.h> int main ( ) { int array [ 5 ] ; int i , sum = 0 ; int * ptr ; printf ( " \n Enter array elements ( 5 integer values ) : " ) ; for ( i = 0 ; i <5 ; i + + ) scanf ( " %d " , & array [ i ] ) ; ptr = array ; for ( i = 0 ; i <5 ; i + + ) { sum = sum + * ptr ; ptr + + ; } printf ( " \n The sum is : %d " , sum ) ; }
#include <stdio.h> int main ( ) { double arr [ ] = { 11 , 22 , 33 , 44 , 55 , 66 } ; int n ; n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( " Size of the array is : %d\n  " , n ) ; return 0 ; } Output :
#include <stdio.h> int main ( ) { float num1 , num2 , product ; printf ( " Enter first Number : " ) ; scanf ( " %f " , & num1 ) ; printf ( " Enter second Number : " ) ; scanf ( " %f " , & num2 ) ; product = num1 * num2 ; printf ( " Product of entered numbers is : %.3f " , product ) ; return 0 ; }
#include <stdio.h> float product ( float a , float b ) { return a * b ; } int main ( ) { float num1 , num2 , prod ; printf ( " Enter first Number : " ) ; scanf ( " %f " , & num1 ) ; printf ( " Enter second Number : " ) ; scanf ( " %f " , & num2 ) ; prod = product ( num1 , num2 ) ; printf ( " Product of entered numbers is : %.3f " , prod ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , quot , rem ; printf ( " Enter dividend : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter divisor : " ) ; scanf ( " %d " , & num2 ) ; quot = num1 / num2 ; rem = num1 % num2 ; printf ( " Quotient is : %d\n  " , quot ) ; printf ( " Remainder is : %d " , rem ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; float avg ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; avg = ( float ) ( num1 + num2 ) / 2 ; printf ( " Average of %d and %d is : %.2f " , num1 , num2 , avg ) ; return 0 ; }
#include <stdio.h> float average ( int a , int b ) { return ( float ) ( a + b ) / 2 ; } int main ( ) { int num1 , num2 ; float avg ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; avg = average ( num1 , num2 ) ; printf ( " Average of %d and %d is : %.2f " , num1 , num2 , avg ) ; return 0 ; }
#include <stdio.h> #include <math.h> int binaryToDecimal ( long binarynum ) { int decimalnum = 0 , temp = 0 , remainder ; while ( binarynum! = 0 ) { remainder = binarynum % 10 ; binarynum = binarynum / 10 ; decimalnum = decimalnum + remainder * pow ( 2 , temp ) ; temp + + ; } return decimalnum ; } int main ( ) { long binarynum ; printf ( " Enter a binary number : " ) ; scanf ( " %ld " , & binarynum ) ; printf ( " Equivalent decimal number is : %d " , binaryToDecimal ( binarynum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> long decimalToBinary ( int decimalnum ) { long binarynum = 0 ; int rem , temp = 1 ; while ( decimalnum! = 0 ) { rem = decimalnum %2 ; decimalnum = decimalnum / 2 ; binarynum = binarynum + rem * temp ; temp = temp * 10 ; } return binarynum ; } int main ( ) { int decimalnum ; printf ( " Enter a Decimal Number : " ) ; scanf ( " %d " , & decimalnum ) ; printf ( " Equivalent Binary Number is : %ld " , decimalToBinary ( decimalnum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int decimalToOctal ( int decimalnum ) { int octalnum = 0 , temp = 1 ; while ( decimalnum ! = 0 ) { octalnum = octalnum + ( decimalnum % 8 ) * temp ; decimalnum = decimalnum / 8 ; temp = temp * 10 ; } return octalnum ; } int main ( ) { int decimalnum ; printf ( " Enter a Decimal Number : " ) ; scanf ( " %d " , & decimalnum ) ; printf ( " Equivalent Octal Number : %d " , decimalToOctal ( decimalnum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> long octalToDecimal ( int octalnum ) { int decimalnum = 0 , temp = 0 ; while ( octalnum ! = 0 ) { decimalnum = decimalnum + ( octalnum %10 ) * pow ( 8 , temp ) ; temp + + ; octalnum = octalnum / 10 ; } return decimalnum ; } int main ( ) { int octalnum ; printf ( " Enter an octal number : " ) ; scanf ( " %d " , & octalnum ) ; printf ( " Equivalent decimal number is : %ld " , octalToDecimal ( octalnum ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int circle_radius ; float PI_VALUE = 3.14 , circle_area , circle_circumf ; printf ( " \n Enter radius of circle : " ) ; scanf ( " %d " , & circle_radius ) ; circle_area = PI_VALUE * circle_radius * circle_radius ; printf ( " \n Area of circle is : %f " , circle_area ) ; circle_circumf = 2 * PI_VALUE * circle_radius ; printf ( " \n Circumference of circle is : %f " , circle_circumf ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int triangle_side ; float triangle_area , temp_variable ; printf ( " \n Enter the Side of the triangle : " ) ; scanf ( " %d " , & triangle_side ) ; temp_variable = sqrt ( 3 ) / 4 ; triangle_area = temp_variable * triangle_side * triangle_side ; printf ( " \n Area of Equilateral Triangle is : %f " , triangle_area ) ; return ( 0 ) ; }
#include <stdio.h> int addition ( int num1 , int num2 ) { int sum ; sum = num1 + num2 ; return sum ; } int main ( ) { int var1 , var2 ; printf ( " Enter number 1 : " ) ; scanf ( " %d " , & var1 ) ; printf ( " Enter number 2 : " ) ; scanf ( " %d " , & var2 ) ; int res = addition ( var1 , var2 ) ; printf ( " Output : %d " , res ) ; return 0 ; }
#include <stdio.h> void introduction ( ) { printf ( " Hi\n  " ) ; printf ( " My name is Chaitanya\n  " ) ; printf ( " How are you? " ) ; } int main ( ) { introduction ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; printf ( " The number entered by user is : %d " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of the entered numbers : %d " , sum ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { return a + b ; } int main ( ) { int num1 , num2 , num3 ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; num3 = sum ( num1 , num2 ) ; printf ( " Sum of the entered numbers : %d " , num3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ) printf ( " The entered character %c is an Alphabet " , ch ) ; else printf ( " The entered character %c is not an Alphabet " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 20 ; int y = 22 ; if ( x <y ) { printf ( " Variable x is less than y " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible for voting " ) ; } else { printf ( " You are not eligible for voting " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) printf ( " You are eligible for voting " ) ; else printf ( " You are not eligible for voting " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 3 ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { for ( int i = 0 ; i <2 ; i + + ) { for ( int j = 0 ; j <4 ; j + + ) { printf ( " %d , %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 , j = 1 ; i <3 || j <5 ; i + + , j + + ) { printf ( " %d , %d\n  " , i , j ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int count = 1 ; while ( count < = 4 ) { printf ( " %d " , count ) ; count + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int var = 1 ; while ( var < = 2 ) { printf ( " %d " , var ) ; } }
#include <stdio.h> int main ( ) { int var = 6 ; while ( var > = 5 ) { printf ( " %d " , var ) ; var + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; while ( var < = 10 ) { printf ( " %d " , var ) ; var-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 , j = 1 ; while ( i < = 4 || j < = 3 ) { printf ( " %d %d\n  " , i , j ) ; i + + ; j + + ; } return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { int c = a + b ; return c ; } int main ( { int var1 = 10 ; int var2 = 20 ; int var3 = sum ( var1 , var2 ) ; printf ( " %d " , var3 ) ; return 0 ; }
#include <stdio.h> int increment ( int var ) { var = var + 1 ; return var ; } int main ( ) { int num1 = 20 ; int num2 = increment ( num1 ) ; printf ( " num1 value is : %d " , num1 ) ; printf ( " \n num2 value is : %d " , num2 ) ; return 0 ; }
#include <stdio.h> void swapnum ( int var1 , int var2 ) { int tempnum ; tempnum = var1 ; var1 = var2 ; var2 = tempnum ; } int main ( ) { int num1 = 35 , num2 = 45 ; printf ( " Before swapping : %d , %d " , num1 , num2 ) ; swapnum ( num1 , num2 ) ; printf ( " \n After swapping : %d , %d " , num1 , num2 ) ; }
#include <stdio.h> void increment ( int * var ) { * var = * var + 1 ; } int main ( ) { int num = 20 ; increment ( & num ) ; printf ( " Value of num is : %d " , num ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char nickname [ 20 ] ; printf ( " Enter your Nick name : " ) ; scanf ( " %s " , nickname ) ; printf ( " %s " , nickname ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char nickname [ 20 ] ; puts ( " Enter your Nick name : " ) ; gets ( nickname ) ; puts ( nickname ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 20 ] = " BeginnersBook " ; printf ( " Length of string str1 : %d " , strlen ( str1 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 20 ] = " BeginnersBook " ; printf ( " Length of string str1 when maxlen is 30 : %d " , strnlen ( str1 , 30 ) ) ; printf ( " Length of string str1 when maxlen is 10 : %d " , strnlen ( str1 , 10 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 20 ] = " BeginnersBook " ; char s2 [ 20 ] = " BeginnersBook.COM " ; if ( strcmp ( s1 , s2 ) = = 0 ) { printf ( " string 1 and string 2 are equal " ) ; } else { printf ( " string 1 and 2 are different " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 20 ] = " BeginnersBook " ; char s2 [ 20 ] = " BeginnersBook.COM " ; if ( strncmp ( s1 , s2 , 8 ) = = 0 ) { printf ( " string 1 and string 2 are equal " ) ; } else { printf ( " string 1 and 2 are different " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 10 ] = " Hello " ; char s2 [ 10 ] = " World " ; strcat ( s1 , s2 ) ; printf ( " Output string after concatenation : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 10 ] = " Hello " ; char s2 [ 10 ] = " World " ; strncat ( s1 , s2 , 3 ) ; printf ( " Concatenation using strncat : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 30 ] = " string 1 " ; char s2 [ 30 ] = " string 2 : I’m gonna copied into s1 " ; strcpy ( s1 , s2 ) ; printf ( " String s1 is : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char first [ 30 ] = " string 1 " ; char second [ 30 ] = " string 2 : I’m using strncpy now " ; strncpy ( s1 , s2 , 12 ) ; printf ( " String s1 is : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char mystr [ 30 ] = " I’m an example of function strchr " ; printf ( " %s " , strchr ( mystr , 'f' ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char mystr [ 30 ] = " I’m an example of function strchr " ; printf ( " %s " , strrchr ( mystr , 'f' ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char inputstr [ 70 ] = " String Function in C at BeginnersBook.COM " ; printf ( " Output string is : %s " , strstr ( inputstr , 'Begi' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter your age : " ) ; scanf ( " %d " , & num ) ; if ( num <18 ) { printf ( " you are not eligible for voting " ) ; } else { printf ( " You can vote!! " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int j = 0 ; do { printf ( " Value of variable j is : %d\n  " , j ) ; j + + ; } while ( j < = 3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 ; while ( i = = 1 ) { printf ( " while vs do-while " ) ; } printf ( " Out of loop " ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { printf ( " while vs do-while\n  " ) ; } while ( i = = 1 ) ; printf ( " Out of loop " ) ; }
#include <stdio.h> int main ( ) { for ( int j = 0 ; j < = 8 ; j + + ) { if ( j = = 4 ) { continue ; } printf ( " %d " , j ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int counter = 10 ; while ( counter > = 0 ) { if ( counter = = 7 ) { counter-- ; continue ; } printf ( " %d " , counter ) ; counter-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int j = 0 ; do { if ( j = = 7 ) { j + + ; continue ; } printf ( " %d " , j ) ; j + + ; } while ( j <10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 0 ; while ( num < = 100 ) { printf ( " value of variable num is : %d\n  " , num ) ; if ( num = = 2 ) { break ; } num + + ; } printf ( " Out of while-loop " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var ; for ( var = 100 ; var> = 10 ; var -- ) { printf ( " var : %d\n  " , var ) ; if ( var = = 99 ) { break ; } } printf ( " Out of for-loop " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter value of num : " ) ; scanf ( " %d " , & num ) ; switch ( num ) { case 1 : printf ( " You have entered value 1\n  " ) ; break ; case 2 : printf ( " You have entered value 2\n  " ) ; break ; case 3 : printf ( " You have entered value 3\n  " ) ; break ; default : printf ( " Input value is other than 1 , 2 & 3 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int sum = 0 ; for ( int i = 0 ; i < = 10 ; i + + ) { sum = sum + i ; if ( i = = 5 ) { goto addition ; } } addition : printf ( " %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int abc [ 5 ] [ 4 ] ; int i , j ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <4 ; j + + ) { printf ( " Enter value for abc [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & abc [ i ] [ j ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int abc [ 5 ] [ 4 ] = { { 0 , 1 , 2 , 3 } , { 4 , 5 , 6 , 7 } , { 8 , 9 , 10 , 11 } , { 12 , 13 , 14 , 15 } , { 16 , 17 , 18 , 19 } } ; for ( int i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , abc [ i ] ) ; } return 0 ; }
#include <stdio.h> void disp ( char ch ) { printf ( " %c " , ch ) ; } int main ( ) { char arr [ ] = { 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' } ; for ( int x = 0 ; x <10 ; x + + ) { disp ( arr [ x ] ) ; } return 0 ; }
#include <stdio.h> void disp ( int * num ) { printf ( " %d " , * num ) ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; for ( int i = 0 ; i <10 ; i + + ) { disp ( & arr [ i ] ) ; } return 0 ; }
#include <stdio.h> void myfuncn ( int * var1 , int var2 ) { for ( int x = 0 ; x <var2 ; x + + ) { printf ( " Value of var_arr [ %d ] is : %d \n  " , x , * var1 ) ; var1 + + ; } } int main ( ) { int var_arr [ ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; myfuncn ( var_arr , 7 ) ; return 0 ; }
#include <stdio.h> struct StudentData { char * stu_name ; int stu_id ; int stu_age ; } ; int main ( ) { struct StudentData student ; student.stu_name = " Steve " ; student.stu_id = 1234 ; student.stu_age = 30 ; printf ( " Student Name is : %s " , student.stu_name ) ; printf ( " \n Student Id is : %d " , student.stu_id ) ; printf ( " \n Student Age is : %d " , student.stu_age ) ; return 0 ; }
#include <stdio.h> struct numbers { int num1 , num2 ; } ; int main ( ) { struct numbers s1 = { .num2 = 22 , .num1 = 11 } ; struct numbers s2 = { .num2 = 30 } ; printf ( " num1 : %d , num2 : %d\n  " , s1.num1 , s1.num2 ) ; printf ( " num1 : %d " , s2.num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of variable num is : %d " , num ) ; printf ( " \n Address of variable num is : %p " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * p ; p = # printf ( " Address of variable num is : %p " , p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int var = 10 ; p = & var ; printf ( " Value of variable var is : %d " , var ) ; printf ( " \n Value of variable var is : %d " , * p ) ; printf ( " \n Address of variable var is : %p " , & var ) ; printf ( " \n Address of variable var is : %p " , p ) ; printf ( " \n Address of pointer p is : %p " , & p ) ; return 0 ; }
#include <stdio.h> void salaryhike ( int * var , int b ) { * var = * var + b ; } int main ( ) { int salary = 0 , bonus = 0 ; printf ( " Enter the employee current salary : " ) ; scanf ( " %d " , & salary ) ; printf ( " Enter bonus : " ) ; scanf ( " %d " , & bonus ) ; salaryhike ( & salary , bonus ) ; printf ( " Final salary : %d " , salary ) ; return 0 ; }
#include <stdio.h> int main ( ) { int val [ 7 ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; for ( int i = 0 ; i < 7 ; i + + ) { printf ( " val [ %d ] : value is %d and address is %d\n  " , i , val [ i ] , & val [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int val [ 7 ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; p = & val [ 0 ] ; for ( int i = 0 ; i <7 ; i + + ) { printf ( " val [ %d ] : value is %d and address is %p\n  " , i , * p , p ) ; p + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int val [ 7 ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; p = val ; for ( int i = 0 ; i <7 ; i + + ) { printf ( " val [ %d ] : value is %d and address is %p\n  " , i , * ( p + i ) , ( p + i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 ; char c ; fp1 = fopen ( " C : \\myfiles\\n ewfile.txt " , " r " ) ; while ( 1 ) { c = fgetc ( fp1 ) ; if ( c = = EOF ) break ; else printf ( " %c " , c ) ; } fclose ( fp1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 ; char c ; fp1 = fopen ( " C : \\myfiles\\n ewfile.txt " , " r " ) ; while ( 1 ) { c = fgetc ( fp1 ) ; if ( c = = EOF ) break ; else printf ( " %c " , c ) ; } fclose ( fp1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; FILE * fpw ; fpw = fopen ( " C : \\n ewfile.txt " , " w " ) ; if ( fpw = = NULL ) { printf ( " Error " ) ; exit ( 1 ) ; } printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; fprintf ( fpw , " %c " , ch ) ; fclose ( fpw ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fpr ; char str [ 100 ] ; fpr = fopen ( " C : \\mynewtextfile.txt " , " r " ) ; if ( fpr = = NULL ) { puts ( " Issue in opening the input file " ) ; } while ( 1 ) { if ( fgets ( str , 10 , fpr ) = = NULL ) break ; else printf ( " %s " , str ) ; } fclose ( fpr ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fpw ; char str [ 100 ] ; fpw = fopen ( " C : \\mynewtextfile2.txt " , " w " ) ; if ( fpw = = NULL ) { puts ( " Issue in opening the Output file " ) ; } printf ( " Enter your string : " ) ; gets ( str ) ; fputs ( str , fpw ) ; fclose ( fpw ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Catch me if you can. " ) ; } < / stdio.h>
#include <stdio.h> #include <math.h> int main ( ) { float num , root ; printf ( " Enter a number : " ) ; scanf ( " %f " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2f = %.2f " , num , root ) ; return 0 ; }
#include <stdio.h> #include <stdbool.h> int main ( ) { bool a = true ; return 0 ; }
#include <stdio.h> #include <complex.h> int main ( ) { int complex z = 2 + 1 * I ; }
#include <stdio.h> int main ( ) { short a ; long b ; long long c ; long double d ; printf ( " size of short = %d bytes\n  " , sizeof ( a ) ) ; printf ( " size of long = %d bytes\n  " , sizeof ( b ) ) ; printf ( " size of long long = %d bytes\n  " , sizeof ( c ) ) ; printf ( " size of long double = %d bytes\n  " , sizeof ( d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " C Programming " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger = 5 ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & testInteger ) ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; printf ( " Enter a number : " ) ; scanf ( " %f " , & f ) ; printf ( " Value = %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c.\n  " , chr ) ; printf ( " ASCII value of %c is %d. " , chr , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int chr = 69 ; printf ( " Character having ASCII value 69 is %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integer = 9876 ; float decimal = 987.6543 ; printf ( " 4 digit integer right justified to 6 column : %6d\n  " , integer ) ; printf ( " 4 digit integer right justified to 3 column : %3d\n  " , integer ) ; printf ( " Floating point number rounded to 2 digits : %.2f\n  " , decimal ) ; printf ( " Floating point number rounded to 0 digits : %.f\n  " , 987.6543 ) ; printf ( " Floating point number in exponential form : %e\n  " , 987.6543 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number < 0 ) { printf ( " You entered %d.\n  " , number ) ; } printf ( " The if statement is easy. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) printf ( " %d is an even integer. " , number ) ; else printf ( " %d is an odd integer. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else if ( number1 > number2 ) { printf ( " Result : %d > %d " , number1 , number2 ) ; } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 > = number2 ) { if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else { printf ( " Result : %d > %d " , number1 , number2 ) ; } } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , count , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; for ( count = 1 ; count < = num ; + + count ) { sum + = count ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; long long factorial ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; factorial = 1 ; while ( number > 0 ) { factorial * = number ; --number ; } printf ( " Factorial = %lld " , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number , sum = 0 ; do { printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; sum + = number ; } while ( number ! = 0.0 ) ; printf ( " Sum = %.2lf " , sum ) ; return 0 ; }
#include <stdio.h> int addNumbers ( int a , int b ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enters two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = addNumbers ( n1 , n2 ) ; printf ( " sum = %d " , sum ) ; return 0 ; } int addNumbers ( int a , int b ) { int result ; result = a + b ; return result ; }
#include <stdio.h> int sum ( int n ) ; int main ( ) { int number , result ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & number ) ; result = sum ( number ) ; printf ( " sum = %d " , result ) ; return 0 ; } int sum ( int num ) { if ( num! = 0 ) return num + sum ( num-1 ) ; else return num ; }
#include <stdio.h> void display ( ) ; int n = 5 ; int main ( ) { + + n ; display ( ) ; return 0 ; } void display ( ) { + + n ; printf ( " n = %d " , n ) ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; } void display ( ) { static int c = 0 ; printf ( " %d " , c ) ; c + = 5 ; }
#include <stdio.h> int main ( ) { int marks [ 10 ] , i , n , sum = 0 , average ; printf ( " Enter n : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i <n ; + + i ) { printf ( " Enter number %d : " , i + 1 ) ; scanf ( " %d " , & marks [ i ] ) ; sum + = marks [ i ] ; } average = sum / n ; printf ( " Average = %d " , average ) ; return 0 ; }
#include <stdio.h> void display ( int age ) { printf ( " %d " , age ) ; } int main ( ) { int ageArray [ ] = { 2 , 3 , 4 } ; display ( ageArray [ 2 ] ) ; return 0 ; }
#include <stdio.h> float average ( float age [ ] ) ; int main ( ) { float avg , age [ ] = { 23.4 , 55 , 22.6 , 3 , 40.5 , 18 } ; avg = average ( age ) ; printf ( " Average age = %.2f " , avg ) ; return 0 ; } float average ( float age [ ] ) { int i ; float avg , sum = 0.0 ; for ( i = 0 ; i < 6 ; + + i ) { sum + = age [ i ] ; } avg = ( sum / 6 ) ; return avg ; }
#include <stdio.h> int main ( ) { char name [ 20 ] ; printf ( " Enter name : " ) ; scanf ( " %s " , name ) ; printf ( " Your name is %s. " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> void displayString ( char str [ ] ) ; int main ( ) { char str [ 50 ] ; printf ( " Enter string : " ) ; gets ( str ) ; displayString ( str ) ; return 0 ; } void displayString ( char str [ ] ) { printf ( " String Output : " ) ; puts ( str ) ; }
#include <stdio.h> int main ( void ) { char name [ ] = " Harry Potter " ; printf ( " %c " , * name ) ; printf ( " %c " , * ( name + 1 ) ) ; printf ( " %c " , * ( name + 7 ) ) ; char * namePtr ; namePtr = name ; printf ( " %c " , * namePtr ) ; printf ( " %c " , * ( namePtr + 1 ) ) ; printf ( " %c " , * ( namePtr + 7 ) ) ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; printf ( " Value : %d\n  " , var ) ; printf ( " Address : %u " , & var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 4 ] ; int i ; for ( i = 0 ; i < 4 ; + + i ) { printf ( " & x [ %d ] = %u\n  " , i , & x [ i ] ) ; } printf ( " Address of array x : %u " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , x [ 6 ] , sum = 0 ; printf ( " Enter 6 numbers : " ) ; for ( i = 0 ; i < 6 ; + + i ) { scanf ( " %d " , x + i ) ; sum + = * ( x + i ) ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * ptr ; ptr = & x [ 2 ] ; printf ( " * ptr = %d \n  " , * ptr ) ; printf ( " * ptr + 1 = %d \n  " , * ptr + 1 ) ; printf ( " * ptr-1 = %d " , * ptr-1 ) ; return 0 ; }
#include <stdio.h> void swap ( int * n1 , int * n2 ) ; int main ( ) { int num1 = 5 , num2 = 10 ; swap ( & num1 , & num2 ) ; printf ( " num1 = %d\n  " , num1 ) ; printf ( " num2 = %d " , num2 ) ; return 0 ; } void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; }
#include <stdio.h> struct person { int age ; float weight ; } ; int main ( ) { struct person * personPtr , person1 ; personPtr = & person1 ; printf ( " Enter age : " ) ; scanf ( " %d " , & personPtr- ; > age ) ; printf ( " Enter weight : " ) ; scanf ( " %f " , & personPtr- ; > weight ) ; printf ( " Displaying : \n  " ) ; printf ( " Age : %d\n  " , personPtr-> age ) ; printf ( " weight : %f " , personPtr-> weight ) ; return 0 ; }
#include <stdio.h> union unionJob { char name [ 32 ] ; float salary ; int workerNo ; } uJob ; struct structJob { char name [ 32 ] ; float salary ; int workerNo ; } sJob ; int main ( ) { printf ( " size of union = %d bytes " , sizeof ( uJob ) ) ; printf ( " \n size of structure = %d bytes " , sizeof ( sJob ) ) ; return 0 ; }
#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main ( ) { j.salary = 12.3 ; j.workerNo = 100 ; printf ( " Salary = %.1f\n  " , j.salary ) ; printf ( " Number of workers = %d " , j.workerNo ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; fptr = fopen ( " C : \\program.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } printf ( " Enter num : " ) ; scanf ( " %d " , & num ) ; fprintf ( fptr , " %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.txt " , " r " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fscanf ( fptr , " %d " , & num ) ; printf ( " Value of n = %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; printf ( " You entered : %d " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int firstNumber , secondNumber , sumOfTwoNumbers ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & firstNumber , & secondNumber ) ; sumOfTwoNumbers = firstNumber + secondNumber ; printf ( " %d + %d = %d " , firstNumber , secondNumber , sumOfTwoNumbers ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber , product ; printf ( " Enter two numbers : " ) ; scanf ( " %lf %lf " , & firstNumber , & secondNumber ) ; product = firstNumber * secondNumber ; printf ( " Product = %.2lf " , product ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; printf ( " ASCII value of %c = %d " , c , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int dividend , divisor , quotient , remainder ; printf ( " Enter dividend : " ) ; scanf ( " %d " , & dividend ) ; printf ( " Enter divisor : " ) ; scanf ( " %d " , & divisor ) ; quotient = dividend / divisor ; remainder = dividend % divisor ; printf ( " Quotient = %d\n  " , quotient ) ; printf ( " Remainder = %d " , remainder ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerType ; float floatType ; double doubleType ; char charType ; printf ( " Size of int : %ld bytes\n  " , sizeof ( integerType ) ) ; printf ( " Size of float : %ld bytes\n  " , sizeof ( floatType ) ) ; printf ( " Size of double : %ld bytes\n  " , sizeof ( doubleType ) ) ; printf ( " Size of char : %ld byte\n  " , sizeof ( charType ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber , temporaryVariable ; printf ( " Enter first number : " ) ; scanf ( " %lf " , & firstNumber ) ; printf ( " Enter second number : " ) ; scanf ( " %lf " , & secondNumber ) ; temporaryVariable = firstNumber ; firstNumber = secondNumber ; secondNumber = temporaryVariable ; printf ( " \n After swapping , firstNumber = %.2lf\n  " , firstNumber ) ; printf ( " After swapping , secondNumber = %.2lf " , secondNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber ; printf ( " Enter first number : " ) ; scanf ( " %lf " , & firstNumber ) ; printf ( " Enter second number : " ) ; scanf ( " %lf " , & secondNumber ) ; firstNumber = firstNumber - secondNumber ; secondNumber = firstNumber + secondNumber ; firstNumber = secondNumber - firstNumber ; printf ( " \n After swapping , firstNumber = %.2lf\n  " , firstNumber ) ; printf ( " After swapping , secondNumber = %.2lf " , secondNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number < 0 ) { printf ( " You entered %d.\n  " , number ) ; } printf ( " The if statement is easy. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) printf ( " %d is an even integer. " , number ) ; else printf ( " %d is an odd integer. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else if ( number1 > number2 ) { printf ( " Result : %d > %d " , number1 , number2 ) ; } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 > = number2 ) { if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else { printf ( " Result : %d > %d " , number1 , number2 ) ; } } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> #include <stdbool.h> int main ( ) { bool a = true ; return 0 ; }
#include <stdio.h> #include <complex.h> int main ( ) { int complex z = 2 + 1 * I ; }
#include <stdio.h> int main ( ) { short a ; long b ; long long c ; long double d ; printf ( " size of short = %d bytes\n  " , sizeof ( a ) ) ; printf ( " size of long = %d bytes\n  " , sizeof ( b ) ) ; printf ( " size of long long = %d bytes\n  " , sizeof ( c ) ) ; printf ( " size of long double = %d bytes\n  " , sizeof ( d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " C Programming " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger = 5 ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & testInteger ) ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; printf ( " Enter a number : " ) ; scanf ( " %f " , & f ) ; printf ( " Value = %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c.\n  " , chr ) ; printf ( " ASCII value of %c is %d. " , chr , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int chr = 69 ; printf ( " Character having ASCII value 69 is %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integer = 9876 ; float decimal = 987.6543 ; printf ( " 4 digit integer right justified to 6 column : %6d\n  " , integer ) ; printf ( " 4 digit integer right justified to 3 column : %3d\n  " , integer ) ; printf ( " Floating point number rounded to 2 digits : %.2f\n  " , decimal ) ; printf ( " Floating point number rounded to 0 digits : %.f\n  " , 987.6543 ) ; printf ( " Floating point number in exponential form : %e\n  " , 987.6543 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; for ( count = 1 ; count < = num ; + + count ) { sum + = count ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; long long factorial ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; factorial = 1 ; while ( number > 0 ) { factorial * = number ; --number ; } printf ( " Factorial = %lld " , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number , sum = 0 ; do { printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; sum + = number ; } while ( number ! = 0.0 ) ; printf ( " Sum = %.2lf " , sum ) ; return 0 ; }
#include <stdio.h> int addNumbers ( int a , int b ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enters two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = addNumbers ( n1 , n2 ) ; printf ( " sum = %d " , sum ) ; return 0 ; } int addNumbers ( int a , int b ) { int result ; result = a + b ; return result ; }
#include <stdio.h> int sum ( int n ) ; int main ( ) { int number , result ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & number ) ; result = sum ( number ) ; printf ( " sum = %d " , result ) ; return 0 ; } int sum ( int num ) { if ( num! = 0 ) return num + sum ( num-1 ) ; else return num ; }
#include <stdio.h> void display ( ) ; int n = 5 ; int main ( ) { + + n ; display ( ) ; return 0 ; } void display ( ) { + + n ; printf ( " n = %d " , n ) ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; } void display ( ) { static int c = 0 ; printf ( " %d " , c ) ; c + = 5 ; }
#include <stdio.h> int main ( ) { int marks [ 10 ] , i , n , sum = 0 , average ; printf ( " Enter n : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i <n ; + + i ) { printf ( " Enter number %d : " , i + 1 ) ; scanf ( " %d " , & marks [ i ] ) ; sum + = marks [ i ] ; } average = sum / n ; printf ( " Average = %d " , average ) ; return 0 ; }
#include <stdio.h> void display ( int age ) { printf ( " %d " , age ) ; } int main ( ) { int ageArray [ ] = { 2 , 3 , 4 } ; display ( ageArray [ 2 ] ) ; return 0 ; }
#include <stdio.h> float average ( float age [ ] ) ; int main ( ) { float avg , age [ ] = { 23.4 , 55 , 22.6 , 3 , 40.5 , 18 } ; avg = average ( age ) ; printf ( " Average age = %.2f " , avg ) ; return 0 ; } float average ( float age [ ] ) { int i ; float avg , sum = 0.0 ; for ( i = 0 ; i < 6 ; + + i ) { sum + = age [ i ] ; } avg = ( sum / 6 ) ; return avg ; }
#include <stdio.h> int main ( ) { int var = 5 ; printf ( " Value : %d\n  " , var ) ; printf ( " Address : %u " , & var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 4 ] ; int i ; for ( i = 0 ; i < 4 ; + + i ) { printf ( " & x [ %d ] = %u\n  " , i , & x [ i ] ) ; } printf ( " Address of array x : %u " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , x [ 6 ] , sum = 0 ; printf ( " Enter 6 numbers : " ) ; for ( i = 0 ; i < 6 ; + + i ) { scanf ( " %d " , x + i ) ; sum + = * ( x + i ) ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * ptr ; ptr = & x [ 2 ] ; printf ( " * ptr = %d \n  " , * ptr ) ; printf ( " * ptr + 1 = %d \n  " , * ptr + 1 ) ; printf ( " * ptr-1 = %d " , * ptr-1 ) ; return 0 ; }
#include <stdio.h> void swap ( int * n1 , int * n2 ) ; int main ( ) { int num1 = 5 , num2 = 10 ; swap ( & num1 , & num2 ) ; printf ( " num1 = %d\n  " , num1 ) ; printf ( " num2 = %d " , num2 ) ; return 0 ; } void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; }
#include <stdio.h> int main ( ) { char name [ 20 ] ; printf ( " Enter name : " ) ; scanf ( " %s " , name ) ; printf ( " Your name is %s. " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> void displayString ( char str [ ] ) ; int main ( ) { char str [ 50 ] ; printf ( " Enter string : " ) ; gets ( str ) ; displayString ( str ) ; return 0 ; } void displayString ( char str [ ] ) { printf ( " String Output : " ) ; puts ( str ) ; }
#include <stdio.h> int main ( void ) { char name [ ] = " Harry Potter " ; printf ( " %c " , * name ) ; printf ( " %c " , * ( name + 1 ) ) ; printf ( " %c " , * ( name + 7 ) ) ; char * namePtr ; namePtr = name ; printf ( " %c " , * namePtr ) ; printf ( " %c " , * ( namePtr + 1 ) ) ; printf ( " %c " , * ( namePtr + 7 ) ) ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> struct person { int age ; float weight ; } ; int main ( ) { struct person * personPtr , person1 ; personPtr = & person1 ; printf ( " Enter age : " ) ; scanf ( " %d " , & personPtr- ; > age ) ; printf ( " Enter weight : " ) ; scanf ( " %f " , & personPtr- ; > weight ) ; printf ( " Displaying : \n  " ) ; printf ( " Age : %d\n  " , personPtr-> age ) ; printf ( " weight : %f " , personPtr-> weight ) ; return 0 ; }
#include <stdio.h> union unionJob { char name [ 32 ] ; float salary ; int workerNo ; } uJob ; struct structJob { char name [ 32 ] ; float salary ; int workerNo ; } sJob ; int main ( ) { printf ( " size of union = %d bytes " , sizeof ( uJob ) ) ; printf ( " \n size of structure = %d bytes " , sizeof ( sJob ) ) ; return 0 ; }
#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main ( ) { j.salary = 12.3 ; j.workerNo = 100 ; printf ( " Salary = %.1f\n  " , j.salary ) ; printf ( " Number of workers = %d " , j.workerNo ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; fptr = fopen ( " C : \\program.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } printf ( " Enter num : " ) ; scanf ( " %d " , & num ) ; fprintf ( fptr , " %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.txt " , " r " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fscanf ( fptr , " %d " , & num ) ; printf ( " Value of n = %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> enum week { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum week today ; today = wednesday ; printf ( " Day %d " , today + 1 ) ; return 0 ; }
#include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main ( ) { card = club ; printf ( " Size of enum variable = %d bytes " , sizeof ( card ) ) ; return 0 ; }
#include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 } ; int main ( ) { int myDesign = BOLD | UNDERLINE ; printf ( " %d " , myDesign ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { printf ( " Catch me if you can. " ) ; } < / stdio.h>
#include <stdio.h> #include <math.h> int main ( ) { float num , root ; printf ( " Enter a number : " ) ; scanf ( " %f " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2f = %.2f " , num , root ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char sentence [ 1000 ] ; FILE * fptr ; fptr = fopen ( " program.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } printf ( " Enter a sentence : \n  " ) ; gets ( sentence ) ; fprintf ( fptr , " %s " , sentence ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> enum week { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum week today ; today = wednesday ; printf ( " Day %d " , today + 1 ) ; return 0 ; }
#include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main ( ) { card = club ; printf ( " Size of enum variable = %d bytes " , sizeof ( card ) ) ; return 0 ; }
#include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 } ; int main ( ) { int myDesign = BOLD | UNDERLINE ; printf ( " %d " , myDesign ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { long long n ; int count = 0 ; printf ( " Enter an integer : " ) ; scanf ( " %lld " , & n ) ; while ( n ! = 0 ) { n / = 10 ; + + count ; } printf ( " Number of digits : %d " , count ) ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a & b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a|b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a^b ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Output = %d\n  " , ~35 ) ; printf ( " Output = %d\n  " , ~-12 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 212 , i ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Right shift by %d : %d\n  " , i , num> > i ) ; printf ( " \n  " ) ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Left shift by %d : %d\n  " , i , num < <i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number % 2 = = 0 ) printf ( " %d is even. " , number ) ; else printf ( " %d is odd. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; ( number % 2 = = 0 ) ? printf ( " %d is even. " , number ) : printf ( " %d is odd. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { double n1 , n2 , n3 ; printf ( " Enter three different numbers : " ) ; scanf ( " %lf %lf %lf " , & n1 , & n2 , & n3 ) ; if ( n1> = n2 & & n1> = n3 ) printf ( " %.2f is the largest number. " , n1 ) ; if ( n2> = n1 & & n2> = n3 ) printf ( " %.2f is the largest number. " , n2 ) ; if ( n3> = n1 & & n3> = n2 ) printf ( " %.2f is the largest number. " , n3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { double n1 , n2 , n3 ; printf ( " Enter three numbers : " ) ; scanf ( " %lf %lf %lf " , & n1 , & n2 , & n3 ) ; if ( n1> = n2 & & n1> = n3 ) printf ( " %.2lf is the largest number. " , n1 ) ; else if ( n2> = n1 & & n2> = n3 ) printf ( " %.2lf is the largest number. " , n2 ) ; else printf ( " %.2lf is the largest number. " , n3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; + + i ) { sum + = i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; i = 1 ; while ( i < = n ) { sum + = i ; + + i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; do { printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; } while ( n < = 0 ) ; for ( i = 1 ; i < = n ; + + i ) { sum + = i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; unsigned long long factorial = 1 ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; if ( n < 0 ) printf ( " Error! Factorial of a negative number doesn't exist. " ) ; else { for ( i = 1 ; i < = n ; + + i ) { factorial * = i ; } printf ( " Factorial of %d = %llu " , n , factorial ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = 10 ; + + i ) { printf ( " %d * %d = %d \n  " , n , i , n * i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , range ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the range : " ) ; scanf ( " %d " , & range ) ; for ( i = 1 ; i < = range ; + + i ) { printf ( " %d * %d = %d \n  " , n , i , n * i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n , t1 = 0 , t2 = 1 , nextTerm ; printf ( " Enter the number of terms : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : " ) ; for ( i = 1 ; i < = n ; + + i ) { printf ( " %d , " , t1 ) ; nextTerm = t1 + t2 ; t1 = t2 ; t2 = nextTerm ; } return 0 ; }
#include <stdio.h> int main ( ) { int t1 = 0 , t2 = 1 , nextTerm = 0 , n ; printf ( " Enter a positive number : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : %d , %d , " , t1 , t2 ) ; nextTerm = t1 + t2 ; while ( nextTerm < = n ) { printf ( " %d , " , nextTerm ) ; t1 = t2 ; t2 = nextTerm ; nextTerm = t1 + t2 ; } return 0 ; }
#include <stdio.h> long int multiplyNumbers ( int n ) ; int main ( ) { int n ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; printf ( " Factorial of %d = %ld " , n , multiplyNumbers ( n ) ) ; return 0 ; } long int multiplyNumbers ( int n ) { if ( n > = 1 ) return n * multiplyNumbers ( n-1 ) ; else return 1 ; }
#include <stdio.h> int main ( ) { double number ; printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; if ( number < = 0.0 ) { if ( number = = 0.0 ) printf ( " You entered 0. " ) ; else printf ( " You entered a negative number. " ) ; } else printf ( " You entered a positive number. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number ; printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; if ( number < 0.0 ) printf ( " You entered a negative number. " ) ; else if ( number > 0.0 ) printf ( " You entered a positive number. " ) ; else printf ( " You entered 0. " ) ; return 0 ; }
#include <stdio.h> int addNumbers ( int n ) ; int main ( ) { int num ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; printf ( " Sum = %d " , addNumbers ( num ) ) ; return 0 ; } int addNumbers ( int n ) { if ( n ! = 0 ) return n + addNumbers ( n-1 ) ; else return n ; }
#include <stdio.h> int hcf ( int n1 , int n2 ) ; int main ( ) { int n1 , n2 ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " G.C.D of %d and %d is %d. " , n1 , n2 , hcf ( n1 , n2 ) ) ; return 0 ; } int hcf ( int n1 , int n2 ) { if ( n2 ! = 0 ) return hcf ( n2 , n1 %n2 ) ; else return n1 ; }
#include <stdio.h> int main ( ) { FILE * fp ; int c ; fp = fopen ( __FILE__ , " r " ) ; do { c = getc ( fp ) ; putchar ( c ) ; } while ( c ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { int data [ 5 ] , i ; printf ( " Enter elements : " ) ; for ( i = 0 ; i < 5 ; + + i ) scanf ( " %d " , data + i ) ; printf ( " You entered : \n  " ) ; for ( i = 0 ; i < 5 ; + + i ) printf ( " %d\n  " , * ( data + i ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " awesome " ; char str2 [ 10 ] ; char str3 [ 10 ] ; strcpy ( str2 , str1 ) ; strcpy ( str3 , " well " ) ; puts ( str2 ) ; puts ( str3 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " abcd " , str2 [ ] = " abCd " , str3 [ ] = " abcd " ; int result ; result = strcmp ( str1 , str2 ) ; printf ( " strcmp ( str1 , str2 ) = %d\n  " , result ) ; result = strcmp ( str1 , str3 ) ; printf ( " strcmp ( str1 , str3 ) = %d\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " This is " , str2 [ ] = " programiz.com " ; strcat ( str1 , str2 ) ; puts ( str1 ) ; puts ( str2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 1000 ] , ch ; int i , frequency = 0 ; printf ( " Enter a string : " ) ; gets ( str ) ; printf ( " Enter a character to find the frequency : " ) ; scanf ( " %c " , & ch ) ; for ( i = 0 ; str [ i ] ! = '\0' ; + + i ) { if ( ch = = str [ i ] ) + + frequency ; } printf ( " Frequency of %c = %d " , ch , frequency ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " awesome " ; char str2 [ 10 ] ; char str3 [ 10 ] ; strcpy ( str2 , str1 ) ; strcpy ( str3 , " well " ) ; puts ( str2 ) ; puts ( str3 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " This is " , str2 [ ] = " programiz.com " ; strcat ( str1 , str2 ) ; puts ( str1 ) ; puts ( str2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " abcd " , str2 [ ] = " abCd " , str3 [ ] = " abcd " ; int result ; result = strcmp ( str1 , str2 ) ; printf ( " strcmp ( str1 , str2 ) = %d\n  " , result ) ; result = strcmp ( str1 , str3 ) ; printf ( " strcmp ( str1 , str3 ) = %d\n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] ; int i ; printf ( " Enter a string : " ) ; scanf ( " %s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; + + i ) ; printf ( " Length of string : %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] , i ; printf ( " Enter string s1 : " ) ; scanf ( " %s " , s1 ) ; for ( i = 0 ; s1 [ i ] ! = '\0' ; + + i ) { s2 [ i ] = s1 [ i ] ; } s2 [ i ] = '\0' ; printf ( " String s2 : %s " , s2 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char c [ 1000 ] ; FILE * fptr ; if ( ( fptr = fopen ( " program.txt " , " r " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fscanf ( fptr , " % [ ^\n  ] " , c ) ; printf ( " Data from the file : \n  %s " , c ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; for ( c = 'A' ; c < = 'Z' ; + + c ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , i ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & number ) ; printf ( " Factors of %d are : " , number ) ; for ( i = 1 ; i < = number ; + + i ) { if ( number %i = = 0 ) { printf ( " %d " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 , i , gcd ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; for ( i = 1 ; i < = n1 & & i < = n2 ; + + i ) { if ( n1 %i = = 0 & & n2 %i = = 0 ) gcd = i ; } printf ( " G.C.D of %d and %d is %d " , n1 , n2 , gcd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; while ( n1! = n2 ) { if ( n1 > n2 ) n1 - = n2 ; else n2 - = n1 ; } printf ( " GCD = %d " , n1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; n1 = ( n1 > 0 ) ? n1 : -n1 ; n2 = ( n2 > 0 ) ? n2 : -n2 ; while ( n1! = n2 ) { if ( n1 > n2 ) n1 - = n2 ; else n2 - = n1 ; } printf ( " GCD = %d " , n1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 , minMultiple ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; minMultiple = ( n1> n2 ) ? n1 : n2 ; while ( 1 ) { if ( minMultiple %n1 = = 0 & & minMultiple %n2 = = 0 ) { printf ( " The LCM of %d and %d is %d. " , n1 , n2 , minMultiple ) ; break ; } + + minMultiple ; } return 0 ; }
#include <stdio.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( ( c> = 'a' & & c < = 'z' ) || ( c> = 'A' & & c < = 'Z' ) ) printf ( " %c is an alphabet. " , c ) ; else printf ( " %c is not an alphabet. " , c ) ; return 0 ; }
#include <stdio.h> void reverseSentence ( ) ; int main ( ) { printf ( " Enter a sentence : " ) ; reverseSentence ( ) ; return 0 ; } void reverseSentence ( ) { char c ; scanf ( " %c " , & c ) ; if ( c ! = '\n ' ) { reverseSentence ( ) ; printf ( " %c " , c ) ; } }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , originalNumber , remainder , result = 0 ; printf ( " Enter a three digit integer : " ) ; scanf ( " %d " , & number ) ; originalNumber = number ; while ( originalNumber ! = 0 ) { remainder = originalNumber %10 ; result + = remainder * remainder * remainder ; originalNumber / = 10 ; } if ( result = = number ) printf ( " %d is an Armstrong number. " , number ) ; else printf ( " %d is not an Armstrong number. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reversedNumber = 0 , remainder ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { remainder = n %10 ; reversedNumber = reversedNumber * 10 + remainder ; n / = 10 ; } printf ( " Reversed Number = %d " , reversedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reversedInteger = 0 , remainder , originalInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; originalInteger = n ; while ( n! = 0 ) { remainder = n %10 ; reversedInteger = reversedInteger * 10 + remainder ; n / = 10 ; } if ( originalInteger = = reversedInteger ) printf ( " %d is a palindrome. " , originalInteger ) ; else printf ( " %d is not a palindrome. " , originalInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int base , exponent ; long long result = 1 ; printf ( " Enter a base number : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter an exponent : " ) ; scanf ( " %d " , & exponent ) ; while ( exponent ! = 0 ) { result * = base ; --exponent ; } printf ( " Answer = %lld " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , exponent , result ; printf ( " Enter a base number : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter an exponent : " ) ; scanf ( " %lf " , & exponent ) ; result = pow ( base , exponent ) ; printf ( " %.1lf^ %.1lf = %.2lf " , base , exponent , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int convertDecimalToOctal ( int decimalNumber ) ; int main ( ) { int decimalNumber ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & decimalNumber ) ; printf ( " %d in decimal = %d in octal " , decimalNumber , convertDecimalToOctal ( decimalNumber ) ) ; return 0 ; } int convertDecimalToOctal ( int decimalNumber ) { int octalNumber = 0 , i = 1 ; while ( decimalNumber ! = 0 ) { octalNumber + = ( decimalNumber % 8 ) * i ; decimalNumber / = 8 ; i * = 10 ; } return octalNumber ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a & b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a|b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a^b ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Output = %d\n  " , ~35 ) ; printf ( " Output = %d\n  " , ~-12 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 212 , i ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Right shift by %d : %d\n  " , i , num> > i ) ; printf ( " \n  " ) ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Left shift by %d : %d\n  " , i , num < <i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter a year : " ) ; scanf ( " %d " , & year ) ; if ( year %4 = = 0 ) { if ( year %100 = = 0 ) { if ( year %400 = = 0 ) printf ( " %d is a leap year. " , year ) ; else printf ( " %d is not a leap year. " , year ) ; } else printf ( " %d is a leap year. " , year ) ; } else printf ( " %d is not a leap year. " , year ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char input , alphabet = 'A' ; printf ( " Enter the uppercase character you want to print in last row : " ) ; scanf ( " %c " , & input ) ; for ( i = 1 ; i < = ( input-'A' + 1 ) ; + + i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %c " , alphabet ) ; } + + alphabet ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = rows ; i> = 1 ; --i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = rows ; i> = 1 ; --i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , space , rows , k = 0 ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i , k = 0 ) { for ( space = 1 ; space < = rows-i ; + + space ) { printf ( " " ) ; } while ( k ! = 2 * i-1 ) { printf ( " * " ) ; + + k ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , i , j , number = 1 ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %d " , number ) ; + + number ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isalnum ( c ) = = 0 ) printf ( " %c is not an alphanumeric character. " , c ) ; else printf ( " %c is an alphanumeric character. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = '5' ; printf ( " Result when numeric character is passed : %d " , isdigit ( c ) ) ; c = ' + ' ; printf ( " \n Result when non-numeric character is passed : %d " , isdigit ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isdigit ( c ) = = 0 ) printf ( " %c is not a digit. " , c ) ; else printf ( " %c is a digit. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'Q' ; printf ( " \n Result when uppercase alphabet is passed : %d " , isalpha ( c ) ) ; c = 'q' ; printf ( " \n Result when lowercase alphabet is passed : %d " , isalpha ( c ) ) ; c = ' + ' ; printf ( " \n Result when non-alphabetic character is passed : %d " , isalpha ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isalpha ( c ) = = 0 ) printf ( " %c is not an alphabet. " , c ) ; else printf ( " %c is an alphabet. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = 'Q' ; result = iscntrl ( c ) ; printf ( " When %c is passed to iscntrl ( ) = %d\n  " , c , result ) ; c = '\n ' ; result = iscntrl ( c ) ; printf ( " When %c is passed to iscntrl ( ) = %d " , c , result ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " The ASCII value of all control characters are " ) ; for ( i = 0 ; i < = 127 ; + + i ) { if ( iscntrl ( i ) ! = 0 ) printf ( " %d " , i ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , power , result ; printf ( " Enter the base number : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter the power raised : " ) ; scanf ( " %lf " , & power ) ; result = pow ( base , power ) ; printf ( " %.1lf^ %.1lf = %.2lf " , base , power , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 6 , squareRoot ; squareRoot = sqrt ( num ) ; printf ( " Square root of %lf = %lf " , num , squareRoot ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = ' ' ; result = isgraph ( c ) ; printf ( " When %c is passed to isgraph ( ) = %d\n  " , c , result ) ; c = '\n ' ; result = isgraph ( c ) ; printf ( " When %c is passed to isgraph ( ) = %d\n  " , c , result ) ; c = '9' ; result = isgraph ( c ) ; printf ( " When %c is passed to isgraph ( ) = %d\n  " , c , result ) ;
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All graphic characters in C programming are : \n  " ) ; for ( i = 0 ; i < = 127 ; + + i ) { if ( isgraph ( i ) ! = 0 ) printf ( " %c " , i ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 't' ; printf ( " Return value when %c is passed to islower ( ) : %d " , c , islower ( c ) ) ; c = 'D' ; printf ( " \n Return value when %c is passed to islower ( ) : %d " , c , islower ( c ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char c ; c = 'Q' ; printf ( " Result when a printable character %c is passed to isprint ( ) : %d " , c , isprint ( c ) ) ; c = '\n ' ; printf ( " \n Result when a control character %c is passed to isprint ( ) : %d " , c , isprint ( c ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 127 ; + + c ) if ( isprint ( c ) ! = 0 ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = ' : ' ; result = ispunct ( c ) ; if ( result = = 0 ) { printf ( " %c is a punctuation " , c ) ; } else { printf ( " %c is not a punctuation " , c ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All punctuation marks in C programming are : \n  " ) ; for ( i = 0 ; i < = 127 ; + + i ) if ( ispunct ( i ) ! = 0 ) printf ( " %c " , i ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; result = isspace ( c ) ; if ( result = = 0 ) { printf ( " Not a white-space character. " ) ; } else { printf ( " White-space character. " ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'C' ; printf ( " Return value when uppercase character %c is passed to isupper ( ) : %d " , c , isupper ( c ) ) ; c = ' + ' ; printf ( " \n Return value when another character %c is passed to is isupper ( ) : %d " , c , isupper ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = '5' ; printf ( " Result when hexadecimal character %c is passed : %d " , c , isxdigit ( c ) ) ; c = 'M' ; printf ( " \n Result when hexadecimal character %c is not passed : %d " , c , isxdigit ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c , result ; c = 'M' ; result = tolower ( c ) ; printf ( " tolower ( %c ) = %c\n  " , c , result ) ; c = 'm' ; result = tolower ( c ) ; printf ( " tolower ( %c ) = %c\n  " , c , result ) ; c = ' + ' ; result = tolower ( c ) ; printf ( " tolower ( %c ) = %c\n  " , c , result ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'm' ; printf ( " %c -> %c " , c , toupper ( c ) ) ; c = 'D' ; printf ( " \n  %c -> %c " , c , toupper ( c ) ) ; c = '9' ; printf ( " \n  %c -> %c " , c , toupper ( c ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = -0.5 ; result = acos ( x ) ; printf ( " Inverse of cos ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = acos ( x ) * 180 / PI ; printf ( " Inverse of cos ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 1.2 ; result = acos ( x ) ; printf ( " Inverse of cos ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , facosx ; long double lx , ldacosx ; fx = -0.505405 ; facosx = acosf ( fx ) ; lx = -0.50540593 ; ldacosx = acosf ( lx ) ; printf ( " acosf ( x ) = %f in radians\n  " , facosx ) ; printf ( " acosl ( x ) = %Lf in radians " , ldacosx ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = 5.9 ; result = acosh ( x ) ; printf ( " acosh ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = acosh ( x ) * 180 / PI ; printf ( " acosh ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 0.5 ; result = acosh ( x ) ; printf ( " acosh ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <float.h> int main ( ) { double x , result ; x = DBL_MAX ; result = acosh ( x ) ; printf ( " Maximum value of acosh ( ) in radians = %.3lf\n  " , result ) ; x = INFINITY ; result = acosh ( x ) ; printf ( " When infinity is passed to acosh ( ) , result = %.3lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , facosx ; long double lx , ldacosx ; fx = 5.5054 ; facosx = acoshf ( fx ) ; lx = 5.50540593 ; ldacosx = acoshl ( lx ) ; printf ( " acoshf ( x ) = %f in radians\n  " , facosx ) ; printf ( " acoshl ( x ) = %Lf in radians " , ldacosx ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = -0.5 ; result = asin ( x ) ; printf ( " Inverse of sin ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = asin ( x ) * 180 / PI ; printf ( " Inverse of sin ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 1.2 ; result = asin ( x ) ; printf ( " Inverse of sin ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , fasinx ; long double lx , ldasinx ; fx = -0.505405 ; fasinx = asinf ( fx ) ; lx = -0.50540593 ; ldasinx = asinf ( lx ) ; printf ( " asinf ( x ) = %f in radians\n  " , fasinx ) ; printf ( " asinl ( x ) = %Lf in radians " , ldasinx ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { float num = 8.0 ; double result ; result = asinh ( num ) ; printf ( " Inverse of sinh ( %.2f ) = %.2f in radians " , num , result ) ; result = ( result * 180 ) / PI ; printf ( " \n Inverse of sinh ( %.2f ) = %.2f in degrees " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double num = 1.0 ; double result ; result = atan ( num ) ; printf ( " Inverse of tan ( %.2f ) = %.2f in radians " , num , result ) ; result = ( result * 180 ) / PI ; printf ( " \n Inverse of tan ( %.2f ) = %.2f in degrees " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = -0.5 ; result = atanh ( x ) ; printf ( " atanh ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = atanh ( x ) * 180 / PI ; printf ( " atanh ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 3 ; result = atanh ( x ) ; printf ( " atanh ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double x , y , result ; y = 2.53 ; x = -10.2 ; result = atan2 ( y , x ) ; result = result * 180.0 / PI ; printf ( " Tangent inverse for ( x = %.1lf , y = %.1lf ) is %.1lf degrees. " , x , y , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 6 , cubeRoot ; cubeRoot = cbrt ( num ) ; printf ( " Cube root of %lf = %lf " , num , cubeRoot ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 8.33 ; int result ; result = ceil ( num ) ; printf ( " Ceiling integer of %.2f = %d " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double arg = 30 , result ; arg = ( arg * PI ) / 180 ; result = cos ( arg ) ; printf ( " cos of %.2lf radian = %.2lf " , arg , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x = 12.0 , result ; result = exp ( x ) ; printf ( " Exponential of %.2lf = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x , result ; x = -1.5 ; result = fabs ( x ) ; printf ( " | %.2lf| = %.2lf\n  " , x , result ) ; x = 11.3 ; result = fabs ( x ) ; printf ( " | %.2lf| = %.2lf\n  " , x , result ) ; x = 0 ; result = fabs ( x ) ; printf ( " | %.2lf| = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = -8.33 ; int result ; result = floor ( num ) ; printf ( " Floor integer of %.2f = %d " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double p , b ; double hypotenuse ; p = 5.0 ; b = 12.0 ; hypotenuse = hypot ( p , b ) ; printf ( " hypot ( %.2lf , %.2lf ) = %.2lf " , p , b , hypotenuse ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 5.6 , result ; result = log ( num ) ; printf ( " log ( %.1f ) = %.2f " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 4.00 , result ; result = log10 ( num ) ; printf ( " log10 ( %.1f ) = %.2f " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x ; double result ; x = 2.3 ; result = sin ( x ) ; printf ( " sin ( %.2lf ) = %.2lf\n  " , x , result ) ; x = -2.3 ; result = sin ( x ) ; printf ( " sin ( %.2lf ) = %.2lf\n  " , x , result ) ; x = 0 ; result = sin ( x ) ; printf ( " sin ( %.2lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double angle = 2.50 , result ; result = sinh ( angle ) ; printf ( " Sine hyperbolic of %.2lf ( in radians ) = %.2lf " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x ; double result ; x = 2.3 ; result = tan ( x ) ; printf ( " tan ( %.2lf ) = %.2lf\n  " , x , result ) ; x = -2.3 ; result = tan ( x ) ; printf ( " tan ( %.2lf ) = %.2lf\n  " , x , result ) ; x = 0 ; result = tan ( x ) ; printf ( " tan ( %.2lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double angle = 0.40 , result ; result = tanh ( angle ) ; printf ( " Tangent hyperbolic of %.2lf ( in radians ) = %.2lf " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " Hello Compiler , I am C " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char name [ 20 ] ; printf ( " Enter Your Name : " ) ; scanf ( " %s " , name ) ; printf ( " Hello , %s. You are at codescracker.com " , name ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 10 ] ; printf ( " Are you a programmer ? " ) ; scanf ( " %s " , str ) ; if ( !strcmp ( " yes " , str ) ) { printf ( " What a true mind you have..!! " ) ; } else { printf ( " Sorry..!!..You are telling a lie " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " Hello World " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char name [ 20 ] ; int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " You entered %d " , num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num = 10 ; printf ( " The value of num is %d " , num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum of the two number is %d " , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) { printf ( " This is an even number " ) ; } else { printf ( " This is an odd number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , i , count = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i <num ; i + + ) { if ( num %i = = 0 ) { count + + ; break ; } } if ( count = = 0 ) { printf ( " This is a prime number " ) ; } else { printf ( " This is not a prime number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter a character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ) { printf ( " %c is an alphabet " , ch ) ; } else { printf ( " %c is not an alphabet " , ch ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter an alphabet : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'a' || ch = = 'A' || ch = = 'e' || ch = = 'E' || ch = = 'i' || ch = = 'I' || ch = = 'o' || ch = = 'O' || ch = = 'u' || ch = = 'U' ) { printf ( " This is a vowel " ) ; } else { printf ( " This is not a vowel " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , orig , rev = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; orig = num ; while ( num> 0 ) { rem = num %10 ; rev = rev * 10 + rem ; num = num / 10 ; } if ( orig = = rev ) { printf ( " Reverse is equal to original " ) ; } else { printf ( " Reverse is not equal to original " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , res ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; res = a + b ; printf ( " \n Addition = %d " , res ) ; res = a-b ; printf ( " \n Subtraction = %d " , res ) ; res = a * b ; printf ( " \n Multiplication = %d " , res ) ; res = a / b ; printf ( " \n Division = %d " , res ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , rem = 0 , sum = 0 ; printf ( " Enter a Number : " ) ; scanf ( " %d " , & num ) ; int temp = num ; while ( num> 0 ) { rem = num %10 ; sum = sum + rem ; num = num / 10 ; } printf ( " Sum of the digits of %d is %d " , temp , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , i , tab ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " Table of %d is \n \n  " , num ) ; for ( i = 1 ; i < = 10 ; i + + ) { tab = num * i ; printf ( " %d * %2d = %2d\n  " , num , i , tab ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , n , sum = 0 , num ; printf ( " How many number you want to enter and add them ? " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d number : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & num ) ; sum = sum + num ; } printf ( " Sum of all the %d number is %d " , n , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , temp ; printf ( " Enter value of A and B : \n  " ) ; printf ( " A = " ) ; scanf ( " %d " , & a ) ; printf ( " B = " ) ; scanf ( " %d " , & b ) ; temp = a ; a = b ; b = temp ; printf ( " Number interchanged successfully..!!\n  " ) ; printf ( " A = %d\n B = %d " , a , b ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , rev = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { rem = num %10 ; rev = rev * 10 + rem ; num = num / 10 ; } printf ( " Reverse = %d " , rev ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , big ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; if ( a> b ) { big = a ; } else { big = b ; } printf ( " Biggest of the two number is %d " , big ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , i , fact = 1 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = num ; i> 0 ; i-- ) { fact = fact * i ; } printf ( " Factorial of %d is %d " , num , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int len , bre , peri , area ; printf ( " Enter length and breadth of the rectangle : " ) ; scanf ( " %d %d " , & len , & bre ) ; area = len * bre ; peri = ( 2 * len ) + ( 2 * bre ) ; printf ( " Area = %d\tPerimeter = %d " , area , peri ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int side , peri , area ; printf ( " Enter length of a side of square : " ) ; scanf ( " %d " , & side ) ; area = side * side ; peri = 4 * side ; printf ( " Area = %d\tPerimeter = %d " , area , peri ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float r , area , circum ; printf ( " Enter the radius of the circle : " ) ; scanf ( " %f " , & r ) ; area = 3.14 * r * r ; circum = 2 * 3.14 * r ; printf ( " Area of the circle = %f\n Circumference of the circle = %f\n  " , area , circum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float fah , cel ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fah ) ; cel = ( fah-32 ) / 1.8 ; printf ( " Temperature in Celsius = %f " , cel ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float cen , fah ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & cen ) ; fah = ( 1.8 * cen ) + 32 ; printf ( " \n Temperature in Fahrenheit = %f " , fah ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; int i ; for ( i = 1 ; i <255 ; i + + ) { ch = i ; printf ( " %d -> %c\t " , i , ch ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a = 0 , b = 1 , c = 0 , limit ; printf ( " Upto How many term ? " ) ; scanf ( " %d " , & limit ) ; printf ( " Fabonacci Series : %d %d " , a , b ) ; c = a + b ; limit = limit-2 ; while ( limit ) { printf ( " %d " , c ) ; a = b ; b = c ; c = a + b ; limit-- ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , rem , orig , rev = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; orig = num ; while ( num! = 0 ) { rem = num %10 ; rev = rev * 10 + rem ; num = num / 10 ; } if ( rev = = orig ) { printf ( " Palindrome " ) ; } else { printf ( " Not Palindrome " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int n , nu , num = 0 , rem ; printf ( " Enter any positive number : " ) ; scanf ( " %d " , & n ) ; nu = n ; while ( nu! = 0 ) { rem = nu %10 ; num = num + rem * rem * rem ; nu = nu / 10 ; } if ( num = = n ) { printf ( " Armstrong Number " ) ; } else { printf ( " Not Armstrong Number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int binnum , decnum = 0 , i = 1 , rem ; printf ( " Enter any binary number : " ) ; scanf ( " %ld " , & binnum ) ; while ( binnum! = 0 ) { rem = binnum %10 ; decnum = decnum + rem * i ; i = i * 2 ; binnum = binnum / 10 ; } printf ( " Equivalent decimal value = %ld " , decnum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void main ( ) { clrscr ( ) ; long int octnum , decnum = 0 ; int i = 0 ; printf ( " Enter any Octal Number : " ) ; scanf ( " %ld " , & octnum ) ; while ( octnum! = 0 ) { decnum = decnum + ( octnum %10 ) * pow ( 8 , i ) ; i + + ; octnum = octnum / 10 ; } printf ( " Equivalent Decimal Value = %ld " , decnum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " * " ) ; } k = k + 2 ; printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 8 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " " ) ; } k = k-2 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 16 , tim = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " " ) ; } k = k-4 ; for ( j = 0 ; j <tim ; j + + ) { printf ( " * " ) ; } tim = tim + 2 ; printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , n = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d " , n ) ; n + + ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , num = 1 ; for ( i = 0 ; i <5 ; i + + ) { num = 1 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " %d " , num ) ; num + + ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int sml = 1 , i , limit ; printf ( " How many smiley face you want to print ? " ) ; scanf ( " %d " , & limit ) ; for ( i = 0 ; i <limit ; i + + ) { printf ( " %c " , sml ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num1 , num2 , * ptr1 , * ptr2 , sum = 0 ; printf ( " Enter the two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; ptr1 = & num1 ; ptr2 = & num2 ; sum = * ptr1 + * ptr2 ; printf ( " Sum of the two number is %d " , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; printf ( " Enter your first name : " ) ; scanf ( " %s " , str ) ; printf ( " Hello , %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] , len ; printf ( " Enter a string : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " Length of the string is %d " , len ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 100 ] , str2 [ 100 ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; if ( strcmp ( str1 , str2 ) = = 0 ) { printf ( " Both the strings are equal " ) ; } else { printf ( " Both the strings are not equal " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter a string : " ) ; gets ( str1 ) ; printf ( " copying string 1 into string 2 ......\n  " ) ; strcpy ( str2 , str1 ) ; printf ( " String 2 after copying %s " , str2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 50 ] , str2 [ 50 ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " String after concatenation is %s " , str1 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 100 ] , temp ; int i = 0 , j ; printf ( " Enter the String : " ) ; gets ( str ) ; i = 0 ; j = strlen ( str ) -1 ; while ( i <j ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; i + + ; j-- ; } printf ( " Reverse of the String = %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char strs [ 100 ] , countw = 0 , strw [ 15 ] , i ; printf ( " Write a sentence : " ) ; gets ( strs ) ; int len = strlen ( strs ) ; for ( i = 0 ; i <len ; i + + ) { if ( strs [ i ] = = ' ' ) { countw + + ; } } printf ( " Total number of words in the sentence is %d " , countw + 1 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter a character in uppercase : " ) ; scanf ( " %c " , & ch ) ; ch = ch + 32 ; printf ( " character in lowercase = %c " , ch ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; int i ; printf ( " Enter the String ( Enter First Name ) : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 97 & & str [ i ] < = 122 ) { str [ i ] = str [ i ] -32 ; } } printf ( " \n The String in Uppercase = %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; int i ; for ( i = 0 ; i <100 ; i + + ) { printf ( " %d\t " , rand ( ) ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; char c [ 1000 ] ; FILE * fp ; if ( ( fp = fopen ( " filename.txt " , " r " ) ) = = NULL ) { printf ( " Error in opening file..!! " ) ; getch ( ) ; exit ( 1 ) ; } fscanf ( fp , " %s " , c ) ; printf ( " Data in file = %s " , c ) ; fclose ( fp ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <dir.h> void main ( ) { clrscr ( ) ; int done , i = 1 ; struct ffblk a ; printf ( " Press any key to list and view all the files in the current directory : \n  " ) ; getch ( ) ; done = findfirst ( " * . * " , & a , 0 ) ; while ( !done ) { printf ( " %d = %s , " , i , a.ff_name ) ; done = findnext ( & a ) ; i + + ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int status ; char fname [ 20 ] ; printf ( " Enter name of file , you want to delete : " ) ; gets ( fname ) ; status = remove ( fname ) ; if ( status = = 0 ) { printf ( " file %s deleted successfully..!!\n  " , fname ) ; } else { printf ( " Unable to delete file %s\n  " , fname ) ; perror ( " Error Message " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <dos.h> void main ( ) { clrscr ( ) ; struct date d ; getdate ( & d ) ; printf ( " Current system date is %d / %d / %d " , d.da_day , d.da_mon , d.da_year ) ; getch ( ) ; }
#include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; system ( " C : \\Windows\\System32\\ipconfig " ) ; getch ( ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { system ( " C : \\Windows\\System32\\shutdown / s " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { system ( " C : \\Windows\\System32\\shutdown / s / t 0 " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch ; printf ( " Do you want to shutdown your computer ( y / n ) : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) { system ( " C : \\Windows\\System32\\shutdown -s " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> void main ( ) { int ival , remainder ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & ival ) ; remainder = ival % 2 ; if ( remainder = = 0 ) printf ( " %d is an even integer\n  " , ival ) ; else printf ( " %d is an odd integer\n  " , ival ) ; }
#include <stdio.h> void main ( ) { int i , num , odd_sum = 0 , even_sum = 0 ; printf ( " Enter the value of num\n  " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { if ( i % 2 = = 0 ) even_sum = even_sum + i ; else odd_sum = odd_sum + i ; } printf ( " Sum of all odd numbers = %d\n  " , odd_sum ) ; printf ( " Sum of all even numbers = %d\n  " , even_sum ) ; }
#include <stdio.h> void main ( ) { int number ; printf ( " Enter a number \n  " ) ; scanf ( " %d " , & number ) ; if ( number > = 0 ) printf ( " %d is a positive number \n  " , number ) ; else printf ( " %d is a negative number \n  " , number ) ; }
#include <stdio.h> void main ( ) { int m , n ; printf ( " Enter the values for M and N\n  " ) ; scanf ( " %d %d " , & m , & n ) ; if ( m = = n ) printf ( " M and N are equal\n  " ) ; else printf ( " M and N are not equal\n  " ) ; }
#include <stdio.h> void main ( ) { long num , temp , digit , sum = 0 ; printf ( " Enter the number \n  " ) ; scanf ( " %ld " , & num ) ; temp = num ; while ( num > 0 ) { digit = num % 10 ; sum = sum + digit ; num / = 10 ; } printf ( " Given number = %ld\n  " , temp ) ; printf ( " Sum of the digits %ld = %ld\n  " , temp , sum ) ; }
#include <stdio.h> void main ( ) { int num , binary_val , decimal_val = 0 , base = 1 , rem ; printf ( " Enter a binary number ( 1s and 0s ) \n  " ) ; scanf ( " %d " , & num ) ; binary_val = num ; while ( num > 0 ) { rem = num % 10 ; decimal_val = decimal_val + rem * base ; num = num / 10 ; base = base * 2 ; } printf ( " The Binary number is = %d \n  " , binary_val ) ; printf ( " Its decimal equivalent is = %d \n  " , decimal_val ) ; }
#include <stdio.h> #define DAYSINWEEK 7 void main ( ) { int ndays , year , week , days ; printf ( " Enter the number of days\n  " ) ; scanf ( " %d " , & ndays ) ; year = ndays / 365 ; week = ( ndays % 365 ) / DAYSINWEEK ; days = ( ndays % 365 ) % DAYSINWEEK ; printf ( " %d is equivalent to %d years , %d weeks and %d daysn " , ndays , year , week , days ) ; }
#include <stdio.h> int main ( ) { long int binarynum , octalnum = 0 , j = 1 , remainder ; printf ( " Enter the value for binary number : " ) ; scanf ( " %ld " , & binarynum ) ; while ( binarynum ! = 0 ) { remainder = binarynum % 10 ; octalnum = octalnum + remainder * j ; j = j * 2 ; binarynum = binarynum / 10 ; } printf ( " Equivalent octal value : %lo " , octalnum ) ; return 0 ; }
#include <stdio.h> int main ( ) { long int binaryval , hexadecimalval = 0 , i = 1 , remainder ; printf ( " Enter the binary number : " ) ; scanf ( " %ld " , & binaryval ) ; while ( binaryval ! = 0 ) { remainder = binaryval % 10 ; hexadecimalval = hexadecimalval + remainder * i ; i = i * 2 ; binaryval = binaryval / 10 ; } printf ( " Equivalent hexadecimal value : %lX " , hexadecimalval ) ; return 0 ; }
#include <stdio.h> int main ( ) { long decimalnum , quotient , remainder ; int i , j = 0 ; char hexadecimalnum [ 100 ] ; printf ( " Enter decimal number : " ) ; scanf ( " %ld " , & decimalnum ) ; quotient = decimalnum ; while ( quotient ! = 0 ) { remainder = quotient % 16 ; if ( remainder < 10 ) hexadecimalnum [ j + + ] = 48 + remainder ; else hexadecimalnum [ j + + ] = 55 + remainder ; quotient = quotient / 16 ; }
#include <stdio.h> #include <math.h> int main ( ) { long int octal , decimal = 0 ; int i = 0 ; printf ( " Enter any octal number : " ) ; scanf ( " %ld " , & octal ) ; while ( octal ! = 0 ) { decimal = decimal + ( octal % 10 ) * pow ( 8 , i + + ) ; octal = octal / 10 ; } printf ( " Equivalent decimal value : %ld " , decimal ) ; return 0 ; }
#include <stdio.h> int convert ( int ) ; int main ( ) { int dec , bin ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & dec ) ; bin = convert ( dec ) ; printf ( " The binary equivalent of %d is %d.\n  " , dec , bin ) ; return 0 ; } int convert ( int dec ) { if ( dec = = 0 ) { return 0 ; } else { return ( dec % 2 + 10 * convert ( dec / 2 ) ) ; } }
#include <stdio.h> int sum ( int a ) ; int main ( ) { int num , result ; printf ( " Enter the number : " ) ; scanf ( " %d " , & num ) ; result = sum ( num ) ; printf ( " Sum of digits in %d is %d\n  " , num , result ) ; return 0 ; } int sum ( int num ) { if ( num ! = 0 ) { return ( num % 10 + sum ( num / 10 ) ) ; } else { return 0 ; } }
#include <stdio.h> void display ( int ) ; int main ( ) { int num , result ; printf ( " Enter the Nth number : " ) ; scanf ( " %d " , & num ) ; display ( num ) ; return 0 ; } void display ( int num ) { static int i = 1 ; if ( num = = i ) { printf ( " %d \n  " , num ) ; return ; } else { printf ( " %d " , i ) ; i + + ; display ( num ) ; } }
#include <stdio.h> int binary_conversion ( int ) ; int main ( ) { int num , bin ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & num ) ; bin = binary_conversion ( num ) ; printf ( " The binary equivalent of %d is %d\n  " , num , bin ) ; } int binary_conversion ( int num ) { if ( num = = 0 ) { return 0 ; } else { return ( num % 2 ) + 10 * binary_conversion ( num / 2 ) ; } }
#include <stdio.h> void main ( ) { long num , reverse = 0 , temp , remainder ; printf ( " Enter the number\n  " ) ; scanf ( " %ld " , & num ) ; temp = num ; while ( num > 0 ) { remainder = num % 10 ; reverse = reverse * 10 + remainder ; num / = 10 ; } printf ( " Given number = %ld\n  " , temp ) ; printf ( " Its reverse is = %ld\n  " , reverse ) ; }
#include <stdio.h> int product ( int , int ) ; int main ( ) { int a , b , result ; printf ( " Enter two numbers to find their product : " ) ; scanf ( " %d %d " , & a , & b ) ; result = product ( a , b ) ; printf ( " Product of %d and %d is %d\n  " , a , b , result ) ; return 0 ; } int product ( int a , int b ) { int temp = 0 ; while ( b ! = 0 ) { temp + = a ; b-- ; } return temp ; }
#include <stdio.h> #include <math.h> void main ( ) { int number , sum = 0 , rem = 0 , cube = 0 , temp ; printf ( " enter a number " ) ; scanf ( " %d " , & number ) ; temp = number ; while ( number ! = 0 ) { rem = number % 10 ; cube = pow ( rem , 3 ) ; sum = sum + cube ; number = number / 10 ; } if ( sum = = temp ) printf ( " The given no is armstrong no " ) ; else printf ( " The given no is not a armstrong no " ) ; }
#include <stdio.h> int main ( ) { int number , rem , sum = 0 , i ; printf ( " Enter a Number\n  " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = ( number - 1 ) ; i + + ) { rem = number % i ; if ( rem = = 0 ) { sum = sum + i ; } } if ( sum = = number ) printf ( " Entered Number is perfect number " ) ; else printf ( " Entered Number is not a perfect number " ) ; return 0 ; }
#include <stdio.h> void main ( ) { int num , sum = 0 ; for ( num = 1 ; num < = 50 ; num + + ) { sum = sum + num ; } printf ( " Sum = %4d\n  " , sum ) ; }
#include <stdio.h> void main ( ) { long i , k ; printf ( " Enter two integers \n  " ) ; scanf ( " %ld %ld " , & i , & k ) ; printf ( " \n  Before swapping i = %ld and k = %ld " , i , k ) ; i = i ^ k ; k = i ^ k ; i = i ^ k ; printf ( " \n  After swapping i = %ld and k = %ld " , i , k ) ; }
#include <stdio.h> void main ( ) { long number , tempnum ; printf ( " Enter an integer \n  " ) ; scanf ( " %ld " , & number ) ; tempnum = number ; number = number < < 2 ; printf ( " %ld x 4 = %ld\n  " , tempnum , number ) ; }
#include <stdio.h> #include <string.h> #include <sys / types.h> #include <sys / socket.h> #include <sys / ioctl.h> #include <netinet / in.h> #include <net / if.h> #include <unistd.h> #include <arpa / inet.h> int main ( ) { int n ; struct ifreq ifr ; char array [ ] = " eth0 " ; n = socket ( AF_INET , SOCK_DGRAM , 0 ) ;
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year , yr ; printf ( " Enter the year " ) ; scanf ( " %d " , & year ) ; yr = year % 100 ; printf ( " Last two digits of year is : %02d " , yr ) ; return 0 ; }
#include <stdio.h> void main ( ) { float height ; printf ( " Enter the Height ( in centimetres ) \n  " ) ; scanf ( " %f " , & height ) ; if ( height < 150.0 ) printf ( " Dwarf \n  " ) ; else if ( ( height > = 150.0 ) & & ( height < = 165.0 ) ) printf ( " Average Height \n  " ) ; else if ( ( height > 165.0 ) & & ( height < = 195.0 ) ) printf ( " Taller \n  " ) ; else printf ( " Abnormal height \n  " ) ; }
#include <stdio.h> void main ( ) { union number { int n1 ; float n2 ; } ; union number x ; printf ( " Enter the value of n1 : " ) ; scanf ( " %d " , & x.n1 ) ; printf ( " Value of n1 = %d " , x.n1 ) ; printf ( " \n Enter the value of n2 : " ) ; scanf ( " %f " , & x.n2 ) ; printf ( " Value of n2 = %f\n  " , x.n2 ) ; }
#include <stdio.h> void main ( ) { union sample { int m ; float n ; char ch ; } ; union sample u ; printf ( " The size of union = %d\n  " , sizeof ( u ) ) ; u.m = 25 ; printf ( " %d %f %c\n  " , u.m , u.n , u.ch ) ; u.n = 0.2 ; printf ( " %d %f %c\n  " , u.m , u.n , u.ch ) ; u.ch = 'p' ; printf ( " %d %f %c\n  " , u.m , u.n , u.ch ) ; }
#include <stdio.h> #define decode ( s , t , u , m , p , e , d ) m##s##u##t#define begin decode ( a , n , i , m , a , t , e ) int begin ( ) { printf ( " helloworld " ) ; }
#include <stdio.h> int main ( ) { int number , sum = 0 , remainder , count ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( number ) { remainder = number % 10 ; sum = sum + ( remainder + 1 ) ; number / = 10 ; } printf ( " increasing 1 to all digits : %d " , sum ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hi.. Welcome to sanfoundry " ) ) { } }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> void cube ( int * x ) ; int main ( ) { int num = 10 ; cube ( & num ) ; printf ( " the cube of the given number is %d " , num ) ; return 0 ; } void cube ( int * x ) { * x = ( * x ) * ( * x ) * ( * x ) ; }
#include <stdio.h> void swap ( int a , int b ) { int temp ; temp = a ; a = b ; b = temp ; } int main ( ) { int num1 = 10 , num2 = 20 ; printf ( " Before swapping num1 = %d num2 = %d\n  " , num1 , num2 ) ; swap ( num1 , num2 ) ; printf ( " After swapping num1 = %d num2 = %d \n  " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i ; for ( i = 0 ; i < argc ; i + + ) { printf ( " %s " , argv [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> void main ( ) { float principal_amt , rate , simple_interest ; int time ; printf ( " Enter the values of principal_amt , rate and time \n  " ) ; scanf ( " %f %f %d " , & principal_amt , & rate , & time ) ; simple_interest = ( principal_amt * rate * time ) / 100.0 ; printf ( " Amount = Rs. %5.2f\n  " , principal_amt ) ; printf ( " Rate = Rs. %5.2f %\n  " , rate ) ; printf ( " Time = %d years\n  " , time ) ; printf ( " Simple interest = %5.2f\n  " , simple_interest ) ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { int array [ ] = { 15 , 50 , 34 , 20 , 10 , 79 , 100 } ; int n ; n = sizeof ( array ) ; printf ( " Size of the given array is %d\n  " , n / sizeof ( int ) ) ; return 0 ; }
#include <stdio.h> struct temp { int a [ 10 ] ; char p ; } ;
#include <stdio.h> main ( ) { int a = 1 ; printf ( " size of a is %d , " , sizeof ( + + a ) ) ; printf ( " value of a is %d " , a ) ; } ;
#include <stdio.h> printf ( " %d " , sizeof ( strlen ( " HELLOWORLD " ) ) ) ;
#include <stdio.h> ( sizeof double = 8 , float = 4 , void = 1 ) #define PI 3.14 int main ( ) { printf ( " %d " , sizeof ( PI ) ) ; }
#include <stdio.h> void main ( void ) { printf ( " %d\n  " , fact ( 8 ) ) ; int n , r ; printf ( " Enter value for n and r\n  " ) ; scanf ( " %d %d " , & n , & r ) ; int npr = fact ( n ) / fact ( n - r ) ; printf ( " \n  Permutation values is = %d " , npr ) ; } int fact ( int x ) { if ( x < = 1 ) return 1 ; return x * fact ( x - 1 ) ; }
#include <stdio.h> int main ( ) { float a , b , h ; float area ; printf ( " Enter the value for two bases & height of the trapezium : \n  " ) ; scanf ( " %f %f %f " , & a , & b , & h ) ; area = 0.5 * ( a + b ) * h ; printf ( " Area of the trapezium is : %.3f " , area ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 void get_value ( int arr [ ] ) ; void print_value ( int arr [ ] , int n ) ; void function_sort ( int arr [ ] ) ; int find_intersection ( int array1 [ ] , int array2 [ ] , int intersection_array [ ] ) ; int find_union ( int array1 [ ] , int array2 [ ] , int union_array [ ] ) ; void main ( ) { int array1 [ SIZE ] , array2 [ SIZE ] , intersection_array [ SIZE ] , union_array [ SIZE * 2 ] ; int num_elements ;
#include <stdio.h> int main ( ) { float base , altitude ; float area ; printf ( " Enter base and altitude of the given Parallelogram : \n  " ) ; scanf ( " %f %f " , & base , & altitude ) ; area = base * altitude ; printf ( " Area of Parallelogram is : %.3f\n  " , area ) ; return 0 ; }
#include <stdio.h> void main ( ) { int n ; float i , sum , term ; printf ( " 1 + 1 / 2 + 1 / 3 + ...... + 1 / n \n  " ) ; printf ( " Enter the value of n \n  " ) ; scanf ( " %d " , & n ) ; sum = 0 ; for ( i = 1 ; i < = n ; i + + ) { term = 1 / i ; sum = sum + term ; } printf ( " the Sum of H.P Series is = %f " , sum ) ; }
#include <stdio.h> void incrementArray ( int [ ] ) ; void main ( ) { int i ; int array [ 4 ] = { 10 , 20 , 30 , 40 } ; incrementArray ( array ) ; for ( i = 0 ; i < 4 ; i + + ) printf ( " %d\t " , array [ i ] ) ;
#include <stdio.h> #include <math.h> void main ( ) { int s , a , b , c , area ; printf ( " Enter the values of a , b and c \n  " ) ; scanf ( " %d %d %d " , & a , & b , & c ) ; s = ( a + b + c ) / 2 ; area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; printf ( " Area of a triangle = %d \n  " , area ) ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius ; float surface_area , volume ; printf ( " Enter radius of the sphere : \n  " ) ; scanf ( " %f " , & radius ) ; surface_area = 4 * ( 22 / 7 ) * radius * radius ; volume = ( 4.0 / 3 ) * ( 22 / 7 ) * radius * radius * radius ; printf ( " Surface area of sphere is : %.3f " , surface_area ) ; printf ( " \n  Volume of sphere is : %.3f " , volume ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fileptr1 , * fileptr2 ; char filename [ 40 ] ; char ch ; int delete_line , temp = 1 ; printf ( " Enter file name : " ) ; scanf ( " %s " , filename ) ;
#include <stdio.h> #include <math.h> int main ( ) { float radius , height ; float surface_area , volume ; printf ( " Enter value for radius and height of a cylinder : \n  " ) ; scanf ( " %f %f " , & radius , & height ) ; surface_area = 2 * ( 22 / 7 ) * radius * ( radius + height ) ; volume = ( 22 / 7 ) * radius * radius * height ; printf ( " Surface area of cylinder is : %.3f " , surface_area ) ; printf ( " \n  Volume of cylinder is : %.3f " , volume ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i , fact = 1 , num ; printf ( " Enter the number \n  " ) ; scanf ( " %d " , & num ) ; if ( num < = 0 ) fact = 1 ; else { for ( i = 1 ; i < = num ; i + + ) { fact = fact * i ; } } printf ( " Factorial of %d = %5d\n  " , num , fact ) ; }
#include <dirent.h> #include <stdio.h> int main ( void ) { DIR * d ; struct dirent * dir ; d = opendir ( " . " ) ; if ( d ) { while ( ( dir = readdir ( d ) ) ! = NULL ) { printf ( " %s\n  " , dir-> d_name ) ; } closedir ( d ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( void ) { FILE * fileptr1 , * fileptr2 ; char filechar [ 40 ] ; char c ; int delete_line , temp = 1 ; printf ( " Enter file name : " ) ; scanf ( " %s " , filechar ) ; fileptr1 = fopen ( filechar , " r " ) ; c = getc ( fileptr1 ) ;
#include <stdio.h> int main ( ) { FILE * fileptr ; int count_lines = 0 ; char filechar [ 40 ] , chr ; printf ( " Enter file name : " ) ; scanf ( " %s " , filechar ) ; fileptr = fopen ( filechar , " r " ) ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; void print_reverse_recursive ( struct node * ) ; void print ( struct node * ) ; void create_new_node ( struct node * , int ) ;
#include <stdio.h> void main ( ) { int num , x , y , count = 0 ; printf ( " enter the number : " ) ; scanf ( " %d " , & num ) ; x = num < < 1 ; y = x ^ num ; y = y + 1 ; while ( ( y / 2 ) ! = 0 ) { if ( y % 2 ! = 0 ) { count + + ; break ; } else { y = y / 2 ; } } if ( count ) { printf ( " false " ) ; } else { printf ( " true " ) ; } }
#include <stdio.h> #define NUM_BITS_INT 32 int count = 0 ; void main ( ) { int temp , n , bit , i = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( i < NUM_BITS_INT ) { bit = temp & 0x80000000 ; if ( bit = = -0x80000000 ) { bit = 1 ; } printf ( " %d " , bit ) ; temp = temp < < 1 ; i + + ; } }
#include <stdio.h> void main ( ) { int j = 31 , i , count = 0 ; unsigned int num ; int b [ 32 ] = { 0 } ; printf ( " enter the number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { if ( num & 1 = = 1 ) { break ; } else { count + + ; num = num > > 1 ; } } printf ( " \n  %d " , count ) ; }
#include <stdio.h> #define NUM_BITS_INT ( 8 * sizeof ( int ) ) int count_unset ( int ) ; int main ( ) { int i , num , snum , res , count = 0 ; printf ( " \n Enter the number " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < = NUM_BITS_INT ; i + + ) { snum = num > > i ; res = snum & 1 ; if ( res = = 0 ) count + + ; } printf ( " %d " , count ) ; }
#include <stdio.h> int result , position ; int n_bit_position ( int x , int position ) ; void main ( ) { unsigned int number ; printf ( " Enter the unsigned integer : \n  " ) ; scanf ( " %d " , & number ) ; printf ( " enter position\n  " ) ; scanf ( " %d " , & position ) ; n_bit_position ( number , position ) ; if ( result & 1 ) printf ( " YES\n  " ) ; else printf ( " NO\n  " ) ; } int n_bit_position ( int number , int position ) { result = ( number> > ( position ) ) ; }
#include <stdio.h> void main ( ) { unsigned int number ; int result , position ; printf ( " Enter the unsigned integer : \n  " ) ; scanf ( " %d " , & number ) ; printf ( " enter position to be searched\n  " ) ; scanf ( " %d " , & position ) ; result = ( number > > ( position ) ) ; if ( result & 1 ) printf ( " TRUE\n  " ) ; else printf ( " FALSE\n  " ) ; }
#include <stdio.h> #define NUM_BITS_INT sizeof ( int ) * 8 void main ( ) { unsigned int number ; int i = 0 , hexadecimal , rev = 0 , bit ; printf ( " enter the hexdecimal value\n  " ) ; scanf ( " 0x %number " , & hexadecimal ) ; while ( i + + < NUM_BITS_INT ) { bit = hexadecimal & 1 ; hexadecimal = hexadecimal > > 1 ; rev = rev ^ bit ; if ( i < NUM_BITS_INT ) rev = rev < < 1 ; } printf ( " reverse of hexadecimal value is 0x %number " , rev ) ; }
#include <stdio.h> int main ( ) { unsigned int number ; int count = 0 ; printf ( " Enter the unsigned integer : \n  " ) ; scanf ( " %d " , & number ) ; while ( number ! = 0 ) { if ( ( number & 1 ) = = 1 ) count + + ; number = number > > 1 ; } printf ( " number of one's are : \n  %d\n  " , count ) ; return 0 ; }
#include <stdio.h> void main ( ) { static int array [ 5 ] = { 200 , 400 , 600 , 800 , 1000 } ; int sum ; int addnum ( int * ptr ) ; sum = addnum ( array ) ; printf ( " Sum of all array elements = %5d\n  " , sum ) ; } int addnum ( int * ptr ) { int index , total = 0 ; for ( index = 0 ; index < 5 ; index + + ) { total + = * ( ptr + index ) ; } return ( total ) ; }
#include <stdio.h> void main ( ) { int array [ 30 ] , temp [ 30 ] , i , j , k , l , num ;
#include <stdio.h> int main ( void ) { int array [ 5 ] , b , c ; for ( b = 0 ; b < 10 & & ( scanf ( " %d " , & c ) ) ; b + + ) array [ b ] = c ; for ( b = 0 ; b < 15 ; b + + ) printf ( " %d " , array [ b ] ) ; return 0 ; }
#include <stdio.h> void main ( ) { int array [ 10 ] ; int i ; printf ( " enter the element of an array \n  " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %d " , & array [ i ] ) ; printf ( " Alternate elements of a given array \n  " ) ; for ( i = 0 ; i < 10 ; i + = 2 ) printf ( " %d\n  " , array [ i ] ) ; }
#include <stdio.h> void main ( ) { char string [ 20 ] ; int n , count = 0 ; printf ( " Enter the no of characters present in an array \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the string of %d characters \n  " , n ) ; scanf ( " %s " , string ) ; while ( count < n ) { printf ( " %c = %d\n  " , string [ count ] , string [ count ] ) ; + + count ; } }
#include <stdio.h> void main ( ) { char string [ 50 ] ; int i , length = 0 ; printf ( " Enter a string \n  " ) ; gets ( string ) ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { length + + ; } printf ( " The length of a string is the number of characters in it \n  " ) ; printf ( " So , the length of %s = %d\n  " , string , length ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to lower case\n  " ) ; gets ( string ) ; printf ( " Input string in lower case : %s\n  " , strlwr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 200 ] ; int count = 0 , i ; printf ( " enter the string\n  " ) ; scanf ( " % [ ^\n  ] s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; i + + ) { if ( s [ i ] = = ' ' ) count + + ; } printf ( " number of words in given string are : %d\n  " , count + 1 ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { int i = 0 , e , j , d , k , space = 0 ; char a [ 50 ] , b [ 15 ] [ 20 ] , c [ 15 ] [ 20 ] ; printf ( " Read a string : \n  " ) ; fflush ( stdin ) ; scanf ( " % [ ^\n  ] s " , a ) ; for ( i = 0 ; a [ i ] ! = '\0' ; i + + )
#include <stdio.h> #include <string.h> void main ( ) { int sum = 0 , i , len ; char string1 [ 100 ] ; printf ( " Enter the string : " ) ; scanf ( " % [ ^\n  ] s " , string1 ) ; len = strlen ( string1 ) ; for ( i = 0 ; i < len ; i + + ) { sum = sum + string1 [ i ] ; } printf ( " \n Sum of all characters : %d " , sum ) ; }
#include <stdio.h> #include <stdlib.h> struct node { int num ; struct node * next ; } ; void create ( struct node * * ) ; void makecycle ( struct node * * ) ; void release ( struct node * * ) ; int detectcycle ( struct node * ) ; int main ( ) { struct node * p = NULL ; int result ; printf ( " Enter data into the list\n  " ) ; create ( & p ) ; makecycle ( & p ) ;
#include <stdio.h> #include <stdlib.h> #include <string.h> int top = -1 ; char stack [ 100 ] ;
#include <stdio.h> #include <stdlib.h> #define MAX 10 struct node { int data ; struct node * link ; } * front , * rear ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * link ; } * top = NULL ; #define MAX 5
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL , * ptr , * temp ;
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * left ; struct node * right ; } ; static struct node * prev = NULL ; int is_bst ( struct node * root ) { if ( root ) { if ( !is_bst ( root-> left ) )
#include <stdio.h> #include <stdlib.h> void main ( ) { FILE * fptr ; char filename [ 15 ] ; char ch ; printf ( " Enter the filename to be opened \n  " ) ; scanf ( " %s " , filename ) ; fptr = fopen ( filename , " r " ) ; if ( fptr = = NULL ) { printf ( " Cannot open file \n  " ) ; exit ( 0 ) ; } ch = fgetc ( fptr ) ; while ( ch ! = EOF ) { printf ( " %c " , ch ) ; ch = fgetc ( fptr ) ; } fclose ( fptr ) ; }
#include <stdio.h> void main ( int argc , char * * argv ) { FILE * fp ; char ch ; int size = 0 ; fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) printf ( " \n File unable to open " ) ; else printf ( " \n File opened " ) ; fseek ( fp , 0 , 2 ) ; size = ftell ( fp ) ; printf ( " The size of given file is : %d\n  " , size ) ; fclose ( fp ) ; }
#include <stdio.h> void main ( int argc , char * argv [ ] , char * envp [ ] ) { int i ; for ( i = 0 ; envp [ i ] ! = NULL ; i + + ) { printf ( " \n  %s " , envp [ i ] ) ; } }
#include <stdio.h> void main ( int argc , char * * argv ) { FILE * fp1 , * fp2 ; char ch ; int pos ; if ( ( fp1 = fopen ( argv [ 1 ] , " r " ) ) = = NULL ) { printf ( " \n File cannot be opened " ) ; return ; } else { printf ( " \n File opened for copy...\n  " ) ; } fp2 = fopen ( argv [ 2 ] , " w " ) ; fseek ( fp1 , 0L , SEEK_END ) ;
#include <stdio.h> #include <errno.h> long count_characters ( FILE * ) ; void main ( int argc , char * argv [ ] ) { int i ; long cnt ; char ch , ch1 ; FILE * fp1 , * fp2 ; if ( fp1 = fopen ( argv [ 1 ] , " r " ) ) { printf ( " The FILE has been opened...\n  " ) ; fp2 = fopen ( argv [ 2 ] , " w " ) ; cnt = count_characters ( fp1 ) ;
#include <stdio.h> void main ( ) { int i , num , sum = 0 ; printf ( " Enter an integer number \n  " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { sum = sum + i ; } printf ( " Sum of first %d natural numbers = %d\n  " , num , sum ) ; }
#include <stdio.h> int main ( ) { int number , i = 1 ; printf ( " Enter the Number : " ) ; scanf ( " %d " , & number ) ; printf ( " Multiplication table of %d : \n  " , number ) ; printf ( " --------------------------\n  " ) ; while ( i < = 10 ) { printf ( " %d x %d = %d \n  " , number , i , number * i ) ; i + + ; } return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.142 void main ( ) { float radius , area ; printf ( " Enter the radius of a circle \n  " ) ; scanf ( " %f " , & radius ) ; area = PI * pow ( radius , 2 ) ; printf ( " Area of a circle = %5.2f\n  " , area ) ; }
#include <stdio.h> int main ( ) { float height , width ; float area ; printf ( " Enter height and width of the given triangle : \n  " ) ; scanf ( " %f %f " , & height , & width ) ; area = 0.5 * height * width ; printf ( " Area of right angled triangle is : %.3f\n  " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float diagonal1 , diagonal2 ; float area ; printf ( " Enter diagonals of the given rhombus : \n  " ) ; scanf ( " %f %f " , & diagonal1 , & diagonal2 ) ; area = 0.5 * diagonal1 * diagonal2 ; printf ( " Area of rhombus is : %.3f \n  " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> void main ( ) { float side , surfacearea , volume ; printf ( " Enter the length of a side \n  " ) ; scanf ( " %f " , & side ) ; surfacearea = 6.0 * side * side ; volume = pow ( side , 3 ) ; printf ( " Surface area = %6.2f and Volume = %6.2f \n  " , surfacearea , volume ) ; }
#include <stdio.h> main ( ) { int i , j , k = 1 ; printf ( " floyds triangle is\n  " ) ; for ( i = 1 ; k < = 20 ; + + i ) { for ( j = 1 ; j < = i ; + + j ) printf ( " %d " , k + + ) ; printf ( " \n \n  " ) ; } return 0 ; }
#include <stdio.h> void countdown ( int ) ; int main ( void ) { int num = 100 ; countdown ( num ) ; return 0 ; } void countdown ( int count ) { if ( count > = 1 ) { printf ( " %d\n  " , count ) ; countdown ( count-- ) ; } }
#include <stdio.h> #include <limits.h> int MatrixChainOrder ( int p [ ] , int n ) { int m [ n ] [ n ] ; int s [ n ] [ n ] ; int i , j , k , L , q ;
#include <stdio.h> int main ( ) { int m , n ; int p , q ; printf ( " Enter the dimensions of first matrix : " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " \n Enter the dimensions of second matrix : " ) ; scanf ( " %d %d " , & p , & q ) ; if ( n ! = p ) { printf ( " \n Two matrices CANNOT be multiplied !!! " ) ; } else printf ( " \n Two matrices meet the criteria for Multiplication !!! " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> const int LOW = 1 ; const int HIGH = 32000 ; int main ( ) { int randomNumber , i ; time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; for ( i = 0 ; i < 10 ; i + + ) { randomNumber = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; printf ( " %d " , randomNumber ) ; } printf ( " ... " ) ; return 0 ; }
#include <time.h> #include <stdio.h> #include <stdlib.h> int main ( void ) { int length ; char str [ ] = " 0123456789ABCDEF " ; srand ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; length = rand ( ) % 15 + 8 ; while ( length-- ) { putchar ( str [ rand ( ) % 16 ] ) ; srand ( rand ( ) ) ; } printf ( " \n  " ) ; return EXIT_SUCCESS ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( int argc , char * * argv ) { printf ( " Enter the number of dice : " ) ; int n , i ; scanf ( " %d " , & n ) ; printf ( " The values on dice are : ( " ) ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , ( rand ( ) % 6 ) + 1 ) ; printf ( " ) " ) ; return 0 ; }
#include <time.h> #include <stdio.h> #include <stdlib.h> int main ( void ) { int num ; srand ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; printf ( " \n Generating a random number using srand and rand function.\n  " ) ; num = rand ( ) ; printf ( " %d\n  " , num ) ; return EXIT_SUCCESS ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int gcd ( int x , int y ) { int r = 0 , a , b ; a = ( x > y ) ? x : y ;
#include <stdio.h> void printarray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void partition ( int n ) { int p [ n ] ;
#include <stdio.h> int bitwiseadd ( int x , int y ) { while ( y ! = 0 ) { int carry = x & y ; x = x ^ y ; y = carry < < 1 ; } return x ; } int main ( ) { int num1 , num2 ; printf ( " \n Enter two numbers to perform addition using bitwise operators : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n Sum is %d " , bitwiseadd ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> void printarray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void partition ( int n ) { int p [ n ] ;
#include <stdio.h> int max ( int a , int b ) { return ( a > b ) ? a : b ; }
#include <stdio.h> void selectionSort ( int arr [ ] , int size ) { int i , j ; for ( i = 0 ; i < size ; i + + ) { for ( j = i ; j < size ; j + + ) { if ( arr [ i ] > arr [ j ] ) swap ( & arr [ i ] , & arr [ j ] ) ; } } }
#include <stdio.h> int main ( ) { printf ( " Hello World! %d \n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int y = 10000 ; int y = 34 ; printf ( " Hello World! %d\n  " , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int main = 3 ; printf ( " %d " , main ) ; return 0 ; }
#include <stdio.h> int main ( ) { int ThisIsVariableName = 12 ; int ThisIsVariablename = 14 ; printf ( " %d " , ThisIsVariablename ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int i ; for ( i = 0 ; i < 5 ; i + + ) if ( ( char ) a [ i ] = = '5' ) printf ( " %d\n  " , a [ i ] ) ; else printf ( " FAIL\n  " ) ; }
#include <stdio.h> int main ( ) { signed char chr ; chr = 128 ; printf ( " %d\n  " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; int i = 0 ; FILE * file ; file = fopen ( " test.txt " , " w + " ) ; fprintf ( file , " %c " , 'a' ) ; fprintf ( file , " %c " , -1 ) ; fprintf ( file , " %c " , 'b' ) ; fclose ( file ) ; file = fopen ( " test.txt " , " r " ) ; while ( ( c = fgetc ( file ) ) ! = -1 ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f1 = 0.1 ; if ( f1 = = 0.1 ) printf ( " equal\n  " ) ; else printf ( " not equal\n  " ) ; }
#include <stdio.h> int main ( ) { float f1 = 0.1 ; if ( f1 = = 0.1f ) printf ( " equal\n  " ) ; else printf ( " not equal\n  " ) ; }
#include <stdio.h> int main ( ) { int x = 10000 ; double y = 56 ; int * p = & x ; double * q = & y ; printf ( " p and q are %d and %d " , sizeof ( p ) , sizeof ( q ) ) ; return 0 ; }
#include <stdio.h> union Sti { int nu ; char m ; } ; int main ( ) { union Sti s ; printf ( " %d " , sizeof ( s ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 'a' ; printf ( " %f " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { enum { ORANGE = 5 , MANGO , BANANA = 4 , PEACH } ; printf ( " PEACH = %d\n  " , PEACH ) ; }
#include <stdio.h> int main ( ) { printf ( " C programming %s " , " Class by\n  %s Sanfoundry " , " WOW " ) ; }
#include <stdio.h> #define a 10 int main ( ) { const int a = 5 ; printf ( " a = %d\n  " , a ) ; }
#include <stdio.h> int main ( ) { int var = 010 ; printf ( " %d " , var ) ; }
#include <stdio.h> enum birds { SPARROW , PEACOCK , PARROT } ; enum animals { TIGER = 8 , LION , RABBIT , ZEBRA } ; int main ( ) { enum birds m = TIGER ; int k ; k = m ; printf ( " %d\n  " , k ) ; return 0 ; }
#include <stdio.h> #define MAX 2 enum bird { SPARROW = MAX + 1 , PARROT = SPARROW + MAX } ; int main ( ) { enum bird b = PARROT ; printf ( " %d\n  " , b ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " x " ; char c = 'x' ; char ary [ 1 ] ; ary [ 0 ] = c ; printf ( " %d %d " , strlen ( str ) , strlen ( ary ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sanfoundry\rclass\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sanfoundry\r\n class\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int p ; p = 4 ; printf ( " p is %d " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int k = 4 ; int * const p = & k ; int r = 3 ; p = & r ; printf ( " %d " , p ) ; }
#include <stdio.h> void main ( ) { int const k = 5 ; k + + ; printf ( " k is %d " , k ) ; }
#include <stdio.h> int const print ( ) { printf ( " Sanfoundry.com " ) ; return 0 ; } void main ( ) { print ( ) ; }
#include <stdio.h> void main ( ) { int k = 4 ; float k = 4 ; printf ( " %d " , k ) }
#include <stdio.h> int main ( ) { short int i = 20 ; char c = 97 ; printf ( " %d , %d , %d\n  " , sizeof ( i ) , sizeof ( c ) , sizeof ( c + i ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 ; a + = b - = a ; printf ( " %d %d " , a , b ) ; }
#include <stdio.h> int main ( ) { int a = 4 , n , i , result = 0 ; scanf ( " %d " , n ) ; for ( i = 0 ; i < n ; i + + ) result + = a ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( x < 1 ) printf ( " hello " ) ; if ( x = = 5 ) printf ( " hi " ) ; else printf ( " no " ) ; }
#include <stdio.h> int x ; void main ( ) { if ( x ) printf ( " hi " ) ; else printf ( " how are u " ) ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( true ) ; printf ( " hello " ) ; }
#include <stdio.h> void main ( ) { int x = 0 ; if ( x = = 0 ) printf ( " hi " ) ; else printf ( " how are u " ) ; printf ( " hello " ) ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( x < 1 ) ; printf ( " Hello " ) ; }
#include <stdio.h> void main ( ) { double ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %lf " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1 " ) ; break ; case 2 : printf ( " 2 " ) ; break ; } }
#include <stdio.h> void main ( ) { char * ch ; printf ( " enter a value between 1 to 3 : " ) ; scanf ( " %s " , ch ) ; switch ( ch ) { case " 1 " : printf ( " 1 " ) ; break ; case " 2 " : printf ( " 2 " ) ; break ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1\n  " ) ; default : printf ( " 2\n  " ) ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1\n  " ) ; break ; printf ( " Hi " ) ; default : printf ( " 2\n  " ) ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch , ch + 1 ) { case 1 : printf ( " 1\n  " ) ; break ; case 2 : printf ( " 2 " ) ; break ; } }
#include <stdio.h> int main ( ) { while ( ) printf ( " In while loop " ) ; printf ( " After loop\n  " ) ; }
#include <stdio.h> int main ( ) { do printf ( " In while loop " ) ; while ( 0 ) ; printf ( " After loop\n  " ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { i + + ; printf ( " In while loop\n  " ) ; } while ( i < 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { i + + ; printf ( " in while loop\n  " ) ; } while ( i < 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; while ( i < 3 ) i + + ; printf ( " In while loop\n  " ) ; }
#include <stdio.h> void main ( ) { int i = 2 ; do { printf ( " Hi " ) ; } while ( i < 2 ) }
#include <stdio.h> void main ( ) { int i = 0 ; while ( + + i ) { printf ( " H " ) ; } }
#include <stdio.h> void main ( ) { int i = 0 ; do { printf ( " Hello " ) ; } while ( i ! = 0 ) ; }
#include <stdio.h> void main ( ) { int i = 5 , k ; if ( i = = 0 ) goto label ; label : printf ( " %d " , i ) ; printf ( " Hey " ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; goto l1 ; printf ( " %d " , 2 ) ; l1 : goto l2 ; printf ( " %d " , 3 ) ; l2 : printf ( " %d " , 4 ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; l1 : l2 : printf ( " %d " , 2 ) ; printf ( " %d\n  " , 3 ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; goto l1 ; printf ( " %d " , 2 ) ; } void foo ( ) { l1 : printf ( " 3 " , 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; while ( i < 2 ) { l1 : i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; while ( l1 : i < 2 ) { i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; l1 : while ( i < 2 ) { i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int i ; int main ( ) { extern int i ; if ( i = = 0 ) printf ( " scope rules\n  " ) ; }
#include <stdio.h> int main ( ) { extern ary1 [ ] ; printf ( " scope rules\n  " ) ; }
#include <stdio.h> int main ( ) { extern ary1 [ ] ; printf ( " %d\n  " , ary1 [ 0 ] ) ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < 5 ; i + + ) int a = i ; printf ( " %d " , a ) ; }
#include <stdio.h> int b ; int main ( ) { int c ; return 0 ; } int a ;
#include <stdio.h> int main ( ) { foo ( ) ; foo ( ) ; } void foo ( ) { int i = 11 ; printf ( " %d " , i ) ; static int j = 12 ; j = j + 1 ; printf ( " %d\n  " , j ) ; }
#include <stdio.h> void func ( ) ; int main ( ) { static int b = 20 ; func ( ) ; } void func ( ) { static int b ; printf ( " %d " , b ) ; }
#include <stdio.h> int main ( ) { int one = 1 , two = 2 ; #ifdef next one = 2 ; two = 1 ; #endif printf ( " %d , %d " , one , two ) ; }
#include <stdio.h> #include " test.h " #include " test.h " int main ( ) {
#include <stdio.h> #define foo ( m , n ) m ## n void myfunc ( ) ; int main ( ) { myfunc ( ) ; } void myfunc ( ) { printf ( " %d\n  " , foo ( 2 , 3 ) ) ; }
#include <stdio.h> void main ( ) { #define max 37 ; printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define max 37 printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define const int const max = 32 ; printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define max 45 max = 32 ; printf ( " %d " , max ) ; }
#include <stdio.h> # define max void m ( ) { printf ( " hi " ) ; } void main ( ) { max ; m ( ) ; }
#include <stdio.h> #define A 1 + 2 #define B 3 + 4 int main ( ) { int var = A * B ; printf ( " %d\n  " , var ) ; }
#include <stdio.h> #define var 20 ) ; int main ( ) { printf ( " %d\n  " , var }
#include <stdio.h> void main ( ) { char * s = " hello " ; char * p = s * 3 ; printf ( " %c\t %c " , * p , s [ 1 ] ) ; }
#include <stdio.h> void main ( ) { char * s = " hello " ; char * p = s + 2 ; printf ( " %c\t %c " , * p , s [ 1 ] ) ; }
#include <stdio.h> int main ( ) { void * p ; int a [ 4 ] = { 1 , 2 , 3 , 8 } ; p = & a [ 3 ] ; int * ptr = & a [ 2 ] ; int n = p - ptr ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { void * p ; int a [ 4 ] = { 1 , 2 , 3 , 4 } ; p = & a [ 3 ] ; int * ptr = & a [ 2 ] ; int n = ( int * ) p - ptr ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int b [ 4 ] = { 1 , 2 , 3 , 4 } ; int n = & b [ 3 ] - & a [ 2 ] ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int * p = & a [ 1 ] ; int * ptr = & a [ 2 ] ; ptr = ptr * 1 ; printf ( " %d\n  " , * ptr ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int * ptr = & a [ 2 ] ; float n = 1 ; ptr = ptr + n ; printf ( " %d\n  " , * ptr ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; void * p = & a [ 1 ] ; void * ptr = & a [ 2 ] ; int n = 1 ; n = ptr - p ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * m ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * p ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; * * m = 6 ; printf ( " %d\n  " , k ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * r = & p ; printf ( " %d " , ( * * r ) ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * * r = & p ; printf ( " %p %p " , * r , a ) ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 , c = 3 ; int * ptr1 = & a , * ptr2 = & b , * ptr3 = & c ; int * * sptr = & ptr1 ;
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * * r = & p ; printf ( " %p %p " , * r , a ) ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 , c = 3 ; int * ptr1 = & a ; int * * sptr = & ptr1 ;
#include <stdio.h> int main ( ) { int a = 10 ; int * * c - = & & a ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * m ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * p ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; * * m = 6 ; printf ( " %d\n  " , k ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * r = & p ; printf ( " %d " , ( * * r ) ) ; }
#include <stdio.h> int main ( ) { char * a [ 2 ] = { " hello " , " hi " } ; printf ( " %d " , sizeof ( a ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 2 ] [ 6 ] = { " hello " , " hi " } ; printf ( " %d " , sizeof ( a ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 2 ] [ 6 ] = { " hello " , " hi " } ; printf ( " %s " , * a + 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * a [ 2 ] = { " hello " , " hi " } ; printf ( " %s " , * ( a + 1 ) ) ; return 0 ; }
#include <stdio.h> int mul ( int a , int b , int c ) { return a * b * c ; } void main ( ) { int * function_pointer ; function_pointer = mul ; printf ( " The product of three numbers is : %d " , function_pointer ( 2 , 3 , 4 ) ) ; }
#include <stdio.h> int sub ( int a , int b , int c ) { return a - b - c ; } void main ( ) { int ( * function_pointer ) ( int , int , int ) ; function_pointer = & sub ; printf ( " The difference of three numbers is : %d " , ( * function_pointer ) ( 2 , 3 , 4 ) ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( ) = f ; int main ( int argc , char * argv [ ] ) { foo ( 10 ) ; return 0 ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( void ) = f ; int main ( int argc , char * argv [ ] ) { foo ( 10 ) ; return 0 ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( float ) = f ; int main ( ) { foo ( 10 ) ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ( * x ) ( int ) ) ; int myfoo ( int i ) ; int ( * foo ) ( int ) = myfoo ; int main ( ) { f ( foo ( 10 ) ) ; } void f ( int ( * i ) ( int ) ) { i ( 11 ) ; } int myfoo ( int i ) { printf ( " %d\n  " , i ) ; return i ; }
#include <stdio.h> void f ( int ( * x ) ( int ) ) ; int myfoo ( int ) ; int ( * foo ) ( ) = myfoo ; int main ( ) { f ( foo ) ; } void f ( int ( * i ) ( int ) ) { i ( 11 ) ; } int myfoo ( int i ) { printf ( " %d\n  " , i ) ; return i ; }
#include <stdio.h> struct student { char * name ; } ; struct student s ; struct student fun ( void ) { s.name = " newton " ; printf ( " %s\n  " , s.name ) ; s.name = " alan " ; return s ; } void main ( ) { struct student m = fun ( ) ; printf ( " %s\n  " , m.name ) ; m.name = " turing " ; printf ( " %s\n  " , s.name ) ; }
#include <stdio.h> struct student { char * name ; } ; void main ( ) { struct student s , m ; s.name = " st " ; m = s ; printf ( " %s %s " , s.name , m.name ) ; }
#include <stdio.h> struct temp { int a ; } s ; void func ( struct temp s ) { s.a = 10 ; printf ( " %d\t " , s.a ) ; } main ( ) { func ( s ) ; printf ( " %d\t " , s.a ) ; }
#include <stdio.h> struct student { char * name ; } ; struct student fun ( void ) { struct student s ; s.name = " alan " ; return s ; } void main ( ) { struct student m = fun ( ) ; s.name = " turing " ; printf ( " %s " , m.name ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; s-> c = " hello " ; printf ( " %s " , s-> c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student * s ; s-> c = " hello " ; printf ( " %s " , s-> c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; s-> c = " hello " ; printf ( " %s " , m.c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; ( * s ) .c = " hello " ; printf ( " %s " , m.c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student n ; struct student * s = & n ; ( * s ) .c = " hello " ; printf ( " %p\n  %p\n  " , s , & n ) ; }
#include <stdio.h> struct p { int x [ 2 ] ; } ; struct q { int * x ; } ; int main ( ) { struct p p1 = { 1 , 2 } ; struct q * ptr1 ; ptr1-> x = ( struct q * ) & p1.x ; printf ( " %d\n  " , ptr1-> x [ 1 ] ) ; }
#include <stdio.h> struct p { int x [ 2 ] ; } ; struct q { int * x ; } ; int main ( ) { struct p p1 = { 1 , 2 } ; struct q * ptr1 = ( struct q * ) & p1 ; ptr1-> x = ( struct q * ) & p1.x ; printf ( " %d\n  " , ptr1-> x [ 0 ] ) ; }
#include <stdio.h> struct p { int x ; int y ; } ; int main ( ) { struct p p1 [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; struct p * ptr1 = p1 ; printf ( " %d %d\n  " , ptr1-> x , ( ptr1 + 2 ) -> x ) ; }
#include <stdio.h> struct p { int x ; char y ; } ; int main ( ) { struct p p1 [ ] = { 1 , 92 , 3 , 94 , 5 , 96 } ; struct p * ptr1 = p1 ; int x = ( sizeof ( p1 ) / sizeof ( struct p ) ) ; printf ( " %d %d\n  " , ptr1-> x , ( ptr1 + x - 1 ) -> x ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student m ; s.c = m.c = " hi " ; m.point = & s ; ( m.point ) -> c = " hey " ; printf ( " %s\t %s\t " , s.c , m.c ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student m ; m.point = s ; ( m.point ) -> c = " hey " ; printf ( " %s " , s.c ) ; }
#include <stdio.h> struct student { char * c ; struct student point ; } ; void main ( ) { struct student s ; s.c = " hello " ; printf ( " %s " , s.c ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; printf ( " %d " , sizeof ( s ) ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student * m = & s ; printf ( " %d " , sizeof ( student ) ) ; }
#include <stdio.h> struct p { int x ; char y ; struct p * ptr ; } ; int main ( ) { struct p p = { 1 , 2 , & p } ; printf ( " %d\n  " , p.ptr-> x ) ; return 0 ; }
#include <stdio.h> typedef struct p * q ; struct p { int x ; char y ; q ptr ; } ; typedef struct p * q ; int main ( ) { struct p p = { 1 , 2 , & p } ; printf ( " %d\n  " , p.ptr-> x ) ; return 0 ; }
#include <stdio.h> typedef struct student { char * a ; } stu ; void main ( ) { struct stu s ; s.a = " hi " ; printf ( " %s " , s.a ) ; }
#include <stdio.h> typedef struct student { char * a ; } stu ; void main ( ) { struct student s ; s.a = " hey " ; printf ( " %s " , s.a ) ; }
#include <stdio.h> typedef int integer ; int main ( ) { int i = 10 , * ptr ; float f = 20 ; integer j = i ; ptr = & j ; printf ( " %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int ( * ( x ( ) ) ) [ 2 ] ; typedef int ( * ( * ptr ) ( ) ) [ 2 ] ptrfoo ; int main ( ) { ptrfoo ptr1 ; ptr1 = x ; ptr1 ( ) ; return 0 ; } int ( * ( x ( ) ) ) [ 2 ] { int ( * ary ) [ 2 ] = malloc ( sizeof * ary ) ; return & ary ; }
#include <stdio.h> int * ( * ( x ( ) ) ) [ 2 ] ; typedef int * * ( * ptrfoo ) ( ) ) [ 2 ] ; int main ( ) { ptrfoo ptr1 ; ptr1 = x ; ptr1 ( ) ; return 0 ; } int * ( * ( x ( ) ) ) [ 2 ] { int ( * ary ) [ 2 ] = malloc ( sizeof * ary ) ; return & ary ; }
#include <stdio.h> typedef struct p { int x , y ; } ; int main ( ) { p k1 = { 1 , 2 } ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> typedef struct p { int x , y ; } k = { 1 , 2 } ; int main ( ) { p k1 = k ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> typedef struct p { int x , y ; } k ; int main ( ) { struct p p = { 1 , 2 } ; k k1 = p ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> struct p { char x : 2 ; int y : 2 ; } ; int main ( ) { struct p p ; p.x = 2 ; p.y = 1 ; p.x = p.x & p.y ; printf ( " %d\n  " , p.x ) ; }
#include <stdio.h> union u { struct p { unsigned char x : 2 ; unsigned int y : 2 ; } ; int x ; } ; int main ( ) { union u u ; u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u ; u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u = { 2 } ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u.p = { 2 } ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> struct p { unsigned int x : 2 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 3 ; p.y = 1 ; printf ( " %d\n  " , sizeof ( p ) ) ; }
#include <stdio.h> struct p { unsigned int x : 2 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 3 ; p.y = 4 ; printf ( " %d\n  " , p.y ) ; }
#include <stdio.h> struct p { unsigned int x : 7 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 110 ; p.y = 2 ; printf ( " %d\n  " , p.x ) ; }
#include <stdio.h> struct p { unsigned int x : 1 ; unsigned int y : 1 ; } ; int main ( ) { struct p p ; p.x = 1 ; p.y = 2 ; printf ( " %d\n  " , p.y ) ; }
#include <stdio.h> #include <stdarg.h> void func ( int , ... ) ; int main ( ) { func ( 2 , 3 , 5 , 7 , 11 , 13 ) ; return 0 ; } void func ( int n , ... ) { int number , i = 0 ; va_list start ; va_start ( start , n ) ; while ( i ! = 3 ) { number = va_arg ( start , int ) ; i + + ; } printf ( " %d " , number ) ; }
#include <stdio.h> int main ( ) { FILE * fp = stdin ; int n ; fprintf ( fp , " %d " , 45 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d\n  " , 45 ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; fflush ( stdout ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * str = " hello , world " ; char * str1 = " hello , world " ; if ( strcmp ( str , str1 ) ) printf ( " equal " ) ; else printf ( " unequal " ) ; }
#include <stdio.h> int main ( ) { char * str = " hello , world " ; char str1 [ 15 ] = " hello wo 9 " ; strcpy ( str , str1 ) ; printf ( " %s " , str1 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " hello , world " ; char str1 [ 9 ] ; strncpy ( str1 , str , 9 ) ; printf ( " %s %d " , str1 , strlen ( str1 ) ) ; }
#include <stdio.h> int main ( ) { char * str = " hello , world\n  " ; printf ( " %d " , strlen ( str ) ) ; }
#include <stdio.h> int main ( ) { char str [ 11 ] = " hello " ; char * str1 = " world " ; strcat ( str , str1 ) ; printf ( " %s %d " , str , str [ 10 ] ) ; }
#include <stdio.h> int main ( ) { char str [ 10 ] = " hello " ; char * str1 = " world " ; strncat ( str , str1 , 9 ) ; printf ( " %s " , str ) ; }
#include <stdio.h> int main ( ) { int n ; scanf ( " %d " , & n ) ; ungetc ( n , stdin ) ; scanf ( " %d " , & n ) ; printf ( " %d\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 20 ] ; fgets ( n , 19 , stdin ) ; ungetc ( n [ 0 ] , stdin ) ; scanf ( " %s " , n ) ; printf ( " %s\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 20 ] ; fgets ( n , 19 , stdin ) ; ungetc ( n [ 0 ] , stdin ) ; printf ( " %s\n  " , n ) ; return 0 ; }
#include <stdio.h> void main ( ) { char * p = calloc ( 100 , 1 ) ; p = " welcome " ; printf ( " %s\n  " , p ) ; }
#include <stdio.h> printf ( " %.0f " , 2.89 ) ;
#include <stdio.h> int main ( ) { float a = 2.455555555555 ; printf ( " %f " , a ) ; }
#include <stdio.h> printf ( " %d " , sizeof ( 'a' ) ) ;
#include <stdio.h> union temp { char a ; char b ; int c ; } t ; int main ( ) { printf ( " %d " , sizeof ( t ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num1 , num2 ; int sum ; num1 = num2 = 10 ; sum = num1 + num2 ; * Result is assigned to sum by the assignment operator. * / -num1 ; --num1 ; return 0 ; }
#include <stdio.h> int main ( void ) { char ch ; int i ; float fl ; fl = i = ch = 'C' ; printf ( " ch = %c , i = %d , fl = %2.2f\n  " , ch , i , fl ) ; ch = ch + 1 ; i = fl + 2 * ch ; fl = 2.0 * ch + i ; printf ( " ch = %c , i = %d , fl = %2.2f\n  " , ch , i , fl ) ; ch = 5212205.17 ; printf ( " Now ch = %c\n  " , ch ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int one , two , three ; one = two = three = 68 ; printf ( " one two three " ) ; printf ( " First round score %4d %8d %8d\n  " , one , two , three ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num = 1 ; while ( num < = 25 ) { printf ( " %4d %6d\n  " , num , num * num ) ; num = num + 1 ; } return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " integer division : 10 / 4 is %d \n  " , 10 / 4 ) ; printf ( " integer division : 12 / 3 is %d \n  " , 12 / 3 ) ; printf ( " integer division : 9 / 4 is %d \n  " , 9 / 4 ) ; printf ( " floating division : 9. / 4. is %1.2f \n  " , 9. / 4. ) ; printf ( " mixed division : 9. / 4 is %1.2f \n  " , 9. / 4 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { unsigned int b = 16 , result ; printf ( " value of exp. result = b > > 3 is %d\n  " , result = b > > 3 ) ; printf ( " value of b after right shift by 3 bits , is %d\n  " , b ) ; printf ( " value of exp. result = b < < 3 is %d\n  " , result = b < < 3 ) ; printf ( " value of b after left shift by 3 bits , is %d\n  " , b ) ; return 0 ; }
#include <stdio.h> int main ( void ) { unsigned int b = 16 ; printf ( " value of exp. b > > = 3 is %d\n  " , b > > = 3 ) ; printf ( " value of b after right shift by 3 bits , is %d\n  " , b ) ; printf ( " value of exp. b < < = 3 is %d\n  " , b < < = 3 ) ; printf ( " value of b after left shift by 3 bits , is %d\n  " , b ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int hall = -16 ; printf ( " value of exp. hall > > = 3 is %d\n  " , hall > > = 3 ) ; printf ( " value of hall , -ve value , after right shift by 3 bits , " " is %d\n  " , hall ) ; return 0 ; }
#include <stdio.h> void count1bits ( int ) ; int main ( void ) { int num ; printf ( " enter some unsigned integer number\n  " ) ; scanf ( " %d " , & num ) ; count1bits ( num ) ; return 0 ; } void count1bits ( int num1 ) { int ones = 0 ; while ( num1 ! = 0 ) { if ( num1 % 2 ! = 0 ) ones + + ; num1 > > = 1 ; } printf ( " the number of Ones in the Value is %d\n  " , ones ) ; }
#include <math.h> #include <stdio.h> int main ( void ) { const double ANSWER = 3.14159 ; double response ; printf ( " What is the value of pi?\n  " ) ; scanf ( " %lf " , & response ) ; while ( fabs ( response - ANSWER ) > 0.0001 ) { printf ( " Try again!\n  " ) ; scanf ( " %lf " , & response ) ; } printf ( " Close enough!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int true , false ; true = ( 10 > 5 ) ; false = ( 10 = = 5 ) ; printf ( " true = %d ; false = %d \n  " , true , false ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 5 ; while ( n ) printf ( " %2d is true\n  " , n-- ) ; printf ( " %2d is false\n  " , n ) ; n = -5 ; while ( n ) printf ( " %2d is true\n  " , n + + ) ; printf ( " %2d is false\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( void ) { long num ; long sum = 0L ; int status ; printf ( " Please enter an integer to be summed " ) ; printf ( " ( q to quit ) : " ) ; status = scanf ( " %ld " , & num ) ; while ( status = 1 ) { sum = sum + num ; printf ( " Please enter next integer ( q to quit ) : " ) ; status = scanf ( " %ld " , & num ) ; } printf ( " Those integers sum to %ld.\n  " , sum ) ; return 0 ; }
#include <stdio.h> #define PERIOD '.' int main ( void ) { int ch ; int charcount = 0 ; while ( ( ch = getchar ( ) ) ! = PERIOD ) { if ( ch ! = ' " ' & & ch ! = '\'' ) charcount + + ; } printf ( " There are %d non-quote characters.\n  " , charcount ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num1 = 0 , num2 = 0 ; while ( num1 < 5 ) { num1 + + ; + + num2 ; printf ( " num1 %d , num2 = %d \n  " , num1 , num2 ) } return 0 ; }
#include <stdio.h> int main ( void ) { int x , y , z ; int a = 10 , b = 20 , c = 30 ; printf ( " The value of entire expression a + b , b + c , c + a " " is %d\n  " , ( a + b , b + c , c + a ) ) ; printf ( " Value of the entire exp. a , a + + , a + + ; is %d\n  " , ( a , a + + , a + + ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int x , y , z ; for ( x = getval ( ) , y = x + 1 ; y > = 0 ; x + + , y = x + 1 ) { ... x = getval ( ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a ; a = getval ( ) ; count ( a ) ; while ( a > 0 ) { ... a = getval ( ) ; count ( a ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a ; while ( a = getval ( ) , count ( a ) , a > 0 ) { ... } return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( void ) { int flag ; printf ( " User , type in some intger value...\n  " ) ; scanf ( " %d " , & flag ) ; if ( flag = = FALSE ) ( !flag ) ; if ( flag = = TRUE ) ( flag ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 0 ; size_t intsize ; intsize = sizeof ( int ) ; printf ( " n = %d , n has %zd bytes ; all ints have %zd bytes.\n  " , + + n , sizeof + + n , intsize ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( int argc , char * * argv ) { char buffer [ 10 ] ; strncpy ( buffer , argv [ 1 ] , sizeof buffer - sizeof buffer [ 0 ] ) ; buffer [ sizeof buffer - 1 ] = '\0' ; return 0 ; }
#include <stdio.h> struct flexarray { char val ; int array [ ] ; } ; int main ( int argc , char * * argv ) { printf ( " sizeof ( struct flexarray ) = %zu bytes\n  " , sizeof ( struct flexarray ) ) ; return 0 ; }
#include <stddef.h> #include <stdio.h> size_t flexsize ( int n ) { char b [ n + 3 ] ; return sizeof b ; } int main ( void ) { size_t size = flexsize ( 10 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int ultra = 0 , super = 0 ; while ( super < 5 ) { super + + ; + + ultra ; printf ( " super = %d , ultra = %d \n  " , super , ultra ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a = 1 , b = 1 ; int aplus , plusb ; aplus = a + + ; plusb = + + b ; printf ( " a aplus b plusb \n  " ) ; printf ( " %1d %5d %5d %5d\n  " , a , aplus , b , plusb ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 0 ; size_t intsize ; intsize = sizeof ( int ) ; printf ( " n = %d , n has %zd bytes ; all ints have %zd bytes.\n  " , + + n , sizeof + + n , intsize ) ; printf ( " now n has become %d\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int x = 10 , y = 20 ; float marks = 60.75 , u = 33.89 , v ; v = marks + u * x + y ; printf ( " Value of the exp. v = marks + u * x + y is %f\n  " , v ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 , j = 20 , k = 50 ; float cm = 10.5 , mm = 20.9 , inch = 12 ; 5 = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { char name = 'A' ; 'A' = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { int int_size ; printf ( " Size of all integers is %d bytes\n  " , sizeof ( int ) ) ; printf ( " Size of integer variable int_size is %d bytes\n  " , sizeof int_size ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int den = 11 ; int * ip = & den ; printf ( " In exp. \'ip = & den\' , \n Address of den is %p and\n contents of " " ip is %p\n  " , & den , ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int den = 11 ; int * ip = & den ; printf ( " In exp. \'ip = & den\' , \n Address of den is %p and\n Contents of " " ip is %p\n  " , & den , ip ) ; printf ( " Value of den is %d\n And by performing indirection on pointer ip " " is %d\n  " , den , * ip ) ; return 0 ; }
#include <stdio.h> int shots ( ) ; int winner ( int ) ; void display_winner_loser ( int ) ; int main ( void ) { int x ; char y ; shots ( ) ; winner ( some_val ) ; display_winner_loser ( some_val ) ; return 0 ; } int shots ( ) { --- --- return win_shots ; } int winner ( int ) { --- --- return no_winner ; } void display_winner_loser ( int ) { --- --- }
#include <stdio.h> void write_table ( int ) ; int main ( void ) { int num ; printf ( " Wanna create Table of some number , enter number : " ) ; scanf ( " %d " , & num ) ; write_table ( num ) ; return 0 ; } void write_table ( int copy ) { int i ; printf ( " \tTable of %d\n  " , copy ) ; for ( i = 1 ; i < = 10 ; i + + ) printf ( " %5d * %5d = %5d\n  " , copy , i , copy * i ) ; printf ( " \n  " ) ; }
#include <stdio.h> int main ( void ) { int balls = 100 ; int * ip = & balls ; printf ( " Address of balls in exp. \ " balls = 100\ " is %p\n and Value of ip " " in exp. \ " * ip = & balls\ " is %p\n  " , & balls , ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int some = 20 ; int * iptr = & some ; printf ( " \n Address of integer \'some\' in exp. \'int some = 20\' is %p\n  " " and where \'iptr\' is pointing to , in exp. 'int * iptr = & some' , " " is\n  %p\n  " , & some , iptr ) ; printf ( " \n Let's see what happens when we access initialized pointer " " \'ptr\' in exp.\n \'int * iptr = & some\'\n  " ) ; printf ( " This gives Value %d of variable \'some\'\n \n  " , * iptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; printf ( " Address of a is %p and value of a is %3d\n  " , & a , a ) ; & a = 100 ; printf ( " After & a = 100 ; Address of a is %p and value of a is %3d\n  " , & a , a ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; printf ( " \t\tAddress of a is %p and value of a is %3d\n  " , & a , a ) ; * ( & a ) = 100 ; printf ( " After * ( & a ) = 100 ; Address of a is %p and value of a is %3d\n  " , & a , a ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Program shows accessing the location by its address...\n  " ) ; * ( int * ) 10000 = 100 ; printf ( " After * ( int * ) 10000 = 1000 ; value at address ( int * ) 10000 is " " %d\n  " , * ( int * ) 10000 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 5 ; long double x ; int * pi = & n ; long double * pld = & x ; x = n ; pld = pi ; return 0 ; }
#include <stdio.h> int main ( void ) { const int gz = 122 ; gz = 111 ; return 0 ; }
#include <stdio.h> #define MONTHS 12 int main ( void ) { double rainfall [ MONTHS ] = { 2.12 , 3.1 , 0.34 , 4.00 , 1.1 , 1.23 , 2.345 , 3.121 , 3.232 , 0.023 , 1.023 , 2.234 } ; const double * dp = rainfall ; * dp = 3.12 ; rainfall [ 0 ] = 3.12 ; rainfall [ 2 ] = 2.22 ; return 0 ; }
#include <stdio.h> void show ( const double * ) ; int main ( void ) { ---- ---- show ( rainfall ) ; return 0 ; } void show ( const double * srf ) { double rfd ; while ( ( rfd = * srf + + ) ! = 0 ) printf ( " %lf\t " , rfd ) ; printf ( " \n  " ) ; }
#include <stdio.h> int main ( void ) { int me = 1 ; register int you = 2 ; printf ( " Address of me in exp. \ " int me = 1\ " is \t\t %p\n Address of you " " in exp. \ " register int you = 2\ " is %p\n  " , & me , & you ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * iptr ; int * ip ; char * cp ; float * fp ; printf ( " Default Address \ " iptr\ " holds as %p\n  " , iptr ) ; printf ( " Default Address \ " ip\ " holds as %p\n  " , ip ) ; printf ( " Default Address \ " cp\ " holds as %p\n  " , cp ) ; printf ( " Default Address \ " fp\ " holds as %p\n  " , fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * nptr = 0 ; printf ( " In exp. \ " int * nptr = 0\ " \n  " ) ; if ( !nptr ) printf ( " nptr is a NULL pointer!\n  " ) ; else printf ( " nptr is not a NULL pointer!\n  " ) ; printf ( " \n Now we try Indirection ' * ' on NULL Pointer \'nptr\' to see " " what happens...\n  " ) ; printf ( " The Value at location pointed to by \'nptr\' is %d\n  " , * nptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { 500 ; 45.06 ; 'A' ; printf ( " Address of integer '500' is %p\n  " , & ( 500 ) ) ; printf ( " Address of float '45.06' is %p\n  " , & ( 45.06 ) ) ; printf ( " Address of character \'A\' is %p\n  " , & ( 'A' ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int NH_India = 228 ; int * ip = & NH_India ; int new ; printf ( " When \ " new\ " not initialized it is %d and NH_India is %d\n  " , new , NH_India ) ; new = + + * ip ; printf ( " After \ " new = + + * ip\ " , new is %d and NH_India is %d\n  " , new , NH_India ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int NH_India = 228 ; int * ip = & NH_India ; int new = 100 ; printf ( " When \ " new\ " initialized it is %d and NH_India is %d\n  " , new , NH_India ) ; + + * ip = new ; printf ( " After \ " + + * ip = new\ " , + + * ip is %d and NH_India is %d\n  " , new , NH_India ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int NH_India = 228 ; int * ip = & NH_India ; int new = 100 ; printf ( " When \ " new\ " initialized it is %d and value of * ip is %p\n  " , new , ip ) ; new = * ip + + ; printf ( " After \ " new = * ip + + \ " , new is %d and \ " new value\ " of * ip is " . " %p\n  " , new , ip ) ; .return 0 ; }
#include <stdio.h> #define FAMILIES 10 int main ( void ) { int fam_mem [ FAMILIES ] ; int * ip1 , * ip2 ; printf ( " Read in from user , family members for %d families...\n  " , FAMILIES ) ; for ( ip1 = & fam_mem [ 0 ] , ip2 = & fam_mem [ FAMILIES ] ; ip1 < ip2 ; ip1 + + ) scanf ( " %d " , ip1 ) ; return 0 ; }
#include <stdio.h> void display_static_var ( void ) ; int main ( void ) { int FLAG = 1 ; while ( FLAG ) { display_static_var ( ) ; printf ( " User , want to continue , enter 1 else 0 , \n  " ) ; scanf ( " %d " , & FLAG ) ; } printf ( " Thank you!\n  " ) ; return 0 ; } void display_static_var ( void ) { static int count = 1 ; printf ( " static integer variable \ " count\ " is %d\n  " , count + + ) ; }
#include <stdio.h> void display ( void ) ; int main ( void ) { printf ( " main : going to call display...\n  " ) ; display ( ) ; return 0 ; } void display ( void ) { printf ( " i am display ( ) : I display massage!\n  " ) ; return ; }
#include <stdio.h> int sum2ints ( int , int ) ; int main ( void ) { int u = 5 , v = 10 ; printf ( " sum of %d and %d is %d\n  " , u , v , sum2ints ( u , v ) ) ; return 0 ; } int sum2ints ( int x , int y ) { return x + y ; }
#include <stdio.h> void hahaha ( void ) ; int main ( void ) { hahaha ( ) ; return 0 ; } void hahaha ( void ) { printf ( " ha ha ha!\n  " ) ; }
#include <stdio.h> double mul_floats ( float , float ) ; int main ( void ) { float x = 4.67 , y = 3.55 ; double result ; result = mul_floats ( x , y ) ; printf ( " multiplication of %f and %f is %lf\n  " , x , y , result ) ; return 0 ; } double mul_floats ( float u , float v ) { return u * v ; }
#include <stdio.h> void countdown ( int ) ; int main ( void ) { int num = 100 ; countdown ( num ) ; return 0 ; } void countdown ( int count ) { if ( count > = 1 ) { printf ( " %d\n  " , count ) ; countdown ( count-- ) ; } }
#include <stdio.h> int main ( void ) { int num = 100 ; for ( ; num > = 1 ; num-- ) { printf ( " %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { static int i ; printf ( " Default Value of \ " static variable i\ " is %d\n  " , i ) ; return 0 ; }
#include <stdio.h> void count ( int ) ; int main ( void ) { int i ; for ( i = 1 ; i < = 5 ; i + + ) count ( i ) ; return 0 ; } void count ( int iteration ) { static int i ; printf ( " Value of \ " static int i\ " in count ( %d ) is %d\n  " , iteration , + + i ) ; }
#include <stdio.h> void update ( int ) ; int main ( void ) { update ( 1 ) ; update ( 0 ) ; return 0 ; } void update ( int FLAG ) { static int count [ 10 ] = { 12 , 34 , 45 , 123 , 1 , 3 , 56 , 90 , 88 , 100 } ; int i ; if ( FLAG ) { for ( i = 0 ; i < 10 ; i + + ) count [ i ] + = 5 ; printf ( " Updated data!\n  " ) ; } else { printf ( " No need!\n  " ) ; } }
#include <stdio.h> int main ( void ) { int i ; int jams [ 5 ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; for ( i = 0 ; i < 6 ; i + + ) printf ( " jams [ %d ] is %d\n  " , i , jams [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i ; int hats [ 5 ] = { 1 , 2 , 3 , 4 } ; for ( i = 0 ; i < 5 ; i + + ) printf ( " hats [ %d ] is %d\n  " , i , hats [ i ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char name [ ] = " christopher " ; char * name2 = " christopher " ; printf ( " name \ " %s\ " is an array and name2 \ " %s\ " is a string literal.\n  " , name , name2 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int byte_count ; printf ( " \n  * * * * * Program shows type of size_t * * * * * \n \n  " ) ; printf ( " \ " sizeof ( size_t ) \ " returns %d bytes.\n  " , sizeof ( size_t ) ) ; if ( sizeof ( size_t ) = = sizeof ( unsigned long ) ) printf ( " \n Type of \ " size_t\ " is \ " unsigned long\ " .\n \n  " ) ; # if __WORDSIZE = = 64 # define ULONG_MAX 18446744073709551615UL # else # define ULONG_MAX 4294967295UL # endif return 0 ; }
#include <string.h> #include <stdio.h> int main ( void ) { char * src = " Hello , strcpy. " ; char dst [ 5 ] ; char * copied ; copied = strcpy ( dst , src ) ; printf ( " strcpy ( ) returns \ " %s\ " \n  " , copied ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char * str = " how's your C programming project? " ; char * gstr = " interesting " ; char * loc ; loc = strpbrk ( str , gstr ) ; printf ( " \n ptr-to-char \ " loc\ " points to first occurrence of character " " \' %c\'\n at %d location in the string \ " %s\ " \n \n  " , * loc , loc - str , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char str [ 100 ] ; char delimiters [ ] = " \t\n \v\f\r " ; char * token ; puts ( " \n  * * Program extracts Tokens and displays them One per Line. * * \n  " ) ; puts ( " User , enter a string... " ) ; gets ( str ) ; for ( token = strtok ( str , delimiters ) ; token ! = NULL ; token = strtok ( NULL , delimiters ) ) puts ( token ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { int errno = 0 ; puts ( " Let's " ) ; puts ( " check " ) ; puts ( " the " ) ; puts ( " behaviour " ) ; puts ( " of " ) ; puts ( " strerr ( ) " ) ; puts ( " function. " ) ; fprintf ( stderr , " \n puts STATUS : %s\n  " , strerror ( errno ) ) ; return 0 ; }
#include <stdio.h> void disp ( const int * , const int ) ; int main ( void ) { int balloons [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; disp ( balloons , 5 ) ; return 0 ; } void disp ( const int * sb , const int count ) { int i = 0 ; while ( i < count ) printf ( " balloons [ %d ] has %d balloons.\n  " , i + + , * ( sb + i ) ) ; }
#include <stdio.h> typedef struct A { char surname [ 15 ] ; int roll_no ; char initial [ 5 ] ; float marks ; } New ; int main ( void ) { New x = { " smith " , 34 , " J " , 67.38 } ; New y [ 10 ] ; New * pstruct = & x ; return 0 ; }
#include <stdio.h> typedef struct A { int a ; float b ; } New_a ; typedef struct B { int c ; float d ; struct A e ; } New_b ; int main ( void ) { New_a bread ; New_b butter ; bread.a = 10 ; bread.b = 25.50 ; butter.c = 10 ; butter.d = 50.00 ; butter.e.a = 20 ; butter.e.b = 20.00 ; printf ( " butter.e.a is %4d\n  " , butter.e.a ) ; printf ( " butter.e.b is %.2f\n  " , butter.e.b ) ; return 0 ; }
#include <stdio.h> typedef union { float marks ; char str [ 20 ] ; int count ; } Record ; int main ( void ) { Record new ; puts ( " * * Program computes size allocated to \'new\' * * " ) ; printf ( " %d bytes allocated to \'new\' Record.\n  " , sizeof ( new ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float marks [ 10 ] ; int i ; puts ( " user , enter marks of 10 students... " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %f " , & marks [ i ] ) ; puts ( " Marks of 10 students are : " ) ; for ( i = 0 ; i < 10 ; i + + ) printf ( " %.2f " , marks [ i ] ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; float marks [ n ] ; printf ( " How many marks to process? Enter a positive integer...\n  " ) ; scanf ( " %d " , & n ) ; printf ( " now enter marks of students...\n  " ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %f " , & marks [ i ] ) ; printf ( " Processing %d Marks.\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * x = 10 , y ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> typedef struct NODE { struct NODE * link ; int data ; } Node ; Node * * create_sll ( const int ) ; void insert_data ( Node * * ) ; void show_list ( Node * * ) ; void sort_list ( Node * * ) ; #include " sll_op.c "
#include <stdio.h> #define NAME " What is your name? " int main ( void ) { char name [ 25 ] = " xyz " ; char * const p2name = " abc " ; " abc " + = 1 ; " abc " + 1 ; " abc " [ 0 ] ; " abc " [ 1 ] ; " abc " [ 10 ] ; * ( " abc " + 2 ) ; * " abc " ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Hello World!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define TRUE 1 #define FALSE 0 #define SIZE 512 #define MAX ( a , b ) ( ( a ) > ( b ) ? ( a ) : ( b ) )
#include <stdio.h> #define TRUE 1 #define PRINT printf ( " values of x = %d and y = %d.\n  " , x , y ) ; int main ( void ) { if ( TRUE ) PRINT ; else printf ( " Bye!\n  " ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 void disp ( char [ ] ) ; int main ( ) { char name [ SIZE ] = { 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' } ; disp ( name ) ; return 0 ; } void disp ( char name [ ] ) { int i ; printf ( " name is : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %c " , name [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> #define X 10 #define Y 0 #define Z 100 int main ( void ) { int x = 10 , y = 0 , z = 100 ; #if X printf ( " x is %d\n  " , X ) ; #elif Y printf ( " y is %d\n  " , Y ) ; #else printf ( " z is %d\n  " , Z ) ; #endif return 0 ; }
#include <stdio.h> #define DEBUG printf ( " value of x = %d and y = %d.\n  " , x , y ) void increase ( int , int ) ; int main ( void ) { int x = 5 , y = 6 ; x + + ; y + + ; DEBUG ; increase ( + + x , y + + ) ; DEBUG ; + + x ; + + y ; DEBUG ; } void increase ( int x , int y ) { DEBUG ; x + + ; y + + ; DEBUG ; }
#include <stdio.h> #define YES #define NO #undef YES #undef NO int main ( void ) { #ifdef YES #ifdef NO puts ( " Both YES and NO defined! " ) ; #else puts ( " YES defined! " ) ; #endif #elif NO puts ( " NO defined! " ) ; #else #error None of YES and NO defined! #endif return 0 ; }
#include <stdio.h> int main ( void ) { #if defined ( OS_LINUX ) #ifdef OPTION1 os_linux_version_option1 ( ) ; #endif #ifdef OPTION2 os_linux_version_option2 ( ) ; #endif #elif defined ( MS_DOS ) #ifdef OPTION2 os_ms_dos_version_option2 ( ) ; #endif #endif return 0 ; }
#include <stdio.h> #include <stdlib.h> #define BUFFSIZE 512 void sum2ints ( const int , const int ) ; void sum2floats ( const float , const float ) ;
#include <stdio.h> #define YES #define NO int main ( void ) { #ifdef YES #ifdef NO puts ( " Both YES and NO defined! " ) ; #else puts ( " YES defined! " ) ; #endif #elif NO puts ( " NO defined! " ) ; #else #error None of YES and NO defined! #endif return 0 ; }
#include <stdio.h> #define VAL ( n ) val ## n #define PRINTSUM ( n , m ) \ printf ( " sum of val " #n " = %d and val " #m " = %d is %d\n  " , \ val ## n , val ## m , val ## n + val ## m ) int main ( void ) { int VAL ( 1 ) = 10 ; int VAL ( 2 ) = 20 ; PRINTSUM ( 1 , 2 ) ; return 0 ; }
#include <stdio.h> #include <error.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; if ( argc = = 1 ) { puts ( " File Argument Missing " ) ; exit ( EXIT_FAILURE ) ; } fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; if ( argc = = 2 ) { fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } else { printf ( " File : \ " %s\ " opened successfully!\n  " , argv [ 1 ] ) ; } } else { puts ( " Error File Argument " ) ; exit ( EXIT_FAILURE ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; int ch ; if ( argc ! = 2 ) { perror ( " File Argument " ) ; exit ( EXIT_FAILURE ) ; } fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( fp ) ) ! = EOF ) putchar ( ch ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * str ; printf ( " how are you , dear xyz?\n  " ) ; gets ( str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int ch ; while ( ( ch = getchar ( ) ) ! = '1' ) putchar ( ch ) ; ungetc ( ch , stdin ) ; ch = getchar ( ) ; putchar ( ch ) ; puts ( " " ) ; printf ( " Thank you!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 10 int main ( void ) { FILE * stream ; char buffer [ SIZE ] ; stream = fopen ( " hello.txt " , " r " ) ; if ( stream = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } fgets ( buffer , SIZE , stream ) ; if ( ferror ( stream ) ) printf ( " Read / Write Error.\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define MY_RANGE 20 int main ( void ) { int i ; srand ( time ( 0 ) ) ; printf ( " Sequence of Pseudo-Random Numbers : \n  " ) ; for ( i = MY_RANGE ; i > = 0 ; i-- ) printf ( " %d " , rand ( ) % MY_RANGE ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 100 int main ( void ) { char * * p2unused ; char input [ SIZE ] ; unsigned long ulong_val ; printf ( " User , type in character string with valid integer value...\n  " ) ; gets ( input ) ; ulong_val = strtoul ( input , p2unused , 12 ) ; printf ( " String \ " %s\ " converted to value : %ld\n  " , input , ulong_val ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double angle , sine ; printf ( " User , write in angle , in radians , whose sine to be " " computed...\n  " ) ; scanf ( " %lf " , & angle ) ; sine = sin ( angle ) ; printf ( " angle : %lf , in radians , converted to : %lf sine\n  " , angle , sine ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double angle , result ; printf ( " User , write in angle , in radians , whose hyperbolic sine " " to be computed...\n  " ) ; scanf ( " %lf " , & angle ) ; result = sinh ( angle ) ; printf ( " hyperbolic sine of \ " angle : %lf\ " is : %lf\n  " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter + ve value to compute its natural " " logarithm to base \ " e\ " ...\n  " ) ; printf ( " Logarithm for -ve values \ " NOT DEFINED\ " !\n  " ) ; scanf ( " %lf " , & value ) ; result = log ( value ) ; printf ( " Logarithm of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double to_what_power , result ; printf ( " User , enter value for which you wish to compute " " expression \ " e^value\ " ...\n  " ) ; scanf ( " %lf " , & to_what_power ) ; result = exp ( to_what_power ) ; printf ( " Exponent of exp. \ " e^ %lf\ " : %lf\n  " , to_what_power , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double x , y , result ; printf ( " User , enter + ve value for 'x' and Integral Value for 'y' " " to evaluate \ " x^y\ " ...\n  " ) ; printf ( " Power \ " x^y\ " with -ve 'x' and Non-Integral 'y' " " causes DOMAIN ERROR!\n  " ) ; scanf ( " %lf %lf " , & x , & y ) ; result = pow ( x , y ) ; printf ( " Pow \ " %lf^ %lf\ " : %lf\n  " , x , y , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double sqrt_of , result ; printf ( " User , enter + ve value of which you seek Square-Root of...\n  " ) ; printf ( " Square-Root of Negative Values causes DOMAIN ERROR!\n  " ) ; scanf ( " %lf " , & sqrt_of ) ; result = sqrt ( sqrt_of ) ; printf ( " Square-Root of \ " %lf\ " : %lf\n  " , sqrt_of , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter value for 'floor' evaluation...\n  " ) ; scanf ( " %lf " , & value ) ; result = floor ( value ) ; printf ( " 'floor' of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter value for 'ceiling' evaluation...\n  " ) ; scanf ( " %lf " , & value ) ; result = ceil ( value ) ; printf ( " 'ceil' of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> #define COUNT 1000000000 int main ( void ) { clock_t tm1 , tm2 ; long i ; tm1 = clock ( ) ; for ( i = 1 ; i < COUNT ; i + + ) ; tm2 = clock ( ) ; printf ( " amount of processor time : %d ticks and %d seconds\n  " , ( tm2 - tm1 ) , ( tm2 - tm1 ) / CLOCKS_PER_SEC ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( void ) { time_t * returned_value , tm1 ; time_t * p2tm = & tm1 ; char * str ; tm1 = time ( NULL ) ; str = ctime ( p2tm ) ; str = ctime ( p2tm ) ; printf ( " current date and time of the day : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_DFL ) ; while ( 1 ) return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_IGN ) ; while ( 1 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <signal.h> #include <stdio.h> void handler ( int signal ) { if ( signal = = SIGINT ) } int main ( void ) { signal ( SIGINT , handler ) ; return 0 ; }
#include <signal.h> #include <stdio.h> void handler ( int signal ) { if ( signal = = SIGBUS ) if ( signal = = SIGILL ) if ( signal = = SIGSEGV ) } int main ( void ) { signal ( SIGBUS , handler ) ; signal ( SIGILL , handler ) ; signal ( SIGSEGV , handler ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { abort ( ) ; printf ( " \ " abort ( ) called prior to printf ( ) \ " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void goodbye ( void ) ; void okey ( void ) ; int main ( void ) { int ret ; ret = atexit ( goodbye ) ; if ( ret = = 0 ) puts ( " atexit ( ) succeeds! " ) ; ret = atexit ( okey ) ; if ( ret = = 0 ) puts ( " atexit ( ) succeeds! " ) ; exit ( 0 ) ; } void goodbye ( void ) { puts ( " goodbye! " ) ; } void okey ( void ) { puts ( " okey , bye! " ) ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { printf ( " %d\n  " , abs ( 92.09998 ) ) ; printf ( " %ld\n  " , labs ( 123.88L ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define NUM 23 #define DEN 87 int main ( void ) { div_t res ; res = div ( NUM , DEN ) ; printf ( " \ " div ( %d , %d ) \ " gives quotient : %d and remainder : %d\n  " , NUM , DEN , res.quot , res.rem ) ; }
#include <stdio.h> #include <stdlib.h> #define MYRANGE 11 int main ( void ) { int i ; printf ( " On Linux system \ " RAND_MAX\ " is %ld\n  " , RAND_MAX ) ; printf ( " Generate numbers in RANGE ZERO through TEN...\n  " ) ; for ( i = MAXSIZE ; i > = 1 ; i-- ) { printf ( " %3d " , rand ( ) % MAXSIZE ) ; } puts ( " " ) ; return 0 ; }
#include <stdio.h> 1503 <div style = " text-align : justify " > #include <stdlib.h> #include <assert.h> int main ( void ) { FILE * fp ; fp = fopen ( " hello.txt " , " r " ) ; assert ( fp ! = NULL ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <assert.h> int main ( void ) { int status ; assert ( ( system ( NULL ) ) ! = 0 ) ; system ( " ls -l " ) ; exit ( 0 ) ; }
#include <stdio.h> int main ( void ) { int i , j = 0 ; for ( i = 0 ; i < 10 ; i + + ) j = j + 1 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_DFL ) ; while ( 1 ) return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_IGN ) ; while ( 1 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int i = 0 ; if ( argc = = 1 ) { printf ( " \n  No sentence given on command line " ) ; return ; } else { printf ( " \n The words in the sentence are : " ) ; for ( i = 1 ; i < argc ; i + + ) { printf ( " \n  %s " , argv [ i ] ) ; } printf ( " \n \n Total number of words : " ) ; printf ( " %d " , argc-1 ) ; } }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL ;
#include <stdio.h> #include <math.h> #include <time.h> #include <stdlib.h> void printArray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void printAllUniqueParts ( int n ) { int p [ n ] ;
#include <stdio.h> int getMax ( int arr [ ] , int n ) { int mx = arr [ 0 ] ; int i ; for ( i = 1 ; i < n ; i + + ) if ( arr [ i ] > mx ) mx = arr [ i ] ; return mx ; } void countSort ( int arr [ ] , int n , int exp ) { int output [ n ] ;
#include <stdio.h> void combinationUtil ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ;
#include <stdio.h> void combinationUtil ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ;
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> int total = 0 ; int sum ( int , int ) ; int main ( ) { printf ( " This is a C basic program \n  " ) ; total = sum ( 1 , 1 ) ; printf ( " Sum of two numbers : %d \n  " , total ) ; return 0 ; } int sum ( int a , int b ) { return a + b ; }
#include <stdio.h> int main ( ) { char ch ; char str [ 100 ] ; printf ( " Enter any character \n  " ) ; scanf ( " %c " , & ch ) ; printf ( " Entered character is %c \n  " , ch ) ; printf ( " Enter any string ( upto 100 character ) \n  " ) ; scanf ( " %s " , & str ) ; printf ( " Entered string is %s \n  " , str ) ; }
#include <stdio.h> #include <limits.h> int main ( ) { int a ; char b ; float c ; double d ; printf ( " Storage size for int data type : %d \n  " , sizeof ( a ) ) ; printf ( " Storage size for char data type : %d \n  " , sizeof ( b ) ) ; printf ( " Storage size for float data type : %d \n  " , sizeof ( c ) ) ; printf ( " Storage size for double data type : %d\n  " , sizeof ( d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { enum MONTH { Jan = 0 , Feb , Mar } ; enum MONTH month = Mar ; if ( month = = 0 ) printf ( " Value of Jan " ) ; else if ( month = = 1 ) printf ( " Month is Feb " ) ; if ( month = = 2 ) printf ( " Month is Mar " ) ; }
#include <stdio.h> void main ( ) { const int height = 100 ; const float number = 3.14 ; const char letter = 'A' ; const char letter_sequence [ 10 ] = " ABC " ; const char backslash_char = '\?' ; printf ( " value of height : %d \n  " , height ) ; printf ( " value of number : %f \n  " , number ) ; printf ( " value of letter : %c \n  " , letter ) ; printf ( " value of letter_sequence : %s \n  " , letter_sequence ) ; printf ( " value of backslash_char : %c \n  " , backslash_char ) ; }
#include <stdio.h> #define height 100 #define number 3.14 #define letter 'A' #define letter_sequence " ABC " #define backslash_char '\?' void main ( ) { printf ( " value of height : %d \n  " , height ) ; printf ( " value of number : %f \n  " , number ) ; printf ( " value of letter : %c \n  " , letter ) ; printf ( " value of letter_sequence : %s \n  " , letter_sequence ) ; printf ( " value of backslash_char : %c \n  " , backslash_char ) ; }
#include <stdio.h> void test ( ) ; int main ( ) { int m = 22 , n = 44 ; printf ( " \n values : m = %d and n = %d " , m , n ) ; test ( ) ; } void test ( ) { int a = 50 , b = 80 ; printf ( " \n values : a = %d and b = %d " , a , b ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Directory = %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " FILE " , " / usr / bin / example.c " , 50 ) ; printf ( " File = %s\n  " , getenv ( " FILE " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " DIR " , " / usr / bin / example / " , 50 ) ; printf ( " Directory name before modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; putenv ( " DIR = / usr / home / " ) ; printf ( " Directory name after modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int m = 40 , n = 20 ; if ( m = = n ) { printf ( " m and n are equal " ) ; } else { printf ( " m and n are not equal " ) ; } }
#include <stdio.h> int main ( ) { int m = 40 , n = 20 ; if ( m> n ) { printf ( " m is greater than n " ) ; } else if ( m <n ) { printf ( " m is less than n " ) ; } else { printf ( " m is equal to n " ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i = 3 ; while ( i <10 ) { printf ( " %d\n  " , i ) ; i + + ; } }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " Value of i is %d\n  " , i ) ; i + + ; } while ( i < = 4 & & i> = 2 ) ; }
#include <stdio.h> int main ( ) { int value = 3 ; switch ( value ) { case 1 : printf ( “Value is 1 \n ” ) ; break ; case 2 : printf ( “Value is 2 \n ” ) ; break ; case 3 : printf ( “Value is 3 \n ” ) ; break ; case 4 : printf ( “Value is 4 \n ” ) ; break ; default : printf ( “Value is other than 1 , 2 , 3 , 4 \n ” ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 ) { printf ( " \n Coming out of for loop when i = 5 " ) ; break ; } printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 || i = = 6 ) { printf ( " \n Skipping %d from display using " \ " continue statement \n  " , i ) ; continue ; } printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 ) { printf ( " \n We are using goto statement when i = 5 " ) ; goto HAI ; } printf ( " %d " , i ) ; } HAI : printf ( " \n Now , we are inside label name \ " hai\ " \n  " ) ; }
#include <stdio.h> void increment ( void ) ; int main ( ) { increment ( ) ; increment ( ) ; increment ( ) ; increment ( ) ; return 0 ; } void increment ( void ) { auto int i = 0 ; printf ( " %d " , i ) ; i + + ; }
#include <stdio.h> void increment ( void ) ; int main ( ) { increment ( ) ; increment ( ) ; increment ( ) ; increment ( ) ; return 0 ; } void increment ( void ) { static int i = 0 ; printf ( " %d " , i ) ; i + + ; }
#include <stdio.h> int x = 10 ; int main ( ) { extern int y ; printf ( " The value of x is %d \n  " , x ) ; printf ( " The value of y is %d " , y ) ; return 0 ; } int y = 50 ;
#include <stdio.h> int main ( ) { register int i ; int arr [ 5 ] ; arr [ 0 ] = 10 ; arr [ 1 ] = 20 ; arr [ 2 ] = 30 ; arr [ 3 ] = 40 ; arr [ 4 ] = 50 ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d \n  " , i , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; int arr [ 5 ] = { 10 , 20 , 30 , 40 , 50 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d \n  " , i , arr [ i ] ) ; } }
#include <stdio.h> int main ( ) { int i , j ; int arr [ 2 ] [ 2 ] = { 10 , 20 , 30 , 40 } ; for ( i = 0 ; i <2 ; i + + ) { for ( j = 0 ; j <2 ; j + + ) { printf ( " value of arr [ %d ] [ %d ] : %d\n  " , i , j , arr [ i ] [ j ] ) ; } } }
#include <stdio.h> int main ( ) { char string [ 20 ] = " fresh2refresh.com " ; printf ( " The string is : %s \n  " , string ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptr , q ; q = 50 ; ptr = & q ; printf ( " %d " , * ptr ) ; return 0 ; }
#include <stdio.h> float square ( float x ) ; int main ( ) { float m , n ; printf ( " \n Enter some number for finding square \n  " ) ; scanf ( " %f " , & m ) ; n = square ( m ) ; printf ( " \n Square of the given number %f is %f " , m , n ) ; } float square ( float x ) { float p ; p = x * x ; return ( p ) ; }
#include <stdio.h> void swap ( int a , int b ) ; int main ( ) { int m = 22 , n = 44 ; printf ( " values before swap m = %d \n and n = %d " , m , n ) ; swap ( m , n ) ; } void swap ( int a , int b ) { int tmp ; tmp = a ; a = b ; b = tmp ; printf ( " \n values after swap m = %d\n  and n = %d " , a , b ) ; }
#include <stdio.h> void swap ( int * a , int * b ) ; int main ( ) { int m = 22 , n = 44 ; printf ( " values before swap m = %d \n  and n = %d " , m , n ) ; swap ( & m , & n ) ; } void swap ( int * a , int * b ) { int tmp ; tmp = * a ; * a = * b ; * b = tmp ; printf ( " \n  values after swap a = %d \n and b = %d " , * a , * b ) ; }
#include <stdio.h> void test ( ) ; int main ( ) { test ( ) ; return 0 ; } void test ( ) { int a = 50 , b = 80 ; printf ( " \n values : a = %d and b = %d " , a , b ) ; }
#include <stdio.h> int sum ( ) ; int main ( ) { int addition ; addition = sum ( ) ; printf ( " \n Sum of two given values = %d " , addition ) ; return 0 ; } int sum ( ) { int a = 50 , b = 80 , sum ; sum = a + b ; return sum ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] ; if ( memcpy ( str2 , str1 , strlen ( str1 ) ) ) { printf ( " Elements in str1 are copied to str2 .\n  " ) ; printf ( " str1 = %s\n  str2 = %s \n  " , str1 , str2 ) ; } else printf ( " Error while coping str1 into str2.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; printf ( " str1 before memmove\n  " ) ; printf ( " str1 = %s\n  " , str1 ) ; if ( memmove ( str1 + 2 , str1 , strlen ( str1 ) ) ) { printf ( " Elements in str1 are moved / overlapped on str1.\n  " ) ; printf ( " str1 = %s \n  " , str1 ) ; } else printf ( " Error while coping str1 into str2.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] = " refresh " ; if ( !memcmp ( str1 , str2 , 5 * sizeof ( char ) ) ) printf ( " Elements in str1 and str2 are same.\n  " ) ; else printf ( " Elements in str1 and str2 are not same.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] = " FRESH " ; if ( !memicmp ( str1 , str2 , 5 * sizeof ( char ) ) ) printf ( " Elements in str1 and str2 are same.\n  " ) ; else printf ( " Elements in str1 and str2 are not same.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * ptr ; char string [ ] = " fresh2refresh " ; ptr = ( char * ) memchr ( string , 'h' , strlen ( string ) ) ; if ( ptr ! = NULL ) printf ( " character 'h' is found at " \ " position %d.\n  " , ptr-string + 1 ) ; else printf ( " character 'h' is not found.\n  " ) ; return 0 ; }
#include <stdio.h> #include <dos.h> #include <conio.h> int main ( ) { struct date dt ; printf ( " Enter new date in the format ( day month year ) " ) ; scanf ( " %d %d %d " , & dt.da_day , & dt.da_mon , & dt.da_year ) ; setdate ( & dt ) ; printf ( " Now , current system date is %d- %d- %d\n  " , dt.da_day , dt.da_mon , dt.da_year ) ; return 0 ; }
#include <stdio.h> #include <dos.h> int main ( ) { struct date dt ; getdate ( & dt ) ; printf ( " Operating system's current date is %d- %d- %d\n  " , dt.da_day , dt.da_mon , dt.da_year ) ; return 0 ; }
#include <stdio.h> #include <time.h> #include <math.h> int main ( ) { int i ; clock_t CPU_time_1 = clock ( ) ; printf ( " CPU start time is : %d \n  " , CPU_time_1 ) ; for ( i = 0 ; i < 150000000 ; i + + ) ; clock_t CPU_time_2 = clock ( ) ; printf ( " CPU end time is : %d " , CPU_time_2 ) ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; seconds = time ( NULL ) ; printf ( " Number of hours since 1970 Jan 1st " \ " is %ld \n  " , seconds / 3600 ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t begin , end ; long i ; begin = time ( NULL ) ; for ( i = 0 ; i < 150000000 ; i + + ) ; end = time ( NULL ) ; printf ( " for loop used %f seconds to complete the " \ " execution\n  " , difftime ( end , begin ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> #define LEN 150 int main ( ) { char buf [ LEN ] ; time_t curtime ; struct tm * loc_time ; curtime = time ( NULL ) ; loc_time = localtime ( & curtime ) ; printf ( " %s " , asctime ( loc_time ) ) ; strftime ( buf , LEN , " Today is %A , %b %d.\n  " , loc_time ) ; fputs ( buf , stdout ) ; strftime ( buf , LEN , " Time is %I : %M %p.\n  " , loc_time ) ; fputs ( buf , stdout ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { struct tm strtime ; time_t timeoftheday ; strtime.tm_year = 2008-1900 ; strtime.tm_mon = 1 ; strtime.tm_mday = 4 ; strtime.tm_hour = 02 ; strtime.tm_min = 30 ; strtime.tm_sec = 38 ; strtime.tm_isdst = 0 ; timeoftheday = mktime ( & strtime ) ; printf ( ctime ( & timeoftheday ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t orig_format ; time ( & orig_format ) ; printf ( " Universal Time is %s " , asctime ( gmtime ( & orig_format ) ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * mem_allocation ; mem_allocation = malloc ( 20 * sizeof ( char ) ) ; if ( mem_allocation = = NULL ) { printf ( " Couldn't able to allocate requested memory\n  " ) ; } else { strcpy ( mem_allocation , " fresh2refresh.com " ) ; } printf ( " Dynamically allocated memory content : " \ " %s\n  " , mem_allocation ) ; free ( mem_allocation ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * mem_allocation ; mem_allocation = calloc ( 20 , sizeof ( char ) ) ; if ( mem_allocation = = NULL ) { printf ( " Couldn't able to allocate requested memory\n  " ) ; } else { strcpy ( mem_allocation , " fresh2refresh.com " ) ; } printf ( " Dynamically allocated memory content : " \ " %s\n  " , mem_allocation ) ; free ( mem_allocation ) ; }
#include <stdio.h> int main ( ) { float x ; x = ( float ) 7 / 5 ; printf ( " %f " , x ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Directory = %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " FILE " , " / usr / bin / example.c " , 50 ) ; printf ( " File = %s\n  " , getenv ( " FILE " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " DIR " , " / usr / bin / example / " , 50 ) ; printf ( " Directory name before modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; putenv ( " DIR = / usr / home / " ) ; printf ( " Directory name after modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <errno.h> #include <stdlib.h> int main ( ) { FILE * fp ; char filename [ 40 ] = " test.txt " ; fp = f open ( filename , " r " ) ; if ( fp = = NULL ) { perror ( " File not found " ) ; printf ( " errno : %d.\n  " , errno ) ; return 1 ; } printf ( " File is found and opened for reading " ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( ) { printf ( " 1st random number : %d\n  " , rand ( ) % 100 ) ; printf ( " 2nd random number : %d\n  " , rand ( ) % 100 ) ; printf ( " 3rd random number : %d\n  " , rand ( ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Suspends the execution of the program " \ " for particular time " ) ; delay ( 5000 ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; int main ( ) { struct student record = { 0 } ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } record ; int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include " structure.h " int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; void func ( struct student record ) ; int main ( ) { struct student record ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; func ( record ) ; return 0 ; } void func ( struct student record ) { printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; struct student record ; void structure_demo ( ) ; int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; structure_demo ( ) ; return 0 ; } void structure_demo ( ) { printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 30 ] ; float percentage ; } ; int main ( ) { int i ; struct student record1 = { 1 , " Raju " , 90.5 } ; struct student * ptr ; ptr = & record1 ; printf ( " Records of STUDENT1 : \n  " ) ; printf ( " Id is : %d \n  " , ptr-> id ) ; printf ( " Name is : %s \n  " , ptr-> name ) ; printf ( " Percentage is : %f \n \n  " , ptr-> percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> typedef struct student { int id ; char name [ 20 ] ; float percentage ; } status ; int main ( ) { status record ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { typedef long long int LLI ; printf ( " Storage size for long long int data " \ " type : %ld \n  " , sizeof ( LLI ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> union student { char name [ 20 ] ; char subject [ 20 ] ; float percentage ; } record ; int main ( ) { strcpy ( record.name , " Raju " ) ; strcpy ( record.subject , " Maths " ) ; record.percentage = 86.50 ; printf ( " Name : %s \n  " , record.name ) ; printf ( " Subject : %s \n  " , record.subject ) ; printf ( " Percentage : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #define height 100 #define number 3.14 #define letter 'A' #define letter_sequence " ABC " #define backslash_char '\?' void main ( ) { printf ( " value of height : %d \n  " , height ) ; printf ( " value of number : %f \n  " , number ) ; printf ( " value of letter : %c \n  " , letter ) ; printf ( " value of letter_sequence : %s \n  " , letter_sequence ) ; printf ( " value of backslash_char : %c \n  " , backslash_char ) ; }
#include <stdio.h> #define RAJU 100 int main ( ) { #ifdef RAJU printf ( " RAJU is defined. So , this line will be added in " \ " this C file\n  " ) ; #else printf ( " RAJU is not defined\n  " ) ; #endif return 0 ; }
#include <stdio.h> #define RAJU 100 int main ( ) { #ifndef SELVA { printf ( " SELVA is not defined. So , now we are going to " \ " define here\n  " ) ; #define SELVA 300 } #else printf ( " SELVA is already defined in the program” ) ; #endif return 0 ; }
#include <stdio.h> #define a 100 int main ( ) { #if ( a = = 100 ) printf ( " This line will be added in this C file since " \ " a \ = 100\n  " ) ; #else printf ( " This line will be added in this C file since " \ " a is not equal to 100\n  " ) ; #endif return 0 ; }
#include <stdio.h> #define height 100 void main ( ) { printf ( " First defined value for height : %d\n  " , height ) ; #undef height #define height 600 printf ( " value of height after undef \ & redefine : %d " , height ) ; }
#include <stdio.h> void function1 ( ) ; void function2 ( ) ; #pragma startup function1 #pragma exit function2 int main ( ) { printf ( " \n  Now we are in main function " ) ; return 0 ; } void function1 ( ) { printf ( " \n Function1 is called before main function call " ) ; } void function2 ( ) { printf ( " \n Function2 is called just before end of " \ " main function " ) ; " }
#include <stdio.h> #include <stdlib.h> int main ( ) { int a = 10 , b = 20 , c = 30 , d = 40 , X ; X = a / b + c * d-c ; printf ( " Value of X = %d\n  " , X ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void Exit1 ( void ) { printf ( " Exit1 function is called\n  " ) ; } void Exit2 ( void ) { printf ( " Exit2 function is called \n  " ) ; } int main ( void ) { atexit ( Exit1 ) ; atexit ( Exit2 ) ; printf ( " This is the end of this program.\n  " ) ; return 0 ; }
#include <stdio.h> #define concatination ( a , b ) a ## b int main ( ) { int ab = 1000 ; printf ( " The concatenated value is : %d \n  " , concatination ( a , b ) ) ; return 0 ; }
#include <stdio.h> void function1 ( ) ; void function2 ( ) ; #pragma startup function1 #pragma exit function2 int main ( ) { printf ( " \n  Now we are in main function " ) ; return 0 ; } void function1 ( ) { printf ( " \n Function1 is called before main function call " ) ; } void function2 ( ) { printf ( " \n Function2 is called just before end of " \ " main function " ) ; " }
#include <stdio.h> #define max 100 int main ( ) { printf ( " max is %d " , max ) ; return 0 ; }
#include <stdio.h> #define INCREMENT ( x ) + + x int main ( ) { char * ptr = " GeeksQuiz " ; int x = 10 ; printf ( " %s " , INCREMENT ( ptr ) ) ; printf ( " %d " , INCREMENT ( x ) ) ; return 0 ; }
#include <stdio.h> #define MULTIPLY ( a , b ) a * b int main ( ) { printf ( " %d " , MULTIPLY ( 2 + 3 , 3 + 5 ) ) ; return 0 ; }
#include <stdio.h> #define MULTIPLY ( a , b ) ( a ) * ( b ) int main ( ) { printf ( " %d " , MULTIPLY ( 2 + 3 , 3 + 5 ) ) ; return 0 ; }
#include <stdio.h> #define merge ( a , b ) a##b int main ( ) { printf ( " %d " , merge ( 12 , 34 ) ) ; }
#include <stdio.h> #define get ( a ) #a int main ( ) { printf ( " %s " , get ( GeeksQuiz ) ) ; }
#include <stdio.h> #define PRINT ( i , limit ) while ( i < limit ) \ { \ printf ( " GeeksQuiz " ) ; \ i + + ; \ } int main ( ) { int i = 0 ; PRINT ( i , 3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current File : %s\n  " , __FILE__ ) ; printf ( " Current Date : %s\n  " , __DATE__ ) ; printf ( " Current Time : %s\n  " , __TIME__ ) ; printf ( " Line Number : %d\n  " , __LINE__ ) ; return 0 ; }
#include <stdio.h> #define LIMIT 100 int main ( ) { printf ( " %d " , LIMIT ) ; #undef LIMIT printf ( " %d " , LIMIT ) ; return 0 ; }
#include <stdio.h> #define LIMIT 1000 int main ( ) { printf ( " %d " , LIMIT ) ; #undef LIMIT int LIMIT = 1001 ; printf ( " \n  %d " , LIMIT ) ; return 0 ; }
#include <stdio.h> float div ( float , float ) ; #define div ( x , y ) x / y int main ( ) { printf ( " %0.2f " , div ( 10.0 , 5.0 ) ) ; #undef div printf ( " \n  %0.2f " , div ( 10.0 , 5.0 ) ) ; return 0 ; } float div ( float x , float y ) { return y / x ; }
#include <stdio.h> int main ( void ) { printf ( " My mobile number " " is 7\a8\a7\a3\a9\a2\a3\a4\a0\a8\a " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello Geeks\b\b\b\bF " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello\n  " ) ; printf ( " GeeksforGeeks " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello \t GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello friends " ) ; printf ( " \v Welcome to GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello fri \r ends " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello\\GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " \' Hello Geeks\n  " ) ; printf ( " \ " Hello Geeks " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " \?\?!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * s = " A\0725 " ; printf ( " %s " , s ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * s = " B\x4a " ; printf ( " %s " , s ) ; return 0 ; }
#include <stdio.h> static int animals = 8 ; const int i = 5 ; int call_me ( void ) { printf ( " %d %d " , i , animals ) ; }
#include <stdio.h> int main ( ) { call_me ( ) ; animals = 2 ; printf ( " %d " , animals ) ; return 0 ; }
#include <stdio.h> #include " animal.cpp " int main ( ) { call_me ( ) ; printf ( " \n  having fun washing! " ) ; animals = 10 ; printf ( " %d\n  " , animals ) ; return 0 ; }
#include <stdio.h> void foo ( ) { int a ; extern int b ; } void bar ( ) { int c ; c = b ; } int main ( ) { foo ( ) ; bar ( ) ; }
#include <stdio.h> int x = 10 ; int z = 5 ; int main ( ) { extern int y ; extern int z ; printf ( " %d %d %d " , x , y , z ) ; } int y = 2 ;
#include <stdio.h> int main ( ) { const int num = 1 ; num = 5 ; return 0 ; }
#include <iostream> int main ( ) { int var = 5 ; constexpr int k = var ; std : : cout < < k ; return 0 ; }
#include <stdio.h> #define var 5 int main ( ) { printf ( " %d " , var ) ; #ifdef var #undef var #define var 10 #endif printf ( " %d " , var ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { static int * p = ( int * ) malloc ( sizeof ( p ) ) ; * p = 10 ; printf ( " %d " , * p ) ; }
#include <stdio.h> #include <stdlib.h> int * p = ( int * ) malloc ( sizeof ( p ) ) ; int main ( void ) { * p = 10 ; printf ( " %d " , * p ) ; }
#include <stdio.h> int fun ( int x ) { return ( x + 5 ) ; } int y = fun ( 20 ) ; int main ( ) { printf ( " %d " , y ) ; }
#include <stdio.h> int main ( ) { char a = 30 , b = 40 , c = 10 ; char d = ( a * b ) / c ; printf ( " %d " , d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = 0xfb ; unsigned char b = 0xfb ; printf ( " a = %c " , a ) ; printf ( " \n b = %c " , b ) ; if ( a = = b ) printf ( " \n Same " ) ; else printf ( " \n Not Same " ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 0.1 ; if ( x = = 0.1 ) printf ( " IF " ) ; else if ( x = = 0.1f ) printf ( " ELSE IF " ) ; else printf ( " ELSE " ) ; }
#include <stdio.h> int main ( ) { float x = 0.1 ; printf ( " %d %d %d " , sizeof ( x ) , sizeof ( 0.1 ) , sizeof ( 0.1f ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 0.5 ; if ( x = = 0.5 ) printf ( " IF " ) ; else if ( x = = 0.5f ) printf ( " ELSE IF " ) ; else printf ( " ELSE " ) ; }
#include <stdio.h> int main ( ) { char ch1 = 125 , ch2 = 10 ; ch1 = ch1 + ch2 ; printf ( " %d\n  " , ch1 ) ; printf ( " %c\n  " , ch1 - ch2 - 4 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char ch = 65 ; cout < < ch < < endl ; cout < < ch + 0 < < endl ; cout < < char ( ch + 32 ) < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; printf ( " x = %d , z = %f " , x , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; printf ( " sum = %d " , sum ) ; return 0 ; }
#include " somefile.h " extern int var ; int main ( void ) { var = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { const volatile int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; int * ptr = & i ; printf ( " * ptr : %d\n  " , * ptr ) ; ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; * ptr = 100 ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; const int * ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; ptr = & j ; printf ( " ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int const i = 10 ; int j = 20 ; int const * ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; ptr = & j ; printf ( " ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int const j = 20 ; int * ptr = & i ; printf ( " * ptr : %d\n  " , * ptr ) ; ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; int * const ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; printf ( " ptr : %d\n  " , * ptr ) ; ptr = & j ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; const int * const ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; ptr = & j ; * ptr = 100 ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string : " ) ; scanf ( " % [ A-Z ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string : " ) ; scanf ( " % [ ^o ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string with spaces : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char str [ 20 ] ; int i ; for ( i = 0 ; i <2 ; i + + ) { scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s\n  " , str ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char str [ 20 ] ; int i ; for ( i = 0 ; i <2 ; i + + ) { scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s\n  " , str ) ; fflush ( stdin ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( void ) { char ch = 'a' ; if ( isprint ( ch ) ) { printf ( " %c is printable character\n  " , ch ) ; } else { printf ( " %c is not printable character\n  " , ch ) ; } if ( iscntrl ( ch ) ) { printf ( " %c is control character\n  " , ch ) ; } else { printf ( " %c is not control character " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int x = 10 ; int y = 15 ; printf ( " %d " , ( x , y ) ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; int y = ( x + + , + + x ) ; printf ( " %d " , y ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y ; y = ( x + + , printf ( " x = %d\n  " , x ) , + + x , printf ( " x = %d\n  " , x ) , x + + ) ; printf ( " y = %d\n  " , y ) ; printf ( " x = %d\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 10 ; printf ( " %d \n  " , sizeof ( x = = y ) ) ; printf ( " %d \n  " , sizeof ( x < y ) ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , y = 10 ; cout < < sizeof ( x = = y ) < < endl ; cout < < sizeof ( x < y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = sizeof ( printf ( " hey " ) ) ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 ; int b = sizeof ( a = 6 ) ; printf ( " a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #define mkstr ( s ) #s int main ( void ) { printf ( mkstr ( geeksforgeeks ) ) ; return 0 ; }
#include <iostream> using namespace std ; #define a 8.3297 int main ( ) { cout < < " Value of a is " < < a < < endl ; return 0 ; }
#include <iostream> using namespace std ; #define MAX ( i , j ) ( ( ( i ) > ( j ) ) ? i : j ) int main ( ) { int a , b ; a = 250 ; b = 25 ; cout < < " The maximum is " < < MAX ( a , b ) < < endl ; return 0 ; }
#include <stdio.h> #define concat ( a , b ) a##b int main ( void ) { int xy = 30 ; printf ( " %d " , concat ( x , y ) ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ } int main ( void ) { int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ; ) ; if ( num & 1 ) MACRO ( num , " Odd " ) ; else MACRO ( num , " Even " ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) do { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ } while ( 0 ) int main ( void ) { int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ; ) ; if ( num & 1 ) MACRO ( num , " Odd " ) ; else MACRO ( num , " Even " ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) ( { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ } ) int main ( void ) { int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ; ) ; if ( num & 1 ) MACRO ( num , " Odd " ) ; else MACRO ( num , " Even " ) ; return 0 ; }
#include <stdio.h> #define val 10 #define floatVal 4.5 #define charVal 'G' int main ( ) { printf ( " Integer Constant : %d\n  " , val ) ; printf ( " Floating point Constant : %f\n  " , floatVal ) ; printf ( " Character Constant : %c\n  " , charVal ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int intVal = 10 ; const float floatVal = 4.14 ; const char charVal = 'A' ; const char stringVal [ 10 ] = " ABC " ; printf ( " Integer constant : %d \n  " , intVal ) ; printf ( " Floating point constant : %f \n  " , floatVal ) ; printf ( " Character constant : %c \n  " , charVal ) ; printf ( " String constant : %s \n  " , stringVal ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ }
#include <stdio.h> #include " myhead.h " int main ( ) { add ( 4 , 6 ) ; multiply ( 5 , 5 ) ; printf ( " BYE!See you Soon " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char generate [ L_tmpnam + 1 ] ; tmpnam ( generate ) ; puts ( generate ) ; return 0 ; }
#include <stdio.h> #define INC ( P ) + + P int main ( ) { char * p = " Geeks " ; int x = 10 ; printf ( " %s " , INC ( p ) ) ; printf ( " %d " , INC ( x ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " %d\n  " , _Generic ( 1.0L , float : 1 , double : 2 , long double : 3 , default : 0 ) ) ; printf ( " %d\n  " , _Generic ( 1L , float : 1 , double : 2 , long double : 3 , default : 0 ) ) ; printf ( " %d\n  " , _Generic ( 1.0L , float : 1 , double : 2 , long double : 3 ) ) ; return 0 ; }
#include <stdio.h> #define geeks ( T ) _Generic ( ( T ) , char : 1 , int : 2 , long : 3 , default : 0 ) int main ( void ) { printf ( " %d\n  " , geeks ( 'A' ) ) ; printf ( " %d " , geeks ( " A " ) ) ; return 0 ; }
#include <stdio.h> typedef unsigned char BYTE ; int main ( ) { BYTE b1 , b2 ; b1 = 'c' ; printf ( " %c " , b1 ) ; return 0 ; }
#include <stdio.h> #define HYD " Hyderabad " int main ( ) { printf ( " %s " , HYD ) ; return 0 ; }
#include <stdlib.h> #include <stdio.h> #include <time.h> #define Size 50 int main ( ) { time_t t ; struct tm * tmp ; char MY_TIME [ Size ] ; time ( & t ; ) ; tmp = localtime ( & t ; ) ; strftime ( MY_TIME , sizeof ( MY_TIME ) , " %x - %I : %M %p " , tmp ) ; printf ( " Formatted date & time : %s\n  " , MY_TIME ) ; return ( 0 ) ; }
#include <stdio.h> #include <unistd.h> int main ( ) { int i ; printf ( " I am EXEC.c called by execvp ( ) " ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { char * args [ ] = { " . / EXEC " , NULL } ; execvp ( args [ 0 ] , args ) ; printf ( " Ending----- " ) ; return 0 ; }
#include <stdio.h> #include <unistd.h> int main ( ) { int i ; printf ( " I am EXEC.c called by execv ( ) " ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { char * args [ ] = { " . / EXEC " , NULL } ; execv ( args [ 0 ] , args ) ; printf ( " Ending----- " ) ; return 0 ; }
#include <stdio.h> void swap ( char * str1 , char * str2 ) { char * temp = str1 ; str1 = str2 ; str2 = temp ; } int main ( ) { char * str1 = " geeks " ; char * str2 = " forgeeks " ; swap ( str1 , str2 ) ; printf ( " str1 is %s , str2 is %s " , str1 , str2 ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> void swap1 ( char * * str1_ptr , char * * str2_ptr ) { char * temp = * str1_ptr ; * str1_ptr = * str2_ptr ; * str2_ptr = temp ; } int main ( ) { char * str1 = " geeks " ; char * str2 = " forgeeks " ; swap1 ( & str1 ; , & str2 ; ) ; printf ( " str1 is %s , str2 is %s " , str1 , str2 ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " Size of arr [ ] %d\n  " , sizeof ( arr ) ) ; printf ( " Size of ptr %d " , sizeof ( ptr ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 } , x = 10 ; int * ptr = & x ; arr = & x ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " Value of first element is %d " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " arr [ 2 ] = %d\n  " , arr [ 2 ] ) ; printf ( " * ( arr + 2 ) = %d\n  " , * ( arr + 2 ) ) ; printf ( " ptr [ 2 ] = %d\n  " , ptr [ 2 ] ) ; printf ( " * ( ptr + 2 ) = %d\n  " , * ( ptr + 2 ) ) ; return 0 ; }
#include <stdio.h> int fun ( int ptr [ ] ) { int x = 10 ; printf ( " sizeof ( ptr ) = %d\n  " , sizeof ( ptr ) ) ; ptr = & x ; printf ( " * ptr = %d " , * ptr ) ; return 0 ; } int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; fun ( arr ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ ] = " GeeksForGeeks " ; char * target = strdup ( source ) ; printf ( " %s " , source ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ ] = " GeeksForGeeks " ; char * target = strndup ( source , 5 ) ; printf ( " %s " , target ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void reverseStr ( string & str ) { int n = str.length ( ) ; for ( int i = 0 ; i < n / 2 ; i + + ) swap ( str [ i ] , str [ n - i - 1 ] ) ; } int main ( ) { string str = " geeksforgeeks " ; reverseStr ( str ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string str = " geeksforgeeks " ; reverse ( str.begin ( ) , str.end ( ) ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void reverse ( string str ) { for ( int i = str.length ( ) -1 ; i> = 0 ; i-- ) cout < < str [ i ] ; } int main ( void ) { string s = " GeeksforGeeks " ; reverse ( s ) ; return ( 0 ) ; }
#include <bits / stdc + + .h> using namespace std ; char * reverseConstString ( char const * str ) { int n = strlen ( str ) ; char * rev = new char [ n + 1 ] ; strcpy ( rev , str ) ; for ( int i = 0 , j = n-1 ; i <j ; i + + , j-- ) swap ( rev [ i ] , rev [ j ] ) ; return rev ; } int main ( void ) { const char * s = " GeeksforGeeks " ; printf ( " %s " , reverseConstString ( s ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char str [ ] = " welcome! to GeeksForGeeks , " ; int i = 0 , count = 0 ; while ( str [ i ] ) { if ( ispunct ( str [ i ] ) ) count + + ; i + + ; } printf ( " Sentence contains %d punctuation " " characters.\n  " , count ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All punctuation characters in C " " programming are : \n  " ) ; for ( i = 0 ; i < = 255 ; + + i ) if ( ispunct ( i ) ! = 0 ) printf ( " %c " , i ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int len = strspn ( " geeks for geeks " , " geek " ) ; printf ( " Length of initial segment matching : %d\n  " , len ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int len = strspn ( " i am " , " xyz " ) ; printf ( " Length of initial segment matching : %d\n  " , len ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; case 3 : printf ( " Choice is 3 " ) ; break ; default : printf ( " Choice other than 1 , 2 and 3 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { float x = 1.1 ; switch ( x ) { case 1.1 : printf ( " Choice is 1 " ) ; break ; default : printf ( " Choice other than 1 , 2 and 3 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1\n  " ) ; case 2 : printf ( " Choice is 2\n  " ) ; case 3 : printf ( " Choice is 3\n  " ) ; default : printf ( " Choice other than 1 , 2 and 3\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1\n  " ) ; case 2 : printf ( " Choice is 2\n  " ) ; case 3 : printf ( " Choice is 3\n  " ) ; case 4 : printf ( " Choice is 4\n  " ) ; break ; default : printf ( " Choice other than 1 , 2 , 3 and 4\n  " ) ; break ; } printf ( " After Switch " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 4 ; switch ( x ) { default : printf ( " Choice other than 1 and 2 " ) ; break ; case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; int arr [ ] = { 1 , 2 , 3 } ; switch ( x ) { case arr [ 0 ] : printf ( " Choice 1\n  " ) ; case arr [ 1 ] : printf ( " Choice 2\n  " ) ; case arr [ 2 ] : printf ( " Choice 3\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 1 ; switch ( x ) { x = x + 1 ; case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; default : printf ( " Choice other than 1 and 2 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 1 ; switch ( x ) { case 2 : printf ( " Choice is 1 " ) ; break ; case 1 + 1 : printf ( " Choice is 2 " ) ; break ; } return 0 ; }
#include <errno.h> #include <stdio.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; return errno ; } printf ( " file exist\n  " ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * p = malloc ( sizeof ( int ) ) ; if ( p = = NULL ) { perror ( " malloc ( ) " ) ; return -1 ; } * p = 10 ; free ( p ) ; return 0 ; }
#include <stdio.h> void myStartupFun ( void ) __attribute__ ( ( constructor ) ) ; void myCleanupFun ( void ) __attribute__ ( ( destructor ) ) ; void myStartupFun ( void ) { printf ( " startup code before main ( ) \n  " ) ; } void myCleanupFun ( void ) { printf ( " cleanup code after main ( ) \n  " ) ; } int main ( void ) { printf ( " hello\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> _Noreturn void view ( ) { return 10 ; } int main ( void ) { printf ( " Ready to begin...\n  " ) ; view ( ) ; printf ( " NOT over till now\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> _Noreturn void show ( ) { printf ( " BYE BYE " ) ; } int main ( void ) { printf ( " Ready to begin...\n  " ) ; show ( ) ; printf ( " NOT over till now\n  " ) ; return 0 ; }
#include “studio.h” int main ( ) { printf ( “ %s” , __func__ ) ; return 0 ; }
#include “stdio.h” void foo ( void ) { printf ( “ %s” , __func__ ) ; } void bar ( void ) { printf ( “ %s” , __func__ ) ; } int main ( ) { foo ( ) ; bar ( ) ; return 0 ; }
#include “stdio.h” int __func__ = 10 ; int main ( ) { printf ( “ %d” , __func__ ) ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " In file : %s , function : %s ( ) and line : %d " , __FILE__ , __func__ , __LINE__ ) ; return 0 ; }
#include <stdio.h> void A ( ) { printf ( " I am function A\n  " ) ; } void B ( void ( * ptr ) ( ) ) { ( * ptr ) ( ) ; } int main ( ) { void ( * ptr ) ( ) = & A ; B ( ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Main " ) ; int fun ( ) { printf ( " fun " ) ; int view ( ) { printf ( " view " ) ; } return 1 ; } view ( ) ; }
#include <stdio.h> int main ( void ) { auto int view ( ) ; view ( ) ; printf ( " Main\n  " ) ; int view ( ) { printf ( " View\n  " ) ; return 1 ; } printf ( " GEEKS " ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char ch = 'G' ; printf ( " %c in lowercase is represented as = %c " , ch , tolower ( ch ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int j = 0 ; char str [ ] = " GEEKSFORGEEKS\n  " ; char ch = 'G' ; char ch ; while ( str [ j ] ) { ch = str [ j ] ; putchar ( tolower ( ch ) ) ; j + + ; } return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; seconds = time ( NULL ) ; printf ( " Seconds since January 1 , 1970 = %ld\n  " , seconds ) ; return ( 0 ) ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; time ( & seconds ; ) ; printf ( " Seconds since January 1 , 1970 = %ld\n  " , seconds ) ; return 0 ; }
#include <stdio.h> void fun ( int a ) { printf ( " Value of a is %d\n  " , a ) ; } int main ( ) { void ( * fun_ptr ) ( int ) = & fun ; ( * fun_ptr ) ( 10 ) ; return 0 ; }
#include <stdio.h> void fun ( int a ) { printf ( " Value of a is %d\n  " , a ) ; } int main ( ) { void ( * fun_ptr ) ( int ) = fun ; fun_ptr ( 10 ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { printf ( " Fun1\n  " ) ; } void fun2 ( ) { printf ( " Fun2\n  " ) ; } void wrapper ( void ( * fun ) ( ) ) { fun ( ) ; } int main ( ) { wrapper ( fun1 ) ; wrapper ( fun2 ) ; return 0 ; }
#include <stdio.h> void use ( int * a , int * b , int * restrict c ) { * a + = * c ; * b + = * c ; } int main ( void ) { int a = 50 , b = 60 , c = 70 ; use ( & a ; , & b ; , & c ; ) ; printf ( " %d %d %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> struct date { unsigned int d ; unsigned int m ; unsigned int y ; } ; int main ( ) { printf ( " Size of date is %d bytes\n  " , sizeof ( struct date ) ) ; struct date dt = { 31 , 12 , 2014 } ; printf ( " Date is %d / %d / %d " , dt.d , dt.m , dt.y ) ; }
#include <stdio.h> struct date { unsigned int d : 5 ; unsigned int m : 4 ; unsigned int y ; } ; int main ( ) { printf ( " Size of date is %d bytes\n  " , sizeof ( struct date ) ) ; struct date dt = { 31 , 12 , 2014 } ; printf ( " Date is %d / %d / %d " , dt.d , dt.m , dt.y ) ; return 0 ; }
#include <stdio.h> struct test1 { unsigned int x : 5 ; unsigned int y : 8 ; } ; struct test2 { unsigned int x : 5 ; unsigned int : 0 ; unsigned int y : 8 ; } ; int main ( ) { printf ( " Size of test1 is %d bytes\n  " , sizeof ( struct test1 ) ) ; printf ( " Size of test2 is %d bytes\n  " , sizeof ( struct test2 ) ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x : 5 ; unsigned int y : 5 ; unsigned int z ; } ; int main ( ) { struct test t ; printf ( " Address of t.x is %p " , & t.x ; ) ; printf ( " Address of t.z is %p " , & t.z ; ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x : 2 ; unsigned int y : 2 ; unsigned int z : 2 ; } ; int main ( ) { struct test t ; t.x = 5 ; printf ( " %d " , t.x ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x ; unsigned int y : 33 ; unsigned int z ; } ; int main ( ) { printf ( " %d " , sizeof ( struct test ) ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x ; long int y : 33 ; unsigned int z ; } ; int main ( ) { struct test t ; unsigned int * ptr1 = & t.x ; unsigned int * ptr2 = & t.z ; printf ( " %d " , ptr2 - ptr1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * p = ( int [ ] ) { 2 , 4 , 6 } ; printf ( " %d %d %d " , p [ 0 ] , p [ 1 ] , p [ 2 ] ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; void printPoint ( struct Point p ) { printf ( " %d , %d " , p.x , p.y ) ; } int main ( ) { printPoint ( ( struct Point ) { 2 , 3 } ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * ptr = ( int * ) malloc ( 10 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * ptr = ( int * ) malloc ( 10 ) ; realloc ( ptr , 0 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = fopen ( " test.txt " , " r " ) ; int ch = getc ( fp ) ; while ( ch ! = EOF ) { putchar ( ch ) ; ch = getc ( fp ) ; } if ( feof ( fp ) ) printf ( " \n  End of file reached. " ) ; else printf ( " \n  Something went wrong. " ) ; fclose ( fp ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; fpos_t position ; fp = fopen ( " myfile.txt " , " w + " ) ; fgetpos ( fp , & position ; ) ; fputs ( " HelloWorld! " , fp ) ; fsetpos ( fp , & position ; ) ; fputs ( " geeksforgeeks " , fp ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char str [ ] = " Hello GeeksforGeeks " ; int i = 0 ; FILE * tmp = tmpfile ( ) ; if ( tmp = = NULL ) { puts ( " Unable to create temp file " ) ; return 0 ; } puts ( " Temporary file is created\n  " ) ; while ( str [ i ] ! = '\0' ) { fputc ( str [ i ] , tmp ) ; i + + ; } rewind ( tmp ) ; while ( !feof ( tmp ) ) putchar ( fgetc ( tmp ) ) ; }
#include <stdio.h> int main ( ) { FILE * fp = fopen ( " test.txt " , " r " ) ; if ( fp = = NULL ) return 0 ; do { char c = fgetc ( fp ) ; if ( feof ( fp ) ) break ; printf ( " %c " , c ) ; } while ( 1 ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <pthread.h> int main ( ) { size_t stksize ; pthread_attr_t atr ; pthread_attr_getstacksize ( & atr ; , & stksize ; ) ; printf ( " Current stack size - > %d\n  " , stksize ) ; pthread_attr_setstacksize ( & atr ; , 320000034 ) ; pthread_attr_getstacksize ( & atr ; , & stksize ; ) ; printf ( " New stack size-> %d\n  " , stksize ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Welcome to GeeksforGeeks " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Welcome to GeeksforGeeks " ) ; return 0 ; }
#include <iostream> using namespace std ; int global_Var = 42 ; void changePointerValue ( int * pp ) { pp = & global ; _Var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Passing Pointer to function : " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; changePointerValue ( ptr_to_var ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; int global_var = 42 ; void changePointerValue ( int * * ptr_ptr ) { * ptr_ptr = & global ; _var ; } int main ( ) { int var = 23 ; int * pointer_to_var = & var ; cout < < " Passing a pointer to a pointer to function " < < endl ; cout < < " Before : " < < * pointer_to_var < < endl ; changePointerValue ( & pointer ; _to_var ) ; cout < < " After : " < < * pointer_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; void fun ( int & x ; ) { x = 20 ; } int main ( ) { int x = 10 ; fun ( x ) ; cout < < " New value of x is " < <x ; return 0 ; }
#include <iostream> using namespace std ; int gobal_var = 42 ; void changeReferenceValue ( int * & pp ) { pp = & gobal ; _var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Passing a Reference to a pointer to function " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; changeReferenceValue ( ptr_to_var ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; int global_var = 42 ; int * returnPointerValue ( ) { return & global ; _var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Return a pointer from a function " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; ptr_to_var = returnPointerValue ( ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; int global_var = 42 ; int & ReturnReference ( ) { return global_var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Returing a Reference " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; ptr_to_var = & ReturnReference ; ( ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 50 ] = " geeksforgeeks " ; printf ( " The given string is = %s\n  " , str ) ; printf ( " After reversing string is = %s " , strrev ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 50 ] = " 123456789 " ; printf ( " The given string is = %s\n  " , str ) ; printf ( " After reversing string is = %s " , strrev ( str ) ) ; return 0 ; }
#include <stdio.h> struct s { int i ; char ch ; double d ; } ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> #pragma pack ( 1 ) struct s { int i ; char ch ; double d ; } ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> struct s { int i ; char ch ; double d ; } __attribute__ ( ( packed ) ) ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> void func1 ( ) ; void func2 ( ) ; #pragma startup func1 #pragma exit func2 void func1 ( ) { printf ( " Inside func1 ( ) \n  " ) ; } void func2 ( ) { printf ( " Inside func2 ( ) \n  " ) ; } int main ( ) { printf ( " Inside main ( ) \n  " ) ; return 0 ; }
#include <stdio.h> void func1 ( ) ; void func2 ( ) ; void __attribute__ ( ( constructor ) ) func1 ( ) ; void __attribute__ ( ( destructor ) ) func2 ( ) ; void func1 ( ) { printf ( " Inside func1 ( ) \n  " ) ; } void func2 ( ) { printf ( " Inside func2 ( ) \n  " ) ; } int main ( ) { printf ( " Inside main ( ) \n  " ) ; return 0 ; }
#include <stdio.h> #pragma warn -rvl #pragma warn -par #pragma warn -rch int show ( int x ) { printf ( " GEEKSFORGEEKS " ) ; } int main ( ) { show ( 10 ) ; return 0 ; }
#include <stdio.h> #pragma GCC poison printf int main ( ) { int a = 10 ; if ( a = = 10 ) { printf ( " GEEKSFORGEEKS " ) ; } else printf ( " bye " ) ; return 0 ; }
#include <stdio.h> inline int foo ( ) { return 2 ; } int main ( ) { int ret ; ret = foo ( ) ; printf ( " Output is : %d\n  " , ret ) ; return 0 ; }
#include <stdio.h> static inline int foo ( ) { return 2 ; } int main ( ) { int ret ; ret = foo ( ) ; printf ( " Output is : %d\n  " , ret ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int var = 10 ; var = 15 ; printf ( " var = %d\n  " , var ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { const int var = 10 ; int * ptr = & var ; * ptr = 12 ; printf ( " var = %d\n  " , var ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { time_t start , end ; time ( & start ; ) ; ios_base : : sync_with_stdio ( false ) ; fun ( ) ; time ( & end ; ) ; double time_taken = double ( end - start ) ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 5 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { clock_t start , end ; start = clock ( ) ; fun ( ) ; end = clock ( ) ; double time_taken = double ( end - start ) / double ( CLOCKS_PER_SEC ) ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 5 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " enter something\n  " ) ; scanf ( " %s " , str ) ; printf ( " you entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " enter something\n  " ) ; gets ( str ) ; printf ( " you entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " Enter something\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char ch [ ] = { 'g' , 'e' , 'e' , 'k' , 's' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " geeks " ; printf ( " Length of string is : %d " , strlen ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " geeks " ; printf ( " Length of string is : %d " , strlen ( str ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( x + + ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( int [ x + + ] ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( int [ + + x ] ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> #define x1 1 #define x2 x1 , x1 #define x4 x2 , x2 #define x8 x4 , x4 #define x16 x8 , x8 #define x32 x16 , x16 int main ( void ) { int num [ ] = { x32 , x8 , x4 , x1 } ; int size = sizeof ( num ) / sizeof ( int ) ; printf ( " The size of the array is %d\n  " , size ) ; printf ( " The value of element in the array at index 5 is %d " , num [ 4 ] ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int size = 6 ; int val = 1 ; int arr [ size ] ; int i ; for ( i = 0 ; i < size ; i + + ) { arr [ i ] = val ; } printf ( " The array is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char ch ; ch = 'g' ; printf ( " %c in uppercase is represented as %c " , ch , toupper ( ch ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int j = 0 ; char str [ ] = " geekforgeeks\n  " ; char ch ; while ( str [ j ] ) { ch = str [ j ] ; putchar ( toupper ( ch ) ) ; j + + ; } return 0 ; }
#include <iostream> void init ( int a = 1 , int b = 2 , int c = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a = 1 , int b = 2 , int c = 3 ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> void init ( int a = 1 , int b = 2 , int c = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a , int b , int c ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> void init ( int = 1 , int = 2 , int = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a , int b , int c ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> using namespace std ; int main ( ) { float var = 37.66666 ; printf ( " %.2f " , var ) ; return 0 ; }
#include <iostream> using namespace std ; float round ( float var ) { float value = ( int ) ( var * 100 + .5 ) ; return ( float ) value / 100 ; } int main ( ) { float var = 37.66666 ; cout < < round ( var ) ; return 0 ; }
#include <iostream> using namespace std ; float round ( float var ) { char str [ 40 ] ; sprintf ( str , " %.2f " , var ) ; sscanf ( str , " %f " , & var ; ) ; return var ; } int main ( ) { float var = 37.66666 ; cout < < round ( var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 012 ; printf ( " %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " 31\01267 " ; printf ( " %s " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " 31\12367 " ; printf ( " %s " , str ) ; printf ( " \n  " ) ; char str2 [ ] = " 11\77967 " ; printf ( " %s " , str2 ) ; return 0 ; }
#include <stdbool.h> int main ( ) { bool arr [ 2 ] = { true , false } ; return 0 ; }
#include <stdio.h> int fun ( ) { static int count = 0 ; count + + ; return count ; } int main ( ) { printf ( " %d " , fun ( ) ) ; printf ( " %d " , fun ( ) ) ; return 0 ; }
#include <stdio.h> int fun ( ) { int count = 0 ; count + + ; return count ; } int main ( ) { printf ( " %d " , fun ( ) ) ; printf ( " %d " , fun ( ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { static int x ; int y ; printf ( " %d \n  %d " , x , y ) ; }
#include <stdio.h> int initializer ( void ) { return 50 ; } int main ( ) { static int i = initializer ( ) ; printf ( " value of i = %d " , i ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #define getName ( var ) #var int main ( ) { int myVar ; printf ( " %s " , getName ( myVar ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char buffer [ 50 ] ; int a = 10 , b = 20 , c ; c = a + b ; sprintf ( buffer , " Sum of %d and %d is %d " , a , b , c ) ; printf ( " %s " , buffer ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; printf ( " Value of a is %d\n  " , a ) ; a + = 10 ; printf ( " Value of a is %d\n  " , a ) ; a - = 10 ; printf ( " Value of a is %d\n  " , a ) ; a * = 10 ; printf ( " Value of a is %d\n  " , a ) ; a / = 10 ; printf ( " Value of a is %d\n  " , a ) ; return 0 ; }
#include <stdio.h> enum week { Mon , Tue , Wed , Thur , Fri , Sat , Sun } ; int main ( ) { enum week day ; day = Wed ; printf ( " %d " , day ) ; return 0 ; }
#include <stdio.h> enum year { Jan , Feb , Mar , Apr , May , Jun , Jul , Aug , Sep , Oct , Nov , Dec } ; int main ( ) { int i ; for ( i = Jan ; i < = Dec ; i + + ) printf ( " %d " , i ) ; return 0 ; }
#include <stdio.h> enum State { Working = 1 , Failed = 0 , Freezed = 0 } ; int main ( ) { printf ( " %d , %d , %d " , Working , Failed , Freezed ) ; return 0 ; }
#include <stdio.h> enum day { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum day d = thursday ; printf ( " The day number stored in d is %d " , d ) ; return 0 ; }
#include <stdio.h> enum day { sunday = 1 , monday , tuesday = 5 , wednesday , thursday = 10 , friday , saturday } ; int main ( ) { printf ( " %d %d %d %d %d %d %d " , sunday , monday , tuesday , wednesday , thursday , friday , saturday ) ; return 0 ; }
#include <stdio.h> enum day { sunday = 1 , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum day d = thursday ; printf ( " The day number stored in d is %d " , d ) ; return 0 ; }
#include <stdio.h> enum State { WORKING = 0 , FAILED , FREEZED } ; enum State currState = 2 ; enum State FindState ( ) { return currState ; } int main ( ) { ( FindState ( ) = = WORKING ) ? printf ( " WORKING " ) : printf ( " NOT WORKING " ) ; return 0 ; }
#include <iostream> using namespace std ; constexpr long int fib ( int n ) { return ( n < = 1 ) ? n : fib ( n-1 ) + fib ( n-2 ) ; } int main ( ) { const long int res = fib ( 30 ) ; cout < < res ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Rectangle { int _h , _w ; public : constexpr Rectangle ( int h , int w ) : _h ( h ) , _w ( w ) { } constexpr int getArea ( ) { return _h * _w ; } } ; int main ( ) { constexpr Rectangle obj ( 10 , 20 ) ; cout < < obj.getArea ( ) ; return 0 ; }
#include <cerrno> #include <clocale> #include <cmath> #include <cstring> #include <iostream> using namespace std ; int main ( ) { double not_valid = log ( -1.0 ) ; if ( errno = = EDOM ) { cout < < " Value of errno is : " < < errno < < '\n ' ; cout < < " log ( -1 ) is not valid : " < < strerror ( errno ) < < '\n ' ; } return 0 ; }
#include <cerrno> #include <clocale> #include <cmath> #include <cstring> #include <iostream> using namespace std ; int main ( ) { double not_valid = sqrt ( -100 ) ; if ( errno = = EDOM ) { cout < < " Value of errno is : " < < errno < < '\n ' ; cout < < " -100 is not valid argument for square " < < " root function : " < < strerror ( errno ) < < '\n ' ; } return 0 ; }
#include " stdio.h " int main ( ) { printf ( " %d %d %d " , sizeof ( float ) , sizeof ( double ) , sizeof ( long double ) ) ; return 0 ; }
#include " stdio.h " #define PI 3.14 int main ( ) { printf ( " %d " , sizeof ( PI ) ) ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " %d %d " , sizeof ( 3.14F ) , sizeof ( 3.14L ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float b = 6.412355 ; int a = 3 ; printf ( " %. * f\n  " , a , b ) ; a = 5 ; printf ( " %. * f\n  " , a , b ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; cout < < " x = " < < x < < endl < < " y = " < < y < < endl < < " z = " < < z < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; cout < < " Sum = " < < sum ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { float f = 3.5 ; int b = static_cast <int> ( f ) ; cout < < b ; }
#include <stdio.h> #include <stdlib.h> a , b , arr [ 3 ] ; int main ( i ) { printf ( " a = %d , b = %d\n \n  " , a , b ) ; printf ( " arr [ 0 ] = %d , \n arr [ 1 ] = %d , \n arr [ 2 ] = %d , " " \n \n  " , arr [ 0 ] , arr [ 1 ] , arr [ 2 ] ) ; printf ( " i = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 } ; int i ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " arr [ %d ] = %d\n  " , i , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char a = 278 ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = -129 ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 100000 ] ; int i , number_of_digits ; scanf ( " %d " , & number ; _of_digits ) ; for ( i = 0 ; i < number_of_digits ; i + + ) { scanf ( " %1d " , & a ; [ i ] ) ; } for ( i = 0 ; i < number_of_digits ; i + + ) printf ( " %d " , a [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 100000 ] ; int i , count ; scanf ( " %d " , & count ; ) ; for ( i = 0 ; i < count ; i + + ) { scanf ( " %3d " , & a ; [ i ] ) ; } for ( i = 0 ; i < count ; i + + ) printf ( " %d " , a [ i ] ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( float s , float t ) { cout < < " Function with float called " ; } void test ( int s , int t ) { cout < < " Function with int called " ; } int main ( ) { test ( 3.5 , 5.6 ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( float s , float t ) { cout < < " Function with float called " ; } void test ( int s , int t ) { cout < < " Function with int called " ; } int main ( ) { test ( 3.5f , 5.6f ) ; return 0 ; }
#include <stdio.h> #define MAX 100 int main ( ) { float x = 123.4567 ; char buf [ MAX ] ; gcvt ( x , 6 , buf ) ; printf ( " buffer is : %s\n  " , buf ) ; return 0 ; }
#include <stdio.h> void divide ( float x , float y ) { char buffer [ 20 ] ; float z ; z = x / y ; printf ( " %f " , z ) ; gcvt ( x / y , 10 , buffer ) ; printf ( " \n  %s\n  " , buffer ) ; } int main ( ) { float x = 2.0f , y = 3.0f ; divide ( x , y ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str1 , string str2 ) { string : : size_type ch = str1.find_first_not_of ( str2 ) ; cout < < " First unmatched character : " ; cout < < str1 [ ch ] ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; cout < < " String to be looked in : " < < str2 < < endl ; find_first_not_ofDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str1 , string str2 ) { string : : size_type ch = str1.find_first_not_of ( str2 , 3 ) ; cout < < " First unmatched character : " ; cout < < str1 [ ch ] ; } int main ( ) { string str1 ( " geeKsforgeeks " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; cout < < " String to be looked in : " < < str2 < < endl ; find_first_not_ofDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( " geeksforgeeks " ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( " geeksForgeeks " , 5 ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( 'G' ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( 'G' , 6 ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( " svmnist " , 4 , 3 ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'x' ; } catch ( int x ) { cout < < " Caught int " < < x ; } catch ( ... ) { cout < < " Defaule catch block " ; } }
#include <iostream> using namespace std ; class MyExcept1 { } ; class MyExcept2 { public : MyExcept2 ( const MyExcept1 & e ; ) { cout < < " Conversion constructor called " ; } } ; int main ( ) { try { MyExcept1 myexp1 ; throw myexp1 ; } catch ( MyExcept2 e2 ) { cout < < " Caught MyExcept2 " < < endl ; } catch ( ... ) { cout < < " Defaule catch block " < < endl ; } return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 , * fp2 ; char c ; fp1 = fopen ( " geeky.txt " , " r " ) ; fp2 = fopen ( " outgeeky.txt " , " w " ) ; fscanf ( fp1 , " %c " , & c ; ) ; fprintf ( fp2 , " %c " , c ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int fun ( int N ) { cout < < " fun ( int ) " ; } int fun ( char * s ) { cout < < " fun ( char * ) " ; } int main ( ) { fun ( NULL ) ; }
#include <stdio.h> int main ( ) { int x = NULL ; }
#include <stdio.h> int main ( ) { int x = nullptr ; }
#include <iostream> using namespace std ; int main ( ) { int * ptr = nullptr ; if ( ptr ) { cout < < " true " ; } else { cout < < " false " ; } }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { nullptr_t np1 , np2 ; if ( np1 > = np2 ) cout < < " can compare " < < endl ; else cout < < " can not compare " < < endl ; char * x = np1 ; if ( x = = nullptr ) cout < < " x is null " < < endl ; else cout < < " x is not null " < < endl ; return 0 ; }
#include <iostream> #define LIMIT 5 int main ( ) { for ( int i = 0 ; i < LIMIT ; i + + ) { std : : cout < < i < < " \n  " ; } return 0 ; }
#include <iostream> #define AREA ( l , b ) ( l * b ) int main ( ) { int l1 = 10 , l2 = 5 , area ; area = AREA ( l1 , l2 ) ; std : : cout < < " Area of rectangle is : " < < area ; return 0 ; }
#include <stdio.h> int getSum ( int n ) { int sum = 0 ; while ( n ! = 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; } int main ( ) { int n = 687 ; printf ( " %d " , getSum ( n ) ) ; return 0 ; }
#include <stdio.h> int sum_of_digit ( int n ) { if ( n = = 0 ) return 0 ; return ( n % 10 + sum_of_digit ( n / 10 ) ) ; } int main ( ) { int num = 12345 ; int result = sum_of_digit ( num ) ; printf ( " Sum of digits in %d is %d\n  " , num , result ) ; return 0 ; }
#include <iostream> using namespace std ; template <int n> struct funStruct { enum { val = 2 * funStruct <n-1> : : val } ; } ; template <> struct funStruct <0> { enum { val = 1 } ; } ; int main ( ) { cout < < funStruct <8> : : val < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Final ; class MakeFinal { private : MakeFinal ( ) { cout < < " MakFinal constructor " < < endl ; } friend class Final ; } ; class Final : virtual MakeFinal { public : Final ( ) { cout < < " Final constructor " < < endl ; } } ; class Derived : public Final { public : Derived ( ) { cout < < " Derived constructor " < < endl ; } } ; int main ( int argc , char * argv [ ] ) { Derived d ; return 0 ; }
#include <iostream> using namespace std ; class Final ; class MakeFinal { private : MakeFinal ( ) { cout < < " MakeFinal constructor " < < endl ; } friend class Final ; } ; class Final : virtual MakeFinal { public : Final ( ) { cout < < " Final constructor " < < endl ; } } ; int main ( int argc , char * argv [ ] ) { Final f ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { cout < < sizeof ( Empty ) ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { Empty a , b ; if ( & a ; = = & b ; ) cout < < " impossible " < < endl ; else cout < < " Fine " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { Empty * p1 = new Empty ; Empty * p2 = new Empty ; if ( p1 = = p2 ) cout < < " impossible " < < endl ; else cout < < " Fine " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; class Derived : Empty { int a ; } ; int main ( ) { cout < < sizeof ( Derived ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'G' ; putchar ( ch ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch = '1' ; for ( ch = '1' ; ch < = '9' ; ch + + ) putchar ( ch ) ; return ( 0 ) ; }
#include & lt ; iostream & gt ; using namespace std ; int main ( ) { cout & lt ; < " Hello World " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int a = 5 , b = 10 , sum ; sum = a + b ; cout < < sum ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int a = 5 , b = 10 ; if ( a > b ) cout < < a ; else cout < < b ; return 0 ; }
#include & lt ; iostream & gt ; using namespace std ; int main ( ) { cout & lt ; < " Hello World " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t dest [ 30 ] ; wchar_t src [ 30 ] ; wcscpy ( dest , L " Geekforgeeks " ) ; wcscpy ( src , L " is the best " ) ; wcscat ( dest , src ) ; wprintf ( L " %ls\n  " , dest ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d\n  " , sizeof ( char ) ) ; printf ( " %d\n  " , sizeof ( int ) ) ; printf ( " %d\n  " , sizeof ( float ) ) ; printf ( " %d " , sizeof ( double ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; double d = 10.21 ; printf ( " %d " , sizeof ( a + d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 7 , 98 , 0 , 12 , 35 , 99 , 14 } ; printf ( " Number of elements : %d " , sizeof ( arr ) / sizeof ( arr [ 0 ] ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( 'a' ) ) ; return 0 ; }
#include <stdio.h> int T ; int main ( ) { struct T { double x ; } ; printf ( " %d " , sizeof ( T ) ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x , y , z ; x = 1 ; y = 0 ; z = 10 ; if ( ( x or y ) and y ) { cout < < " Hi , we are in if. " ; } else if ( not y or x not_eq z ) { cout < < " Hi , we are in else if. " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x , y ; x = 1 ; y = compl x ; cout < < y ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( void ) { char password [ 55 ] ; printf ( " password : \n  " ) ; int p = 0 ; do { password [ p ] = getch ( ) ; if ( password [ p ] ! = '\r' ) { printf ( " * " ) ; } p + + ; } while ( password [ p-1 ] ! = '\r' ) ; password [ p-1 ] = '\0' ; printf ( " \n You have entered %s as password. " , password ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { foo ( ) ; } int foo ( ) { printf ( " Hello " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int const j = 20 ; int * ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { void * vptr ; int * iptr = vptr ; return 0 ; }
#include <stdio.h> int main ( ) { const int a ; return 0 ; }
#include <stdio.h> int main ( void ) { int new = 5 ; printf ( " %d " , new ) ; }
#include <stdio.h> int main ( ) { char * c = 333 ; printf ( " c = %u " , c ) ; return 0 ; }
#include <stdio.h> void main ( ) { printf ( " Hello World " ) ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int x = 250 ; int y = 250 ; int start_angle = 155 ; int end_angle = 300 ; int radius = 100 ; initgraph ( & gd ; , & gm ; , " " ) ; arc ( x , y , start_angle , end_angle , radius ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void WideString ( const wchar_t * ws , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswscanf ( ws , format , arg ) ; va_end ( arg ) ; } int main ( ) { int value ; wchar_t wideS [ ] = L " 100 websites of GeekforGeeks " ; WideString ( wideS , L " %d %ls " , & value ; , wideS ) ; wprintf ( L " Best : %ls\n Quantity : %d\n  " , wideS , value ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t rs1 = 'S' ; wchar_t rs2 = 's' ; if ( iswupper ( rs1 ) ) wcout < < rs1 < < " is a uppercase character " ; else wcout < < rs1 < < " is not a uppercase character " ; wcout < < endl ; if ( iswupper ( rs2 ) ) wcout < < rs2 < < " is a uppercase character " ; else wcout < < rs2 < < " is not a uppercase character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t rs1 = 'R' ; wchar_t rs2 = '@' ; if ( iswupper ( rs1 ) ) wcout < < rs1 < < " is a uppercase character " ; else wcout < < rs1 < < " is not a uppercase character " ; wcout < < endl ; if ( iswupper ( rs2 ) ) wcout < < rs2 < < " is a uppercase character " ; else wcout < < rs2 < < " is not a uppercase character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.UTF-8 " ) ; wchar_t first = L'\u05d0' , last = L'\u05ea' ; wcout < < L " All Hebrew Alphabets : " ; for ( wchar_t i = first ; i < = last ; i + + ) { putwchar ( i ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc ; wchar_t first = 'A' , last = 'Z' ; wcout < < L " All English Alphabets : " ; for ( wc = first ; wc < = last ; + + wc ) { putwchar ( wc ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = 'a' ; wchar_t ch2 = 'A' ; if ( iswlower ( ch1 ) ) wcout < < ch1 < < " is a lowercase character " ; else wcout < < ch1 < < " is not a lowercase character " ; wcout < < endl ; if ( iswlower ( ch2 ) ) wcout < < ch2 < < " is a lowercase character " ; else wcout < < ch2 < < " is not a lowercase character " ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = 'q' ; wchar_t ch2 = '?' ; if ( iswlower ( ch1 ) ) wcout < < ch1 < < " is a lowercase character " ; else wcout < < ch1 < < " is not a lowercase character " ; wcout < < endl ; if ( iswlower ( ch2 ) ) wcout < < ch2 < < " is a lowercase character " ; else wcout < < ch2 < < " is not a lowercase character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ch1 = L'\n ' ; if ( iswcntrl ( ch1 ) ) wcout < < " It is a control Character " ; else wcout < < " It is not a control Character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ch1 = L'@' ; if ( iswcntrl ( ch1 ) ) wcout < < " It is a control Character " ; else wcout < < " It is not a control Character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 999gfg " ; wchar_t * endString ; unsigned long value = wcstoul ( string , & endString ; , 36 ) ; wcout < < L " String value given is -> " < < string < < endl ; wcout < < L " Unsigned Long Int value will be -> " < < value < < endl ; wcout < < L " End String will be-> " < < endString < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str1 [ ] = L " geekforgeeks " ; ; wchar_t str2 [ ] = L " geekforgeeks " ; int print = wmemcmp ( str1 , str2 , 12 ) ; wprintf ( L " wmemcmp comparison : %ls\n  " , print ? L " not equal " : L " equal " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str1 [ ] = L " geekforgeeks " ; ; wchar_t str2 [ ] = L " geekforgeeks " ; int first = wcsncmp ( str1 , str2 , 20 ) ; int second = wmemcmp ( str1 , str2 , 20 ) ; wprintf ( L " wcsncmp comparison : %ls\n  " , first ? L " not equal " : L " equal " ) ; wprintf ( L " wmemcmp comparison : %ls\n  " , second ? L " not equal " : L " equal " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void find ( wchar_t * ws , size_t len , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswprintf ( ws , len , format , arg ) ; va_end ( arg ) ; } int main ( ) { wchar_t ws [ 60 ] ; wchar_t str [ ] = L " \u0025 \u0026 \u0027 \u0028 \u0029 " ; find ( ws , 60 , L " Some Latin letters : %ls\n  " , str ) ; wprintf ( L " %ls " , ws ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void find ( wchar_t * ws , size_t len , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswprintf ( ws , len , format , arg ) ; va_end ( arg ) ; } int main ( ) { wchar_t str [ ] = L " Geek for geeks " ; wchar_t ws [ 20 ] ; find ( ws , 20 , L " GFG is : %ls\n  " , str ) ; wprintf ( L " %ls " , ws ) ; return 0 ; }
#include <stdio.h> #include <graphics.h> #include <dos.h> void printMsg ( ) { int gdriver = DETECT , gmode , i ; initgraph ( & gdriver ; , & gmode ; , " C : \\Turboc3\\BGI " ) ; for ( i = 3 ; i <7 ; i + + ) { setcolor ( i ) ; settextstyle ( i , 0 , i ) ; outtextxy ( 100 , 20 * i , " Geeks " ) ; delay ( 500 ) ; } delay ( 2000 ) ; } int main ( ) { printMsg ( ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { div_t result1 = div ( 100 , 6 ) ; cout < < " Quotient of 100 / 6 = " < < result1.quot < < endl ; cout < < " Remainder of 100 / 6 = " < < result1.rem < < endl ; ldiv_t result2 = div ( 19237012L , 251L ) ; cout < < " Quotient of 19237012L / 251L = " < < result2.quot < < endl ; cout < < " Remainder of 19237012L / 251L = " < < result2.rem < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double a = 3.4 , b = 2.1 , c = 4.2 ; double ans = fma ( a , b , c ) ; cout < < " fma ( a , b , c ) = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double b = 2.1 , c = 4.2 ; long double lda = 9.4 , answer ; answer = fma ( lda , c , b ) ; cout < < " fma ( lda , c , b ) = " < < answer < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char filename [ 100 ] ; cout < < " Enter file name to compile " ; cin.getline ( filename , 100 ) ; string str = " gcc " ; str = str + " -o a.out " + filename ; const char * command = str.c_str ( ) ; cout < < " Compiling file using " < < command < < endl ; system ( command ) ; cout < < " \n Running file " ; system ( " . / a.out " ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cout < < " Hello World! " < < endl ; system ( " pause " ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { cout < < " Hello World! " < < endl ; cin.get ( ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { if ( system ( NULL ) ) cout < < " Command processor exists " ; else cout < < " Command processor doesn't exists " ; return 0 ; }
#include <stdio.h> int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( void ) { int a = 10 , b = 20 ; int m = max ( a , b ) ; printf ( " m is %d " , m ) ; return 0 ; }
#include <stdio.h> void fun ( int x ) { x = 30 ; } int main ( void ) { int x = 20 ; fun ( x ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; s [ 0 ] = 'j' ; printf ( " \n  %s " , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * s = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { const char * s = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = '?' ; wchar_t ch2 = '3' ; if ( iswdigit ( ch1 ) ) wcout < < ch1 < < " is a digit " ; else wcout < < ch1 < < " is not a digit " ; wcout < < endl ; if ( iswdigit ( ch2 ) ) wcout < < ch2 < < " is a digit " ; else wcout < < ch2 < < " is not a digit " ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = '1' ; wchar_t ch2 = 'q' ; if ( iswdigit ( ch1 ) ) wcout < < ch1 < < " is a digit " ; else wcout < < ch1 < < " is not a digit " ; wcout < < endl ; if ( iswdigit ( ch2 ) ) wcout < < ch2 < < " is a digit " ; else wcout < < ch2 < < " is not a digit " ; return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char str [ ] = " 11.03e 0mn " ; char * end ; double number ; number = strtod ( str , & end ; ) ; cout < < " number = " < < str < < endl ; cout < < " double = " < < number < < endl ; cout < < " end string = " < < end < < endl ; return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char str [ ] = " 4.06 " ; char * end ; double number ; number = strtod ( str , & end ; ) ; cout < < " number = " < < str < < endl ; cout < < " double = " < < number < < endl ; if ( * end ) { cout < < end ; } else { cout < < " null " ; } return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char * end ; cout < < " 99.99 " < < " to double = " < < strtod ( " 19.99 " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; cout < < " xyz1.80 " < < " to double = " < < strtod ( " xyz1.80 " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; public : void setX ( int x ) { this-> x = x ; } void print ( ) { cout < < " x = " < < x < < endl ; } } ; int main ( ) { Test obj ; int x = 20 ; obj.setX ( x ) ; obj.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; public : Test ( int x = 0 ) { this-> x = x ; } void change ( Test * t ) { this = t ; } void print ( ) { cout < < " x = " < < x < < endl ; } } ; int main ( ) { Test obj ( 5 ) ; Test * ptr = new Test ( 10 ) ; obj.change ( ptr ) ; obj.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; int y ; public : Test ( int x = 0 , int y = 0 ) { this-> x = x ; this-> y = y ; } static void fun1 ( ) { cout < < " Inside fun1 ( ) " ; } static void fun2 ( ) { cout < < " Inside fun2 ( ) " ; this-> fun1 ( ) ; } } ; int main ( ) { Test obj ; obj.fun2 ( ) ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar = { 1 , 2 , 3 , 4 , 5 , 6 } ; cout < < " First element of array is : " ; cout < < ar.front ( ) < < endl ; cout < < " Last element of array is : " ; cout < < ar.back ( ) < < endl ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar = { 1 , 2 , 3 , 4 , 5 , 6 } ; cout < < " The number of array elements is : " ; cout < < ar.size ( ) < < endl ; cout < < " Maximum elements array can hold is : " ; cout < < ar.max_size ( ) < < endl ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar ; array <int , 0> ar1 ; ar1.empty ( ) ? cout < < " Array empty " : cout < < " Array not empty " ; cout < < endl ; ar.fill ( 0 ) ; cout < < " Array after filling operation is : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar [ i ] < < " " ; return 0 ; }
#include <iostream> using namespace std ; void findSize ( int arr [ ] ) { cout < < sizeof ( arr ) < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; void findSize ( int ( & arr ; ) [ 10 ] ) { cout < < sizeof ( arr ) < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; template <size_t n> void findSize ( int ( & arr ; ) [ n ] ) { cout < < sizeof ( int ) * n < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; template <typename T , size_t n> void findSize ( T ( & arr ; ) [ n ] ) { cout < < sizeof ( T ) * n < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; float f [ 20 ] ; cout < < sizeof ( f ) < < " " ; findSize ( f ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { int * arr = ( int * ) malloc ( sizeof ( float ) * 20 ) ; return 0 ; }
#include <string.h> #include <iostream> using namespace std ; int main ( ) { string str = " GeeksforGeeks " ; cout < < str.size ( ) < < endl ; cout < < str.length ( ) < < endl ; cout < < strlen ( str.c_str ( ) ) < < endl ; int i = 0 ; while ( str [ i ] ! = '\0' ) { + + i ; } cout < < i < < endl ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { } cout < < i < < endl ; return 0 ; }
#include <cstring> #include <iostream> using namespace std ; int main ( ) { char dest [ 50 ] = " This is an " ; char src [ 50 ] = " example " ; strcat ( dest , src ) ; cout < < dest ; return 0 ; }
#include <cstring> #include <iostream> using namespace std ; int main ( ) { char dest [ 25 ] = " This is an example " ; char src [ 50 ] = " to show working of strncat ( ) this is not added " ; strncat ( dest , src , 29 ) ; cout < < dest ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 1 , y = 2 ; switch ( x ) { case 1 : switch ( y ) { case 2 : cout < < " Choice is 2 " ; break ; case 3 : cout < < " Choice is 3 " ; break ; } break ; case 4 : cout < < " Choice is 4 " ; break ; case 5 : cout < < " Choice is 5 " ; break ; default : cout < < " Choice is other than 1 , 2 3 , 4 , or 5 " ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int c = 10 ; switch ( c ) { case i : printf ( " Value of c = %d " , c ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { const int i = 10 ; int c = 10 ; switch ( c ) { case i : printf ( " Value of c = %d " , c ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int n1 = 10 , n2 = 11 ; switch ( ( int ) ( n1 > n2 ) ) { case 0 : printf ( " %d is the largest\n  " , n2 ) ; break ; default : printf ( " %d is the largest\n  " , n1 ) ; } switch ( ( int ) ( n1 < n2 ) ) { case 0 : printf ( " %d is the largest\n  " , n1 ) ; break ; default : printf ( " %d is the largest\n  " , n2 ) ; } return 0 ; }
#include <iostream> class Test { static Test * fun ( ) { return this ; } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( ) { } void fun ( ) { } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( ) const { return ; } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " GeeksforGeeks " ; wchar_t ch = L'e' ; wchar_t * p = wcsrchr ( str , ch ) ; if ( p ) wcout < < L " Last position of " < < ch < < L " in \ " " < < str < < " \ " is " < < ( p - str ) ; else wcout < < ch < < L " is not present in \ " " < < str < < L " \ " " ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " Ishwar Gupta " ; wchar_t ch = L'o' ; wchar_t * p = wcsrchr ( str , ch ) ; if ( p ) wcout < < L " Last position of " < < ch < < L " in \ " " < < str < < " \ " is " < < ( p - str ) ; else wcout < < ch < < L " is not present in \ " " < < str < < L " \ " " ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t src [ ] = L " Ishwar Gupta " ; wchar_t dest [ ] = L " GeeksforGeeks " ; wchar_t * s = wcspbrk ( dest , src ) ; int pos ; if ( s ) { pos = s - dest ; wcout < < L " First occurrence in \ " " < < dest < < L " \ " is at position " < < pos < < endl ; } else wcout < < L " No number found in \ " " < < dest < < " \ " " ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t src [ ] = L " 123 " ; wchar_t dest [ ] = L " Hello World " ; wchar_t * s = wcspbrk ( dest , src ) ; int pos ; if ( s ) { pos = s - dest ; wcout < < L " First occurrence in \ " " < < dest < < L " \ " is at position " < < pos < < endl ; } else wcout < < L " No common wide character " ; return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char16_t str [ ] = u " Ishwar Gupta " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c16rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char16_t str [ ] = u " " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c16rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char32_t str [ ] = U " GeeksforGeeks " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c32rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char32_t str [ ] = U " " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c32rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " geeks " ; char str2 [ ] = " geeks " ; int j = strcmpi ( str1 , str2 ) ; printf ( " The function returns = %d " , j ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " geeks " ; char str2 [ ] = " ForGeeks " ; int i = strcmpi ( str1 , str2 ) ; printf ( " The function returns = %d " , i ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( int a ) { cout < < a < < " \n  " ; return 0 ; } int main ( char * a ) { cout < < a < < endl ; return 0 ; } int main ( int a , int b ) { cout < < a < < " " < < b ; return 0 ; } int main ( ) { main ( 3 ) ; main ( " C + + " ) ; main ( 9 , 6 ) ; return 0 ; }
#include <iostream> int main ( ) { int main = 10 ; std : : cout < < main ; return 0 ; }
#include <iostream> using namespace std ; class Test { public : int main ( int s ) { cout < < s < < " \n  " ; return 0 ; } int main ( char * s ) { cout < < s < < endl ; return 0 ; } int main ( int s , int m ) { cout < < s < < " " < < m ; return 0 ; } } ; int main ( ) { Test obj ; obj.main ( 3 ) ; obj.main ( " I love C + + " ) ; obj.main ( 9 , 6 ) ; return 0 ; }
#include <stdio.h> void myStartupFun ( void ) __attribute__ ( ( constructor ) ) ; void myStartupFun ( void ) { printf ( " GeeksforGeeks " ) ; } int main ( ) { }
#include <stdio.h> #include <stdlib.h> int main ( void ) { } void _start ( void ) { printf ( " GeeeksforGeeks " ) ; int var = main ( ) ; exit ( var ) ; }
#include <iostream> class MyClass { public : MyClass ( ) { std : : cout < < " GeeksforGeeks " ; } } m ; int main ( ) { }
#include <iostream> struct Mystruct { Mystruct ( ) { std : : cout < < " GeeksforGeeks " ; } } obj ; int main ( ) { }
#include <cstdio> int var = printf ( " GeeksforGeeks " ) ; int main ( ) { }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <3 , 9> ratio1 ; typedef ratio <1 , 3> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 3 / 9 is greater than or equal to 1 / 3 " ; else cout < < " 3 / 9 is less than 1 / 3 " ; return 0 ; }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <1 , 2> ratio1 ; typedef ratio <1 , 3> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 1 / 2 is greater than or equal to 1 / 3 " ; else cout < < " 1 / 2 is less than 1 / 3 " ; return 0 ; }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <1 , 10> ratio1 ; typedef ratio <1 , 8> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 1 / 10 is greater than or equal to 1 / 8 " ; else cout < < " 1 / 10 is less than 1 / 8 " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'@' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither an " < < " alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'g' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither " < < " an alphabet nor a digit " ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " GeeksforGeeks " ; printf ( " Original String : %s\n  " , str ) ; printf ( " Modified String : %s\n  " , strnset ( str , ' * ' , 5 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " Computer Science " ; printf ( " Original String : %s\n  " , str ) ; printf ( " Modified String : %s\n  " , strnset ( str , ' * ' , 5 ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> void delay ( int number_of_seconds ) { int milli_seconds = 1000 * number_of_seconds ; clock_t start_time = clock ( ) ; while ( clock ( ) < start_time + milli_seconds ) ; } int main ( ) { int i ; for ( i = 0 ; i < 10 ; i + + ) { delay ( 1 ) ; printf ( " %d seconds have passed\n  " , i + 1 ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " geeksforgeeks is the best " ; printf ( " %s\n  " , strupr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " CompuTer ScienCe PoRTAl fOr geeKS " ; printf ( " Given string is : %s\n  " , str ) ; printf ( " \n string after converting to the uppercase is : %s " , strupr ( str ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * i , * j ; int * ii = NULL , * jj = NULL ; if ( i = = j ) { printf ( " This might get printed if both i and j are same by chance. " ) ; } if ( ii = = jj ) { printf ( " This is always printed coz ii and jj are same. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , NULL ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( NULL ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptr = NULL ; printf ( " %d " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( void ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( void * ) ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { void * operator new ( size_t size ) ; int x ; public : Test ( ) { x = 9 ; cout < < " Constructor is called\n  " ; } void display ( ) { cout < < " x = " < < x < < " \n  " ; } ~Test ( ) { cout < < " Destructor is executed\n  " ; } } ; int main ( ) { Test t ; t.display ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { vector <int> v { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; sort ( v.begin ( ) , v.end ( ) ) ; cout < < " Sorted \n  " ; for ( auto x : v ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { vector <int> v { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; sort ( v.begin ( ) , v.end ( ) , greater <int> ( ) ) ; cout < < " Sorted \n  " ; for ( auto x : v ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; sort ( arr , arr + n ) ; cout < < " \n Array after sorting using " " default sort is : \n  " ; for ( int i = 0 ; i < n ; + + i ) cout < < arr [ i ] < < " " ; return 0 ; }
#include <iostream> #include <unordered_map> using namespace std ; int main ( ) { unordered_map <int , string> umap ; umap.insert ( make_pair ( 1 , " Welcome " ) ) ; umap.insert ( make_pair ( 2 , " to " ) ) ; umap.insert ( make_pair ( 3 , " GeeksforGeeks " ) ) ; if ( umap.count ( 1 ) ) { cout < < " Element Found " < <endl ; } else { cout < < " Element Not Found " < <endl ; } return 0 ; }
#include <iostream> #include <unordered_map> using namespace std ; int main ( ) { unordered_map <int , string> umap ; umap.insert ( make_pair ( 1 , " Welcome " ) ) ; umap.insert ( make_pair ( 2 , " to " ) ) ; umap.insert ( make_pair ( 3 , " GeeksforGeeks " ) ) ; umap.insert ( make_pair ( 3 , " CS Portal " ) ) ; cout < < " Count of elements in map , mapped with key 3 : " < <umap.count ( 3 ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point p1 = { 0 , 1 } ; p1.x = 20 ; printf ( " x = %d , y = %d " , p1.x , p1.y ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y , z ; } ; int main ( ) { struct Point p1 = { .y = 0 , .z = 1 , .x = 2 } ; struct Point p2 = { .x = 20 } ; printf ( " x = %d , y = %d , z = %d\n  " , p1.x , p1.y , p1.z ) ; printf ( " x = %d " , p2.x ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point arr [ 10 ] ; arr [ 0 ] .x = 10 ; arr [ 0 ] .y = 20 ; printf ( " %d %d " , arr [ 0 ] .x , arr [ 0 ] .y ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point p1 = { 1 , 2 } ; struct Point * p2 = & p1 ; printf ( " %d %d " , p2-> x , p2-> y ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <sys / wait.h> #include <unistd.h> int main ( ) { pid_t cpid ; if ( fork ( ) = = 0 ) exit ( 0 ) ; else cpid = wait ( NULL ) ; printf ( " Parent pid = %d\n  " , getpid ( ) ) ; printf ( " Child pid = %d\n  " , cpid ) ; return 0 ; }
#include <stdio.h> #include <sys / wait.h> #include <unistd.h> int main ( ) { if ( fork ( ) = = 0 ) printf ( " HC : hello from child\n  " ) ; else { printf ( " HP : hello from parent\n  " ) ; wait ( NULL ) ; printf ( " CT : child has terminated\n  " ) ; } printf ( " Bye\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <sys / wait.h> #include <unistd.h> void waitexample ( ) { int stat ; if ( fork ( ) = = 0 ) exit ( 1 ) ; else wait ( & stat ; ) ; if ( WIFEXITED ( stat ) ) printf ( " Exit status : %d\n  " , WEXITSTATUS ( stat ) ) ; else if ( WIFSIGNALED ( stat ) ) psignal ( WTERMSIG ( stat ) , " Exit signal " ) ; } int main ( ) { waitexample ( ) ; return 0 ; }
#include <stdio.h> union test { int x , y ; } ; int main ( ) { union test t ; t.x = 2 ; printf ( " After making x = 2 : \n  x = %d , y = %d\n \n  " , t.x , t.y ) ; t.y = 10 ; printf ( " After making y = 10 : \n  x = %d , y = %d\n \n  " , t.x , t.y ) ; return 0 ; }
#include <stdio.h> union test1 { int x ; int y ; } Test1 ; union test2 { int x ; char y ; } Test2 ; union test3 { int arr [ 10 ] ; char y ; } Test3 ; int main ( ) { printf ( " sizeof ( test1 ) = %lu , sizeof ( test2 ) = %lu , " " sizeof ( test3 ) = %lu " , sizeof ( Test1 ) , sizeof ( Test2 ) , sizeof ( Test3 ) ) ; return 0 ; }
#include <stdio.h> union test { int x ; char y ; } ; int main ( ) { union test p1 ; p1.x = 65 ; union test * p2 = & p1 ; printf ( " %d %c " , p2-> x , p2-> y ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 0101 ; cout < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 020 ; cout < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 090 ; cout < < x ; return 0 ; }
#include <stdio.h> void ( foo ) ( int n ) { printf ( " Function : %d " , n ) ; } int main ( ) { ( foo ) ( 4 ) ; return 0 ; }
#include <stdio.h> #define foo ( n ) printf ( " \n Macro : %d " , n ) ; void ( foo ) ( int n ) { printf ( " Function : %d " , n ) ; } int main ( ) { ( foo ) ( 4 ) ; foo ( 4 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void done ( ) { cout < < " Exiting Successfully " < < " \n  " ; } int main ( ) { int value ; value = atexit ( done ) ; if ( value ! = 0 ) { cout < < " atexit ( ) function registration failed " ; exit ( 1 ) ; } cout < < " Registration successful " < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void shows_Exception ( ) { int y = 50 , z = 0 ; int x = y / z ; cout < < " Divided by zero " ; } int main ( ) { int value ; value = atexit ( shows_Exception ) ; if ( value ! = 0 ) { cout < < " atexit ( ) function registration failed " ; exit ( 1 ) ; } cout < < " Registration successful " < < endl ; return 0 ; }
#include <iostream> #include <locale.h> using namespace std ; int main ( ) { setlocale ( LC_MONETARY , " en_US.utf8 " ) ; struct lconv * lc = localeconv ( ) ; printf ( " %s " , lc-> currency_symbol ) ; return 0 ; }
#include <clocale> #include <iostream> using namespace std ; int main ( ) { char * s ; setlocale ( LC_ALL , " en_UA.utf8 " ) ; s = setlocale ( LC_ALL , NULL ) ; cout < < s < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x = 6 , result ; int exp = 2 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double result ; int x = 20 , exp = 9 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double result ; int x = 20 , exp = 10000 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " GEEKSFORGEEKS IS THE BEST " ; printf ( " %s\n  " , strlwr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " CompuTer ScienCe PoRTAl fOr geeKS " ; printf ( " Given string is : %s\n  " , str ) ; printf ( " \n String after converting to the " " lowercase is : %s " , strlwr ( str ) ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " GeeksforGeeks " ; wcout < < L " The uppercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towupper ( str [ i ] ) ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " hello Ishwar 123!@# " ; wcout < < L " The uppercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towupper ( str [ i ] ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float f = 6.0F ; cout < < " isinf ( 6.0 / 0.0 ) is = " < < isinf ( f / 0.0 ) < < endl ; f = -1.2F ; cout < < " isinf ( -1.2 / 0.0 ) is = " < < isinf ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { cout < < " isinf ( 0.0 ) is = " < < isinf ( 0.0 ) < < endl ; cout < < " isinf ( sqrt ( -1.0 ) ) is = " < < isinf ( sqrt ( -1.0 ) ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { } ; } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { } ; Test t ; Test * tp ; } int main ( ) { Test t ; Test * tp ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : void method ( ) { cout < < " Local Class method ( ) called " ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : void method ( ) ; } ; void Test : : method ( ) { cout < < " Local Class method ( ) " ; } } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { static int i ; } ; } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : static void method ( ) { cout < < " Local Class method ( ) called " ; } } ; Test : : method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { static int x ; enum { i = 1 , j = 2 } ; class Test { public : void method ( ) { cout < < " x = " < < x < < endl ; cout < < " i = " < < i < < endl ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { int x ; class Test { public : void method ( ) { cout < < " x = " < < x < < endl ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; int x ; void fun ( ) { class Test1 { public : Test1 ( ) { cout < < " Test1 : : Test1 ( ) " < < endl ; } } ; class Test2 { Test1 t1 ; public : void method ( ) { cout < < " x = " < < x < < endl ; } } ; Test2 t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any value = 4.2 ; cout < < " \n  Value : " < < any_cast <double> ( value ) ; value.emplace <int> ( 44 ) ; cout < < " \n  Value : " < < any_cast <int> ( value ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 4.2 ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; var.reset ( ) ; if ( !var.has_value ( ) ) cout < < " \n  No value found in var variable " ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 9.5 ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; if ( var.has_value ( ) ) cout < < " \n  Value found of type " < < var.type ( ) .name ( ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 12.0f ; cout < < " \n  Type : " < < var.type ( ) .name ( ) ; var = " Hello World " ; cout < < " \n  Type : " < < var.type ( ) .name ( ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 12.0f ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> using namespace std ; int main ( ) { any var = 12.0f ; auto * tval = any_cast <float> ( & var ; ) ; if ( !tval ) { cout < < " \n  Bad_any_cast " ; } else { cout < < " \n  Value : " < < * tval ; } return 0 ; }
#include <iostream> #include <vector> using namespace std ; class MyClass { vector <int> vec ; public : MyClass ( vector <int> v ) { vec = v ; } void print ( ) { for ( int i = 0 ; i < vec.size ( ) ; i + + ) cout < < vec [ i ] < < " " ; } } ; int main ( ) { vector <int> vec ; for ( int i = 1 ; i < = 5 ; i + + ) vec.push_back ( i ) ; MyClass obj ( vec ) ; obj.print ( ) ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; class MyClass { vector <int> vec ; public : MyClass ( vector <int> v ) : vec ( v ) { } void print ( ) { for ( int i = 0 ; i < vec.size ( ) ; i + + ) cout < < vec [ i ] < < " " ; } } ; int main ( ) { vector <int> vec ; for ( int i = 1 ; i < = 5 ; i + + ) vec.push_back ( i ) ; MyClass obj ( vec ) ; obj.print ( ) ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; class MyClass { vector <int> & vec ; public : MyClass ( vector <int> & arr ) : vec ( arr ) { } void print ( ) { for ( int i = 0 ; i < vec.size ( ) ; i + + ) cout < < vec [ i ] < < " " ; } } ; int main ( ) { vector <int> vec ; for ( int i = 1 ; i < = 5 ; i + + ) vec.push_back ( i ) ; MyClass obj ( vec ) ; obj.print ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * p = NULL ; printf ( " %s " , p ) ; return 0 ; }
#include <iostream> #include <chrono> int main ( ) { using namespace std : : chrono ; milliseconds mil ( 1000 ) ; mil = mil * 60 ; std : : cout < < " duration ( in periods ) : " ; std : : cout < < mil.count ( ) < < " milliseconds.\n  " ; std : : cout < < " duration ( in seconds ) : " ; std : : cout < < ( mil.count ( ) * milliseconds : : period : : num / milliseconds : : period : : den ) ; std : : cout < < " seconds.\n  " ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float num = 5.48958123 ; num = floor ( 10000 * num ) / 10000 ; printf ( " %f " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { float num = 5.48958123 ; printf ( " %0.4f " , num ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t curtime ; time ( & curtime ; ) ; printf ( " Current time = %s " , ctime ( & curtime ; ) ) ; return ( 0 ) ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , a ; a = + + x ; cout < < " Pre Increment Operation " ; cout < < " \n a = " < < a ; cout < < " \n x = " < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , a ; a = x + + ; cout < < " Post Increment Operation " ; cout < < " \n a = " < < a ; cout < < " \n x = " < < x ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGABRT , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGABRT ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGINT , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGINT ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGTERM , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGTERM ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGSEGV , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGSEGV ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGFPE , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGFPE ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { char a123 = 'a' ; float b ; int _c , _d45 , e ; printf ( " %c \n  " , a123 ) ; return 0 ; }
#include <iostream> using namespace std ; class Distance { public : int feet , inch ; Distance ( int f , int i ) { this-> feet = f ; this-> inch = i ; } void operator- ( ) { feet-- ; inch-- ; cout < < " \n Feet & Inches ( Decrement ) : " < < feet < < " ' " < < inch ; } } ; int main ( ) { Distance d1 ( 8 , 9 ) ; -d1 ; return 0 ; }
#include <iostream> #include <string> struct foo { int x , y , z ; } ; double f [ 3 ] ; int * p ; std : : string s ; int main ( int argc , char * argv [ ] ) { foo x = foo ( ) ; std : : cout < < x.x < < x.y < < x.z < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Geeks { public : string geekname ; void printname ( ) { cout < < " Geekname is : " < < geekname ; } } ; int main ( ) { Geeks obj1 ; obj1.geekname = " GeeksForGeeks " ; obj1.printname ( ) ; return 0 ; }
#include <iostream> using namespace std ; struct Point { int x , y ; } ; int main ( ) { struct Point arr [ 10 ] ; arr [ 0 ] .x = 10 ; arr [ 0 ] .y = 20 ; cout < < arr [ 0 ] .x < < " , " < < arr [ 0 ] .y ; return 0 ; }
#include <iostream> using namespace std ; union test { int x , y ; } ; int main ( ) { union test t ; t.x = 2 ; cout < < " After making x = 2 : " < < endl < < " x = " < < t.x < < " , y = " < < t.y < < endl ; t.y = 10 ; cout < < " After making Y = 10 : " < < endl < < " x = " < < t.x < < " , y = " < < t.y < < endl ; return 0 ; }
#include <iostream> using namespace std ; enum week { Mon , Tue , Wed , Thur , Fri , Sat , Sun } ; int main ( ) { enum week day ; day = Wed ; cout < < day ; return 0 ; }
#include <iostream> using namespace std ; int sum ( int x , int y , int z = 0 , int w = 0 ) { return ( x + y + z + w ) ; } int main ( ) { cout < < sum ( 10 , 15 ) < < endl ; cout < < sum ( 10 , 15 , 25 ) < < endl ; cout < < sum ( 10 , 15 , 25 , 30 ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char ch ; float f ; int i ; double d ; long l ; cout < < ch < < endl ; cout < < f < < endl ; cout < < i < < endl ; cout < < d < < endl ; cout < < l < < endl ; return 0 ; }
#include <stdio.h> void f ( void ) ; int x = 38 ; int y = 39 ; int main ( ) { f ( ) ; printf ( " x = % d\n  " , x ) ; printf ( " y = % d\n  " , y ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { for ( char a = 0 ; a < = 225 ; a + + ) cout < < a ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { bool a = true ; for ( a = 1 ; a < = 5 ; a + + ) cout < < a ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { short a ; for ( a = 32767 ; a < 32770 ; a + + ) cout < < a < < " \n  " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { unsigned short a ; for ( a = 65532 ; a < 65536 ; a + + ) cout < < a < < " \n  " ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n = 2 ; char str [ 50 ] ; FILE * fptr = fopen ( " sample.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Could not open file " ) ; return 0 ; } for ( i = 0 ; i <n ; i + + ) { puts ( " Enter a name " ) ; gets ( str ) ; fprintf ( fptr , " %d. %s\n  " , i , str ) ; } fclose ( fptr ) ; return 0 ; }
#include <iostream> using namespace std ; double add ( double a , double b ) { return a + b ; } int main ( ) { cout < < " Sum = " < < add ( 2.4 , 8.5 ) < < endl ; cout < < " Sum = " < < add ( 16 , 18 ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Test { int * ptr ; public : Test ( int i = 0 ) { ptr = new int ( i ) ; } void setValue ( int i ) { * ptr = i ; } void print ( ) { cout < < * ptr < < endl ; } } ; int main ( ) { Test t1 ( 5 ) ; Test t2 ; t2 = t1 ; t1.setValue ( 10 ) ; t2.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace first { int val = 500 ; } int val = 100 ; int main ( ) { int val = 200 ; cout < < first : : val < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; namespace ns1 { int value ( ) { return 5 ; } } namespace ns2 { const double x = 100 ; double value ( ) { return 2 * x ; } } int main ( ) { cout < < ns1 : : value ( ) < < '\n ' ; cout < < ns2 : : value ( ) < < '\n ' ; cout < < ns2 : : x < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { class geek { public : void display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } } ; } int main ( ) { ns : : geek obj ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { class geek ; } class ns : : geek { public : void display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } } ; int main ( ) { ns : : geek obj ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { void display ( ) ; class geek { public : void display ( ) ; } ; } void ns : : geek : : display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } void ns : : display ( ) { cout < < " ns : : display ( ) \n  " ; } int main ( ) { ns : : geek obj ; ns : : display ( ) ; obj.display ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unsigned root = chrono : : system_clock : : now ( ) .time_since_epoch ( ) .count ( ) ; default_random_engine generator ( root ) ; double can_val = generate_canonical <double , numeric_limits <double> : : digits> ( generator ) ; cout < < " Random canonical value : " < < can_val ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; printf ( " %c\n  " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 45 , y = 90 ; printf ( " %d\n  " , x ) ; printf ( " %i\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { float a = 12.67 ; printf ( " %f\n  " , a ) ; printf ( " %e\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 67 ; printf ( " %o\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 15 ; printf ( " %x\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ ] = " geeksforgeeks " ; printf ( " %s\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " geeksforgeeks " ; printf ( " %20s\n  " , str ) ; printf ( " %-20s\n  " , str ) ; printf ( " %20.5s\n  " , str ) ; printf ( " %-20.5s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; scanf ( " %d " , & a ; ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; scanf ( " %i " , & a ; ) ; printf ( " %d\n  " , a ) ; scanf ( " %i " , & a ; ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { float a = 0.0 ; scanf ( " %f " , & a ; ) ; printf ( " %f\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; scanf ( " %s " , str ) ; printf ( " %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; scanf ( " %c " , & ch ; ) ; printf ( " %c\n  " , ch ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string su = " Jatin Goyal " ; transform ( su.begin ( ) , su.end ( ) , su.begin ( ) , : : toupper ) ; cout < < su < < endl ; string sl = " Jatin Goyal " ; transform ( sl.begin ( ) , sl.end ( ) , sl.begin ( ) , : : tolower ) ; cout < < sl < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str1 [ ] = " 5672345 " ; long int num1 = atol ( str1 ) ; cout < < " Number is " < < num1 < < " \n  " ; char str2 [ ] = " 10000002 0 " ; long int num2 = atol ( str2 ) ; cout < < " Number is " < < num2 < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char big_num1 [ ] = " 8239206483232728 " ; long long int num1 = atoll ( big_num1 ) ; cout < < " Number is " < < num1 < < " \n  " ; char big_num2 [ ] = " 100000 9 1324100 " ; long long int num2 = atoll ( big_num2 ) ; cout < < " Number is " < < num2 < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char pi [ ] = " 3.1415926535 " ; double pi_val = atof ( pi ) ; cout < < " Value of pi = " < < pi_val < < " \n  " ; char acc_g [ ] = " 9.8 " ; double acc_g_val = atof ( acc_g ) ; cout < < " Value of acceleration due to gravity = " < < acc_g_val < < " \n  " ; return 0 ; }
#include <stdio.h> void fun1 ( ) { unsigned char i ; for ( i = 0 ; i <256 ; i + + ) printf ( " %d " , i ) ; } int main ( ) { fun1 ( ) ; return 0 ; }
#include <stdio.h> void fun2 ( ) { signed char i ; for ( i = 0 ; i <128 ; i + + ) printf ( " %d " , i ) ; } int main ( ) { fun2 ( ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { unsigned char i = 0 ; do { printf ( " %d " , i ) ; i + + ; } while ( i > 0 ) ; } int main ( ) { fun1 ( ) ; return 0 ; }
#include <stdio.h> void fun2 ( ) { signed char i = 0 ; do { printf ( " %d " , i ) ; i + + ; } while ( i > 0 ) ; } int main ( ) { fun2 ( ) ; return 0 ; }
#include <iostream> #include <setjmp.h> using namespace std ; jmp_buf buf ; int main ( ) { int x = 1 ; setjmp ( buf ) ; cout < < " 1 " ; x + + ; if ( x < = 100 ) longjmp ( buf , 1 ) ; return 0 ; }
#include <stdio.h> void mysubstr ( char str [ ] , int low , int high ) { if ( low < = high ) { printf ( " %c " , str [ low ] ) ; mysubstr ( str , low + 1 , high ) ; } } int main ( ) { char str [ ] = " geeksforgeeks " ; mysubstr ( str , 1 , 3 ) ; return 0 ; }
#include <stdio.h> void mysubstr ( char str [ ] , int low , int high ) { printf ( " %. * s " , high-low + 1 , ( str + low ) ) ; } int main ( ) { char str [ ] = " geeksforgeeks " ; mysubstr ( str , 1 , 3 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 101GeeksForGeeks " ; int base = 3 ; wchar_t * endString ; long value = wcstol ( string , & endString ; , base ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; return 0 ; }
#include <iostream> int foo ( ) { return 10 ; } char foo ( ) { return 'a' ; } int main ( ) { char x = foo ( ) ; getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( int i ) { } void fun ( int i ) { } } ; int main ( ) { Test t ; getchar ( ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; int f ( int x ) { return x + 10 ; } int f ( const int x ) { return x + 10 ; } int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; int f ( int x , int y ) { return x + 10 ; } int f ( int x , int y = 10 ) { return x + y ; } int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> using namespace std ; void print ( int i ) { cout < < " Here is int " < < i < < endl ; } void print ( double f ) { cout < < " Here is float " < < f < < endl ; } void print ( char const * c ) { cout < < " Here is char * " < < c < < endl ; } int main ( ) { print ( 10 ) ; print ( 10.10 ) ; print ( " ten " ) ; return 0 ; }
#include <string> #include <iostream> int main ( void ) { std : : string str = " y = 4.4786754x + 5.6 " ; double y , x , a , b ; y = 0 ; x = 0 ; std : : size_t offset = 0 ; a = std : : stod ( & str ; [ 2 ] , & offset ; ) ; b = std : : stod ( & str ; [ offset + 3 ] ) ; std : : cout < < b ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string b = " 5 " ; double a = stod ( b ) ; int c = stoi ( b ) ; cout < < b < < " " < < a < < " " < < c < < endl ; }
#include <iostream> #include <string> int main ( ) { std : : string x ; x = " 20 " ; float y = std : : stof ( x ) + 2.5 ; std : : cout < < y ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string str = " 5000.5 " ; float x = std : : stof ( str ) ; std : : cout < < x ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string str = " 500087 " ; long double x = std : : stold ( str ) ; std : : cout < < x ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string x ; x = " 2075 " ; long double y = std : : stof ( x ) + 2.5 ; std : : cout < < y ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " Hello World\n  " ) ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 10 ; i + + ) { cout < < " Hello World\n  " ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < 6 ) { printf ( " Hello World\n  " ) ; i + + ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int i = 1 ; while ( i < 6 ) { cout < < " Hello World\n  " ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 2 ; do { printf ( " Hello World\n  " ) ; i + + ; } while ( i < 1 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int i = 2 ; do { cout < < " Hello World\n  " ; i + + ; } while ( i < 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( ; ; ) { printf ( " This loop will run forever.\n  " ) ; } }
#include <iostream> using namespace std ; int main ( ) { int i ; for ( ; ; ) { cout < < " This loop will run forever.\n  " ; } }
#include <iostream> #define gfg 7 #if gfg > 200 #undef gfg #define gfg 200 #elif gfg < 50 #undef gfg #define gfg 50 #else #undef gfg #define gfg 100 #endif int main ( ) { std : : cout < < gfg ; }
#include <stdio.h> int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } int main ( ) { int num ; scanf ( " %d " , & num ; ) ; printf ( " Reverse of no. is %d " , reversDigits ( num ) ) ; return 0 ; }
#include <stdio.h> unsigned int factorial ( unsigned int n ) { if ( n = = 0 ) return 1 ; return n * factorial ( n - 1 ) ; } int main ( ) { int num ; scanf ( " %d " , & num ; ) ; printf ( " Enter the number : %d " , num ) ; printf ( " \n Factorial of %d is %d " , num , factorial ( num ) ) ; return 0 ; }
#include <stdio.h> void func ( int a , int b ) { a + = b ; printf ( " In func , a = %d b = %d\n  " , a , b ) ; } int main ( void ) { int x = 5 , y = 7 ; func ( x , y ) ; printf ( " In main , x = %d y = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> void swapnum ( int * i , int * j ) { int temp = * i ; * i = * j ; * j = temp ; } int main ( void ) { int a = 10 , b = 20 ; swapnum ( & a ; , & b ; ) ; printf ( " a is %d and b is %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string1 [ 100 ] , string2 [ 100 ] ; scanf ( " %s " , string1 ) ; printf ( " Enter the first string : %s " , string1 ) ; scanf ( " %s " , string2 ) ; printf ( " \n Enter the second string : %s " , string2 ) ; printf ( " \n Are both strings same : " ) ; if ( strcmp ( string1 , string2 ) = = 0 ) { printf ( " Yes " ) ; } else { printf ( " No " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; printf ( " x = %d , z = %f " , x , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; printf ( " sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; for ( i = 1 ; i < 5 ; i + + ) { for ( j = 1 ; j < = 6 - i ; j + + ) printf ( " %d " , j ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Hello Geeks\b\b\b\bF " ) ; return ( 0 ) ; }
#include <fenv.h> #include <iostream> #include <math.h> #pragma STDC FENV_ACCESS on using namespace std ; int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; sqrt ( -1 ) ; if ( fetestexcept ( FE_INVALID ) ) cout < < " sqrt ( -1 ) raises FE_INVALID " < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_fundamental : " < < '\n ' ; cout < < " char : " < < is_fundamental <char> : : value < < '\n ' ; cout < < " char & : " < < is_fundamental <char & > : : value < < '\n ' ; cout < < " char * : " < < is_fundamental <char * > : : value < < '\n ' ; cout < < " void : " < < is_fundamental <void> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_const : " < < endl ; cout < < " int : " < < is_const <int> : : value < < '\n ' ; cout < < " const int : " < < is_const <const int> : : value < < '\n ' ; cout < < " const int & : " < < is_const <typename remove_reference <const int & > : : type> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_const : " < < endl ; cout < < " const int * : " < < is_const <const int * > : : value < < '\n ' ; cout < < " int * const : " < < is_const <int * const> : : value < < '\n ' ; cout < < " const int & : " < < is_const <const int & > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_const : " < < endl ; cout < < " float : " < < is_const <float> : : value < < '\n ' ; cout < < " const float : " < < is_const <const float> : : value < < '\n ' ; cout < < " char const : " < < is_const <char const> : : value < < '\n ' ; cout < < " double : " < < is_const <double> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_void : " < < '\n ' ; cout < < " void : " < < is_void <void> : : value < < '\n ' ; cout < < " const void : " < < is_void <const void> : : value < < '\n ' ; cout < < " int : " < < is_void <int> : : value < < '\n ' ; cout < < " char : " < < is_void <char> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_void : " < < '\n ' ; cout < < " double : " < < is_void <double> : : value < < '\n ' ; cout < < " float : " < < is_void <float> : : value < < '\n ' ; cout < < " volatile void : " < < is_void <volatile void> : : value < < '\n ' ; cout < < " const volatile void : " < < is_void <const volatile void> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < std : : boolalpha ; cout < < " is_floating_point : " < < endl ; cout < < " char : " < < is_floating_point <char> : : value < < endl ; cout < < " int : " < < is_floating_point <int> : : value < < endl ; cout < < " float : " < < is_floating_point <float> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < std : : boolalpha ; cout < < " is_floating_point : " < < endl ; cout < < " double : " < < is_floating_point <double> : : value < < endl ; cout < < " bool : " < < is_floating_point <bool> : : value < < endl ; cout < < " long int : " < < is_floating_point <long int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_floating_point : " < < endl ; cout < < " wchar_t : " < < is_floating_point <wchar_t> : : value < < endl ; cout < < " long double : " < < is_floating_point <long double> : : value < < endl ; cout < < " unsigned short int : " < < is_floating_point <unsigned short int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { class gfg { } ; cout < < boolalpha ; cout < < " is_object : " < < endl ; cout < < " sam : " < < is_object <gfg> : : value < < '\n ' ; cout < < " sam & : " < < is_object <gfg & > : : value < < '\n ' ; cout < < " int : " < < is_object <int> : : value < < '\n ' ; cout < < " int & : " < < is_object <int & > : : value ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_integral : " < < endl ; cout < < " char : " < < is_integral <char> : : value < < endl ; cout < < " int : " < < is_integral <int> : : value < < endl ; cout < < " float : " < < is_integral <float> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_integral : " < < endl ; cout < < " double : " < < is_integral <double> : : value < < endl ; cout < < " bool : " < < is_integral <bool> : : value < < endl ; cout < < " long int : " < < is_integral <long int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_integral : " < < endl ; cout < < " wchar_t : " < < is_integral <wchar_t> : : value < < endl ; cout < < " long double : " < < is_integral <long double> : : value < < endl ; cout < < " unsigned short int : " < < is_integral <unsigned short int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; enum class GFG2 { var1 , var2 , var3 , var4 } ; int main ( ) { cout < < boolalpha ; cout < < " is_enum : " < < endl ; cout < < " GFG1 : " < < is_enum <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_enum <GFG2> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; enum class GFG2 : int { } ; int main ( ) { cout < < boolalpha ; cout < < " is_enum : " < < endl ; cout < < " GFG1 : " < < is_enum <GFG1> : : value < < '\n ' ; cout < < " GFG2 : " < < is_enum <GFG2> : : value < < '\n ' ; cout < < " int : " < < is_enum <int> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { } ; int main ( ) { cout < < boolalpha ; cout < < " is_reference : " < < '\n ' ; cout < < " gfg : " < < is_reference <gfg> : : value < < '\n ' ; cout < < " gfg & : " < < is_reference <gfg & > : : value < < '\n ' ; cout < < " gfg & & : " < < is_reference <gfg & & > : : value < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; class Circle { public : double radius ; double compute_area ( ) { return 3.14 * radius * radius ; } } ; int main ( ) { Circle obj ; obj.radius = 5.5 ; cout < < " Radius is : " < < obj.radius < < " \n  " ; cout < < " Area is : " < < obj.compute_area ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Circle { private : double radius ; public : double compute_area ( ) { return 3.14 * radius * radius ; } } ; int main ( ) { Circle obj ; obj.radius = 1.5 ; cout < < " Area is : " < < obj.compute_area ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Circle { private : double radius ; public : double compute_area ( double r ) { radius = r ; double area = 3.14 * radius * radius ; cout < < " Radius is : " < < radius < < endl ; cout < < " Area is : " < < area ; } } ; int main ( ) { Circle obj ; obj.compute_area ( 1.5 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Parent { protected : int id_protected ; } ; class Child : public Parent { public : void setId ( int id ) { id_protected = id ; } void displayId ( ) { cout < < " id_protected is : " < < id_protected < < endl ; } } ; int main ( ) { Child obj1 ; obj1.setId ( 81 ) ; obj1.displayId ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Parent { public : int id_p ; } ; class Child : public Parent { public : int id_c ; } ; int main ( ) { Child obj1 ; obj1.id_c = 7 ; obj1.id_p = 91 ; cout < < " Child id is " < < obj1.id_c < < endl ; cout < < " Parent id is " < < obj1.id_p < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Car : public Vehicle { } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class FourWheeler { public : FourWheeler ( ) { cout < < " This is a 4 wheeler Vehicle " < < endl ; } } ; class Car : public Vehicle , public FourWheeler { } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class fourWheeler : public Vehicle { public : fourWheeler ( ) { cout < < " Objects with 4 wheels are vehicles " < <endl ; } } ; class Car : public fourWheeler { public : car ( ) { cout < < " Car has 4 Wheels " < <endl ; } } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Car : public Vehicle { } ; class Bus : public Vehicle { } ; int main ( ) { Car obj1 ; Bus obj2 ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Fare { public : Fare ( ) { cout < < " Fare of Vehicle\n  " ; } } ; class Car : public Vehicle { } ; class Bus : public Vehicle , public Fare { } ; int main ( ) { Bus obj2 ; return 0 ; }
#include <iostream> using namespace std ; class Encapsulation { private : int x ; public : void set ( int a ) { x = a ; } int get ( ) { return x ; } } ; int main ( ) { Encapsulation obj ; obj.set ( 5 ) ; cout < <obj.get ( ) ; return 0 ; }
#include <iostream> using namespace std ; class implementAbstraction { private : int a , b ; public : void set ( int x , int y ) { a = x ; b = y ; } void display ( ) { cout < < " a = " < <a < < endl ; cout < < " b = " < < b < < endl ; } } ; int main ( ) { implementAbstraction obj ; obj.set ( 10 , 20 ) ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Enclosing { private : int x ; class Nested { int y ; void NestedFun ( Enclosing * e ) { cout < <e-> x ; } } ; } ; int main ( ) { }
#include <iostream> using namespace std ; class Enclosing { int x ; class Nested { int y ; } ; void EnclosingFun ( Nested * n ) { cout < <n-> y ; } } ; int main ( ) { }
#include <iostream> using namespace std ; class construct { public : int a , b ; construct ( ) { a = 10 ; b = 20 ; } } ; int main ( ) { construct c ; cout < < " a : " < < c.a < < endl < < " b : " < < c.b ; return 1 ; }
#include <iostream> using namespace std ; class Point { private : int x , y ; public : Point ( int x1 , int y1 ) { x = x1 ; y = y1 ; } int getX ( ) { return x ; } int getY ( ) { return y ; } } ; int main ( ) { Point p1 ( 10 , 15 ) ; cout < < " p1.x = " < < p1.getX ( ) < < " , p1.y = " < < p1.getY ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Point { private : int x ; int y ; public : Point ( int i = 0 , int j = 0 ) : x ( i ) , y ( j ) { } int getX ( ) const { return x ; } int getY ( ) const { return y ; } } ; int main ( ) { Point t1 ( 10 , 15 ) ; cout < < " x = " < <t1.getX ( ) < < " , " ; cout < < " y = " < <t1.getY ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { const int t ; public : Test ( int t ) : t ( t ) { } int getT ( ) { return t ; } } ; int main ( ) { Test t1 ( 10 ) ; cout < <t1.getT ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int & t ; public : Test ( int & t ; ) : t ( t ) { } int getT ( ) { return t ; } } ; int main ( ) { int x = 20 ; Test t1 ( x ) ; cout < <t1.getT ( ) < <endl ; x = 30 ; cout < <t1.getT ( ) < <endl ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; } ; A : : A ( int arg ) { i = arg ; cout < < " A's Constructor called : Value of i : " < < i < < endl ; } class B { A a ; public : B ( int ) ; } ; B : : B ( int x ) : a ( x ) { cout < < " B's Constructor called " ; } int main ( ) { B obj ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; } ; A : : A ( int arg ) { i = arg ; cout < < " A's Constructor called : Value of i : " < < i < < endl ; } class B : A { public : B ( int ) ; } ; B : : B ( int x ) : A ( x ) { cout < < " B's Constructor called " ; } int main ( ) { B obj ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; int getI ( ) const { return i ; } } ; A : : A ( int i ) : i ( i ) { } int main ( ) { A a ( 10 ) ; cout < <a.getI ( ) ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int foo ( ) { i = 3 ; A ob ; return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int & foo ( ) { i = 3 ; A ob ; return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int foo ( ) { i = 3 ; { A ob ; } return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str ; getline ( cin , str ) ; cout < < " The initial string is : " ; cout < < str < < endl ; str.push_back ( 's' ) ; cout < < " The string after push_back operation is : " ; cout < < str < < endl ; str.pop_back ( ) ; cout < < " The string after pop_back operation is : " ; cout < < str < < endl ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 2 , 20 , 1 , 30 } ; cout < < " The largest element of valarray is : " ; cout < < varr.max ( ) < < endl ; cout < < " The smallest element of valarray is : " ; cout < < varr.min ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; int & ref = x ; ref = 20 ; cout < < " x = " < < x < < endl ; x = 30 ; cout < < " ref = " < < ref < < endl ; return 0 ; }
#include <iostream> using namespace std ; void swap ( int & first , int & second ) { int temp = first ; first = second ; second = temp ; } int main ( ) { int a = 2 , b = 3 ; swap ( a , b ) ; cout < < a < < " " < < b ; return 0 ; }
#include <iostream> using namespace std ; int & fun ; ( ) { static int x = 10 ; return x ; } int main ( ) { fun ( ) = 30 ; cout < < fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; int fun ( int & x ; ) { return x ; } int main ( ) { cout < < fun ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; void swap ( char * & str1 ; , char * & str2 ; ) { char * temp = str1 ; str1 = str2 ; str2 = temp ; } int main ( ) { char * str1 = " GEEKS " ; char * str2 = " FOR GEEKS " ; swap ( str1 , str2 ) ; cout < < " str1 is " < <str1 < <endl ; cout < < " str2 is " < <str2 < <endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; int * ptr = & x ; int & * ptr1 = ptr ; }
#include <iostream> using namespace std ; int main ( ) { int * ptr = NULL ; int & ref ; = * ptr ; cout < < ref ; }
#include <iostream> using namespace std ; int & fun ; ( ) { int x = 10 ; return x ; } int main ( ) { fun ( ) = 30 ; cout < < fun ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t time_ptr ; time_ptr = time ( NULL ) ; tm * tm_local = localtime ( & time ; _ptr ) ; cout < < " Current local time is = " < < tm_local-> tm_hour < < " : " < < tm_local-> tm_min < < " : " < < tm_local-> tm_sec ; return 0 ; }
#include <iostream> using namespace std ; class A { public : A ( ) { cout < < " A's constructor called " < < endl ; } } ; class B { public : B ( ) { cout < < " B's constructor called " < < endl ; } } ; class C : public B , public A { public : C ( ) { cout < < " C's constructor called " < < endl ; } } ; int main ( ) { C c ; return 0 ; }
#include <iostream> using namespace std ; class A { int x ; public : void setX ( int i ) { x = i ; } void print ( ) { cout < < x ; } } ; class B : public A { public : B ( ) { setX ( 10 ) ; } } ; class C : public A { public : C ( ) { setX ( 20 ) ; } } ; class D : public B , public C { } ; int main ( ) { D d ; d.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x ; public : A ( int i ) { x = i ; } void print ( ) { cout < < x ; } } ; class B : virtual public A { public : B ( ) : A ( 10 ) { } } ; class C : virtual public A { public : C ( ) : A ( 10 ) { } } ; class D : public B , public C { } ; int main ( ) { D d ; d.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Base { public : virtual int fun ( int i ) { } } ; class Derived : public Base { private : int fun ( int x ) { } } ; int main ( ) { }
#include <iostream> using namespace std ; class Base { public : virtual int fun ( int i ) { cout < < " Base : : fun ( int i ) called " ; } } ; class Derived : public Base { private : int fun ( int x ) { cout < < " Derived : : fun ( int x ) called " ; } } ; int main ( ) { Base * ptr = new Derived ; ptr-> fun ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = -1 ; cout < < " Before try \n  " ; try { cout < < " Inside try \n  " ; if ( x < 0 ) { throw x ; cout < < " After throw ( Never executed ) \n  " ; } } catch ( int x ) { cout < < " Exception Caught \n  " ; } cout < < " After catch ( Will be executed ) \n  " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 10 ; } catch ( char * excp ) { cout < < " Caught " < < excp ; } catch ( ... ) { cout < < " Default Exception\n  " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'a' ; } catch ( int x ) { cout < < " Caught " < < x ; } catch ( ... ) { cout < < " Default Exception\n  " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'a' ; } catch ( int x ) { cout < < " Caught " ; } return 0 ; }
#include <iostream> using namespace std ; void fun ( int * ptr , int x ) { if ( ptr = = NULL ) throw ptr ; if ( x = = 0 ) throw x ; } int main ( ) { try { fun ( NULL , 0 ) ; } catch ( ... ) { cout < < " Caught exception from fun ( ) " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { try { throw 20 ; } catch ( int n ) { cout < < " Handle Partially " ; throw ; } } catch ( int n ) { cout < < " Handle remaining " ; } return 0 ; }
#include <iostream> using namespace std ; class Test { public : Test ( ) { cout < < " Constructor of Test " < < endl ; } ~Test ( ) { cout < < " Destructor of Test " < < endl ; } } ; int main ( ) { try { Test t1 ; throw 10 ; } catch ( int i ) { cout < < " Caught " < < i < < endl ; } }
#include <stdio.h> int main ( ) { printf ( " Size = %lu " , sizeof ( size_t ) ) ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; pieslice ( 300 , 300 , 0 , 120 , 150 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtextxy ( 200 , 150 , " Hello Geek , Have a good day ! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; int x = 150 ; int y = 150 ; int font = 8 ; int direction = 0 ; int font_size = 5 ; settextstyle ( font , direction , font_size ) ; outtextxy ( x , y , " Geeks For Geeks " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtext ( " Hello Geek , Have a good day ! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int c ; int x = 200 , y = 100 ; initgraph ( & gd ; , & gm ; , " " ) ; for ( c = 0 ; c < 5 ; c + + ) { setlinestyle ( c , 0 , 1 ) ; line ( x , y , x + 200 , y ) ; y = y + 25 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; int x_circle = 250 ; int y_circle = 250 ; int radius = 100 ; int border_color = WHITE ; setfillstyle ( HATCH_FILL , RED ) ; circle ( x_circle , y_circle , radius ) ; floodfill ( x_circle , y_circle , border_color ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> #include <cctype> using namespace std ; int main ( ) { char x ; cin > > x ; if ( isupper ( x ) ) cout < < " Uppercase " ; else cout < < " Not uppercase. " ; return 0 ; }
#include <iostream> #include <cctype> using namespace std ; int main ( ) { char x ; cin > > x ; if ( islower ( x ) ) cout < < " Lowercase " ; else cout < < " Not Lowercase. " ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; void toggle ( string & str ) { int length = str.length ( ) ; for ( int i = 0 ; i < length ; i + + ) { int c = str [ i ] ; if ( islower ( c ) ) str [ i ] = toupper ( c ) ; else if ( isupper ( c ) ) str [ i ] = tolower ( c ) ; } } int main ( ) { string str = " GeekS " ; toggle ( str ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'A' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither " < < " an alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'5' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither " < < " an alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string [ ] = " Geeks for Geeks " ; char character = 'k' ; char * ptr = strrchr ( string , character ) ; if ( ptr ) cout < < " Last position of " < < character < < " in " < < string < < " is " < < ptr - string ; else cout < < character < < " is not present " < < string < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string [ ] = " Geeks for Geeks " ; char * ptr ; char character = 'z' ; ptr = strrchr ( string , character ) ; if ( ptr ) cout < < " Last position of " < < character < < " in " < < string < < " is " < < ptr - string ; else cout < < character < < " is not present in " < < string < < endl ; return 0 ; }
#include <bits / stdc + + .h> int fun ( ) { int i , num ; const wchar_t wc [ ] = L " priya lal " ; num = 0 ; for ( i = 0 ; i < wcslen ( wc ) ; + + i ) if ( wctob ( wc [ i ] ) ! = EOF ) + + num ; wprintf ( L " wc has %d characters to be translated " " to single-byte characters. " , num ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <bits / stdc + + .h> void fun ( wchar_t wc ) { int cn = wctob ( wc ) ; if ( cn ! = EOF ) printf ( " %#x translated to %#x\n  " , wc , cn ) ; else printf ( " %#x could not be translated\n  " , wc ) ; } int main ( void ) { char * utf_locale_present = setlocale ( LC_ALL , " th_TH.utf8 " ) ; puts ( " In Thai UTF-8 locale : " ) ; fun ( L'a' ) ; fun ( L'?' ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str [ 256 ] = " 90600 Geeks For Geeks " ; char * end ; long result ; result = strtoul ( str , & end ; , 36 ) ; cout < < " The unsigned long integer is : " < < result < < endl ; cout < < " String in str is : " < < end ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 20 ] ; wchar_t source [ ] = L " geeks are for geeks " ; int n = 13 ; wmemcpy ( destination , source , n ) ; wcout < < L " Initial string -> " < < source < < " \n  " ; wcout < < L " Final string -> " ; for ( int i = 0 ; i < n ; i + + ) putwchar ( destination [ i ] ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 3 ] ; wchar_t source [ ] = L " GFG " ; int n = 3 ; wmemcpy ( destination , source , n ) ; wcout < < L " Initial string -> " < < source < < " \n  " ; wcout < < L " Final string -> " ; for ( int i = 0 ; i < n ; i + + ) putwchar ( destination [ i ] ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 95.6Geek " ; wchar_t * endString ; double value = wcstod ( string , & endString ; ) ; wcout < < L " String -> " < < string < < " \n  " ; wcout < < L " Double value -> " < < value < < " \n  " ; wcout < < L " End String is : " < < endString < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 10.6464 " ; wchar_t * endString ; double value = wcstod ( string , & endString ; ) ; wcout < < L " String -> " < < string < < " \n  " ; wcout < < L " Double value -> " < < value < < " \n  " ; wcout < < L " End String is : " < < endString < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 99.999Geek " ; wchar_t * endString ; double value = wcstod ( string , & endString ; ) ; wcout < < L " String -> " < < string < < " \n  " ; wcout < < L " Double value -> " < < value < < " \n  " ; wcout < < L " End String is : " < < endString < < " \n  " ; return 0 ; }
#include <cmath> #include <iomanip> #include <iostream> using namespace std ; int main ( ) { double val ; val = fmin ( 10.0f , 1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmin ( 10.0f , 1.0 ) = " < < val < < " \n  " ; val = fmax ( 10.0 , -1.0f ) ; cout < < fixed < < setprecision ( 4 ) < < " fmax ( 10.0 , -1.0f ) = " < < val < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 19.0 ; cout < < " The value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 9.6 / 0.0 ; cout < < " The value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x = 0.0 / 0.0 ; cout < < " Value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char * str1 = " This is GeeksForGeeks " ; cout < < str1 < < endl ; int size = 30 ; char * str2 = ( char * ) malloc ( sizeof ( char ) * size ) ; str2 = " GeeksForGeeks For Everyone " ; cout < < str2 ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char * str = " Hello " ; const char * str1 = " Hello " ; str [ 1 ] = 'o' ; cout < < str < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char str [ ] = " Hello " ; str [ 1 ] = 'o' ; cout < < str < < endl ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; int main ( ) { char str [ 10 ] = " Hello " ; cout < < " Before Concatenation : " < < str < < endl ; strcat ( str , " World " ) ; cout < < " After Concatenation : " < < str ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { wchar_t w = L'A' ; cout < < " Wide character value : : " < < w < < endl ; cout < < " Size of the wide char is : : " < < sizeof ( w ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char caname [ ] = " geeksforgeeks " ; cout < < caname < < endl ; wchar_t waname [ ] = L " geeksforgeeks " ; wcout < < waname < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t waname [ ] = L " geeksforgeeks " ; wcout < < L " The length of ' " < < waname < < L " ' is " < < wcslen ( waname ) < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t waname [ ] = L " geeksforgeeks " ; wchar_t wacopy [ 14 ] ; wcscpy ( wacopy , waname ) ; wcout < < L " Original = " < < waname < < L " \n Copy = " < < wacopy < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " geeksforgeeks " ; wchar_t string2 [ ] = L " is for Geeks " ; wcscat ( string1 , string2 ) ; wcout < < L " Concatenated wide string is = " < < string1 < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " geeksforgeeks " ; wchar_t string2 [ ] = L " GEEKS " ; wcout < < L " Comparison1 = " < < wcscmp ( string1 , string2 ) < < endl ; wcout < < L " Comparison2 = " < < wcscmp ( string1 , string1 ) < < endl ; wcout < < L " Comparison3 = " < < wcscmp ( string2 , string1 ) < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string [ ] = L " geeksforgeeks , is , for , GEEKS " ; wchar_t * internal_state ; wchar_t delim [ ] = L " , " ; wchar_t * token = wcstok ( string , delim , & internal ; _state ) ; while ( token ) { wcout < < token < < endl ; token = wcstok ( NULL , delim , & internal ; _state ) ; } return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " Geeks For Geeks " ; wchar_t string2 [ 20 ] ; wchar_t string3 [ 20 ] ; wcsncpy ( string2 , string1 , 20 ) ; wcsncpy ( string3 , string2 , 5 ) ; string3 [ 5 ] = L'\0' ; wcout < < string1 < < endl < < string2 < < endl < < string3 ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " Geeks Are Geeks " ; wchar_t * string2 = wcsstr ( string1 , L " Are " ) ; wcsncpy ( string2 , L " For " , 3 ) ; wcout < < string1 < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { int ch ; while ( ( ch = getchar ( ) ) ! = '1' ) putchar ( ch ) ; ungetc ( ch , stdin ) ; ch = getchar ( ) ; putchar ( ch ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x ; public : A ( ) { x = 0 ; } void fun ( ) { delete this ; cout < <x ; } } ;
#include <iostream> template <typename T , size_t N> void printDimensions ( const T ( & a ; ) [ N ] ) { std : : cout < < N ; } template <typename T , size_t N , size_t M> void printDimensions ( const T ( & a ; ) [ N ] [ M ] ) { std : : cout < < N < < " x " ; printDimensions ( a [ 0 ] ) ; } int main ( ) { int a [ 2 ] [ 3 ] [ 4 ] ; printDimensions ( a ) ; return 0 ; }
#include <iostream> #include <cmath> using namespace std ; double findProbability ( double a ) { double prob_x_a = erf ( a ) ; return prob_x_a ; } int main ( ) { double a = 0.25 ; cout < < " probability that normal r.v " " X takes value between " < < -a < < " & " < < a < < " is " < < findProbability ( a ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string dec_num = " 9876543210 " ; cout < < " dec_num = " < < stol ( dec_num , nullptr , 10 ) < < " \n  " ; string hex_num = " FFFFFF " ; cout < < " hex_num = " < < stol ( hex_num , nullptr , 16 ) < < " \n  " ; string binary_num = " 1111111 " ; cout < < " binary_num = " < < stol ( binary_num , nullptr , 2 ) < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string dec_num = " 9876543210 " ; cout < < " dec_num = " < < stoll ( dec_num , nullptr , 10 ) < < " \n  " ; string hex_num = " FFFFFF " ; cout < < " hex_num = " < < stoll ( hex_num , nullptr , 16 ) < < " \n  " ; string binary_num = " 1111111 " ; cout < < " binary_num = " < < stoll ( binary_num , nullptr , 2 ) < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string invalid_num = " abcf$#@de " ; try { cout < < stoll ( invalid_num ) < < " \n  " ; } catch ( const std : : invalid_argument ) { cerr < < " Invalid argument " < < " \n  " ; } return 0 ; }
#include <iostream> using namespace std ; class Test { int value ; public : Test ( int v = 0 ) { value = v ; } int getValue ( ) const { return value ; } } ; int main ( ) { Test t ( 20 ) ; cout < <t.getValue ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int value ; public : Test ( int v = 0 ) { value = v ; } int getValue ( ) { return value ; } } ; int main ( ) { const Test t ; cout < < t.getValue ( ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { string str = str1 ; str1 + = str2 ; cout < < " Using + = : " ; cout < < str1 < < endl ; str.append ( str2 ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2 , 0 , 5 ) ; cout < < " Using append ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " GeeksforGeeks " ) ; string str2 ( " Hello World! " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { string str1 = str ; str + = " GeeksforGeeks " ; cout < < " Using + = : " ; cout < < str < < endl ; str1.append ( " GeeksforGeeks " ) ; cout < < " Using append ( ) : " ; cout < < str1 < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { string str1 = str ; str + = 'C' ; cout < < " Using + = : " < < str < < endl ; str1.push_back ( 'C' ) ; cout < < " Using push_back : " ; cout < < str1 ; } int main ( ) { string str ( " AB " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2.begin ( ) + 5 , str2.end ( ) ) ; cout < < " Using append : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; string appendDemo ( string str1 , string str2 ) { str1.append ( str2 ) ; cout < < " Using append : " ; return str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; string str ; cout < < " Original String : " < < str1 < < endl ; str = appendDemo ( str1 , str2 ) ; cout < < str ; return 0 ; }
#include <iostream> #include <thread> #include <chrono> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 5 ; + + i ) { cout < < i < < " " ; this_thread : : sleep_for ( chrono : : seconds ( 1 ) ) ; } cout < < endl ; return 0 ; }
#include <iostream> #include <thread> #include <chrono> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 5 ; + + i ) { cout < < i < < " " < < flush ; this_thread : : sleep_for ( chrono : : seconds ( 1 ) ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { array <int , 5> s { 1 , 2 , 3 , 4 , 5 } ; unsigned seed = 0 ; shuffle ( s.begin ( ) , s.end ( ) , default_random_engine ( seed ) ) ; cout < < " shuffled elements are : " ; for ( int & i : s ) cout < < ' ' < < i ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> int x = printf ( " Hello World " ) ; int main ( ) { }
#include <iostream> using namespace std ; class A { public : A ( ) { cout < < " Hello World " ; } } ; A obj ; int main ( ) { }
#include <stdio.h> void main ( ) { int a ; if ( a = = 2 ) a + + ; printf ( " value of a is " , a ) ; else printf ( " value of a is not equal to 2 " ) ; }
#include <stdio.h> void main ( ) { int a ; 10 = a ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] ; int i ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " Enter number : " ) ; scanf ( " %d " , arr ) ; arr + + ; } }
#include <stdio.h> int main ( ) { for ( int i = 0 ; i <5 ; i + + ) { if ( fork ( ) = = 0 ) { printf ( " [ son ] pid %d from [ parent ] pid %d\n  " , getpid ( ) , getppid ( ) ) ; exit ( 0 ) ; } } for ( int i = 0 ; i <5 ; i + + ) wait ( NULL ) ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> myvector { 1 , 2 , 3 , 4 , 5 } ; myvector.push_back ( 6 ) ; for ( auto x : myvector ) cout < < x < < " " ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> myvector { 1 , 2 , 3 , 4 , 5 } ; auto it = myvector.begin ( ) ; myvector.erase ( it ) ; for ( auto x : myvector ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on double answer ( double y ) { fenv_t trial ; feholdexcept ( & trial ; ) ; y = log ( y ) ; feclearexcept ( FE_OVERFLOW | FE_DIVBYZERO ) ; feupdateenv ( & trial ; ) ; return y ; } int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; printf ( " log ( 0.0 ) : %f\n  " , answer ( 0.0 ) ) ; if ( !fetestexcept ( FE_ALL_EXCEPT ) ) { printf ( " no exceptions raised " ) ; } return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on double answer ( double y ) { fenv_t trial ; feholdexcept ( & trial ; ) ; y = log ( y ) ; feclearexcept ( FE_OVERFLOW | FE_DIVBYZERO ) ; feupdateenv ( & trial ; ) ; return y ; } int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; printf ( " log ( 10.0 ) : %f\n  " , answer ( 10.0 ) ) ; if ( !fetestexcept ( FE_ALL_EXCEPT ) ) { printf ( " no exceptions raised " ) ; } else printf ( " exceptions raised " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t time_ptr ; time ( & time ; _ptr ) ; cout < < " Current date and time = " < < asctime ( localtime ( & time ; _ptr ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int n = 7 ; int x = 5 ; int ans ; ans = scalbn ( x , n ) ; cout < < x < < " * " < < FLT_RADIX < < " ^ " < < n < < " = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int n = 7 ; double x = 3.9 ; int ans ; ans = scalbn ( x , n ) ; cout < < x < < " * " < < FLT_RADIX < < " ^ " < < n < < " = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 6.3 ; float y = sqrt ( -9 ) ; cout < < " The value of x is = " < < x < < endl ; cout < < " The value of y is = " < < y < < endl ; cout < < " isunordered ( x , y ) = " < <isunordered ( x , y ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 4.6 ; float y = 9.2 ; cout < < " The value of x is = " < < x < < endl ; cout < < " The value of y is = " < < y < < endl ; cout < < " isunordered ( x , y ) = " < <isunordered ( x , y ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float f = 7.0F ; cout < < " isnormal ( 7.0 ) is = " < < isnormal ( f ) < < endl ; f = 0.0F ; cout < < " isnormal ( 0.0 ) is = " < < isnormal ( f ) < < endl ; f = 9.2F ; cout < < " isnormal ( 9.2 / 0.0 ) is = " < < isnormal ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double f = 7.0 ; cout < < " isnormal ( 7.0 ) is = " < < isnormal ( f ) < < endl ; f = 0.0 ; cout < < " isnormal ( 0.0 ) is = " < < isnormal ( f ) < < endl ; f = 9.2 ; cout < < " isnormal ( 9.2 / 0.0 ) is = " < < isnormal ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { long double f = 7.0 ; cout < < " isnormal ( 7.0 ) is = " < < isnormal ( f ) < < endl ; f = 0.0 ; cout < < " isnormal ( 0.0 ) is = " < < isnormal ( f ) < < endl ; f = 9.2 ; cout < < " isnormal ( 9.2 / 0.0 ) is = " < < isnormal ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 20 ] ; wchar_t source [ 20 ] ; wcscpy ( destination , L " Geekforgeeks " ) ; wcscpy ( source , L " is the best " ) ; wcsncat ( destination , source , 20 ) ; wprintf ( L " %ls\n  " , destination ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 40 ] ; wchar_t source [ 40 ] ; wcscpy ( destination , L " only some of the " ) ; wcscpy ( source , L " letters will be copied " ) ; wcsncat ( destination , source , 20 ) ; wprintf ( L " %ls\n  " , destination ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " GeeksforGeeks " ; wcout < < L " The lowercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towlower ( str [ i ] ) ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " hello Ishwar 123!@# " ; wcout < < L " The lowercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towlower ( str [ i ] ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 1987 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , x ) ) ) ; return ( 0 ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * array = new int [ 10 ] ; delete [ ] array ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr = NULL ; delete ptr ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr1 = new int ; int * ptr2 = new int ( 20 ) ; cout < < " Value of ptr1 = " < < * ptr1 < < " \n  " ; cout < < " Value of ptr2 = " < < * ptr2 < < " \n  " ; delete ptr1 ; delete ptr2 ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { void * ptr ; delete ptr ; cout < < " ptr deleted successfully " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr2 = ( int * ) malloc ( sizeof ( int ) ) ; delete ptr2 ; cout < < " ptr2 deleted successfully " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int x ; delete x ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int x ; int * ptr1 = & x ; delete ptr1 ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { double y [ ] = { 0.0 , 3.0 , -2.0 } ; double x [ ] = { -3.0 , 3.0 , -1.0 } ; valarray <double> ycoords ( y , 3 ) ; valarray <double> xcoords ( x , 3 ) ; valarray <double> res = atan2 ( ycoords , xcoords ) ; cout < < " results : " ; for ( size_t i = 0 ; i < res.size ( ) ; + + i ) cout < < ' ' < < res [ i ] ; cout < < '\n ' ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { double y [ ] = { 4.0 , 5.6 , -2.8 , 7.3 } ; double x [ ] = { 5.0 , -1.5 , 7.0 , -0.8 } ; valarray <double> ycoords ( y , 4 ) ; valarray <double> xcoords ( x , 4 ) ; valarray <double> res = atan2 ( ycoords , xcoords ) ; cout < < " results : " ; for ( size_t i = 0 ; i < res.size ( ) ; + + i ) cout < < ' ' < < res [ i ] ; cout < < '\n ' ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { double y [ ] = { -2.8 , 7.3 } ; float x [ ] = { 5.0 , -0.8 , 3.2 , 5 , 1 } ; valarray <double> ycoords ( y , 2 ) ; valarray <float> xcoords ( x , 4 ) ; valarray <double> res = atan2 ( ycoords , xcoords ) ; cout < < " results : " ; for ( size_t i = 0 ; i < res.size ( ) ; + + i ) cout < < ' ' < < res [ i ] ; cout < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { string string1 = " Geeks.\n For.\n Geeks.\n  " ; string string2 = R " ( Geeks.\n For.\n Geeks.\n  ) " ; cout < < string1 < < endl ; cout < < string2 < < endl ; return 0 ; }
#include <iostream> using namespace std ; class B { public : B ( const char * str = " \0 " ) { cout < < " Constructor called " < < endl ; } B ( const B & b ; ) { cout < < " Copy constructor called " < < endl ; } } ; int main ( ) { B ob = " copy me " ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { cout < < " Hello " ; return ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void work ( ) { cout < < " The void function has returned " " a void ( ) !!! \n  " ; } void test ( ) { return work ( ) ; } int main ( ) { test ( ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( ) { cout < < " Hello " ; return ( void ) " Doesn't Print " ; } int main ( ) { test ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Fraction { int num , den ; public : Fraction ( int n , int d ) { num = n ; den = d ; } operator float ( ) const { return float ( num ) / float ( den ) ; } } ; int main ( ) { Fraction f ( 2 , 5 ) ; float val = f ; cout < < val ; return 0 ; }
#include <iostream> using namespace std ; class Point { private : int x , y ; public : Point ( int i = 0 , int j = 0 ) { x = i ; y = j ; } void print ( ) { cout < < endl < < " x = " < < x < < " , y = " < < y ; } } ; int main ( ) { Point t ( 20 , 20 ) ; t.print ( ) ; t = 30 ; t.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class construct { public : float area ; construct ( ) { area = 0 ; } construct ( int a , int b ) { area = a * b ; } void disp ( ) { cout < < area < < endl ; } } ; int main ( ) { construct o ; construct o2 ( 10 , 20 ) ; o.disp ( ) ; o2.disp ( ) ; return 1 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * pi = new int [ 5 ] { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i < 5 ; i + + ) cout < < * ( pi + i ) ; }
#include <iostream> using namespace std ; class A { int arr [ 3 ] ; public : A ( int x , int y , int z ) : arr { x , y , z } { } ; void show ( ) { for ( int i = 0 ; i < 3 ; i + + ) cout < < * ( arr + i ) ; } } ; int main ( ) { A a ( 1 , 2 , 3 ) ; a.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int a ; int b ; public : A ( int x , int y ) : a ( x ) , b ( y ) { } void show ( ) { cout < < a < < " " < < b ; } } ; A f ( int a , int b ) { return { a , b } ; } int main ( ) { A x = f ( 1 , 2 ) ; x.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int a ; int b ; public : A ( int x , int y ) : a ( x ) , b ( y ) { } void show ( ) { cout < < a < < " " < < b ; } } ; void f ( A x ) { x.show ( ) ; } int main ( ) { f ( { 1 , 2 } ) ; return 0 ; }
#include <bits / stdc + + .h> #define SIZE ( x ) sizeof ( x ) * 8 using namespace std ; void UnsignedRange ( int count ) { unsigned int max = pow ( 2 , count ) - 1 ; cout < < " 0 to " < < max ; } int main ( ) { cout < < " unsigned char : " ; UnsignedRange ( SIZE ( unsigned char ) ) ; cout < < " \n unsigned int : " ; UnsignedRange ( SIZE ( unsigned int ) ) ; cout < < " \n unsigned short int : " ; UnsignedRange ( SIZE ( unsigned short ) ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; class Test { public : Test ( ) { } Test ( const Test & t ; ) { cout < < " Copy constructor called " < <endl ; } Test & operator = ( const Test & t ; ) { cout < < " Assignment operator called " < <endl ; } } ; int main ( ) { Test t1 , t2 ; t2 = t1 ; Test t3 = t1 ; getchar ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { public : A & operator = ( A & a ; ) { cout < < " base class assignment operator called " ; return * this ; } } ; class B : public A { } ; int main ( ) { B a , b ; a.A : : operator = ( b ) ; getchar ( ) ; return 0 ; }
#include <iostream> #include " Header1.h " #include " Header2.h " using namespace std ; using namespace one ; using namespace two ; int main ( ) { print ( ) ; }
#include <iostream> #include " Header1.h " #include " Header2.h " int main ( ) { one : : print ( ) ; two : : print ( ) ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { int m ; } ; struct sam { virtual void foo ( ) = 0 ; } ; class raj : sam { } ; int main ( ) { cout < < boolalpha ; cout < < " is_abstract : " < < '\n ' ; cout < < " gfg : " < < is_abstract <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_abstract <sam> : : value < < '\n ' ; cout < < " raj : " < < is_abstract <raj> : : value < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; template <class T> void fun ( T a ) { cout < < " The main template fun ( ) : " < < a < < endl ; } template <> void fun ( int a ) { cout < < " Specialized Template for int type : " < < a < < endl ; } int main ( ) { fun <char> ( 'a' ) ; fun <int> ( 10 ) ; fun <float> ( 10.14 ) ; }
#include <iostream> using namespace std ; template <class T> class Test { public : Test ( ) { cout < < " General template object \n  " ; } } ; template <> class Test <int> { public : Test ( ) { cout < < " Specialized template object\n  " ; } } ; int main ( ) { Test <int> a ; Test <char> b ; Test <float> c ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_signed : " < < '\n ' ; cout < < " float : " < < is_signed <float> : : value < < '\n ' ; cout < < " signed int : " < < is_signed <signed int> : : value < < '\n ' ; cout < < " unsigned int : " < < is_signed <unsigned int> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_signed : " < < '\n ' ; cout < < " bool : " < < is_signed <bool> : : value < < '\n ' ; cout < < " unsigned char : " < < is_signed <unsigned char> : : value < < '\n ' ; cout < < " signed char : " < < is_signed <signed char> : : value < < '\n ' ; cout < < " double : " < < is_signed <double> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; union gfg { int var1 ; } ; union sam { int var2 ; private : int var3 ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_pod : " < < '\n ' ; cout < < " gfg : " < < is_pod <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_pod <sam> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str1 , string str2 ) { str1.insert ( 6 , str2 ) ; cout < < " Using insert : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; insertDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str1 , string str2 ) { str1.insert ( 6 , str2 , 8 , 6 ) ; cout < < " Using insert : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; insertDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , " are " ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , " are here " , 10 ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , 5 , '$' ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " * * * * * * * * * * " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( str.begin ( ) + 5 , 5 , '$' ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " * * * * * * * * * * " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { std : : string : : iterator pos ; pos = str.insert ( str.begin ( ) + 5 , '$' ) ; cout < < " Using insert : " ; cout < < str < < endl ; cout < < " Value at Iterator returned : " < < * pos ; } int main ( ) { string str ( " * * * * * * * * * * " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str1 , string str2 ) { str1.insert ( str1.begin ( ) + 6 , str2.begin ( ) + 5 , str2.end ( ) - 6 ) ; cout < < " Using insert : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; insertDemo ( str1 , str2 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unordered_map <std : : string , std : : string> mymap ; mymap = { { " Australia " , " Canberra " } , { " U.S. " , " Washington " } , { " France " , " Paris " } } ; auto it = mymap.begin ( ) ; cout < < it-> first < < " " < < it-> second ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unordered_map <std : : string , std : : string> mymap ; mymap = { { " Australia " , " Canberra " } , { " U.S. " , " Washington " } , { " France " , " Paris " } } ; auto it = mymap.begin ( 0 ) ; cout < < it-> first < < " " < < it-> second ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string str = " FF " ; unsigned long num = stoul ( str , nullptr , 16 ) ; cout < < num < < " \n  " ; string st = " FFFFFF " ; unsigned long long val = stoull ( st , nullptr , 16 ) ; cout < < val ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { const wchar_t * src = L " Geekforgeeks " ; char dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int len = 12 ; int value = wcsrtombs ( dest , & src ; , len , & ps ; ) ; cout < < " Number of multibyte characters = " < < value < < endl ; cout < < " Multibyte characters written = " < < dest < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { const wchar_t * src = L " This website is the best " ; char dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int len = 14 ; int value = wcsrtombs ( dest , & src ; , len , & ps ; ) ; cout < < " Number of multibyte characters = " < < value < < endl ; cout < < " Multibyte characters written = " < < dest < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int num ; cout < < " Enter the integer : " ; cin > > num ; cout < < " Entered integer is : " < < num ; return 0 ; }
#include <algorithm> #include <functional> #include <iostream> #include <iterator> using namespace std ; int main ( ) { int xyz [ ] = { 500 , 600 , 300 , 800 , 200 } ; int abc [ ] = { 0xf , 0xf , 0xf , 255 , 255 } ; int n = 5 ; int results [ n ] ; transform ( xyz , end ( xyz ) , abc , results , bit_and <int> ( ) ) ; cout < < " Results : " ; for ( const int & x : results ) cout < < ' ' < < x ; return 0 ; }
#include <algorithm> #include <functional> #include <iostream> #include <iterator> using namespace std ; int main ( ) { int xyz [ ] = { 0 , 1100 } ; int abc [ ] = { 0xf , 0xf } ; int results [ 2 ] ; transform ( xyz , end ( xyz ) , abc , results , bit_and <int> ( ) ) ; cout < < " Results : " ; for ( const int & x : results ) cout < < ' ' < < x ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " aksh " ; char str2 [ 10 ] = " akash " ; int result = strncmp ( str1 , str2 , 4 ) ; if ( result = = 0 ) { printf ( " str1 is equal to str2 upto num characters\n  " ) ; } else if ( result > 0 ) printf ( " str1 is greater than str2\n  " ) ; else printf ( " str2 is greater than str1\n  " ) ; printf ( " Value returned by strncmp ( ) is : %d " , result ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " akash " ; char str2 [ 10 ] = " aksh " ; int result = strncmp ( str1 , str2 , 4 ) ; if ( result = = 0 ) { printf ( " str1 is equal to str2 upto num characters\n  " ) ; } else if ( result > 0 ) printf ( " str1 is greater than str2\n  " ) ; else printf ( " str2 is greater than str1\n  " ) ; printf ( " Value returned by strncmp ( ) is : %d " , result ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " akash " ; char str2 [ 10 ] = " akas " ; int result = strncmp ( str1 , str2 , 4 ) ; if ( result = = 0 ) { printf ( " str1 is equal to str2 upto num characters\n  " ) ; } else if ( result > 0 ) printf ( " str1 is greater than str2\n  " ) ; else printf ( " str2 is greater than str1\n  " ) ; printf ( " Value returned by strncmp ( ) is : %d " , result ) ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct GFG1 { } ; union GFG2 { int var1 ; float var2 ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_union : " < < endl ; cout < < " GFG1 : " < < is_union <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_union <GFG2> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; union GFG1 { int var1 ; float var2 ; char var3 ; } ; struct GFG2 { union { int var4 ; float var5 ; } ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_union : " < < endl ; cout < < " int : " < < is_union <int> : : value < < endl ; cout < < " GFG1 : " < < is_union <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_union <GFG2> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { int m ; } ; struct sam { virtual void foo ( ) = 0 ; } ; class raj : sam { } ; int main ( ) { cout < < boolalpha ; cout < < " is_polymorphic : " < < '\n ' ; cout < < " gfg : " < < is_polymorphic <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_polymorphic <sam> : : value < < '\n ' ; cout < < " raj : " < < is_polymorphic <raj> : : value < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 20 , 30 , 40 , 50 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -10 , -20 , -30 , -40 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 12 , -20 , 0 , -30 } ; valarray <int> varr1 ; varr1 = abs ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -36 , -369 , -20 , 0 , -30 } ; valarray <int> varr1 ; varr1 = abs ( varr ) ; cout < < " The new valarray " < < " with manipulated values is : " ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1 , 2 , 3 , 4 , 5 } ; valarray <double> varr1 ; varr1 = log10 ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { -1 , 6 , 3 , 45 , 5 } ; valarray <double> varr1 ; varr1 = log10 ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_volatile : " < < '\n ' ; cout < < " volatile int : " < < is_volatile <volatile int> : : value < < '\n ' ; cout < < " volatile void : " < < is_volatile <volatile void> : : value < < '\n ' ; cout < < " int : " < < is_volatile <int> : : value < < '\n ' ; cout < < " char : " < < is_volatile <char> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_volatile : " < < '\n ' ; cout < < " double : " < < is_volatile <double> : : value < < '\n ' ; cout < < " float : " < < is_volatile <float> : : value < < '\n ' ; cout < < " const volatile void : " < < is_volatile <const volatile void> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_volatile : " < < '\n ' ; cout < < " volatile double : " < < is_volatile <volatile double> : : value < < '\n ' ; cout < < " volatile float : " < < is_volatile <volatile float> : : value < < '\n ' ; cout < < " bool : " < < is_volatile <bool> : : value < < '\n ' ; cout < < " volatile char : " < < is_volatile <volatile char> : : value < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; class Parent { public : Parent ( ) { cout < < " Inside base class " < < endl ; } } ; class Child : public Parent { public : Child ( ) { cout < < " Inside sub class " < < endl ; } } ; int main ( ) { Child obj ; return 0 ; }
#include <iostream> using namespace std ; class Parent1 { public : Parent1 ( ) { cout < < " Inside first base class " < < endl ; } } ; class Parent2 { public : Parent2 ( ) { cout < < " Inside second base class " < < endl ; } } ; class Child : public Parent1 , public Parent2 { public : Child ( ) { cout < < " Inside child class " < < endl ; } } ; int main ( ) { Child obj1 ; return 0 ; }
#include <iostream> using namespace std ; class Parent { public : Parent ( int i ) { int x = i ; cout < < " Inside base class's parameterised constructor " < < endl ; } } ; class Child : public Parent { public : Child ( int j ) : Parent ( j ) { cout < < " Inside sub class's parameterised constructor " < < endl ; } } ; int main ( ) { Child obj1 ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char sample [ ] = " GeeksforGeeks " ; cout < < sample < < " - A computer science portal for geeks " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int age ; cout < < " Enter your age : " ; cin > > age ; cout < < " \n Your age is : " < <age ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cerr < < " An error occured " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { clog < < " An error occured " ; return 0 ; }
#include <iostream> class Base { public : virtual ~Base ( ) = 0 ; } ; class Derived : public Base { public : ~Derived ( ) { std : : cout < < " ~Derived ( ) is executed " ; } } ; int main ( ) { Base * b = new Derived ( ) ; delete b ; return 0 ; }
#include <iostream> class Base { public : virtual ~Base ( ) = 0 ; } ; Base : : ~Base ( ) { std : : cout < < " Pure virtual destructor is called " ; } class Derived : public Base { public : ~Derived ( ) { std : : cout < < " ~Derived ( ) is executed\n  " ; } } ; int main ( ) { Base * b = new Derived ( ) ; delete b ; return 0 ; }
#include <iostream> class Test { public : virtual ~Test ( ) = 0 ; } ; Test : : ~Test ( ) { } int main ( ) { Test p ; Test * t1 = new Test ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 1 , 4 , 5 } ; cout < < " The smallest element " < < " of valarray is = " < < varr.min ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 22 , 24 , 36 , 42 , 12 } ; cout < < " The smallest element " < < " of valarray is = " < < varr.min ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 15 , 10 , 30 , 33 , 40 } ; cout < < " The sum of valarray is = " < < varr.sum ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 1 , 2 , 3 , 4 , 5 } ; cout < < " The sum of valarray is = " < < varr.sum ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1 , 2 , 3 , 4 , 5 } ; valarray <double> varr1 ; varr1 = log ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { -1 , 6 , 3 , 45 , 5 } ; valarray <double> varr1 ; varr1 = log ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -1 , 2 , 3 , 4 , -5 } ; valarray <int> varr1 ; varr1 = pow ( varr , 3 ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -1 , 6 , 3 , 4 , 5 } ; valarray <int> varr1 ; varr1 = pow ( varr , 2 ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = tan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1.2 , 3.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = tan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1 , 2 , 3 , 4 , 5 } ; valarray <double> varr1 ; varr1 = exp ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { -1 , 0 , 3 , 0 , -5 } ; valarray <double> varr1 ; varr1 = exp ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = sin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1.2 , 3.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = sin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.shift ( 3 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.shift ( -2 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 1 , 4 , 5 } ; cout < < " The largest element of valarray is = " ; cout < < varr.max ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 22 , 24 , 36 , 42 , 12 } ; cout < < " The largest element of valarray is = " ; cout < < varr.max ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = cos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1.2 , 3.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = cos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = acos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = acos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = atan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = atan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( s2 ) ) < 0 ) cout < < s1 < < " is smaller than " < < s2 < < endl ; if ( ( s1.compare ( s1 ) ) = = 0 ) cout < < s1 < < " is equal to " < < s1 < < endl ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s2.compare ( 3 , 5 , s1 ) ) = = 0 ) cout < < " Here , " < < s1 < < " are " < < s2 ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( 0 , 5 , s2 , 3 , 5 ) ) = = 0 ) cout < < " Welcome to " < < s1 < < s2 < < " World " ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 ) { if ( ( s1.compare ( 0 , 5 , " Geeks " ) ) = = 0 ) cout < < s1 < < " are " < < " awesome people " ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; compareOperation ( s1 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( 0 , 5 , " Geeks " , 5 ) ) = = 0 ) cout < < " This is " < < s1 < < s2 ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void usingCompare ( string str1 , string str2 ) { if ( str1.compare ( 2 , 3 , str2 , 3 , 3 ) = = 0 ) cout < < " Both are same " ; else cout < < " Not equal " ; } int main ( ) { string s1 ( " GeeksforGeeks " ) ; string s2 ( " HelloWorld ! " ) ; usingCompare ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; float Division ( float num , float den ) { return ( num / den ) ; } int main ( ) { float numerator = 12.5 ; float denominator = 0 ; float result ; result = Division ( numerator , denominator ) ; cout < < " The quotient of 12.5 / 0 is " < < result < < endl ; }
#include <iostream> #include <stdexcept> using namespace std ; float CheckDenominator ( float den ) { if ( den = = 0 ) throw " Error " ; else return den ; } int main ( ) { float numerator , denominator , result ; numerator = 12.5 ; denominator = 0 ; try { if ( CheckDenominator ( denominator ) ) { result = ( numerator / denominator ) ; cout < < " The quotient is " < < result < < endl ; } } catch ( ... ) { cout < < " Exception occurred " < < endl ; } }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; fillpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; setfillstyle ( XHATCH_FILL , RED ) ; fillpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current position of x = %d " , getx ( ) ) ; outtext ( arr ) ; moveto ( 80 , 50 ) ; sprintf ( arr , " Current position of x = %d " , getx ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; linerel ( 200 , 100 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 150 ) ; linerel ( 150 , 60 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> using namespace std ; void pypart ( int n ) { for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; pypart ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void pypart2 ( int n ) { int k = 2 * n - 2 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j <k ; j + + ) cout < < " " ; k = k - 2 ; for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; pypart2 ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void triangle ( int n ) { int k = 2 * n - 2 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j <k ; j + + ) cout < < " " ; k = k - 1 ; for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; triangle ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void numpat ( int n ) { int num = 1 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) cout < < num < < " " ; num = num + 1 ; cout < < endl ; } } int main ( ) { int n = 5 ; numpat ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void numpat ( int n ) { int num = 1 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { cout < < num < < " " ; num = num + 1 ; } cout < < endl ; } } int main ( ) { int n = 5 ; numpat ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void alphapat ( int n ) { int num = 65 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { char ch = char ( num ) ; cout < < ch < < " " ; } num = num + 1 ; cout < < endl ; } } int main ( ) { int n = 5 ; alphapat ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void contalpha ( int n ) { int num = 65 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { char ch = char ( num ) ; cout < < ch < < " " ; num = num + 1 ; } cout < < endl ; } } int main ( ) { int n = 5 ; contalpha ( n ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ws [ ] = L " This is some good coding " ; wchar_t * point ; wprintf ( L " Looking for the 'o' character in \ " %ls\ " ...\n  " , ws ) ; point = wcschr ( ws , L'o' ) ; while ( point ! = NULL ) { wprintf ( L " found at %d\n  " , point - ws + 1 ) ; point = wcschr ( point + 1 , L'o' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ws [ ] = L " geekforgeeks " ; wchar_t * point ; wprintf ( L " Looking for the 'g' character in \ " %ls\ " ...\n  " , ws ) ; point = wcschr ( ws , L'g' ) ; while ( point ! = NULL ) { wprintf ( L " found at %d\n  " , point - ws + 1 ) ; point = wcschr ( point + 1 , L'g' ) ; } return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on double divide ( double x , double y ) { fenv_t envp ; double ans = x / y ; feholdexcept ( & envp ; ) ; feclearexcept ( FE_OVERFLOW | FE_DIVBYZERO ) ; return ans ; } int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; double x = 10 ; double y = 0 ; printf ( " x / y = %f\n  " , divide ( x , y ) ) ; if ( !fetestexcept ( FE_ALL_EXCEPT ) ) { printf ( " No exceptions raised " ) ; } return 0 ; }
#include <iostream> #include <vector> #include <iterator> using namespace std ; int main ( ) { vector <int> v ; int i ; for ( i = 0 ; i < 10 ; + + i ) { v.push_back ( i ) ; } vector <int> : : iterator first ; vector <int> : : iterator last ; first = v.begin ( ) ; last = v.begin ( ) + 5 ; int num = std : : distance ( first , last ) ; cout < < num < < " \n  " ; return 0 ; }
#include <iostream> #include <vector> #include <iterator> using namespace std ; int main ( ) { vector <int> v ; int i ; for ( i = 0 ; i < 10 ; + + i ) { v.push_back ( i ) ; } int num = std : : distance ( v.begin ( ) , v.end ( ) ) ; cout < < num < < " \n  " ; num = std : : distance ( v.end ( ) , v.begin ( ) ) ; cout < < num < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string_1 [ ] = L " geeksforgeeks012345 " ; wchar_t string_2 [ ] = L " 0123456789 " ; int last = wcscspn ( string_1 , string_2 ) ; if ( last > wcslen ( string_1 ) ) wcout < < string_1 < < L " Didn't match any character " ; else wcout < < L " Occurrence of a character in -> \n  " < < string_1 < < " is at position : " < < last ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string_1 [ ] = L " GFG " ; wchar_t string_2 [ ] = L " 909090909 " ; int last = wcscspn ( string_1 , string_2 ) ; if ( last > wcslen ( string_1 ) ) wcout < < string_1 < < L " does not contain numbers " ; else wcout < < L " Length of the string -> " < < string_1 < < " is : " < < last ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = ' ' ; wchar_t ch2 = 'i' ; if ( isblank ( ch1 ) ) cout < < " ch1 is blank \n  " ; else cout < < " ch1 is not blank\n  " ; if ( isblank ( ch2 ) ) cout < < " ch2 is blank \n  " ; else cout < < " ch2 is not blank\n  " ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = '3' ; wchar_t ch2 = ' ' ; if ( isblank ( ch1 ) ) cout < < " ch1 is blank \n  " ; else cout < < " ch1 is not blank\n  " ; if ( isblank ( ch2 ) ) cout < < " ch2 is blank \n  " ; else cout < < " ch2 is not blank\n  " ; return 0 ; }
#include <iostream> using namespace std ; void func ( ) { int age = 18 ; } int main ( ) { cout < < " Age is : " < <age ; return 0 ; }
#include <iostream> using namespace std ; void func ( ) { int age = 18 ; cout < <age ; } int main ( ) { cout < < " Age is : " ; func ( ) ; return 0 ; }
#include <iostream> using namespace std ; int global = 5 ; void display ( ) { cout < <global < <endl ; } int main ( ) { display ( ) ; global = 10 ; display ( ) ; }
#include <iostream> using namespace std ; int global = 5 ; int main ( ) { int global = 2 ; cout < < global < < endl ; }
#include <iostream> using namespace std ; int x = 0 ; int main ( ) { int x = 10 ; cout < < " Value of global x is " < < : : x ; cout < < " \n Value of local x is " < < x ; return 0 ; }
#include <iostream> using namespace std ; class Derived ; class Base { private : virtual void fun ( ) { cout < < " Base Fun " ; } friend int main ( ) ; } ; class Derived : public Base { public : void fun ( ) { cout < < " Derived Fun " ; } } ; int main ( ) { Base * ptr = new Derived ; ptr-> fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; struct Geeks { int i ; float f ; char s ; } ; int main ( ) { cout < < " alignment of Geeks : " < < alignof ( Geeks ) < < '\n ' ; cout < < " sizeof of Geeks : " < < sizeof ( Geeks ) < < '\n ' ; cout < < " alignment of int : " < < alignof ( int ) < < '\n ' ; cout < < " sizeof of int : " < < sizeof ( int ) < < '\n ' ; }
#include <iostream> int main ( ) { std : : string str = " abc " ; std : : cout < < " string size = " < < str.size ( ) < < '\n ' ; std : : cout < < " Element : " < < str [ 2 ] ; }
#include <iostream> #include <sstream> using namespace std ; void extractIntegerWords ( string str ) { stringstream ss ; ss < < str ; string temp ; int found ; while ( !ss.eof ( ) ) { ss > > temp ; if ( stringstream ( temp ) > > found ) cout < < found < < " " ; temp = " " ; } } int main ( ) { string str = " 1 : 2 3 4 prakhar " ; extractIntegerWords ( str ) ; return 0 ; }
#include <stdio.h> int a = 5 ; int * b = & a ; int func ( double * b ) { a = 1 ; * b = 5.10 ; return ( a ) ; } int main ( ) { printf ( " %d " , func ( ( double * ) & a ; ) ) ; return 0 ; }
#include <stdio.h> #include <pthread.h> void * thread ( void * vargp ) { } int main ( ) { int err = 0 , count = 0 ; pthread_t tid ; while ( err = = 0 ) { err = pthread_create ( & tid ; , NULL , thread , NULL ) ; count + + ; } printf ( " Maximum number of thread within a Process " " is : %d\n  " , count ) ; }
#include <bits / stdc + + .h> #include <cstdio> using namespace std ; int main ( ) { FILE * file_ ; char buffer [ 100 ] ; file_ = fopen ( " g4g.txt " , " aman " ) ; while ( !feof ( file_ ) ) { fread ( buffer , sizeof ( buffer ) , 1 , file_ ) ; cout < < buffer ; } return 0 ; }
#include <bits / stdc + + .h> #include <cstdio> using namespace std ; int main ( ) { FILE * file_ ; char buffer [ 100 ] ; file_ = fopen ( " g4g.txt " , " aman " ) ; cout < < " count = 0 , return value = " < < fread ( buffer , sizeof ( buffer ) , 0 , file_ ) ; cout < < " \n size = 0 , return value = " < < fread ( buffer , 0 , 1 , file_ ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t dest [ 30 ] ; wchar_t src [ 30 ] ; wcscpy ( dest , L " A computer science portal for geeks " ) ; wprintf ( L " Destination : %ls\n  " , dest ) ; wcscpy ( src , L " geeksforgeeks " ) ; wprintf ( L " Source : %ls\n  " , src ) ; wmemmove ( dest + 2 , src + 3 , 5 ) ; wprintf ( L " After modication , destinstion : %ls\n  " , dest ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = tanh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 1.0 , 0.0 } ; valarray <double> varr1 ; varr1 = tanh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 20 , 30 , 40 , 50 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -10 , -20 , -30 , -40 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 4 , 16 , 25 , 36 , 49 } ; valarray <double> varr1 ; varr1 = sqrt ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 5 , 16 , 26 , 37 , 1 } ; valarray <double> varr1 ; varr1 = sqrt ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <iostream> #include <boost / lexical_cast.hpp> #include <string> using namespace std ; int main ( ) { string str = " 5 " ; string str1 = " 6.5 " ; float f_value = boost : : lexical_cast <float> ( str1 ) ; int i_value = boost : : lexical_cast <int> ( str ) ; cout < < " The float value after casting is : " ; cout < < f_value < <endl ; cout < < " The int value after casting is : " ; cout < < i_value < <endl ; return 0 ; }
#include <iostream> #include <sstream> #include <string> using namespace std ; int main ( ) { int num = 2016 ; ostringstream str1 ; str1 < < num ; string geek = str1.str ( ) ; cout < < " The newly formed string from number is : " ; cout < < geek < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { int i_val = 20 ; float f_val = 30.50 ; string stri = to_string ( i_val ) ; string strf = to_string ( f_val ) ; cout < < " The integer in string is : " ; cout < < stri < < endl ; cout < < " The float in string is : " ; cout < < strf < < endl ; return 0 ; }
#include <boost / lexical_cast.hpp> #include <string> using namespace std ; int main ( ) { float f_val = 10.5 ; int i_val = 17 ; string strf = boost : : lexical_cast <string> ( f_val ) ; string stri = boost : : lexical_cast <string> ( i_val ) ; cout < < " The float value in string is : " ; cout < < strf < < endl ; cout < < " The int value in string is : " ; cout < < stri < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str ; cout < < " Please enter your name : \n  " ; getline ( cin , str ) ; cout < < " Hello , " < < str < < " welcome to GfG !\n  " ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2 ) ; cout < < " Using append ( ) : " ; cout < < str1 < < endl ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2 , 0 , 5 ) ; cout < < " Using append ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " GeeksforGeeks " ) ; string str2 ( " Hello World! " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( " GeeksforGeeks " ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( " GeeksforGeeks " , 5 ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( 10 , '$' ) ; cout < < " After append ( ) : " ; cout < < str ; } int main ( ) { string str ( " ######### " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2.begin ( ) + 5 , str2.end ( ) ) ; cout < < " Using append : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> using namespace std ; void print ( ) { cout < < " I am empty function and " " I am called at last.\n  " ; } template <typename T , typename... Types> void print ( T var1 , Types... var2 ) { cout < < var1 < < endl ; print ( var2... ) ; } int main ( ) { print ( 1 , 2 , 3.14 , " Pass me any " " number of arguments " , " I will print\n  " ) ; return 0 ; }
#include <iostream> #include <regex> using namespace std ; int main ( ) { string a = " GeeksForGeeks " ; regex b ( " ( Geek ) ( . * ) " ) ; if ( regex_match ( a , b ) ) cout < < " String 'a' matches regular expression 'b' \n  " ; if ( regex_match ( a.begin ( ) , a.end ( ) , b ) ) cout < < " String 'a' matches with regular expression " " 'b' in the range from 0 to string end\n  " ; return 0 ; }
#include <iostream> #include <regex> #include <string.h> using namespace std ; int main ( ) { string s = " I am looking for GeeksForGeeks " " articles " ; regex r ( " Geek [ a-zA-Z ] + " ) ; smatch m ; regex_search ( s , m , r ) ; for ( auto x : m ) cout < < x < < " " ; return 0 ; }
#include <iostream> #include <string> #include <regex> #include <iterator> using namespace std ; int main ( ) { string s = " I am looking for GeeksForGeek \n  " ; regex r ( " Geek [ a-zA-z ] + " ) ; cout < < std : : regex_replace ( s , r , " geek " ) ; string result ; regex_replace ( back_inserter ( result ) , s.begin ( ) , s.end ( ) , r , " geek " ) ; cout < < result ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int input ; int count = 0 ; cout < < " To stop enter any character " ; cout < < " \n Enter Your Input : : " ; while ( cin > > input ) count + + ; cout < < " \n Total number of inputs entered : " < < count ; return 0 ; }
#include <iostream> using namespace std ; class A { int x , y , z ; public : A ( ) { x = 0 ; y = 0 ; z = 0 ; } A ( int z ) { x = 0 ; y = 0 ; this-> z = z ; } void show ( ) { cout < < x < < '\n ' < < y < < '\n ' < < z ; } } ; int main ( ) { A obj ( 3 ) ; obj.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x , y , z ; void init ( ) { x = 0 ; y = 0 ; } public : A ( ) { init ( ) ; z = 0 ; } A ( int z ) { init ( ) ; this-> z = z ; } void show ( ) { cout < < x < < '\n ' < < y < < '\n ' < < z ; } } ; int main ( ) { A obj ( 3 ) ; obj.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x , y , z ; public : A ( ) { x = 0 ; y = 0 ; z = 0 ; } A ( int z ) : A ( ) { this-> z = z ; } void show ( ) { cout < < x < < '\n ' < < y < < '\n ' < < z ; } } ; int main ( ) { A obj ( 3 ) ; obj.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; template <typename T> void fun ( const T & x ) { static int i = 10 ; cout < < + + i ; return ; } int main ( ) { fun <int> ( 1 ) ; cout < < endl ; fun <int> ( 2 ) ; cout < < endl ; fun <double> ( 1.1 ) ; cout < < endl ; getchar ( ) ; return 0 ; }
#include <iostream> using namespace std ; template <class T> class Test { private : T val ; public : static int count ; Test ( ) { count + + ; } } ; template <class T> int Test <T> : : count = 0 ; int main ( ) { Test <int> a ; Test <int> b ; Test <double> c ; cout < < Test <int> : : count < < endl ; cout < < Test <double> : : count < < endl ; getchar ( ) ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_unsigned : " < < '\n ' ; cout < < " signed char : " < < is_unsigned <signed char> : : value < < '\n ' ; cout < < " unsigned char : " < < is_unsigned <unsigned char> : : value < < '\n ' ; cout < < " signed int : " < < is_unsigned <signed int> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_unsigned : " < < '\n ' ; cout < < " bool : " < < is_unsigned <bool> : : value < < '\n ' ; cout < < " float : " < < is_unsigned <float> : : value < < '\n ' ; cout < < " double : " < < is_unsigned <double> : : value < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; const char * src = " \u0763\u0757 " ; wchar_t dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int max = 10 ; int retVal = mbsrtowcs ( dest , & src ; , max , & ps ; ) ; wcout < < L " Number of wide characters written = " < < retVal < < endl ; wcout < < L " Wide character = " < < dest < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; const char * src = u8 " z\u00df\u6c34\U0001f34c " ; wchar_t dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int max = 10 ; int retVal = mbsrtowcs ( dest , & src ; , max , & ps ; ) ; wcout < < L " Number of wide characters written = " < < retVal < < endl ; wcout < < L " Wide character = " < < dest < < endl ; return 0 ; }
#include <iostream> #include <algorithm> #include <vector> using namespace std ; int main ( ) { vector <int> v { 6 , 9 , 0 , 1 , 2 , 7 , 5 , 8 , 0 } ; stable_partition ( v.begin ( ) , v.end ( ) , [ ] ( int n ) { return n> 0 ; } ) ; for ( int n : v ) { cout < < n < < ' ' ; } cout < < '\n ' ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The exp of " < < complexnumber < < " is " < < exp ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The exp of " < < complexnumber < < " is " < < exp ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , 0.0 ) ; cout < < " The atanh of " < < complexnumber < < " is " < < atanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , -0.0 ) ; cout < < " The atanh of " < < complexnumber < < " is " < < atanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = cosh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 1.0 , 0.0 } ; valarray <double> varr1 ; varr1 = cosh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.cshift ( 3 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.cshift ( -3 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = asin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = asin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The log10 of " < < complexnumber < < " is " < < log10 ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , -0.0 ) ; cout < < " The log10 of " < < complexnumber < < " is " < < log10 ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; varr.resize ( 2 , 3 ) ; cout < < " The contents of valarray " " after resizes are : " ; for ( int & x : varr ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; varr.resize ( 12 , 5 ) ; cout < < " The contents of valarray " " after resizes are : " ; for ( int & x : varr ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <stdio.h> void __attribute__ ( ( constructor ) ) calledFirst ( ) ; void __attribute__ ( ( destructor ) ) calledLast ( ) ; void main ( ) { printf ( " \n I am in main " ) ; } void calledFirst ( ) { printf ( " \n I am called first " ) ; } void calledLast ( ) { printf ( " \n I am called last " ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = sinh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 1.0 , 0.0 } ; valarray <double> varr1 ; varr1 = sinh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The acos of " < < complexnumber < < " is " < < acos ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , -0.0 ) ; cout < < " The acos of " < < complexnumber < < " is " < < acos ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; cout < < " The size of valarray is : " ; cout < < varr.size ( ) ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -20 , 40 , -50 , 60 , 80 , 0 , 0 } ; cout < < " The size of valarray is : " ; cout < < varr.size ( ) ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The atan of " < < complexnumber < < " is " < < atan ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 2.0 ) ; cout < < " The atan of " < < complexnumber < < " is " < < atan ( complexnumber ) < < endl ; return 0 ; }
#include <exception> #include <iostream> using namespace std ; void myhandler ( ) { cout < < " Inside new terminate handler\n  " ; abort ( ) ; } int main ( ) { set_terminate ( myhandler ) ; try { cout < < " Inside try block\n  " ; throw 100 ; } catch ( char a ) { cout < < " Inside catch block\n  " ; } return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd , gm , errorcode ; initgraph ( & gd ; , & gm ; , " " ) ; errorcode = graphresult ( ) ; if ( errorcode ! = grOk ) { printf ( " Graphics error : %s\n  " , grapherrormsg ( errorcode ) ) ; printf ( " Press any key to exit. " ) ; getch ( ) ; exit ( 1 ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; fillellipse ( 200 , 200 , 50 , 90 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; sector ( 200 , 200 , 0 , 150 , 50 , 65 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( arr ) ; moveto ( 70 , 40 ) ; sprintf ( arr , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; lineto ( 250 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 100 ) ; lineto ( 250 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string_1 [ ] = " geekforgeeks456 " ; char string_2 [ ] = " 123456789 " ; size_t match = strcspn ( string_1 , string_2 ) ; if ( match < strlen ( string_1 ) ) cout < < " The number of characters before " < < " the matched character are " < < match ; else cout < < string_1 < < " didn't matched any character from string_2 " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string_1 [ ] = " geekforgeeks456 " ; char string_2 [ ] = " " ; size_t match = strcspn ( string_1 , string_2 ) ; if ( match < strlen ( string_1 ) ) cout < < " The number of character before " < < " the matched character are " < < match ; else cout < < string_1 < < " didn't matched any character from string_2 " ; return 0 ; }
#include <iostream> using namespace std ; int x ; int main ( ) { int x = 10 ; cout < < " Value of global x is " < < : : x ; cout < < " \n Value of local x is " < < x ; return 0 ; }
#include <iostream> using namespace std ; class A { public : void fun ( ) ; } ; void A : : fun ( ) { cout < < " fun ( ) called " ; } int main ( ) { A a ; a.fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { static int x ; public : static int y ; void func ( int x ) { cout < < " Value of static x is " < < Test : : x ; cout < < " \n Value of local x is " < < x ; } } ; int Test : : x = 1 ; int Test : : y = 2 ; int main ( ) { Test obj ; int x = 3 ; obj.func ( x ) ; cout < < " \n Test : : y = " < < Test : : y ; return 0 ; }
#include <iostream> using namespace std ; class A { protected : int x ; public : A ( ) { x = 10 ; } } ; class B { protected : int x ; public : B ( ) { x = 20 ; } } ; class C : public A , public B { public : void fun ( ) { cout < < " A's x is " < < A : : x ; cout < < " \n B's x is " < < B : : x ; } } ; int main ( ) { C c ; c.fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; string removeZero ( string str ) { int i = 0 ; while ( str [ i ] = = '0' ) i + + ; str.erase ( 0 , i ) ; return str ; } int main ( ) { string str ; str = " 00000123569 " ; str = removeZero ( str ) ; cout < < str < < endl ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> void printRandoms ( int lower , int upper , int count ) { int i ; for ( i = 0 ; i < count ; i + + ) { int num = ( rand ( ) % ( upper - lower + 1 ) ) + lower ; printf ( " %d " , num ) ; } } int main ( ) { int lower = 5 , upper = 7 , count = 1 ; srand ( time ( 0 ) ) ; printRandoms ( lower , upper , count ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The tanh of " < < complexnumber < < " is " < < tanh ( complexnumber ) < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 0.0 ) ; cout < < " The tanh of " < < complexnumber < < " is " < < tanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { cout < < " Square root of -9 is = " ; cout < < sqrt ( complex <double> ( -9 , 0 ) ) < < endl ; cout < < " Square root of ( -9 , -0 ) , is = " ; cout < < sqrt ( complex <double> ( -9 , -0.0 ) ) < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str1 , string str2 ) { str1.assign ( str2 ) ; cout < < " After assign ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; assignDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str1 , string str2 ) { str1.assign ( str2 , 5 , 13 ) ; cout < < " After assign ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; assignDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( " GeeksforGeeks " ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( " GeeksforGeeks " , 5 ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( 10 , 'x' ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " ######### " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { string str1 ; str1.assign ( str.begin ( ) + 6 , str.end ( ) -0 ) ; cout < < " After assign ( ) : " ; cout < < str1 ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { tuple <char , int , float> geek ( 20 , 'g' , 17.5 ) ; cout < < " The size of tuple is : " ; cout < < tuple_size <decltype ( geek ) > : : value < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void resizeDemo ( string str ) { str.resize ( 5 ) ; cout < < " Using resize : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; resizeDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void resizeDemo ( string str ) { cout < < " Using resize : " < < endl ; cout < < " If num > size ( ) : " ; str.resize ( 15 , '$' ) ; cout < < str < < endl ; cout < < " If num < size ( ) : " ; str.resize ( 5 , '$' ) ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; resizeDemo ( str ) ; return 0 ; }
#include <iostream> #include <algorithm> int main ( ) { int A [ ] = { 10 , 13 , 16 , 16 , 18 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int * it = std : : adjacent_find ( A , A + n ) ; std : : cout < < * it ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 2.0 ) ; cout < < " ( 1.0 , 2.0 ) ^2 = " < < pow ( complexnumber , 2 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , 1.0 ) ; cout < < " ( 2.0 , 1.0 ) ^3 = " < < pow ( complexnumber , 3 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 5.0 , 12.0 ) ; cout < < " The argument of " < < complexnumber < < " is : " ; cout < < arg ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 4.0 , 3.0 ) ; cout < < " The argument of " < < complexnumber < < " is : " ; cout < < arg ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The asinh of " < < complexnumber < < " is " < < asinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -0.0 , -2.0 ) ; cout < < " The asinh of " < < complexnumber < < " is " < < asinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The log of " < < complexnumber < < " is " < < log ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , -0.0 ) ; cout < < " The log of " < < complexnumber < < " is " < < log ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The acosh of " < < complexnumber < < " is " < < acosh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.5 , 0.0 ) ; cout < < " The acosh of " < < complexnumber < < " is " < < acosh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The sinh of " < < complexnumber < < " is " < < sinh ( complexnumber ) < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 0.0 ) ; cout < < " The sinh of " < < complexnumber < < " is " < < sinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The asin of " < < complexnumber < < " is " < < asin ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , -0.0 ) ; cout < < " The asin of " < < complexnumber < < " is " < < asin ( complexnumber ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color , width ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; width = textwidth ( " Hello Geek ! Have a good day. " ) ; sprintf ( arr , " Textwidth is = %d " , width ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current position of y = %d " , gety ( ) ) ; outtext ( arr ) ; moveto ( 80 , 50 ) ; sprintf ( arr , " Current position of y = %d " , gety ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum Y coordinate for current " " graphics mode And driver = %d " , getmaxy ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int size ; char str1 [ ] = " geeksforgeeks " ; char str2 [ ] = " kfc " ; size = strcspn ( str1 , str2 ) ; printf ( " The unmatched characters before first matched character : %d\n  " , size ) ; }
#include <bits / stdc + + .h> using namespace std ; int randomize ( ) { return ( rand ( ) % 1000 ) ; } int main ( ) { srand ( time ( NULL ) ) ; vector <int> vect ( 10 ) ; generate ( vect.begin ( ) , vect.end ( ) , randomize ) ; for ( int i = 0 ; i <vect.size ( ) ; i + + ) cout < < vect [ i ] < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int randomize ( ) { return ( rand ( ) % 1000 ) ; } int main ( ) { srand ( time ( NULL ) ) ; vector <int> vect ( 10 ) ; generate_n ( vect.begin ( ) , 6 , randomize ) ; for ( int i = 0 ; i <vect.size ( ) ; i + + ) cout < < vect [ i ] < < " " ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> imagpart ( 20.3 , 4.9 ) ; cout < < " Complex Number = " < < imagpart < < endl ; cout < < " Imag part of the complex number is = " < < imag ( imagpart ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> imagpart ( 2 , 2 ) ; cout < < " Complex Number = " < < imagpart < < endl ; cout < < " Imag part of the complex number is = " < < imag ( imagpart ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 5.0 , 12.0 ) ; cout < < " The absolute value of " < < complexnumber < < " is : " ; cout < < abs ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 4.0 , 3.0 ) ; cout < < " The absolute value of " < < complexnumber < < " is : " ; cout < < abs ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2 , 2 ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( INFINITY , -2 ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2 , -INFINITY ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color , height ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; height = textheight ( " Hello Geek ! Have a good day. " ) ; sprintf ( arr , " Textheight is = %d " , height ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum X coordinate for current " " graphics mode And driver = %d " , getmaxx ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; moverel ( 200 , 100 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 150 ) ; moverel ( 150 , 60 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> int gen ( ) { static int i = 0 ; return + + i ; } using namespace std ; int main ( ) { int i ; vector <int> v1 ( 10 ) ; std : : generate ( v1.begin ( ) , v1.end ( ) , gen ) ; vector <int> : : iterator i1 ; for ( i1 = v1.begin ( ) ; i1 ! = v1.end ( ) ; + + i1 ) { cout < < * i1 < < " " ; } return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> realpart ( 20.3 , 4.9 ) ; cout < < " Complex Number = " < < realpart < < endl ; cout < < " Real part of the complex number is = " < < real ( realpart ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> realpart ( 2 , 2 ) ; cout < < " Complex Number = " < < realpart < < endl ; cout < < " Real part of the complex number is = " < < real ( realpart ) < < endl ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; setbkcolor ( GREEN ) ; outtext ( " Press any key to clear the screen. " ) ; getch ( ) ; cleardevice ( ) ; outtext ( " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> int gen ( ) { static int i = 0 ; return + + i ; } using namespace std ; int main ( ) { int i ; vector <int> v1 ( 10 ) ; std : : generate_n ( v1.begin ( ) , 10 , gen ) ; vector <int> : : iterator i1 ; for ( i1 = v1.begin ( ) ; i1 ! = v1.end ( ) ; + + i1 ) { cout < < * i1 < < " " ; } return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color ; initgraph ( & gd ; , & gm ; , " " ) ; circle ( 100 , 100 , 50 ) ; setcolor ( GREEN ) ; circle ( 200 , 200 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtext ( " Press any key to close " " the graphics mode !! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color ; char arr [ 50 ] ; initgraph ( & gd ; , & gm ; , " " ) ; color = getpixel ( 0 , 0 ) ; sprintf ( arr , " color of pixel at ( 0 , 0 ) = %d " , color ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; drawpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum number of colors for " " current graphics mode and " " driver = %d " , getmaxcolor ( ) + 1 ) ; outtextxy ( 20 , 100 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current background color = %d " , getbkcolor ( ) ) ; outtextxy ( 10 , 10 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; setbkcolor ( RED ) ; sprintf ( arr , " Current background color = %d " , getbkcolor ( ) ) ; outtextxy ( 10 , 10 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " This is output from my first program!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 5 ; b = 7 ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter the first value : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter the second value : " ) ; scanf ( " %d " , & b ) ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter the first value : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter the second value : " ) ; scanf ( " %d " , & b ) ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int b ; printf ( " Enter a value : " ) ; scanf ( " %d " , & b ) ; if ( b < 0 ) printf ( " The value is negative\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a ; printf ( " Enter a number : " ) ; scanf ( " %d " , & a ) ; if ( a ) { printf ( " The value is True\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a ; a = 0 ; while ( a < = 100 ) { printf ( " %4d degrees F = %4d degrees C\n  " , a , ( a - 32 ) * 5 / 9 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a ; a = 0 ; while ( a < = 100 ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a ; a = 0 ; while ( a < = 100 ) { if ( a > 98.6 ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , 98.6 , ( 98.6 - 32.0 ) * 5.0 / 9.0 ) ; } printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a , b ; a = 0 ; b = -1 ; while ( a < = 100 ) { if ( ( a > 98.6 ) & & ( b < 98.6 ) ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , 98.6 , ( 98.6 - 32.0 ) * 5.0 / 9.0 ) ; } printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; b = a ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { int a [ 5 ] ; int i ; for ( i = 0 ; i <5 ; i + + ) a [ i ] = i ; for ( i = 0 ; i <5 ; i + + ) printf ( " a [ %d ] = %d\n  " , i , a [ i ] ) ; }
#include <stdio.h> #define MAX 10 int a [ MAX ] ; int rand_seed = 10 ; int rand ( ) { rand_seed = rand_seed * 1103515245 + 12345 ; return ( unsigned int ) ( rand_seed / 65536 ) % 32768 ; } int main ( ) { int i , t , x , y ; for ( i = 0 ; i < MAX ; i + + ) { a [ i ] = rand ( ) ; printf ( " %d\n  " , a [ i ] ) ; } return 0 ; }
#include <stdio.h> void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } int add ( int i , int j ) { return i + j ; }
#include <stdio.h> int add ( int , int ) ; void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } int add ( int i , int j ) { return i + j ; }
#include <stdio.h> void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } float add ( int i , int j ) { return i + j ; }
#include <stdio.h> #include " util.h " #define MAX 10 int a [ MAX ] ; void main ( ) { int i , t , x , y ; for ( i = 0 ; i < MAX ; i + + ) { a [ i ] = rand ( ) ; printf ( " %d\n  " , a [ i ] ) ; } bubble_sort ( MAX , a ) ; printf ( " --------------------\n  " ) ; for ( i = 0 ; i < MAX ; i + + ) printf ( " %d\n  " , a [ i ] ) ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 1000 ] ; int count = 0 ; while ( gets ( s ) ) count + = strlen ( s ) ; printf ( " %d\n  " , count ) ; }
#include <stdio.h> #define MAX 10 int main ( ) { FILE * f ; int x ; f = fopen ( " out " , " w " ) ; if ( !f ) return 1 ; for ( x = 1 ; x < = MAX ; x + + ) fprintf ( f , " %d\n  " , x ) ; fclose ( f ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * f ; char s [ 1000 ] ; f = fopen ( " infile " , " r " ) ; if ( !f ) return 1 ; while ( fgets ( s , 1000 , f ) ! = NULL ) printf ( " %s " , s ) ; fclose ( f ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int * p ; p = & i ; * p = 5 ; j = i ; printf ( " %d %d %d\n  " , i , j , * p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int * p ; printf ( " %d %d\n  " , p , & i ) ; p = & i ; printf ( " %d %d\n  " , p , & i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * p ; printf ( " %d\n  " , * p ) ; }
#include <stdio.h> int main ( ) { int i ; int * p ; p = & i ; * p = 5 ; printf ( " %d %d\n  " , i , * p ) ; return 0 ; }
#include <stdio.h> void swap ( int i , int j ) { int t ; t = i ; i = j ; j = t ; } void main ( ) { int a , b ; a = 5 ; b = 10 ; printf ( " %d %d\n  " , a , b ) ; swap ( a , b ) ; printf ( " %d %d\n  " , a , b ) ; }
#include <stdio.h> void swap ( int * i , int * j ) { int t ; t = * i ; * i = * j ; * j = t ; } void main ( ) { int a , b ; a = 5 ; b = 10 ; printf ( " %d %d\n  " , a , b ) ; swap ( & a , & b ) ; printf ( " %d %d\n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int * p ; p = ( int * ) malloc ( sizeof ( int ) ) ; * p = 10 ; printf ( " %d\n  " , * p ) ; free ( p ) ; return 0 ; }
#include <stdio.h> struct rec { int i ; float f ; char c ; } ; int main ( ) { struct rec * p ; p = ( struct rec * ) malloc ( sizeof ( struct rec ) ) ; ( * p ) .i = 10 ; ( * p ) .f = 3.14 ; ( * p ) .c = 'a' ; printf ( " %d %f %c\n  " , ( * p ) .i , ( * p ) .f , ( * p ) .c ) ; free ( p ) ; return 0 ; }
#include <string.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; strcpy ( s1 , " hello " ) ; strcpy ( s2 , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; gets ( s1 ) ; gets ( s2 ) ; if ( strcmp ( s1 , s2 ) = = 0 ) printf ( " equal\n  " ) ; else if ( strcmp ( s1 , s2 ) <0 ) printf ( " s1 less than s2\n  " ) ; else printf ( " s1 greater than s2\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s [ 100 ] , * p ; gets ( s ) ; p = s ; while ( * p = = ' ' ) p + + ; printf ( " %s\n  " , p ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int x ; printf ( " %d\n  " , argc ) ; for ( x = 0 ; x <argc ; x + + ) printf ( " %s\n  " , argv [ x ] ) ; return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; for ( i = 0 ; i < MAX ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; for ( i = MAX ; i> = 0 ; i-- ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; int space = 4 ; for ( i = 0 ; i < MAX ; i + + ) { for ( j = 0 ; j < space ; j + + ) { printf ( " " ) ; } for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; space-- ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; int space = 0 ; for ( i = MAX ; i> 0 ; i-- ) { for ( j = 0 ; j < i ; j + + ) { printf ( " * " ) ; } for ( j = 0 ; j < space ; j + + ) { printf ( " " ) ; } for ( j = 0 ; j < i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; space + = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 ; i < = 4 ; i + + ) { for ( j = 4 ; j> i ; j-- ) printf ( " " ) ; for ( k = 0 ; k < = i ; k + + ) { if ( k %2 = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , l = 1 ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 4 ; j> = i ; j-- ) { printf ( " " ) ; } for ( k = 1 ; k < = l ; k + + ) { printf ( " %d " , k ) ; } l = l + 2 ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int space = 0 ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = space ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %d " , j ) ; for ( j = i-1 ; j> = 1 ; j-- ) printf ( " %d " , j ) ; printf ( " \n  " ) ; space + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = 'A' ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %c " , ch + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char ch ; for ( i = 1 ; i < = 5 ; i + + ) { ch = 'A' ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %c " , ch + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 , k = 'A' ; j < = i ; j + + , k + + ) { printf ( " %d %c " , j , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , N , sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0 ; for ( i = 1 ; i < = N ; i + + ) sum = sum + i ; printf ( " Sum of the series is : %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , N ; unsigned long sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0 ; for ( i = 1 ; i < = N ; i + + ) sum = sum + ( i * i ) ; printf ( " Sum of the series is : %ld\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , N ; float sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0.0f ; for ( i = 1 ; i < = N ; i + + ) sum = sum + ( ( float ) 1 / ( float ) i ) ; printf ( " Sum of the series is : %f\n  " , sum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int n ; char * text ; printf ( " Enter limit of the text : " ) ; scanf ( " %d " , & n ) ; text = ( char * ) malloc ( n * sizeof ( char ) ) ; printf ( " Enter text : " ) ; scanf ( " " ) ; gets ( text ) ; printf ( " Inputted text is : %s\n  " , text ) ; free ( text ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , i ; long int fact ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; fact = 1 ; for ( i = num ; i> = 1 ; i-- ) fact = fact * i ; printf ( " \n Factorial of %d is = %ld " , num , fact ) ; return 0 ; }
#include <stdio.h> long int factorial ( int n ) { int i ; long int fact = 1 ; if ( n = = 1 ) return fact ; for ( i = n ; i> = 1 ; i-- ) fact = fact * i ; return fact ; } int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Factorial of %d is = %ld " , num , factorial ( num ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num ; int iVar ; float fVar ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; fVar = sqrt ( ( double ) num ) ; iVar = fVar ; if ( iVar = = fVar ) printf ( " %d is a perfect square. " , num ) ; else printf ( " %d is not a perfect square. " , num ) ; return 0 ; }
#include <stdio.h> #include <math.h> int isPerfectSquare ( int number ) { int iVar ; float fVar ; fVar = sqrt ( ( double ) number ) ; iVar = fVar ; if ( iVar = = fVar ) return 1 ; else return 0 ; } int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; if ( isPerfectSquare ( num ) ) printf ( " %d is a perfect square. " , num ) ; else printf ( " %d is not a perfect square. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , cnt , i ; int bin [ 32 ] ; printf ( " Enter decimal number : " ) ; scanf ( " %d " , & number ) ; cnt = 0 ; while ( number> 0 ) { bin [ cnt ] = number %2 ; number = number / 2 ; cnt + + ; } printf ( " Binary value is : " ) ; for ( i = ( cnt-1 ) ; i> = 0 ; i-- ) printf ( " %d " , bin [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; return 0 ; }
#include <stdio.h> void printMessage ( void ) { printf ( " Hello World! " ) ; } int main ( ) { printMessage ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , sum = 0 , rem = 0 , tempNumber ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & number ) ; tempNumber = number ; while ( tempNumber! = 0 ) { rem = tempNumber %10 ; sum = sum + ( rem * rem * rem ) ; tempNumber / = 10 ; } if ( sum = = number ) printf ( " %d is an Armstrong number. " , number ) ; else printf ( " %d is not an Armstrong number. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) printf ( " %d is an EVEN number. " , num ) ; else printf ( " %d is an ODD number. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; for ( i = 1 ; i < = 20 ; i + + ) { num = i ; for ( j = 1 ; j < = 10 ; j + + ) { printf ( " %3d\t " , ( num * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { unsigned char count ; for ( count = 32 ; count < 255 ; count + = 1 ) { printf ( " %3d - %c " , count , count ) ; if ( count % 6 = = 0 ) printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " enter two numbers\n  " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " before swapping...\n  " ) ; printf ( " first no is %d , second no %d\n  " , n1 , n2 ) ; n1 = n1^n2 ; n2 = n1^n2 ; n1 = n1^n2 ; printf ( " after swapping...\n  " ) ; printf ( " first no is %d , second no %d\n  " , n1 , n2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " enter no : " ) ; scanf ( " %d " , & n ) ; if ( n & 1 = = 1 ) printf ( " it's odd no " ) ; else printf ( " it's even no " ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; int count = 0 ; while ( n! = 0 ) { if ( n & 1 = = 1 ) { count + + ; } n = n> > 1 ; } printf ( " no of bits those are 1 " ) ; printf ( " in its binary representation : %d\n  " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { int temp = n & 1 ; if ( temp = = 0 ) { printf ( " all bits are not set\n  " ) ; return 0 ; } n = n> > 1 ; } printf ( " all bits are set " ) ; printf ( " in its binary representation\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; int count = 0 ; while ( n! = 0 ) { if ( n & 1 = = 1 ) break ; n = n> > 1 ; count + + ; } printf ( " no of trailing zero " ) ; printf ( " in its binary representation : %d \n  " , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_CHAR 50 int main ( void ) { char str1 [ MAX_CHAR ] = " Hello World! " ; char str2 [ MAX_CHAR ] = " Nothing is impossible " ; printf ( " Before copying...\n  " ) ; printf ( " str1 : %s\n  " , str1 ) ; printf ( " str2 : %s\n  " , str2 ) ; memcpy ( str1 , str2 , strlen ( str2 ) ) ; printf ( " After copying...\n  " ) ; printf ( " str1 : %s\n  " , str1 ) ; printf ( " str2 : %s\n  " , str2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello world\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = 'H' , b = 'e' , c = 'l' , d = 'o' ; char e = 'w' , f = 'r' , g = 'd' ; printf ( " %c %c %c %c %c %c %c %c %c %c " , a , b , c , c , d , e , d , f , c , g ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = { 'H' , 'e' , 'l' , 'l' , 'o' , ' ' , 'w' , 'o' , 'r' , 'l' , 'd' , '\0' } ; printf ( " %s\n  " , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c , n ; printf ( " How many times you want to display it?\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) printf ( " Hello world!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { while ( 1 )
#include <stdio.h> int main ( ) { int a ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & a ) ; printf ( " The integer is %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 100 ; c + + ) printf ( " %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 1000 ] ; printf ( " Input an integer\n  " ) ; scanf ( " %s " , n ) ; printf ( " %s " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two numbers to add\n  " ) ; scanf ( " %d %d " , & a , & b ) ; c = a + b ; printf ( " Sum of the numbers = %d\n  " , c ) ; return 0 ; }
#include <stdio.h> main ( ) { int a = 1 , b = 2 ; a = a + b ; printf ( " Sum of a and b = %d\n  " , a ) ; return 0 ; }
#include <stdio.h> long addition ( long , long ) ; main ( ) { long first , second , sum ; scanf ( " %ld %ld " , & first , & second ) ; sum = addition ( first , second ) ; printf ( " %ld\n  " , sum ) ; return 0 ; } long addition ( long a , long b ) { long result ; result = a + b ; return result ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( n %2 = = 0 ) printf ( " Even\n  " ) ; else printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( n & 1 = = 1 ) printf ( " Odd\n  " ) ; else printf ( " Even\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; n %2 = = 0 ? printf ( " Even\n  " ) : printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( ( n / 2 ) * 2 = = n ) printf ( " Even\n  " ) ; else printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int first , second , add , subtract , multiply ; float divide ; printf ( " Enter two integers\n  " ) ; scanf ( " %d %d " , & first , & second ) ; add = first + second ; subtract = first - second ; multiply = first * second ; divide = first / ( float ) second ;
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter a character\n  " ) ; scanf ( " %c " , & ch ) ;
#include <stdio.h> int main ( ) { char ch ; printf ( " Input a character\n  " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : case 'A' : case 'e' : case 'E' : case 'i' : case 'I' : case 'o' : case 'O' : case 'u' : case 'U' : printf ( " %c is a vowel.\n  " , ch ) ; break ; default : printf ( " %c isn't a vowel.\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter a year to check if it is a leap year\n  " ) ; scanf ( " %d " , & year ) ; if ( year %400 = = 0 )
#include <stdio.h> int main ( ) { int n , t , sum = 0 , remainder ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; t = n ; while ( t ! = 0 ) { remainder = t % 10 ; sum = sum + remainder ; t = t / 10 ; } printf ( " Sum of digits of %d = %d\n  " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c , sum , t ; char n [ 1000 ] ; printf ( " Input an integer\n  " ) ; scanf ( " %s " , n ) ; sum = c = 0 ; while ( n [ c ] ! = '\0' ) { t = n [ c ] - '0' ;
#include <stdio.h> int add_digits ( int ) ; int main ( ) { int n , result ; scanf ( " %d " , & n ) ; result = add_digits ( n ) ; printf ( " %d\n  " , result ) ; return 0 ; } int add_digits ( int n ) { static int sum = 0 ; if ( n = = 0 ) { return 0 ; } sum = n %10 + add_digits ( n / 10 ) ; return sum ; }
#include <stdio.h> int main ( ) { int c , n , fact = 1 ; printf ( " Enter a number to calculate its factorial\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) fact = fact * c ; printf ( " Factorial of %d = %d\n  " , n , fact ) ; return 0 ; }
#include <stdio.h> long factorial ( int ) ; int main ( ) { int n ; long f ; printf ( " Enter an integer to find its factorial\n  " ) ; scanf ( " %d " , & n ) ; if ( n < 0 ) printf ( " Factorial of negative integers isn't defined.\n  " ) ; else { f = factorial ( n ) ; printf ( " %d! = %ld\n  " , n , f ) ; } return 0 ; } long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; }
#include <stdio.h> long factorial ( int ) ; int main ( ) { int number ; long fact = 1 ; printf ( " Enter a number to calculate its factorial\n  " ) ; scanf ( " %d " , & number ) ; printf ( " %d! = %ld\n  " , number , factorial ( number ) ) ; return 0 ; } long factorial ( int n ) { int c ; long result = 1 ; for ( c = 1 ; c < = n ; c + + ) result = result * c ; return result ; }
#include <stdio.h> int main ( ) { int n , c , k ; printf ( " Enter an integer in decimal number system\n  " ) ; scanf ( " %d " , & n ) ; printf ( " %d in binary number system is : \n  " , n ) ; for ( c = 31 ; c > = 0 ; c-- ) { k = n > > c ; if ( k & 1 ) printf ( " 1 " ) ; else printf ( " 0 " ) ; } printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , sum = 0 , c , value ; printf ( " How many numbers you want to add?\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n  " , n ) ; for ( c = 1 ; c < = n ; c + + ) { scanf ( " %d " , & value ) ; sum = sum + value ; } printf ( " Sum of the integers = %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , sum = 0 , c , array [ 100 ] ; scanf ( " %d " , & n ) ; for ( c = 0 ; c < n ; c + + ) { scanf ( " %d " , & array [ c ] ) ; sum = sum + array [ c ] ; } printf ( " Sum = %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x , y , t ; printf ( " Enter two integers\n  " ) ; scanf ( " %d %d " , & x , & y ) ; printf ( " Before Swapping\n First integer = %d\n Second integer = %d\n  " , x , y ) ; t = x ; x = y ; y = t ; printf ( " After Swapping\n First integer = %d\n Second integer = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " Input two integers ( a & b ) to swap\n  " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " a = %d\n b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> void swap ( int * , int * ) ;
#include <stdio.h> int main ( ) { int x , y , * a , * b , temp ; printf ( " Enter the value of x and y\n  " ) ; scanf ( " %d %d " , & x , & y ) ; printf ( " Before Swapping\n x = %d\n y = %d\n  " , x , y ) ; a = & x ; b = & y ; temp = * b ; * b = * a ; * a = temp ; printf ( " After Swapping\n x = %d\n y = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x , y ; scanf ( " %d %d " , & x , & y ) ; printf ( " x = %d\n y = %d\n  " , x , y ) ; x = x ^ y ; y = x ^ y ; x = x ^ y ; printf ( " x = %d\n y = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reverse = 0 ; printf ( " Enter a number to reverse\n  " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { reverse = reverse * 10 ; reverse = reverse + n %10 ; n = n / 10 ; } printf ( " Reverse of entered number is = %d\n  " , reverse ) ; return 0 ; }
#include <stdio.h> long reverse ( long ) ; int main ( ) { long n , r ; scanf ( " %ld " , & n ) ; r = reverse ( n ) ; printf ( " %ld\n  " , r ) ; return 0 ; } long reverse ( long n ) { static long r = 0 ; if ( n = = 0 ) return 0 ; r = r * 10 ; r = r + n % 10 ; reverse ( n / 10 ) ; return r ; }
#include <stdio.h> int main ( ) { int n , reverse = 0 , t ; printf ( " Enter a number to check if it is a palindrome or not\n  " ) ; scanf ( " %d " , & n ) ; t = n ; while ( t ! = 0 ) { reverse = reverse * 10 ; reverse = reverse + t %10 ; t = t / 10 ; } if ( n = = reverse ) printf ( " %d is a palindrome number.\n  " , n ) ; else printf ( " %d isn't a palindrome number.\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { int row , c , n , s ; printf ( " Enter the number of rows in pyramid of stars you wish to see\n  " ) ; scanf ( " %d " , & n ) ; s = n ; for ( row = 1 ; row < = n ; row + + )
#include <stdio.h> int main ( ) { int n , c , k ; printf ( " Enter number of rows\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) { for ( k = 1 ; k < = c ; k + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> main ( ) { int n , c = 2 ; printf ( " Enter a number to check if it is prime\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 2 ; c < = n - 1 ; c + + ) { if ( n %c = = 0 ) { printf ( " %d isn't prime.\n  " , n ) ; break ; } } if ( c = = n ) printf ( " %d is prime.\n  " , n ) ; return 0 ; }
#include <stdio.h> int power ( int , int ) ; int main ( ) { int n , sum = 0 , temp , remainder , digits = 0 ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; temp = n ;
#include <stdio.h> int main ( ) { int n , first = 0 , second = 1 , next , c ; printf ( " Enter the number of terms\n  " ) ; scanf ( " %d " , & n ) ; printf ( " First %d terms of Fibonacci series are : \n  " , n ) ; for ( c = 0 ; c < n ; c + + ) { if ( c < = 1 ) next = c ; else { next = first + second ; first = second ; second = next ; } printf ( " %d\n  " , next ) ; } return 0 ; }
#include <stdio.h> int f ( int ) ; int main ( ) { int n , i = 0 , c ; scanf ( " %d " , & n ) ; printf ( " Fibonacci series terms are : \n  " ) ; for ( c = 1 ; c < = n ; c + + ) { printf ( " %d\n  " , f ( i ) ) ; i + + ; } return 0 ; } int f ( int n ) { if ( n = = 0 || n = = 1 ) return n ; else return ( f ( n-1 ) + f ( n-2 ) ) ; }
#include <stdio.h> int main ( ) { int n , i , c , a = 1 ; printf ( " Enter the number of rows of Floyd's triangle to print\n  " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( c = 1 ; c < = i ; c + + ) { printf ( " %d " , a ) ; a + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int first , second , * p , * q , sum ; printf ( " Enter two integers to add\n  " ) ; scanf ( " %d %d " , & first , & second ) ; p = & first ; q = & second ; sum = * p + * q ; printf ( " Sum of the numbers = %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char z [ 100 ] = " I am learning C programming language. " ; printf ( " %s " , z ) ;
#include <stdio.h> int main ( ) { char array [ 100 ] ; printf ( " Enter a string\n  " ) ; scanf ( " %s " , array ) ; printf ( " Your string : %s\n  " , array ) ; return 0 ; }
#include <stdio.h> int main ( ) { char z [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( z ) ; printf ( " The string : %s\n  " , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 100 ] ; int c = 0 ; gets ( s ) ; while ( s [ c ] ! = '\0' ) { printf ( " %c " , s [ c ] ) ; c + + ; } return 0 ; }
#include <stdio.h> void print ( char * ) ; int main ( ) { char s [ 100 ] ; gets ( s ) ; print ( s ) ; return 0 ; } void print ( char * t ) { if ( * t = = '\0' ) return ; printf ( " %c " , * t ) ; print ( + + t ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] ; int length ; printf ( " Enter a string to calculate it's length\n  " ) ; gets ( a ) ; length = strlen ( a ) ; printf ( " Length of the string = %d\n  " , length ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] ; int c = 0 ; printf ( " Input a string\n  " ) ; gets ( s ) ; while ( s [ c ] ! = '\0' ) c + + ; printf ( " Length of the string : %d\n  " , c ) ; return 0 ; }
#include <stdio.h> int string_length ( char * ) ; int main ( ) { char s [ 100 ] ; gets ( s ) ; printf ( " Length = %d\n  " , string_length ( s ) ) ; return 0 ; } int string_length ( char * s ) { static int c = 0 ; while ( s [ c ] ! = '\0' ) { c + + ; string_length ( s + 1 ) ; } return c ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] , b [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( a ) ; printf ( " Enter a string\n  " ) ; gets ( b ) ; if ( strcmp ( a , b ) = = 0 ) printf ( " The strings are equal.\n  " ) ; else printf ( " The strings are not equal.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ 1000 ] , destination [ 1000 ] ; printf ( " Input a string\n  " ) ; gets ( source ) ; strcpy ( destination , source ) ; printf ( " Source string : %s\n  " , source ) ; printf ( " Destination string : %s\n  " , destination ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c = 0 ; char s [ 1000 ] , d [ 1000 ] = " What can I say about my programming skills? " ; printf ( " Before copying , the string : %s\n  " , d ) ; printf ( " Input a string to copy\n  " ) ; gets ( s ) ; while ( s [ c ] ! = '\0' ) { d [ c ] = s [ c ] ; c + + ; } d [ c ] = '\0' ; printf ( " After copying , the string : %s\n  " , d ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 1000 ] , b [ 1000 ] ; printf ( " Enter the first string\n  " ) ; gets ( a ) ; printf ( " Enter the second string\n  " ) ; gets ( b ) ; strcat ( a , b ) ; printf ( " String obtained on concatenation : %s\n  " , a ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char arr [ 100 ] ; printf ( " Enter a string to reverse\n  " ) ; gets ( arr ) ; strrev ( arr ) ; printf ( " Reverse of the string is \n  %s\n  " , arr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] , r [ 1000 ] ; int begin , end , count = 0 ; printf ( " Input a string\n  " ) ; gets ( s ) ;
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] , b [ 100 ] ; printf ( " Enter a string to check if it is a palindrome\n  " ) ; gets ( a ) ; strcpy ( b , a ) ;
#include <stdio.h> int main ( ) { char text [ 100 ] ; int begin , middle , end , length = 0 ; gets ( text ) ; while ( text [ length ] ! = '\0' ) length + + ; end = length - 1 ; middle = length / 2 ; for ( begin = 0 ; begin < middle ; begin + + ) { if ( text [ begin ] ! = text [ end ] ) { printf ( " Not a palindrome.\n  " ) ; break ; } end-- ; } if ( begin = = middle ) printf ( " Palindrome.\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , r = 0 , t ; printf ( " Enter an integer to check if it is palindrome or not\n  " ) ; scanf ( " %d " , & n ) ; t = n ; while ( t ! = 0 ) { r = r * 10 ; r = r + t %10 ; t = t / 10 ; } if ( n = = r ) printf ( " %d is a palindrome number.\n  " , n ) ; else printf ( " %d isn't a palindrome number.\n  " , n ) ; return 0 ; }
#include <stdio.h> #include <string.h> int check_vowel ( char ) ; int main ( ) { char s [ 100 ] , t [ 100 ] ; int c , d = 0 ; printf ( " Enter a string to delete vowels\n  " ) ; gets ( s ) ; for ( c = 0 ; s [ c ] ! = '\0' ; c + + ) { if ( check_vowel ( s [ c ] ) = = 0 ) {
#include <stdio.h> void substring ( char [ ] , char [ ] , int , int ) ; int main ( ) { char string [ 1000 ] , sub [ 1000 ] ; int position , length , c = 0 ; printf ( " Input a string\n  " ) ; gets ( string ) ; printf ( " Enter the position and length of substring\n  " ) ; scanf ( " %d %d " , & position , & length ) ; substring ( string , sub , position , length ) ; printf ( " Required substring is \ " %s\ " \n  " , sub ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to lower case\n  " ) ; gets ( string ) ; printf ( " The string in lower case : %s\n  " , strlwr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to upper case\n  " ) ; gets ( string ) ; printf ( " The string in upper case : %s\n  " , strupr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch , file_name [ 25 ] ; FILE * fp ; printf ( " Enter name of a file you wish to see\n  " ) ; gets ( file_name ) ; fp = fopen ( file_name , " r " ) ;
#include <stdio.h> #include <conio.h> #include <dir.h> int main ( ) { int done ; struct ffblk a ; printf ( " Press any key to view the files in the current directory\n  " ) ; getch ( ) ; done = findfirst ( " * . * " , & a , 0 ) ;
#include <stdio.h> int main ( ) { int status ; char file_name [ 25 ] ; printf ( " Enter name of a file you wish to delete\n  " ) ; gets ( file_name ) ; status = remove ( file_name ) ; if ( status = = 0 ) printf ( " %s file deleted successfully.\n  " , file_name ) ; else { printf ( " Unable to delete the file\n  " ) ; perror ( " Following error occurred " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int c , n ; printf ( " Ten random numbers in [ 1 , 100 ] \n  " ) ; for ( c = 1 ; c < = 10 ; c + + ) { n = rand ( ) % 100 + 1 ; printf ( " %d\n  " , n ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> #include <dos.h> int main ( ) { struct date d ; getdate ( & d ) ; printf ( " Current system date : %d / %d / %d " , d.da_day , d.da_mon , d.da_year ) ; getch ( ) ; return 0 ; }
#include <stdlib.h> int main ( ) { system ( " C : \\Windows\\System32\\ipconfig " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { system ( " C : \\WINDOWS\\System32\\shutdown / s " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch ; printf ( " Do you want to shutdown your computer now ( y / n ) \n  " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) system ( " C : \\WINDOWS\\System32\\shutdown -s " ) ; return 0 ; }
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & x ) ;
#include <stdio.h> int main ( ) { int x = 1 ; if ( x = = 1 ) printf ( " x is equal to one.\n  " ) ; else printf ( " For comparison use ' = = ' as ' = ' is the assignment operator.\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c = 1 ;
#include <stdio.h> int main ( ) { int n , c ; printf ( " Enter a number\n  " ) ; scanf ( " %d " , & n ) ; if ( n = = 2 ) printf ( " Prime number.\n  " ) ; else { for ( c = 2 ; c < = n - 1 ; c + + ) { if ( n % c = = 0 ) break ; } if ( c ! = n ) printf ( " Not prime.\n  " ) ; else printf ( " Prime number.\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int c ; printf ( " Number of command line arguments passed : %d\n  " , argc ) ; for ( c = 0 ; c < argc ; c + + ) printf ( " %d argument is %s\n  " , c + 1 , argv [ c ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct game { char game_name [ 50 ] ; int number_of_players ; } ;
#include <stdio.h> int main ( ) { int n , first = 0 , second = 1 , next , c ; printf ( " Enter the number of terms\n  " ) ; scanf ( " %d " , & n ) ; printf ( " First %d terms of Fibonacci series are : \n  " , n ) ; for ( c = 0 ; c < n ; c + + ) { if ( c < = 1 ) next = c ; else { next = first + second ; first = second ; second = next ; } printf ( " %d\n  " , next ) ; } return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtextxy ( 10 , 20 , " Graphics programming is fun! " ) ; circle ( 200 , 200 , 50 ) ; setcolor ( BLUE ) ; line ( 350 , 250 , 450 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int c ; for ( c = 1 ; c < = 10 ; c + + ) printf ( " %d\n  " , c ) ; getch ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 10 ; c + + ) printf ( " %d\n  " , c ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int x = 320 , y = 240 , radius ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( radius = 25 ; radius < = 125 ; radius = radius + 20 ) circle ( x , y , radius ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> void reverse_string ( char * ) ; void reverse_words ( char * ) ; int main ( ) { char a [ 100 ] ; gets ( a ) ; reverse_words ( a ) ; printf ( " %s\n  " , a ) ; return 0 ; } void reverse_words ( char * s ) { char b [ 100 ] , * t , * z ; int c = 0 ; t = s ; while ( * t ) {
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; arc ( 100 , 100 , 0 , 135 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bar ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bar3d ( 100 , 100 , 200 , 200 , 20 , 1 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 100 , 100 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to clear the screen. " ) ; getch ( ) ; cleardevice ( ) ; outtext ( " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to close the graphics mode... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , points [ ] = { 320 , 150 , 420 , 300 , 250 , 300 , 320 , 150 } ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drawpoly ( 4 , points ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; fillellipse ( 100 , 100 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , points [ ] = { 320 , 150 , 440 , 340 , 230 , 340 , 320 , 150 } ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; fillpoly ( 4 , points ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( RED ) ; circle ( 100 , 100 , 50 ) ; floodfill ( 100 , 100 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , bkcolor ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bkcolor = getbkcolor ( ) ; sprintf ( a , " Current background color = %d " , bkcolor ) ; outtextxy ( 10 , 10 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , drawing_color ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drawing_color = getcolor ( ) ; sprintf ( a , " Current drawing color = %d " , drawing_color ) ; outtextxy ( 10 , 10 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char * drivername ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drivername = getdrivername ( ) ; outtextxy ( 200 , 200 , drivername ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , max_colors ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; max_colors = getmaxcolor ( ) ; sprintf ( a , " Maximum number of colors for current graphics mode and driver = %d " , max_colors + 1 ) ; outtextxy ( 0 , 40 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , max_x ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; max_x = getmaxx ( ) ; sprintf ( array , " Maximum X coordinate for current graphics mode and driver = %d. " , max_x ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , max_y ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; max_y = getmaxy ( ) ; sprintf ( array , " Maximum Y coordinate for current graphics mode and driver is = %d. " , max_y ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , color ; char array [ 50 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; color = getpixel ( 0 , 0 ) ; sprintf ( array , " color of pixel at ( 0 , 0 ) = %d " , color ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sprintf ( array , " Current position of x = %d " , getx ( ) ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , y ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; y = gety ( ) ; sprintf ( array , " Current position of y = %d " , y ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( RED ) ; setbkcolor ( YELLOW ) ; circle ( 250 , 250 , 50 ) ; getch ( ) ; graphdefaults ( ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdlib.h> #include <conio.h> main ( ) { int gd , gm , errorcode ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; errorcode = graphresult ( ) ; if ( errorcode ! = grOk ) { printf ( " Graphics error : %s\n  " , grapherrormsg ( errorcode ) ) ; printf ( " Press any key to exit. " ) ; getch ( ) ; exit ( 1 ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; line ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 100 , 100 ) ; lineto ( 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 250 , 250 ) ; linerel ( 100 , -100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char msg [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sprintf ( msg , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( msg ) ; moveto ( 50 , 50 ) ; sprintf ( msg , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( msg ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , x , y ; char message [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 100 , 100 ) ; moverel ( 100 , -100 ) ; x = getx ( ) ; y = gety ( ) ; sprintf ( message , " Current x position = %d and y position = %d " , x , y ) ; outtextxy ( 10 , 10 , message ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " To display text at a particular position on the screen use outtextxy " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtextxy ( 100 , 100 , " Outtextxy function " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; pieslice ( 200 , 200 , 0 , 135 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; putpixel ( 25 , 25 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; rectangle ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sector ( 100 , 100 , 0 , 135 , 25 , 35 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to change the background color to GREEN. " ) ; getch ( ) ; setbkcolor ( GREEN ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 100 , 100 , 50 ) ; setcolor ( RED ) ; circle ( 200 , 200 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setfillstyle ( XHATCH_FILL , RED ) ; circle ( 100 , 100 , 50 ) ; floodfill ( 100 , 100 , WHITE ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> main ( ) { int gd = DETECT , gm , c , x = 100 , y = 50 ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( c = 0 ; c < 5 ; c + + ) { setlinestyle ( c , 0 , 2 ) ; line ( x , y , x + 200 , y ) ; y = y + 25 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , x = 25 , y = 25 , font = 0 ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( font = 0 ; font < = 10 ; font + + ) { settextstyle ( font , HORIZ_DIR , 1 ) ; outtextxy ( x , y , " Text with different fonts " ) ; y = y + 25 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , midx , midy ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; midx = getmaxx ( ) / 2 ; midy = getmaxy ( ) / 2 ; setviewport ( midx - 50 , midy - 50 , midx + 50 , midy + 50 , 1 ) ; circle ( 50 , 50 , 55 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , height ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; height = textheight ( " C programming " ) ; sprintf ( array , " Textheight = %d " , height ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm , width ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; width = textwidth ( " C programming " ) ; sprintf ( array , " Textwidth = %d " , width ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> void print ( int ) ; int main ( ) { int n ; scanf ( " %d " , & n ) ; print ( n ) ; return 0 ; } void print ( int n ) { static int c = 1 ; if ( c = = n + 1 ) return ; printf ( " %d\n  " , c ) ; c + + ; print ( n ) ; }
#include <stdio.h> int main ( ) { int n , c = 1 ; scanf ( " %d " , & n ) ;
#include <stdio.h> #include <math.h> int main ( ) { long n , t , r = 0 , c , d ; printf ( " Enter an integer\n  " ) ; scanf ( " %ld " , & n ) ; while ( 1 ) { n + + ; t = n ;
#include <dos.h> #include <conio.h> int initmouse ( ) ; union REGS i , o ; main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else printf ( " Mouse support available.\n  " ) ; getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; }
#include <dos.h> #include <conio.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else showmouseptr ( ) ; getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { printf ( " Press any key to clear the screen.\n  " ) ; getch ( ) ; clrscr ( ) ; printf ( " This appears after clearing the screen.\n  " ) ; printf ( " Press any key to exit...\n  " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " This line will be deleted when you press a key. " ) ; getch ( ) ; delline ( ) ; printf ( " Line deleted successfully. " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " Waiting for a character to be pressed from the keyboard to exit.\n  " ) ; getch ( ) ; return 0 ; }
#include <iostream.h> #include <conio.h> main ( ) { cout < < " Enter a character " ; getch ( ) ; }
#include <stdio.h> main ( ) { int c ; c = getchar ( ) ; putchar ( c ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " Waiting for a character to be pressed from the keyboard to exit. " ) ; getche ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { while ( !kbhit ( ) ) printf ( " You haven't pressed a key.\n  " ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { int x ; printf ( " Hello " ) ; x = wherex ( ) ; printf ( " Horizontal cursor position from where this text appears = %d\n  " , x ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { int y ; printf ( " Hello\n  " ) ; y = wherey ( ) ; printf ( " Vertical cursor position from where this text appears = %d " , y ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { textcolor ( RED ) ; cprintf ( " C programming " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { textcolor ( MAGENTA + BLINK ) ; cprintf ( " C programming " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { textbackground ( RED ) ; cprintf ( " C program to change background color. " ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <math.h> int main ( ) { int n , result ; printf ( " Enter an integer to calculate it's absolute value\n  " ) ; scanf ( " %d " , & n ) ; result = abs ( n ) ; printf ( " Absolute value of %d = %d\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to round it up\n  " ) ; scanf ( " %lf " , & n ) ; result = ceil ( n ) ; printf ( " Original number = %.2lf\n  " , n ) ; printf ( " Number rounded up = %.2lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double result , x = 1.0471 ; result = cos ( x ) ; printf ( " cos ( %.4lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to round it down\n  " ) ; scanf ( " %lf " , & n ) ; result = floor ( n ) ; printf ( " Original number = %.2lf\n  " , n ) ; printf ( " Number rounded down = %.2lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's natural log ( base is e ) \n  " ) ; scanf ( " %lf " , & n ) ; result = log ( n ) ; printf ( " Natural log of %.2lf = %lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's log ( base is 10 ) \n  " ) ; scanf ( " %lf " , & n ) ; result = log10 ( n ) ; printf ( " Common log of %.2lf = %.2lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double c , d , result ; printf ( " Enter c and d to calculate c^d\n  " ) ; scanf ( " %lf %lf " , & c , & d ) ; result = pow ( c , d ) ; printf ( " %.2lf raised to %.2lf = %.2lf\n  " , c , d , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int x = 5 ; double result ; result = pow10 ( x ) ; printf ( " Ten raised to %d is %lf\n  " , x , result ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <math.h> int main ( ) { double result , x = M_PI / 6 ; result = sin ( x ) ; printf ( " The sin ( %lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's square root\n  " ) ; scanf ( " %lf " , & n ) ; result = sqrt ( n ) ; printf ( " Square root of %.2lf = %.2lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num ; printf ( " \n Hello world!\n Welcome to Studytonight : Best place to learn\n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char str [ 50 ] ; printf ( " Enter your complete name : \n \n \n  " ) ; gets ( str ) ; printf ( " \n \n Welcome to Studytonight %s\n \n \n  " , str ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int number ; printf ( " Please enter a number : \n  " ) ; scanf ( " %d " , & number ) ; if ( number < 100 ) printf ( " Number is less than 100!\n  " ) ; else if ( number = = 100 ) printf ( " Number is 100!\n  " ) ; else printf ( " Number is greater than 100!\n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char alphabet ; printf ( " Enter an alphabet : " ) ; putchar ( '\n ' ) ; alphabet = getchar ( ) ; printf ( " \n \n Reverse case of %c is : " , alphabet ) ; if ( islower ( alphabet ) ) putchar ( toupper ( alphabet ) ) ; else printf ( " %c " , tolower ( alphabet ) ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 10 , y = 15 , temp ; temp = x ; x = y ; y = temp ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 10 , y = 15 ; x = x + y - ( y = x ) ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 6 , y = 4 ; x = x^y ; y = x^y ; x = x^y ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 6 , y = 4 ; x = x * y ; y = x / y ; x = x / y ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int i = 0 ; printf ( " \n Printing numbers using while loop from 0 to 9\n \n  " ) ; while ( i <10 ) { printf ( " %d\n  " , i ) ; i + + ; } printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int fact , i , n ; fact = 1 ; printf ( " Enter the number\t " ) ; scanf ( " %d " , & n ; ) ; for ( i = 1 ; i < = n ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is %d " , n , fact ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int x ; for ( x = 0 ; x < = 10 ; x + + ) { if ( x & 1 ) printf ( " \t\t\t %d is odd\n  " , x ) ; else if ( ! ( x & 1 ) ) printf ( " \t\t\t %d is even\n  " , x ) ; } printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; if ( ( n / 2 ) * 2 = = n ) printf ( " \n \n \t\t %d is Even\n  " , n ) ; else printf ( " \n \n \t\t %d is Odd\n  " , n ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptrA , * ptrB ; ptrA = ( int * ) 1 ; ptrB = ( int * ) 2 ; if ( ptr2 > ptr1 ) printf ( " PtrB is greater than ptrA " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int * ptrA ; float * ptrB ; ptrA = ( int * ) 1000 ; ptrB = ( float * ) 2000 ; if ( ptrB > ptrA ) printf ( " PtrB is greater than ptrA " ) ; return ( 0 ) ; }
#include <stdio.h> int func ( int a , int b ) { printf ( " \n \n  a = %d \n  " , a ) ; printf ( " \n \n  b = %d \n  " , b ) ; } int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int ( * fptr ) ( int , int ) ; fptr = func ; func ( 2 , 3 ) ; fptr ( 2 , 3 ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int * ptr = NULL ; printf ( " \n \n  The value of ptr is : %x " , ptr ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; c = 'A' ; printf ( " value of c is %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; i = 123 ; printf ( " value of i is %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; f = 12.001234 ; printf ( " value of f is %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { double d ; d = 12.001234 ; printf ( " value of d is %e " , d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int op1 , op2 , sum ; op1 = 5 ; op2 = 3 ; sum = op1 + op2 ; printf ( " sum of %d and %d is %d " , op1 , op2 , sum ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , sub ; op1 = 5 ; op2 = 3 ; sub = op1 - op2 ; printf ( " Output of %d − %d is %d " , op1 , op2 , sub ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , mul ; op1 = 5 ; op2 = 3 ; mul = op1 * op2 ; printf ( " Output of %d multiplied by %d is %d " , op1 , op2 , mul ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , div ; op1 = 6 ; op2 = 3 ; div = 6 / 3 ; printf ( " Output of %d divide by %d is %d " , op1 , op2 , div ) ; }
#include <stdio.h> int main ( ) { int a , b ; a = 11 ; b = 99 ; if ( a > b ) printf ( " a is greater than b " ) ; else printf ( " a is not greater than b " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 11 ; b = 22 ; c = 33 ; if ( a > b & & a > c ) printf ( " %d is the largest. " , a ) ; else if ( b > a & & b > c ) printf ( " %d is the largest. " , b ) ; else if ( c > a & & c > b ) printf ( " %d is the largest. " , c ) ; else printf ( " Values are not unique " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int even = 24 ; int odd = 31 ; if ( even % 2 = = 0 ) printf ( " %d is even\n  " , even ) ; if ( odd % 2 ! = 0 ) printf ( " %d is odd\n  " , odd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number = -2 ; if ( number > = 0 ) printf ( " %d is positive\n  " , number ) ; else printf ( " %d is negative\n  " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; year = 2016 ; if ( ( ( year % 4 = = 0 ) & & ( year % 100! = 0 ) ) || ( year %400 = = 0 ) ) printf ( " %d is a leap year " , year ) ; else printf ( " %d is not a leap year " , year ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , temp ; a = 11 ; b = 99 ; printf ( " Values before swapping - \n  a = %d , b = %d \n \n  " , a , b ) ; temp = a ; a = b ; b = temp ; printf ( " Values after swapping - \n  a = %d , b = %d \n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int a , b ; a = 11 ; b = 99 ; printf ( " Values before swapping - \n  a = %d , b = %d \n \n  " , a , b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " Values after swapping - \n  a = %d , b = %d \n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int i , start , end ; start = 1 ; end = 10 ; for ( i = start ; i < = end ; i + + ) printf ( " %2d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = i ; j < = 100 ; j + = 10 ) printf ( " %3d " , j ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; n = 3 ; j = 1 ; for ( i = n ; i < = ( n * 10 ) ; i + = n ) { printf ( " %3d x %2d = %3d\n  " , n , j , i ) ; j + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count ; int start , end ; start = 2 , end = 10 ; for ( i = start ; i < = end ; i + + ) { count = i ; for ( j = 1 ; j < = 10 ; j + + ) { printf ( " %3d " , count * j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; start = 1 ; end = 10 ; for ( i = end ; i > = start ; i-- ) printf ( " %2d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i %2 = = 0 ) printf ( " %2d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i %2 ! = 0 ) printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = n-i ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 1 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < i ; j + + ) printf ( " " ) ; for ( j = i ; j < = n ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 1 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j <i ; j + + ) printf ( " " ) ; for ( j = i ; j < n ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = n ; i > = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j , k = 1 ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) printf ( " %3d " , k + + ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop ; for ( loop = 0 ; loop < 10 ; loop + + ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop ; for ( loop = 9 ; loop > = 0 ; loop-- ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int sum , loop ; sum = 0 ; for ( loop = 9 ; loop > = 0 ; loop-- ) { sum = sum + array [ loop ] ; } printf ( " Sum of array is %d. " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int sum , loop ; float avg ; sum = avg = 0 ; for ( loop = 0 ; loop < 10 ; loop + + ) { sum = sum + array [ loop ] ; } avg = ( float ) sum / loop ; printf ( " Average of array values is %.2f " , avg ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop , largest ; largest = array [ 0 ] ; for ( loop = 1 ; loop < 10 ; loop + + ) { if ( largest < array [ loop ] ) largest = array [ loop ] ; } printf ( " Largest element of array is %d " , largest ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop , smallest ; smallest = array [ 0 ] ; for ( loop = 1 ; loop < 10 ; loop + + ) { if ( smallest > array [ loop ] ) smallest = array [ loop ] ; } printf ( " Smallest element of array is %d " , smallest ) ; return 0 ; }
#include <stdio.h> int main ( ) { int original [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int copied [ 10 ] ; int loop ; for ( loop = 0 ; loop < 10 ; loop + + ) { copied [ loop ] = original [ loop ] ; } printf ( " original -> copied \n  " ) ; for ( loop = 0 ; loop < 10 ; loop + + ) { printf ( " %2d %2d\n  " , original [ loop ] , copied [ loop ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " Hello World " ; printf ( " %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; int i = 0 ; while ( s1 [ i ] ! = '\0' ) { i + + ; } printf ( " Length of string ' %s' is %d " , s1 , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = " TajMahal " ; int i = 0 ; int vowels = 0 ; int consonants = 0 ; while ( s [ i + + ] ! = '\0' ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'o' || s [ i ] = = 'u' ) vowels + + ; else consonants + + ; } printf ( " ' %s' contains %d vowels and %d consonants. " , s , vowels , consonants ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; char s2 [ 8 ] ; int length = 0 ; while ( s1 [ length ] ! = '\0' ) { s2 [ length ] = s1 [ length ] ; length + + ; } s2 [ length ] = '\0' ; printf ( " Value in s1 = %s \n  " , s1 ) ; printf ( " Value in s2 = %s \n  " , s2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arms = 153 ; int check , rem , sum = 0 ; check = arms ; while ( check ! = 0 ) { rem = check % 10 ; sum = sum + ( rem * rem * rem ) ; check = check / 10 ; } if ( sum = = arms ) printf ( " %d is an armstrong number. " , arms ) ; else printf ( " %d is not an armstrong number. " , arms ) ; return 0 ; }
#include <stdio.h> int main ( ) { int loop , number ; int prime = 1 ; number = 11 ; for ( loop = 2 ; loop < number ; loop + + ) { if ( ( number % loop ) = = 0 ) { prime = 0 ; } } if ( prime = = 1 ) printf ( " %d is prime number. " , number ) ; else printf ( " %d is not a prime number. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int loop ; int factorial = 1 ; int number = 5 ; for ( loop = 1 ; loop < = number ; loop + + ) { factorial = factorial * loop ; } printf ( " Factorial of %d = %d \n  " , number , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , i , n ; n = 4 ; a = b = 1 ; printf ( " %d %d " , a , b ) ; for ( i = 1 ; i < = n-2 ; i + + ) { c = a + b ; printf ( " %d " , c ) ; a = b ; b = c ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , total ; int a [ ] = { 0 , 6 , 9 , 2 , 7 } ; int n = 5 ; total = 0 ; for ( i = 0 ; i < n ; i + + ) { total + = a [ i ] ; } printf ( " Average = %f\n  " , total / ( float ) n ) ; return 0 ; }
#include <stdio.h> int main ( ) { float percentage ; int total_marks = 1200 ; int scored = 1122 ; percentage = ( float ) scored / total_marks * 100.0 ; printf ( " Percentage = %.2f % % " , percentage ) ; return 0 ; }
#include <stdio.h> int main ( ) { float mean ; int sum , i ; int n = 5 ; int a [ ] = { 2 , 6 , 7 , 4 , 9 } ; sum = 0 ; for ( i = 0 ; i < n ; i + + ) { sum + = a [ i ] ; } printf ( " Mean = %f " , sum / ( float ) n ) ; return 0 ; }
#include <stdio.h> double squareRoot ( double n ) { double i , precision = 0.00001 ; for ( i = 1 ; i * i < = n ; + + i ) ; for ( --i ; i * i < n ; i + = precision ) ; return i ; } int main ( ) { int n = 24 ; printf ( " Square root of %d = %lf " , n , squareRoot ( n ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n = 5 ; printf ( " Cube of %d = %d " , n , ( n * n * n ) ) ; return 0 ; }
#include <stdio.h> double cubeRoot ( double n ) { double i , precision = 0.000001 ; for ( i = 1 ; ( i * i * i ) < = n ; + + i ) ; for ( --i ; ( i * i * i ) < n ; i + = precision ) ; return i ; } int main ( ) { int n = 125 ; printf ( " Cube root of %d = %lf " , n , cubeRoot ( n ) ) ; return 0 ; }
#include <stdio.h> int factorial ( int n ) { int f ; for ( f = 1 ; n > 1 ; n-- ) f * = n ; return f ; } int npr ( int n , int r ) { return factorial ( n ) / factorial ( n-r ) ; } int main ( ) { int n , r ; n = 4 ; r = 3 ; printf ( " %dp %d = %d \n  " , n , r , npr ( n , r ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , i , hcf ; a = 12 ; b = 16 ; for ( i = 1 ; i < = a || i < = b ; i + + ) { if ( a %i = = 0 & & b %i = = 0 ) hcf = i ; } printf ( " HCF = %d " , hcf ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , max , step , lcm ; a = 3 ; b = 4 ; lcm = 0 ; if ( a > b ) max = step = a ; else max = step = b ; while ( 1 ) { if ( max %a = = 0 & & max %b = = 0 ) { lcm = max ; break ; } max + = step ; } printf ( " LCM is %d " , lcm ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include " myfile.h " #include void printValue ( ) { printf ( " Global variable : %d " , global_variable ) ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " You\n are\n learning\n \'c\' language\n \ " Do you know C language\ " " ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; PI = 4.5 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } else { printf ( " %d is odd number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age? " ) ; scanf ( " %d " , & age ; ) ; if ( age> = 18 ) { printf ( " You are eligible to vote... " ) ; } else { printf ( " Sorry ... you can't vote " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number = = 10 ) { printf ( " number is equals to 10 " ) ; } else if ( number = = 50 ) { printf ( " number is equal to 50 " ) ; } else if ( number = = 100 ) { printf ( " number is equal to 100 " ) ; } else { printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equals to 10 " ) ; break ; case 50 : printf ( " number is equal to 50 " ) ; break ; case 100 : printf ( " number is equal to 100 " ) ; break ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 5 ; switch ( x> y & & x + y> 0 ) { case 1 : printf ( " hi " ) ; break ; case 0 : printf ( " bye " ) ; break ; default : printf ( " Hello bye " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equal to 10\n  " ) ; case 50 : printf ( " number is equal to 50\n  " ) ; case 100 : printf ( " number is equal to 100\n  " ) ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int j = 20 ; switch ( i ) { case 10 : printf ( " the value of i evaluated in outer switch : %d\n  " , i ) ; case 20 : switch ( j ) { case 20 : printf ( " The value of j evaluated in nested switch : %d\n  " , j ) ; } } printf ( " Exact value of i is : %d\n  " , i ) ; printf ( " Exact value of j is : %d\n  " , j ) ; return 0 ; }
#include int main ( ) { int i = 1 ; do { printf ( " %d \n  " , i ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; do { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d \n  " , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 , b = 9 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( i < = 10 ) { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } return 0 ; }
#include <stdio.h> void main ( ) { int j = 1 ; while ( j + = 2 , j < = 10 ) { printf ( " %d " , j ) ; } printf ( " %d " , j ) ; }
#include <stdio.h> void main ( ) { while ( ) { printf ( " hello Javatpoint " ) ; } }
#include <stdio.h> void main ( ) { int x = 10 , y = 2 ; while ( x + y-1 ) { printf ( " %d %d " , x-- , y-- ) ; } }
#include int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , ( number * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; for ( a = 0 , b = 12 , c = 23 ; a <2 ; a + + ) { printf ( " %d " , a + b + c ) ; } }
#include <stdio.h> int main ( ) { int i = 1 ; for ( ; i <5 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 , j = 0 , k = 0 ; i <4 , k <8 , j <10 ; i + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; j + = 2 ; k + = 3 ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { int i = 0 , j = 2 ; for ( i = 0 ; i <5 ; i + + , j = j + 2 ) { printf ( " %d %d\n  " , i , j ) ; } }
#include <stdio.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { int i = 20 ; printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { for ( ; ; ) { printf ( " welcome to javatpoint " ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; if ( i = = 5 ) break ; } printf ( " came outside of loop i = %d " , i ) ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { printf ( " %d & d\n  " , i , j ) ; if ( i = = 2 & & j = = 2 ) { break ; } } return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( 1 ) { printf ( " %d " , i ) ; i + + ; if ( i = = 10 ) break ; } printf ( " came out of while loop " ) ; }
#include <stdio.h> void main ( ) { int n = 2 , i , choice ; do { i = 1 ; while ( i < = 10 ) { printf ( " %d X %d = %d\n  " , n , i , n * i ) ; i + + ; } printf ( " do you want to continue with the table of %d , enter any non-zero value to continue. " , n + 1 ) ; scanf ( " %d " , & choice ; ) ; if ( choice = = 0 ) { break ; } n + + ; } while ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( i! = 10 ) { printf ( " %d " , i ) ; continue ; i + + ; } }
#include int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i = = 5 ) { continue ; } printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { if ( i = = 2 & & j = = 2 ) { continue ; } printf ( " %d %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int num , i = 1 ; printf ( " Enter the number whose table you want to print? " ) ; scanf ( " %d " , & num ; ) ; table : printf ( " %d x %d = %d\n  " , num , i , num * i ) ; i + + ; if ( i < = 10 ) goto table ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 ; i <10 ; i + + ) { for ( j = 0 ; j <5 ; j + + ) { for ( k = 0 ; k <3 ; k + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; if ( j = = 3 ) { goto out ; } } } } out : printf ( " came out of the loop " ) ; }
#include int main ( ) { float f = ( float ) 9 / 4 ; printf ( " f : %f\n  " , f ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include <stdio.h> void printName ( ) ; void main ( ) { printf ( " Hello " ) ; printName ( ) ; } void printName ( ) { printf ( " Javatpoint " ) ; }
#include <stdio.h> void sum ( ) ; void main ( ) { printf ( " \n Going to calculate the sum of two numbers : " ) ; sum ( ) ; } void sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; printf ( " The sum is %d " , a + b ) ; }
#include <stdio.h> int sum ( ) ; void main ( ) { int result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; result = sum ( ) ; printf ( " %d " , result ) ; } int sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include <stdio.h> int sum ( ) ; void main ( ) { printf ( " Going to calculate the area of the square\n  " ) ; float area = square ( ) ; printf ( " The area of the square : %f\n  " , area ) ; } int square ( ) { float side ; printf ( " Enter the length of the side in meters : " ) ; scanf ( " %f " , & side ; ) ; return side * side ; }
#include <stdio.h> void sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; sum ( a , b ) ; } void sum ( int a , int b ) { printf ( " \n The sum is %d " , a + b ) ; }
#include <stdio.h> int sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; result = sum ( a , b ) ; printf ( " \n The sum is : %d " , result ) ; } int sum ( int a , int b ) { return a + b ; }
#include void change ( int num ) { printf ( " Before adding value inside function num = %d \n  " , num ) ; num = num + 100 ; printf ( " After adding value inside function num = %d \n  " , num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include void change ( int * num ) { printf ( " Before adding value inside function num = %d \n  " , * num ) ; ( * num ) + = 100 ; printf ( " After adding value inside function num = %d \n  " , * num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( & x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include <stdio.h> int fact ( int ) ; int main ( ) { int n , f ; printf ( " Enter the number whose factorial you want to calculate? " ) ; scanf ( " %d " , & n ; ) ; f = fact ( n ) ; printf ( " factorial = %d " , f ) ; } int fact ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return n * fact ( n-1 ) ; } }
#include <stdio.h> int fibonacci ( int ) ; void main ( ) { int n , f ; printf ( " Enter the value of n? " ) ; scanf ( " %d " , & n ; ) ; f = fibonacci ( n ) ; printf ( " %d " , f ) ; } int fibonacci ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return fibonacci ( n-1 ) + fibonacci ( n-2 ) ; } }
#include <stdio.h> int main ( ) { int a ; char b ; float c ; printf ( " %d %c %f " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , i ; printf ( " %d " , + + a ) ; { int a = 20 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %d " , a ) ; } } printf ( " %d " , a ) ; }
#include <stdio.h> static char c ; static int i ; static float f ; static char s [ 100 ] ; void main ( ) { printf ( " %d %d %f %s " , c , i , f ) ; }
#include void sum ( ) { static int a = 10 ; static int b = 24 ; printf ( " %d %d \n  " , a , b ) ; a + + ; b + + ; } void main ( ) { int i ; for ( i = 0 ; i < 3 ; i + + ) { sum ( ) ; } }
#include <stdio.h> int main ( ) { register int a ; printf ( " %d " , a ) ; }
#include <stdio.h> int main ( ) { register int a = 0 ; printf ( " %u " , & a ; ) ; }
#include <stdio.h> int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a = 0 ; printf ( " %d " , a ) ; }
#include int main ( ) { extern int a ; printf ( " %d " , a ) ; } int a = 20 ;
#include <stdio.h> int main ( ) { int i = 0 ; int marks [ 5 ] ; marks [ 0 ] = 80 ; marks [ 1 ] = 60 ; marks [ 2 ] = 70 ; marks [ 3 ] = 85 ; marks [ 4 ] = 75 ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include int main ( ) { int i = 0 ; int marks [ 5 ] = { 20 , 30 , 40 , 50 , 60 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include int minarray ( int arr [ ] , int size ) { int min = arr [ 0 ] ; int i = 0 ; for ( i = 1 ; iarr [ i ] ) { min = arr [ i ] ; } } return min ; } int main ( ) { int i = 0 , min = 0 ; int numbers [ ] = { 4 , 5 , 7 , 3 , 8 , 9 } ; min = minarray ( numbers , 6 ) ; printf ( " minimum number is %d \n  " , min ) ; return 0 ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of p variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " value of number is %d , address of number is %u " , number , & number ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 , * p1 = & a , * p2 = & b ; printf ( " Before swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; * p1 = * p1 + * p2 ; * p2 = * p1- * p2 ; * p1 = * p1- * p2 ; printf ( " \n After swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 ; int * p ; int * * pp ; p = & a ; pp = & p ; printf ( " address of a : %x\n  " , p ) ; printf ( " address of p : %x\n  " , pp ) ; printf ( " value stored at p : %d\n  " , * p ) ; printf ( " value stored at pp : %d\n  " , * * pp ) ; }
#include int main ( ) { int number = 50 ; int * p ; int * * p2 ; p = & number ; p2 = & p ; printf ( " Address of number variable is %x \n  " , & number ) ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of * p variable is %d \n  " , * p ) ; printf ( " Address of p2 variable is %x \n  " , p2 ) ; printf ( " Value of * * p2 variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 1 ; printf ( " After increment : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * p = arr ; int i ; printf ( " printing array elements...\n  " ) ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " %d " , * ( p + i ) ) ; } }
#include void main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-1 ; printf ( " After decrement : Address of p variable is %u \n  " , p ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 3 ; printf ( " After adding 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-3 ; printf ( " After subtracting 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 100 ; int * p = & i ; int * temp ; temp = p ; p = p + 3 ; printf ( " Pointer Subtraction : %d - %d = %d " , p , temp , p-temp ) ; }
#include <stdio.h> int addition ( ) ; int main ( ) { int result ; int ( * ptr ) ( ) ; ptr = & addition ; result = ( * ptr ) ( ) ; printf ( " The sum is %d " , result ) ; } int addition ( ) { int a , b ; printf ( " Enter two numbers? " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { char ch [ 11 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 11 ] = " javatpoint " ; printf ( " Char Array Value is : %s\n  " , ch ) ; printf ( " String Literal Value is : %s\n  " , ch2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( i <11 ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( s [ i ] ! = NULL ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " %s " , s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " % [ ^\n  ] s " , s ) ; printf ( " You entered %s " , s ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; char * p = s ; printf ( " %s " , p ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " String p : %s\n  " , p ) ; char * q ; printf ( " copying the content of p into q...\n  " ) ; q = p ; printf ( " String q : %s\n  " , q ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " Before assigning : %s\n  " , p ) ; p = " hello " ; printf ( " After assigning : %s\n  " , p ) ; }
#include void main ( ) { char s [ 30 ] ; printf ( " Enter the string? " ) ; gets ( s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char str [ 20 ] ; printf ( " Enter the string? " ) ; fgets ( str , 20 , stdin ) ; printf ( " %s " , str ) ; }
#include #include int main ( ) { char name [ 50 ] ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Your name is : " ) ; puts ( name ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 20 ] ; strcpy ( ch2 , ch ) ; printf ( " Value of second string is : %s " , ch2 ) ; return 0 ; }
#include #include int main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; return 0 ; }
#include #include int main ( ) { char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter 1st string : " ) ; gets ( str1 ) ; printf ( " Enter 2nd string : " ) ; gets ( str2 ) ; if ( strcmp ( str1 , str2 ) = = 0 ) printf ( " Strings are equal " ) ; else printf ( " Strings are not equal " ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Reverse String is : %s " , strrev ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Lower String is : %s " , strlwr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Upper String is : %s " , strupr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; sub = strstr ( str , " java " ) ; printf ( " \n Substring is : %s " , sub ) ; return 0 ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include struct employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include <stdio.h> struct address { char city [ 20 ] ; int pin ; char phone [ 14 ] ; } ; struct employee { char name [ 20 ] ; struct address add ; } ; void main ( ) { struct employee emp ; printf ( " Enter employee information?\n  " ) ; scanf ( " %s %s %d %s " , emp.name , emp.add.city , & emp.add.pin ; , emp.add.phone ) ; printf ( " Printing the employee information....\n  " ) ; printf ( " name : %s\n City : %s\n Pincode : %d\n Phone : %s " , emp.name , emp.add.city , emp.add.pin , emp.add.phone ) ; }
#include #include union employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include <stdio.h> void main ( ) { FILE * fp ; char ch ; fp = fopen ( " file_handle.c " , " r " ) ; while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) break ; printf ( " %c " , ch ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file.txt " , " w " ) ; fprintf ( fp , " Hello file by fprintf...\n  " ) ; fclose ( fp ) ; }
#include main ( ) { FILE * fp ; char buff [ 255 ] ; fp = fopen ( " file.txt " , " r " ) ; while ( fscanf ( fp , " %s " , buff ) ! = EOF ) { printf ( " %s " , buff ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file1.txt " , " w " ) ; fputc ( 'a' , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " myfile.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " w " ) ; fputs ( " hello c programming " , fp ) ; fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; char text [ 300 ] ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " r " ) ; printf ( " %s " , fgets ( text , 200 , fp ) ) ; fclose ( fp ) ; getch ( ) ; }
#include void main ( ) { FILE * fp ; fp = fopen ( " myfile.txt " , " w + " ) ; fputs ( " This is javatpoint " , fp ) ; fseek ( fp , 7 , SEEK_SET ) ; fputs ( " sonoo jaiswal " , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } rewind ( fp ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; int length ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fclose ( fp ) ; printf ( " Size of file : %d bytes " , length ) ; getch ( ) ; }
#include int main ( ) { printf ( " File : %s\n  " , __FILE__ ) ; printf ( " Date : %s\n  " , __DATE__ ) ; printf ( " Time : %s\n  " , __TIME__ ) ; printf ( " Line : %d\n  " , __LINE__ ) ; printf ( " STDC : %d\n  " , __STDC__ ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include #define PI 3.14 main ( ) { printf ( " %f " , PI ) ; }
#include #define MIN ( a , b ) ( ( a ) < ( b ) ? ( a ) : ( b ) ) void main ( ) { printf ( " Minimum between 10 and 20 is : %d\n  " , MIN ( 10 , 20 ) ) ; }
#include #define PI 3.14 #undef PI main ( ) { printf ( " %f " , PI ) ; }
#include #define number 15 int square = number * number ; #undef number main ( ) { printf ( " %d " , square ) ; }
#include #include #define NOINPUT void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define INPUT void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define NUMBER 0 void main ( ) { #if ( NUMBER = = 0 ) printf ( " Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { clrscr ( ) ; #if ( NUMBER = = 0 ) printf ( " 1 Value of Number is : %d " , NUMBER ) ; #endif #if ( NUMBER = = 1 ) printf ( " 2 Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { #if NUMBER = = 0 printf ( " Value of Number is : %d " , NUMBER ) ; #else print ( " Value of Number is non-zero " ) ; #endif getch ( ) ; }
#include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include void func ( ) ; #pragma startup func #pragma exit func void main ( ) { printf ( " \n I am in main " ) ; getch ( ) ; } void func ( ) { printf ( " \n I am in func " ) ; getch ( ) ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include void main ( int argc , char * argv [ ] ) { printf ( " Program name is : %s\n  " , argv [ 0 ] ) ; if ( argc < 2 ) { printf ( " No argument passed through command line.\n  " ) ; } else { printf ( " First argument is : %s\n  " , argv [ 1 ] ) ; } }
#include int main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include void printFibonacci ( int n ) { static int n1 = 0 , n2 = 1 , n3 ; if ( n> 0 ) { n3 = n1 + n2 ; n1 = n2 ; n2 = n3 ; printf ( " %d " , n3 ) ; printFibonacci ( n-1 ) ; } } int main ( ) { int n ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : " ) ; printf ( " %d %d " , 0 , 1 ) ; printFibonacci ( n-2 ) ; return 0 ; }
#include int main ( ) { int n , i , m = 0 , flag = 0 ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; return 0 ; }
#include int main ( ) { int i , fact = 1 , number ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; return 0 ; }
#include <stdio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; return 0 ; }
#include int main ( ) { int n , sum = 0 , m ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { m = n %10 ; sum = sum + m ; n = n / 10 ; } printf ( " Sum is = %d " , sum ) ; return 0 ; }
#include int main ( ) { int n , reverse = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include #include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a * b ; b = a / b ; a = a / b ; system ( " cls " ) ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include int main ( ) { if ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { switch ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { while ( !printf ( " hello world " ) ) { } return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 , b = 20 , c ; asm { mov ax , a mov bx , b add ax , bx mov c , ax } printf ( " c = %d " , c ) ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include #include int main ( ) { int a [ 10 ] [ 10 ] , b [ 10 ] [ 10 ] , mul [ 10 ] [ 10 ] , r , c , i , j , k ; system ( " cls " ) ; printf ( " enter the number of row = " ) ; scanf ( " %d " , & r ; ) ; printf ( " enter the number of column = " ) ; scanf ( " %d " , & c ; ) ; printf ( " enter the first matrix element = \n  " ) ; for ( i = 0 ; i
#include #include int main ( ) { int a [ 10 ] , n , i ; system ( " cls " ) ; printf ( " Enter the number to convert : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; n> 0 ; i + + ) { a [ i ] = n %2 ; n = n / 2 ; } printf ( " \n Binary of Given Number is = " ) ; for ( i = i-1 ; i> = 0 ; i-- ) { printf ( " %d " , a [ i ] ) ; } return 0 ; }
#include #include int main ( ) { int ch = 65 ; int i , j , k , m ; system ( " cls " ) ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 5 ; j> = i ; j-- ) printf ( " " ) ; for ( k = 1 ; k < = i ; k + + ) printf ( " %c " , ch + + ) ; ch-- ; for ( m = 1 ; m
#include #include int main ( ) { int a = 0 , b = 1 , i , c , n , j ; system ( " cls " ) ; printf ( " Enter the limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { a = 0 ; b = 1 ; printf ( " %d\t " , b ) ; for ( j = 1 ; j
#include <stdio.h> void change ( int , int ) ; int main ( ) { int a = 10 , b = 20 ; change ( a , b ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int x , int y ) { x = 13 ; y = 17 ; }
#include <stdio.h> void change ( int * , int * ) ; int main ( ) { int a = 10 , b = 20 ; change ( & a ; , & b ; ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int * x , int * y ) { * x = 13 ; * y = 17 ; }
#include <stdio.h> int calculate_fact ( int ) ; int main ( ) { int n = 5 , f ; f = calculate_fact ( n ) ; printf ( " factorial of a number is %d " , f ) ; return 0 ; } int calculate_fact ( int a ) { if ( a = = 1 ) { return 1 ; } else return a * calculate_fact ( a-1 ) ; }
#include <stdio.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i <5 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int a = 5 ; p = & a ; printf ( " Address value of 'a' variable is %u " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; ptr = NULL ; }
#include <stdio.h> int main ( ) { int a = 10 ; int * ptr , * * pptr ; ptr = & a ; pptr = & ptr ; printf ( " value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " value of * ptr is : %d " , * ptr ) ; printf ( " \n  " ) ; printf ( " value of * * pptr is : %d " , * * pptr ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 10 ] ; int age ; } s1 ; int main ( ) { printf ( " Enter the name " ) ; scanf ( " %s " , s1.name ) ; printf ( " \n  " ) ; printf ( " Enter the age " ) ; scanf ( " %d " , & s1.age ; ) ; printf ( " \n  " ) ; printf ( " Name and age of a student : %s , %d " , s1.name , s1.age ) ; return 0 ; }
#include <stdio.h> union data { int a ; float b ; char ch ; } ; int main ( ) { union data d ; d.a = 3 ; d.b = 5.6 ; d.ch = 'a' ; printf ( " value of a is %d " , d.a ) ; printf ( " \n  " ) ; printf ( " value of b is %f " , d.b ) ; printf ( " \n  " ) ; printf ( " value of ch is %c " , d.ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 20 ] ; int n = sprintf ( a , " javaToint " ) ; printf ( " value of n is %d " , n ) ; return 0 ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char ch ; printf ( " Enter a character " ) ; ch = getch ( ) ; printf ( " \n value of ch is %c " , ch ) ; printf ( " \n Enter a character again " ) ; ch = getche ( ) ; printf ( " \n value of ch is %c " , ch ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " hello world " ) ) { } }
#include <stdio.h> #include <conio.h> main ( ) { int a = 10 , b = 20 ; clrscr ( ) ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; getch ( ) ; }
#include #include void main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ; ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include <stdio.h> #include <conio.h> void main ( ) { int n , i , m = 0 , flag = 0 ; clrscr ( ) ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ; ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; getch ( ) ; }
#include #include main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; getch ( ) ; }
#include #include void main ( ) { int i , fact = 1 , number ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , reverse = 0 , rem ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ; ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; getch ( ) ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include " myfile.h " #include void printValue ( ) { printf ( " Global variable : %d " , global_variable ) ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " You\n are\n learning\n \'c\' language\n \ " Do you know C language\ " " ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; PI = 4.5 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } else { printf ( " %d is odd number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age? " ) ; scanf ( " %d " , & age ; ) ; if ( age> = 18 ) { printf ( " You are eligible to vote... " ) ; } else { printf ( " Sorry ... you can't vote " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number = = 10 ) { printf ( " number is equals to 10 " ) ; } else if ( number = = 50 ) { printf ( " number is equal to 50 " ) ; } else if ( number = = 100 ) { printf ( " number is equal to 100 " ) ; } else { printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equals to 10 " ) ; break ; case 50 : printf ( " number is equal to 50 " ) ; break ; case 100 : printf ( " number is equal to 100 " ) ; break ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 5 ; switch ( x> y & & x + y> 0 ) { case 1 : printf ( " hi " ) ; break ; case 0 : printf ( " bye " ) ; break ; default : printf ( " Hello bye " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equal to 10\n  " ) ; case 50 : printf ( " number is equal to 50\n  " ) ; case 100 : printf ( " number is equal to 100\n  " ) ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int j = 20 ; switch ( i ) { case 10 : printf ( " the value of i evaluated in outer switch : %d\n  " , i ) ; case 20 : switch ( j ) { case 20 : printf ( " The value of j evaluated in nested switch : %d\n  " , j ) ; } } printf ( " Exact value of i is : %d\n  " , i ) ; printf ( " Exact value of j is : %d\n  " , j ) ; return 0 ; }
#include int main ( ) { int i = 1 ; do { printf ( " %d \n  " , i ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; do { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d \n  " , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 , b = 9 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( i < = 10 ) { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } return 0 ; }
#include <stdio.h> void main ( ) { int j = 1 ; while ( j + = 2 , j < = 10 ) { printf ( " %d " , j ) ; } printf ( " %d " , j ) ; }
#include <stdio.h> void main ( ) { while ( ) { printf ( " hello Javatpoint " ) ; } }
#include <stdio.h> void main ( ) { int x = 10 , y = 2 ; while ( x + y-1 ) { printf ( " %d %d " , x-- , y-- ) ; } }
#include int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , ( number * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; for ( a = 0 , b = 12 , c = 23 ; a <2 ; a + + ) { printf ( " %d " , a + b + c ) ; } }
#include <stdio.h> int main ( ) { int i = 1 ; for ( ; i <5 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 , j = 0 , k = 0 ; i <4 , k <8 , j <10 ; i + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; j + = 2 ; k + = 3 ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { int i = 0 , j = 2 ; for ( i = 0 ; i <5 ; i + + , j = j + 2 ) { printf ( " %d %d\n  " , i , j ) ; } }
#include <stdio.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { int i = 20 ; printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { for ( ; ; ) { printf ( " welcome to javatpoint " ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; if ( i = = 5 ) break ; } printf ( " came outside of loop i = %d " , i ) ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { printf ( " %d & d\n  " , i , j ) ; if ( i = = 2 & & j = = 2 ) { break ; } } return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( 1 ) { printf ( " %d " , i ) ; i + + ; if ( i = = 10 ) break ; } printf ( " came out of while loop " ) ; }
#include <stdio.h> void main ( ) { int n = 2 , i , choice ; do { i = 1 ; while ( i < = 10 ) { printf ( " %d X %d = %d\n  " , n , i , n * i ) ; i + + ; } printf ( " do you want to continue with the table of %d , enter any non-zero value to continue. " , n + 1 ) ; scanf ( " %d " , & choice ; ) ; if ( choice = = 0 ) { break ; } n + + ; } while ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( i! = 10 ) { printf ( " %d " , i ) ; continue ; i + + ; } }
#include int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i = = 5 ) { continue ; } printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { if ( i = = 2 & & j = = 2 ) { continue ; } printf ( " %d %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int num , i = 1 ; printf ( " Enter the number whose table you want to print? " ) ; scanf ( " %d " , & num ; ) ; table : printf ( " %d x %d = %d\n  " , num , i , num * i ) ; i + + ; if ( i < = 10 ) goto table ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 ; i <10 ; i + + ) { for ( j = 0 ; j <5 ; j + + ) { for ( k = 0 ; k <3 ; k + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; if ( j = = 3 ) { goto out ; } } } } out : printf ( " came out of the loop " ) ; }
#include int main ( ) { float f = ( float ) 9 / 4 ; printf ( " f : %f\n  " , f ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include <stdio.h> void printName ( ) ; void main ( ) { printf ( " Hello " ) ; printName ( ) ; } void printName ( ) { printf ( " Javatpoint " ) ; }
#include <stdio.h> void sum ( ) ; void main ( ) { printf ( " \n Going to calculate the sum of two numbers : " ) ; sum ( ) ; } void sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; printf ( " The sum is %d " , a + b ) ; }
#include <stdio.h> int sum ( ) ; void main ( ) { int result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; result = sum ( ) ; printf ( " %d " , result ) ; } int sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include <stdio.h> int sum ( ) ; void main ( ) { printf ( " Going to calculate the area of the square\n  " ) ; float area = square ( ) ; printf ( " The area of the square : %f\n  " , area ) ; } int square ( ) { float side ; printf ( " Enter the length of the side in meters : " ) ; scanf ( " %f " , & side ; ) ; return side * side ; }
#include <stdio.h> void sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; sum ( a , b ) ; } void sum ( int a , int b ) { printf ( " \n The sum is %d " , a + b ) ; }
#include <stdio.h> int sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; result = sum ( a , b ) ; printf ( " \n The sum is : %d " , result ) ; } int sum ( int a , int b ) { return a + b ; }
#include void change ( int num ) { printf ( " Before adding value inside function num = %d \n  " , num ) ; num = num + 100 ; printf ( " After adding value inside function num = %d \n  " , num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include void change ( int * num ) { printf ( " Before adding value inside function num = %d \n  " , * num ) ; ( * num ) + = 100 ; printf ( " After adding value inside function num = %d \n  " , * num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( & x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include <stdio.h> int fact ( int ) ; int main ( ) { int n , f ; printf ( " Enter the number whose factorial you want to calculate? " ) ; scanf ( " %d " , & n ; ) ; f = fact ( n ) ; printf ( " factorial = %d " , f ) ; } int fact ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return n * fact ( n-1 ) ; } }
#include <stdio.h> int fibonacci ( int ) ; void main ( ) { int n , f ; printf ( " Enter the value of n? " ) ; scanf ( " %d " , & n ; ) ; f = fibonacci ( n ) ; printf ( " %d " , f ) ; } int fibonacci ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return fibonacci ( n-1 ) + fibonacci ( n-2 ) ; } }
#include <stdio.h> int main ( ) { int a ; char b ; float c ; printf ( " %d %c %f " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , i ; printf ( " %d " , + + a ) ; { int a = 20 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %d " , a ) ; } } printf ( " %d " , a ) ; }
#include <stdio.h> static char c ; static int i ; static float f ; static char s [ 100 ] ; void main ( ) { printf ( " %d %d %f %s " , c , i , f ) ; }
#include void sum ( ) { static int a = 10 ; static int b = 24 ; printf ( " %d %d \n  " , a , b ) ; a + + ; b + + ; } void main ( ) { int i ; for ( i = 0 ; i < 3 ; i + + ) { sum ( ) ; } }
#include <stdio.h> int main ( ) { register int a ; printf ( " %d " , a ) ; }
#include <stdio.h> int main ( ) { register int a = 0 ; printf ( " %u " , & a ; ) ; }
#include <stdio.h> int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a = 0 ; printf ( " %d " , a ) ; }
#include int main ( ) { extern int a ; printf ( " %d " , a ) ; } int a = 20 ;
#include <stdio.h> int main ( ) { int i = 0 ; int marks [ 5 ] ; marks [ 0 ] = 80 ; marks [ 1 ] = 60 ; marks [ 2 ] = 70 ; marks [ 3 ] = 85 ; marks [ 4 ] = 75 ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include int main ( ) { int i = 0 ; int marks [ 5 ] = { 20 , 30 , 40 , 50 , 60 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include int minarray ( int arr [ ] , int size ) { int min = arr [ 0 ] ; int i = 0 ; for ( i = 1 ; iarr [ i ] ) { min = arr [ i ] ; } } return min ; } int main ( ) { int i = 0 , min = 0 ; int numbers [ ] = { 4 , 5 , 7 , 3 , 8 , 9 } ; min = minarray ( numbers , 6 ) ; printf ( " minimum number is %d \n  " , min ) ; return 0 ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of p variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " value of number is %d , address of number is %u " , number , & number ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 , * p1 = & a , * p2 = & b ; printf ( " Before swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; * p1 = * p1 + * p2 ; * p2 = * p1- * p2 ; * p1 = * p1- * p2 ; printf ( " \n After swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 ; int * p ; int * * pp ; p = & a ; pp = & p ; printf ( " address of a : %x\n  " , p ) ; printf ( " address of p : %x\n  " , pp ) ; printf ( " value stored at p : %d\n  " , * p ) ; printf ( " value stored at pp : %d\n  " , * * pp ) ; }
#include int main ( ) { int number = 50 ; int * p ; int * * p2 ; p = & number ; p2 = & p ; printf ( " Address of number variable is %x \n  " , & number ) ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of * p variable is %d \n  " , * p ) ; printf ( " Address of p2 variable is %x \n  " , p2 ) ; printf ( " Value of * * p2 variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 1 ; printf ( " After increment : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * p = arr ; int i ; printf ( " printing array elements...\n  " ) ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " %d " , * ( p + i ) ) ; } }
#include void main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-1 ; printf ( " After decrement : Address of p variable is %u \n  " , p ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 3 ; printf ( " After adding 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-3 ; printf ( " After subtracting 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 100 ; int * p = & i ; int * temp ; temp = p ; p = p + 3 ; printf ( " Pointer Subtraction : %d - %d = %d " , p , temp , p-temp ) ; }
#include <stdio.h> int addition ( ) ; int main ( ) { int result ; int ( * ptr ) ( ) ; ptr = & addition ; result = ( * ptr ) ( ) ; printf ( " The sum is %d " , result ) ; } int addition ( ) { int a , b ; printf ( " Enter two numbers? " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { char ch [ 11 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 11 ] = " javatpoint " ; printf ( " Char Array Value is : %s\n  " , ch ) ; printf ( " String Literal Value is : %s\n  " , ch2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( i <11 ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( s [ i ] ! = NULL ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " %s " , s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " % [ ^\n  ] s " , s ) ; printf ( " You entered %s " , s ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; char * p = s ; printf ( " %s " , p ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " String p : %s\n  " , p ) ; char * q ; printf ( " copying the content of p into q...\n  " ) ; q = p ; printf ( " String q : %s\n  " , q ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " Before assigning : %s\n  " , p ) ; p = " hello " ; printf ( " After assigning : %s\n  " , p ) ; }
#include void main ( ) { char s [ 30 ] ; printf ( " Enter the string? " ) ; gets ( s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char str [ 20 ] ; printf ( " Enter the string? " ) ; fgets ( str , 20 , stdin ) ; printf ( " %s " , str ) ; }
#include #include int main ( ) { char name [ 50 ] ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Your name is : " ) ; puts ( name ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 20 ] ; strcpy ( ch2 , ch ) ; printf ( " Value of second string is : %s " , ch2 ) ; return 0 ; }
#include #include int main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; return 0 ; }
#include #include int main ( ) { char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter 1st string : " ) ; gets ( str1 ) ; printf ( " Enter 2nd string : " ) ; gets ( str2 ) ; if ( strcmp ( str1 , str2 ) = = 0 ) printf ( " Strings are equal " ) ; else printf ( " Strings are not equal " ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Reverse String is : %s " , strrev ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Lower String is : %s " , strlwr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Upper String is : %s " , strupr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; sub = strstr ( str , " java " ) ; printf ( " \n Substring is : %s " , sub ) ; return 0 ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include struct employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include <stdio.h> struct address { char city [ 20 ] ; int pin ; char phone [ 14 ] ; } ; struct employee { char name [ 20 ] ; struct address add ; } ; void main ( ) { struct employee emp ; printf ( " Enter employee information?\n  " ) ; scanf ( " %s %s %d %s " , emp.name , emp.add.city , & emp.add.pin ; , emp.add.phone ) ; printf ( " Printing the employee information....\n  " ) ; printf ( " name : %s\n City : %s\n Pincode : %d\n Phone : %s " , emp.name , emp.add.city , emp.add.pin , emp.add.phone ) ; }
#include #include union employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include <stdio.h> void main ( ) { FILE * fp ; char ch ; fp = fopen ( " file_handle.c " , " r " ) ; while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) break ; printf ( " %c " , ch ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file.txt " , " w " ) ; fprintf ( fp , " Hello file by fprintf...\n  " ) ; fclose ( fp ) ; }
#include main ( ) { FILE * fp ; char buff [ 255 ] ; fp = fopen ( " file.txt " , " r " ) ; while ( fscanf ( fp , " %s " , buff ) ! = EOF ) { printf ( " %s " , buff ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file1.txt " , " w " ) ; fputc ( 'a' , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " myfile.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " w " ) ; fputs ( " hello c programming " , fp ) ; fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; char text [ 300 ] ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " r " ) ; printf ( " %s " , fgets ( text , 200 , fp ) ) ; fclose ( fp ) ; getch ( ) ; }
#include void main ( ) { FILE * fp ; fp = fopen ( " myfile.txt " , " w + " ) ; fputs ( " This is javatpoint " , fp ) ; fseek ( fp , 7 , SEEK_SET ) ; fputs ( " sonoo jaiswal " , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } rewind ( fp ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; int length ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fclose ( fp ) ; printf ( " Size of file : %d bytes " , length ) ; getch ( ) ; }
#include int main ( ) { printf ( " File : %s\n  " , __FILE__ ) ; printf ( " Date : %s\n  " , __DATE__ ) ; printf ( " Time : %s\n  " , __TIME__ ) ; printf ( " Line : %d\n  " , __LINE__ ) ; printf ( " STDC : %d\n  " , __STDC__ ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include #define PI 3.14 main ( ) { printf ( " %f " , PI ) ; }
#include #define MIN ( a , b ) ( ( a ) < ( b ) ? ( a ) : ( b ) ) void main ( ) { printf ( " Minimum between 10 and 20 is : %d\n  " , MIN ( 10 , 20 ) ) ; }
#include #define PI 3.14 #undef PI main ( ) { printf ( " %f " , PI ) ; }
#include #define number 15 int square = number * number ; #undef number main ( ) { printf ( " %d " , square ) ; }
#include #include #define NOINPUT void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define INPUT void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define NUMBER 0 void main ( ) { #if ( NUMBER = = 0 ) printf ( " Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { clrscr ( ) ; #if ( NUMBER = = 0 ) printf ( " 1 Value of Number is : %d " , NUMBER ) ; #endif #if ( NUMBER = = 1 ) printf ( " 2 Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { #if NUMBER = = 0 printf ( " Value of Number is : %d " , NUMBER ) ; #else print ( " Value of Number is non-zero " ) ; #endif getch ( ) ; }
#include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include void func ( ) ; #pragma startup func #pragma exit func void main ( ) { printf ( " \n I am in main " ) ; getch ( ) ; } void func ( ) { printf ( " \n I am in func " ) ; getch ( ) ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include void main ( int argc , char * argv [ ] ) { printf ( " Program name is : %s\n  " , argv [ 0 ] ) ; if ( argc < 2 ) { printf ( " No argument passed through command line.\n  " ) ; } else { printf ( " First argument is : %s\n  " , argv [ 1 ] ) ; } }
#include int main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include void printFibonacci ( int n ) { static int n1 = 0 , n2 = 1 , n3 ; if ( n> 0 ) { n3 = n1 + n2 ; n1 = n2 ; n2 = n3 ; printf ( " %d " , n3 ) ; printFibonacci ( n-1 ) ; } } int main ( ) { int n ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : " ) ; printf ( " %d %d " , 0 , 1 ) ; printFibonacci ( n-2 ) ; return 0 ; }
#include int main ( ) { int n , i , m = 0 , flag = 0 ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; return 0 ; }
#include int main ( ) { int i , fact = 1 , number ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; return 0 ; }
#include <stdio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; return 0 ; }
#include int main ( ) { int n , sum = 0 , m ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { m = n %10 ; sum = sum + m ; n = n / 10 ; } printf ( " Sum is = %d " , sum ) ; return 0 ; }
#include int main ( ) { int n , reverse = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include #include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a * b ; b = a / b ; a = a / b ; system ( " cls " ) ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include int main ( ) { if ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { switch ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { while ( !printf ( " hello world " ) ) { } return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 , b = 20 , c ; asm { mov ax , a mov bx , b add ax , bx mov c , ax } printf ( " c = %d " , c ) ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include #include int main ( ) { int a [ 10 ] [ 10 ] , b [ 10 ] [ 10 ] , mul [ 10 ] [ 10 ] , r , c , i , j , k ; system ( " cls " ) ; printf ( " enter the number of row = " ) ; scanf ( " %d " , & r ; ) ; printf ( " enter the number of column = " ) ; scanf ( " %d " , & c ; ) ; printf ( " enter the first matrix element = \n  " ) ; for ( i = 0 ; i
#include #include int main ( ) { int a [ 10 ] , n , i ; system ( " cls " ) ; printf ( " Enter the number to convert : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; n> 0 ; i + + ) { a [ i ] = n %2 ; n = n / 2 ; } printf ( " \n Binary of Given Number is = " ) ; for ( i = i-1 ; i> = 0 ; i-- ) { printf ( " %d " , a [ i ] ) ; } return 0 ; }
#include #include int main ( ) { int ch = 65 ; int i , j , k , m ; system ( " cls " ) ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 5 ; j> = i ; j-- ) printf ( " " ) ; for ( k = 1 ; k < = i ; k + + ) printf ( " %c " , ch + + ) ; ch-- ; for ( m = 1 ; m
#include #include int main ( ) { int a = 0 , b = 1 , i , c , n , j ; system ( " cls " ) ; printf ( " Enter the limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { a = 0 ; b = 1 ; printf ( " %d\t " , b ) ; for ( j = 1 ; j
#include #include int main ( ) { printf ( " \n  Result : %f " , ceil ( 1.44 ) ) ; printf ( " \n  Result : %f " , ceil ( 1.66 ) ) ; printf ( " \n  Result : %f " , floor ( 1.44 ) ) ; printf ( " \n  Result : %f " , floor ( 1.66 ) ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include int main ( ) { int j = 1 ; while ( ) { printf ( " %d\n  " , j + + ) ; if ( j> 5 ) break ; } return 0 ; }
#include main ( ) { int j ; char s [ ] = " javaTpoint " ; for ( j = 0 ; s [ j ] ; + + j ) ; printf ( " %d \n  " , j ) ; j = 0 ; while ( s [ j + + ] ) ; printf ( " %d " , j ) ; }
#include main ( ) float a = 3.14 ; double b = 3.14 ;
#include int main ( ) { int P = 10 ; switch ( P ) { case 10 : printf ( " Case 1 " ) ; case 20 : printf ( " Case 2 " ) ; break ; case P : printf ( " Case 2 " ) ; break ; } return 0 ; }
#include int main ( ) { int i = 1 ; switch ( i ) { case 1 : printf ( " Case1 " ) ; break ; case 1 * 2 + 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include int main ( ) { int x = 100 , y = 100 %80 , j ; for ( j = 1 ; j <10 ; j + + ) if ( x ! = y ) ; printf ( " x = %d y = %d\n  " , x , y ) ; return 0 ; }
#include int main ( ) { short int i = 0 ; for ( i < = 5 & & i> = -1 ; + + i ; i> 0 ) printf ( " %u , " , i ) ; return 0 ; }
#include int main ( ) { int a = 5 ; do { printf ( " %d\n  " , a ) ; a = -1 ; } while ( a> 0 ) ; return 0 ; }
#include int function1 ( int ) ; int main ( ) { int k = 30 ; k = function1 ( k = function1 ( k = function1 ( k ) ) ) ; printf ( " k = %d\n  " , k ) ; return 0 ; } int function1 ( int k ) { k + + ; return k ; }
#include void fun ( char * * ) ; int main ( ) { char * argmntv [ ] = { " gh " , " ef " , " cd " , " ab " } ; fun ( argmntv ) ; return 0 ; } void fun ( char * * x ) { char * y ; y = ( x + = sizeof ( int ) ) [ -1 ] ; printf ( " %s\n  " , y ) ; }
#include int main ( ) { int b = 15 ; void f1 ( ) ; b = f1 ( ) ; printf ( " %d\n  " , b ) ; return 0 ; } void f1 ( ) { printf ( " Hello " ) ; }
#include int main ( ) { printf ( " %p\n  " , main ( ) ) ; return 0 ; }
#include int mul ( int , int ) ; int main ( ) { int x = 5 , y = 4 , z ; z = mul ( x , y ) ; printf ( " z = %d\n  " , z ) ; return 0 ; } int mul ( int x , int y ) { return ( x * y ) ; return ( x - y ) ; } Output : z = 20
#include int chk ( int , int ) ; int main ( ) { int x ; x = check ( 10 , 20 ) ; printf ( " x = %d\n  " , x ) ; return 0 ; } int check ( int a , int b ) { int * y , * z ; y = & a ; z = & b ; a> = 45 ? return ( * y ) : return ( * z ) ; }
#include int j ; int function ( ) ; int main ( ) { while ( j ) { function ( ) ; main ( ) ; } printf ( " Hi\n  " ) ; return 0 ; } int function ( ) { printf ( " Hello " ) ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include main ( ) { int x [ ] = { 100 , 200 , 300 } ; printf ( " %d " , * x + 1 ) ; }
#include void main ( ) { char a [ ] = " C + + " ; printf ( " %s " , a ) ; a + + ; printf ( " %s " , a ) ; }
#include int main ( ) { int size , j ; scanf ( " %d " , & size ; ) ; int arr [ size ] ; for ( j = 1 ; j < = size ; j + + ) { scanf ( " %d " , arr [ j ] ) ; printf ( " %d " , arr [ j ] ) ; } return 0 ; }
#include int main ( ) { int arr [ 2 ] = { 20 } ; printf ( " %d\n  " , 0 [ arr ] ) ; return 0 ; }
#include int main ( ) { int arr [ ] = { 10 , 11 , 12 , 15 , 23 } ; printf ( " %u , %u\n  " , arr , & arr ; ) ; return 0 ; }
#include int main ( ) { typedef char ( * ( * arrfptr [ 4 ] ) ( ) ) [ 20 ] ; arrfptr y ; return 0 ; }
#include main ( ) { struct { int y ; } var = { 4 } , * a = & var ; printf ( " %d %d %d " , var.y , a-> y , ( * a ) .y ) ; }
#include main ( ) { int a [ 3 ] = { 1 , , 2 } ; printf ( " %d " , a [ a [ 0 ] ] ) ; }
#include main ( ) { int j ; char s [ ] = " javaTpoint " ; for ( j = 0 ; s [ j ] ; + + j ) ; printf ( " %d \n  " , j ) ; j = 0 ; while ( s [ j + + ] ) ; printf ( " %d " , j ) ; }
#include #include int main ( ) { int j , k ; char * z = " Hello " ; k = strlen ( z ) ; * z = z [ k ] ; for ( j = 0 ; j < = k ; j + + ) { printf ( " %s " , z ) ; z + + ; } printf ( " \n  " , z ) ; return 0 ; }
#include int main ( ) { int * i ; void fun ( int * * ) ; fun ( & i ; ) ; return 0 ; } void fun ( int * * j ) { int b = 10 ; }
#include int main ( ) { float j = 12 , * i ; void * a ; a = & j ; i = a ; printf ( " %f\n  " , * i ) ; return 0 ; }
#include main ( ) { int * a , * * b ; printf ( " %u\n  " , sizeof ( a ) ) ; printf ( " %u\n  " , sizeof ( b ) ) ; }
#include void main ( ) { char * a = " C + + " ; printf ( " %s " , a ) ; a + + ; printf ( " %s " , a ) ; }
#include main ( ) { char * x = NULL ; printf ( " %c " , * x ) ; }
#include int main ( ) { int b = 10 , * i ; void * p ; i = p = & b ; i + + ; p + + ; printf ( " %u %u\n  " , i , p ) ; return 0 ; }
#include int main ( ) { int j = 10 ; int * i = & j ; return 0 ; }
#include main ( ) { char * p = " Xyz " ; while ( * p ) printf ( " %c " , * p + + ) ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include int main ( ) { printf ( " %d\n  " , strlen ( " javaTpoint " ) ) ; return 0 ; }
#include int main ( ) { char stri [ 20 ] , * p ; printf ( " Enter the string\n  : " ) ; scanf ( " %s " , stri ) ; p = stri ; while ( * p ! = '\0' ) { if ( * p > = 97 & & * p < = 122 ) * p = * p-32 ; p + + ; } printf ( " %s " , stri ) ; return 0 ; }
#include #include int main ( ) { char stri [ ] = " Java\0\Tpoint\0 " ; printf ( " %s\n  " , stri ) ; return 0 ; }
#include void main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; }
#include #include #include void main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; clrscr ( ) ; sub = strstr ( str , " java " ) ; printf ( " \n  %s " , sub ) ; getch ( ) ; }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { char * stri [ ] = { " Java " , " C " , " Android " , " Embedded " , " JS " } ; printf ( " %d , %d " , sizeof ( stri ) , strlen ( stri [ 0 ] ) ) ; return 0 ; }
#include #include int main ( ) { printf ( " %c\n  " , " javatpoint " [ 5 ] ) ; return 0 ; }
#include int main ( ) { printf ( " %u %s\n  " , & " Welcome " , & " Programming " ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include int main ( ) { union b { int j ; char ch [ 2 ] ; } ; union b un ; un.ch [ 0 ] = 3 ; un.ch [ 1 ] = 2 ; printf ( " %d , %d , %d\n  " , un.ch [ 0 ] , un.ch [ 1 ] , un.j ) ; return 0 ; }
#include int main ( ) { enum months { JAN = -1 , FEB , MARCH = 6 , APRIL , MAY , JUNE } ; printf ( " %d , %d , %d , %d , %d , %d\n  " , + + JAN , FEB , MARCH , APRIL , MAY , JUNE ) ; return 0 ; }
#include int main ( ) { struct employ { char name [ 22 ] ; int age ; float bs ; } ; struct employ e ; e.name = " Nakul " ; e.age = 22 ; printf ( " %s %d\n  " , e.name , e.age ) ; return 0 ; }
#include main ( ) { enum { GREAT , is = 7 , india } ; printf ( " %d %d " , GREAT , india ) ; }
#include union xyz { char x , y , z , a , b , c , d , e ; int i ; } xyz ; main ( ) { printf ( " %d " , sizeof ( xyz ) ) ; }
#include main ( ) { struct { int y ; } var = { 4 } , * a = & var ; printf ( " %d %d %d " , var.y , a-> y , ( * a ) .y ) ; }
#include union Pointer { unsigned int a : 4 ; unsigned int b : 4 ; int res ; } ; int main ( ) { union Pointer pt ; pt.a = 2 ; pt.b = 6 ; pt.res = pt.b ; printf ( " \n  The value of res is : %d " , pt.res ) ; return 0 ; }
#include int main ( ) { struct values { int bit1 : 1 ; int bit3 : 3 ; int bit4 : 4 ; } bit ; printf ( " %d \n  " , sizeof ( bit ) ) ; return 0 ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include #define DEF int main ( ) { int j = 3 ; #ifdef DEF printf ( " square of j = %d\n  " , j * j ) ; #else printf ( " j = %d\n  " , j ) ; #endif return 0 ; }
#include #define IT 0.1 #define HRA 0.2 #define DA 0.3 int main ( ) { float bas_sal , net_sal ; bas_sal = 1000 ; net_sal = bas_sal * ( 1 + HRA + DA-IT ) ; printf ( " Gross salary = %f\n  " , net_sal ) ; return 0 ; }
#include int main ( ) { int j ; #if A printf ( " Enter the number : " ) ; scanf ( " %d " , & j ; ) ; #elif B printf ( " The number is even " ) ; return 0 ; }
#include #define MEAN ( p , q , r , s , t ) ( p + q + r + s + t ) / 5 int main ( ) { int p = 1 , q = 2 , r = 3 , s = 4 , t = 5 , mn ; mn = MEAN ( p , q , r , s , t ) ; printf ( " Mean of 5 numbers = %d\n  " , mn ) ; return 0 ; }
#include int main ( ) { int p = 1 , q = 2 , r = 3 , s = 4 , t = 5 , mn ; m = ( p + q + r + s + t ) / 5 ; printf ( " Mean of 5 numbers = %d\n  " , mn ) ; return 0 ; }
#include #define MAX ( x , y ) ( x > y ? x : y ) int main ( ) { int a ; a = MAX ( 3 + 1 , 2 + 4 ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> void change ( int , int ) ; int main ( ) { int a = 10 , b = 20 ; change ( a , b ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int x , int y ) { x = 13 ; y = 17 ; }
#include <stdio.h> void change ( int * , int * ) ; int main ( ) { int a = 10 , b = 20 ; change ( & a ; , & b ; ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int * x , int * y ) { * x = 13 ; * y = 17 ; }
#include <stdio.h> int calculate_fact ( int ) ; int main ( ) { int n = 5 , f ; f = calculate_fact ( n ) ; printf ( " factorial of a number is %d " , f ) ; return 0 ; } int calculate_fact ( int a ) { if ( a = = 1 ) { return 1 ; } else return a * calculate_fact ( a-1 ) ; }
#include <stdio.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i <5 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int a = 5 ; p = & a ; printf ( " Address value of 'a' variable is %u " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; ptr = NULL ; }
#include <stdio.h> int main ( ) { int a = 10 ; int * ptr , * * pptr ; ptr = & a ; pptr = & ptr ; printf ( " value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " value of * ptr is : %d " , * ptr ) ; printf ( " \n  " ) ; printf ( " value of * * pptr is : %d " , * * pptr ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 10 ] ; int age ; } s1 ; int main ( ) { printf ( " Enter the name " ) ; scanf ( " %s " , s1.name ) ; printf ( " \n  " ) ; printf ( " Enter the age " ) ; scanf ( " %d " , & s1.age ; ) ; printf ( " \n  " ) ; printf ( " Name and age of a student : %s , %d " , s1.name , s1.age ) ; return 0 ; }
#include <stdio.h> union data { int a ; float b ; char ch ; } ; int main ( ) { union data d ; d.a = 3 ; d.b = 5.6 ; d.ch = 'a' ; printf ( " value of a is %d " , d.a ) ; printf ( " \n  " ) ; printf ( " value of b is %f " , d.b ) ; printf ( " \n  " ) ; printf ( " value of ch is %c " , d.ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 20 ] ; int n = sprintf ( a , " javaToint " ) ; printf ( " value of n is %d " , n ) ; return 0 ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char ch ; printf ( " Enter a character " ) ; ch = getch ( ) ; printf ( " \n value of ch is %c " , ch ) ; printf ( " \n Enter a character again " ) ; ch = getche ( ) ; printf ( " \n value of ch is %c " , ch ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " hello world " ) ) { } }
#include <stdio.h> #include <conio.h> main ( ) { int a = 10 , b = 20 ; clrscr ( ) ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; getch ( ) ; }
#include #include void main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ; ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include <stdio.h> #include <conio.h> void main ( ) { int n , i , m = 0 , flag = 0 ; clrscr ( ) ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ; ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; getch ( ) ; }
#include #include main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; getch ( ) ; }
#include #include void main ( ) { int i , fact = 1 , number ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , reverse = 0 , rem ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ; ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char grade ; printf ( " Enter student grade : " ) ; grade = getchar ( ) ; putchar ( grade ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d\n  " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , perimeter ; printf ( " Enter length of the rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of the rectangle : " ) ; scanf ( " %f " , & width ) ; perimeter = 2 * ( length + width ) ; printf ( " Perimeter of rectangle = %f units " , perimeter ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , area ; printf ( " Enter length of rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of rectangle : " ) ; scanf ( " %d " , & width ) ; area = length * width ; printf ( " Area of rectangle = %f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * 3.14 * radius ; area = 3.14 * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * M_PI * radius ; area = M_PI * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float cm , meter , km ; printf ( " Enter length in centimeter : " ) ; scanf ( " %f " , & cm ) ; meter = cm / 100.0 ; km = cm / 100000.0 ; printf ( " Length in Meter = %.2f m \n  " , meter ) ; printf ( " Length in Kilometer = %.2f km " , km ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( celsius * 9 / 5 ) + 32 ; printf ( " %.2f Celsius = %.2f Fahrenheit " , celsius , fahrenheit ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fahrenheit ) ; celsius = ( fahrenheit - 32 ) * 5 / 9 ; printf ( " %.2f Fahrenheit = %.2f Celsius " , fahrenheit , celsius ) ; return 0 ; }
#include <stdio.h> int main ( ) { int days , years , weeks ; printf ( " Enter days : " ) ; scanf ( " %d " , & days ) ; years = ( days / 365 ) ; weeks = ( days % 365 ) / 7 ; days = days - ( ( years * 365 ) + ( weeks * 7 ) ) ; printf ( " YEARS : %d\n  " , years ) ; printf ( " WEEKS : %d\n  " , weeks ) ; printf ( " DAYS : %d " , days ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , expo , power ; printf ( " Enter base : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %lf " , & expo ) ; power = pow ( base , expo ) ; printf ( " %.2lf ^ %.2lf = %.2lf " , base , expo , power ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num , root ; printf ( " Enter any number to find square root : " ) ; scanf ( " %lf " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2lf = %.2lf " , num , root ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two angles of triangle : " ) ; scanf ( " %d %d " , & a , & b ) ; c = 180 - ( a + b ) ; printf ( " Third angle of the triangle = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float base , height , area ; printf ( " Enter base of the triangle : " ) ; scanf ( " %f " , & base ) ; printf ( " Enter height of the triangle : " ) ; scanf ( " %f " , & height ) ; area = ( base * height ) / 2 ; printf ( " Area of the triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float side , area ; printf ( " Enter side of an equilateral triangle : " ) ; scanf ( " %f " , & side ) ; area = ( sqrt ( 3 ) / 4 ) * ( side * side ) ; printf ( " Area of equilateral triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float principle , time , rate , SI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; SI = ( principle * time * rate ) / 100 ; printf ( " Simple Interest = %f " , SI ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float principle , rate , time , CI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; CI = principle * ( pow ( ( 1 + rate / 100 ) , time ) ) ; printf ( " Compound Interest = %f " , CI ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float principle , rate , time , CI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; CI = principle * ( pow ( ( 1 + rate / 100 ) , time ) ) ; printf ( " Compound Interest = %f " , CI ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } if ( num2 > num1 ) { printf ( " %d is maximum " , num2 ) ; } if ( num1 = = num2 ) { printf ( " Both are equal " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } else { printf ( " %d is maximum " , num2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) max = num1 ; else max = num2 ; printf ( " %d is maximum. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Learn at Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 10 ; b = + + a ; c = a + + printf ( " a = %d , b = %d , c = %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; int max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum is %d. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible to vote in India. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " First number is maximum. " ) ; } else { printf ( " Second number is maximum. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num < 0 ) { printf ( " NUMBER IS NEGATIVE. " ) ; } else if ( num = = 0 ) { printf ( " NUMBER IS ZERO. " ) ; } else { printf ( " NUMBER IS POSITIVE. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { printf ( " Num1 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } else { if ( num2 > num3 ) { printf ( " Num2 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int count ; for ( count = 1 ; count < = 10 ; count + + ) { printf ( " %d " , count ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; while ( n < = 10 ) { printf ( " %d " , n ) ; n + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; do { printf ( " %d " , n ) ; n + + ; } while ( n < = 10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 5 ; j + + ) { printf ( " %d\t " , ( i * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , isPrime , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; isPrime = 1 ; for ( i = 2 ; i <num ; i + + ) { if ( num % i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " Number is prime number. " ) ; } else { printf ( " Number is composite number. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Even numbers between 1 to 100 : \n  " ) ; for ( num = 1 ; num < = 100 ; num + + ) { if ( num % 2 = = 1 ) continue ; printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 ; start : goto print ; print : printf ( " %d " , i ) ; goto next ; increment : i + + ; goto print ; next : if ( i < 10 ) goto increment ; else goto exit ; printf ( " I cannot execute. " ) ; exit : return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 10 ; j + + ) { k = 1 ; while ( k < = 10 ) { if ( j = = 5 & & k = = 5 ) { goto out_of_loop ; } printf ( " %d " , k ) ; k + + ; } } } out_of_loop : return 0 ; }
#include <stdio.h> int add ( int num1 , int num2 ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = add ( n1 , n2 ) ; printf ( " Sum = %d " , sum ) ; return 0 ; } int add ( int num1 , int num2 ) { int s = num1 + num2 ; return s ; }
#include <stdio.h> int max ( int num1 , int num2 ) ; int main ( ) { int num1 , num2 , maximum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; maximum = max ( num1 , num2 ) ; printf ( " Maximum = %d " , maximum ) ; return 0 ; } int max ( int num1 , int num2 ) { int maximum ; if ( num1 > num2 ) maximum = num1 ; else maximum = num2 ; return maximum ; }
#include <stdio.h> int evenOdd ( int num ) ; int main ( ) { int num , isEven ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; isEven = evenOdd ( num ) ; if ( isEven = = 0 ) printf ( " The given number is EVEN. " ) ; else printf ( " The given number is ODD. " ) ; return 0 ; } int evenOdd ( int num ) { if ( num % 2 = = 0 ) return 0 ; else return 1 ; }
#include <stdio.h> void print ( int n ) ; int main ( ) { print ( 5 ) ; return 0 ; } void print ( int n ) { printf ( " %d " , n ) ; if ( n < = 1 ) { return ; } print ( n - 1 ) ; }
#include <stdio.h> int main ( ) { int outervariable = 10 ; { printf ( " I can access outervariable in inner block = %d\n  " , outervariable ) ; } printf ( " I can also access outervariable in same block = %d " , outervariable ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " 'num' is accessible within same block = %d\n  " , num ) ; { int num = 20 ; printf ( " Inner block 'num' shadows outer block 'num' = %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; printf ( " 'num1 = %d' and 'num2 = %d' declared in outer block is accessible within same block.\n  " , num1 , num2 ) ; { int sum = num1 + num2 ; printf ( " sum = %d\n  " , sum ) ; } return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 ; static int n2 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> int num ; void display ( ) { int i ; for ( i = 1 ; i < = num ; i + + ) { printf ( " num = %d\n  " , i ) ; } }
#include <stdio.h> #define SIZE 10 int main ( ) { int marks [ SIZE ] ; int index , sum ; float avg ; printf ( " Enter marks of %d students : " , SIZE ) ; for ( index = 0 ; index <SIZE ; index + + ) { scanf ( " %d " , & marks [ index ] ) ; } sum = 0 ; for ( index = 0 ; index <SIZE ; index + + ) { sum = sum + marks [ index ] ; } avg = ( float ) sum / SIZE ; printf ( " Average marks = %f " , avg ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int array [ SIZE ] ; int index ; for ( index = 0 ; index < = SIZE ; index + + ) { scanf ( " %d " , & array [ index ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Address of num in hexadecimal = %x " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , * ( & num ) ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ptr ) ; ptr + + ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ( ptr + count ) ) ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr = & arr [ 0 ] ; printf ( " Accessing array elements using pointer \n  " ) ; while ( ptr < & arr [ SIZE ] ) { printf ( " %d \n  " , * ptr ) ; ptr + + ; } return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int arr [ SIZE ] ; int * ptr = arr ; int i ; printf ( " Enter %d array elements : " , SIZE ) ; while ( ptr < & arr [ SIZE ] ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Elements in array are : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int * const const_ptr = & num1 ; * const_ptr = 10 ; const_ptr = & num2 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * const_ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; const int * ptr_const ; ptr_const = & num ; num = 20 ; * ptr_const = 100 ; printf ( " Num = %d\n  " , num ) ; printf ( " Num = %d\n  " , * ptr_const ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; const int * const ptr = & num1 ; ptr = & num2 ; * ptr = 100 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> typedef struct point { int x ; int y ; } Point ; typedef int ( * Fptr ) ( const void * , const void * ) ; int main ( ) { typedef int Integer ; typedef char CharArray [ 100 ] ; Fptr functionPointer ; Point point = { 10 , 20 } ; Integer num = 100 ; CharArray name = " Codeforwin " ; printf ( " Point x = %d , y = %d\n  " , point.x , point.y ) ; printf ( " num = %d\n  " , num ) ; printf ( " name = %s\n  " , name ) ; return 0 ; }
#include <stdio.h> #include " main.h " #include " win / display.c "
#include <stdio.h> #define COUNTRY " INDIA " #define TRUE 1 #define FALSE 0 #define SUM ( 10 + 20 ) int main ( ) { printf ( " COUNTRY : %s\n  " , COUNTRY ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; printf ( " SUM ( 10 + 20 ) : %d\n  " , SUM ) ; return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( ) { printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; #undef TRUE #undef FALSE #define TRUE 0 #define FALSE 1 printf ( " \n Macro values are redefinition\n  " ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { return ( a + b ) ; } #define SUM ( a , b ) ( a + b ) int main ( ) { printf ( " SUM using function : %d\n  " , sum ( 100 , 200 ) ) ; printf ( " SUM using macro : %d\n  " , SUM ( 100 , 200 ) ) ; return 0 ; }
#include <stdio.h> #define COUNTRY " INDIA " int main ( ) { #ifdef COUNTRY printf ( " Country is defined\n  " ) ; #endif #ifndef STATE printf ( " State is not defined. Defining state. \n  " ) ; #define STATE " PATNA " #endif printf ( " State is : %s\n  " , STATE ) ; return 0 ; }
#include <stdio.h> #define IND 1 #define USA 2 #define UK 3 #define COUNTRY IND int main ( ) { #if COUNTRY = = IND printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #elif COUNTRY = = USA printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #else printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #endif return 0 ; }
#include <stdio.h> #define PRINT ( msg ) #msg int main ( ) { printf ( PRINT ( C Programming in Codeforwin ) ) ; return 0 ; }
#include <stdio.h> #define CONCAT ( a , b ) a##b int main ( ) { printf ( " CONCAT ( 10 , 20 ) = %d\n  " , CONCAT ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) printf ( " LSB of %d is set ( 1 ) . " , num ) ; else printf ( " LSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> #define BITS sizeof ( int ) * 8 int main ( ) { int num , msb ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( BITS - 1 ) ; if ( num & msb ) printf ( " MSB of %d is set ( 1 ) . " , num ) ; else printf ( " MSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , bitStatus ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to check ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; bitStatus = ( num > > n ) & 1 ; printf ( " The %d bit is set to %d " , n , bitStatus ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order = -1 , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) order = i ; } if ( order ! = -1 ) printf ( " Highest order set bit in %d is %d " , num , order ) ; else printf ( " 0 has no set bits. " ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; order = INT_SIZE - 1 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) { order = i ; break ; } } printf ( " Lowest order set bit in %d is %d " , num , order ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num > > i ) & 1 ) { break ; } count + + ; } printf ( " Total number of trailing zeros in %d is %d. " , num , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( ! ( num & 1 ) ) { count + + ; num > > = 1 ; } printf ( " Total number of trailing zeros = %d. " , count ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , msb , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( INT_SIZE - 1 ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num < < i ) & msb ) { break ; } count + + ; } printf ( " Total number of leading zeros in %d is %d " , num , count ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { int num , count ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; while ( ! ( num & ( ~INT_MAX ) ) ) { count + + ; num < < = 1 ; } printf ( " Total number of leading zeros = %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , flippedNumber ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; flippedNumber = ~num ; printf ( " Original number = %d ( in decimal ) \n  " , num ) ; printf ( " Number after bits are flipped = %d ( in decimal ) " , flippedNumber ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , zeros , ones , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; zeros = 0 ; ones = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( num & 1 ) ones + + ; else zeros + + ; num > > = 1 ; } printf ( " Total zero bit is %d\n  " , zeros ) ; printf ( " Total one bit is %d " , ones ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , index , i ; int bin [ INT_SIZE ] ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; index = INT_SIZE - 1 ; while ( index > = 0 ) { bin [ index ] = num & 1 ; index-- ; num > > = 1 ; } printf ( " Converted binary : " ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { printf ( " %d " , bin [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Original value of num1 = %d\n  " , num1 ) ; printf ( " Original value of num2 = %d\n  " , num2 ) ; num1 ^ = num2 ; num2 ^ = num1 ; num1 ^ = num2 ; printf ( " Num1 after swapping = %d\n  " , num1 ) ; printf ( " Num2 after swapping = %d\n  " , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) { printf ( " %d is odd. " , num ) ; } else { printf ( " %d is even. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; ( num & 1 ) ? printf ( " %d is odd. " , num ) : printf ( " %d is even. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : printf ( " Vowel " ) ; break ; default : printf ( " Consonant " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers to find maximum : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; switch ( num1 > num2 ) { case 0 : printf ( " %d is maximum " , num2 ) ; break ; case 1 : printf ( " %d is maximum " , num1 ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; switch ( num % 2 ) { case 0 : printf ( " Number is Even " ) ; break ; case 1 : printf ( " Number is Odd " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; switch ( num > 0 ) { case 1 : printf ( " %d is positive. " , num ) ; break ; case 0 : switch ( num < 0 ) { case 1 : printf ( " %d is negative. " , num ) ; break ; case 0 : printf ( " %d is zero. " , num ) ; break ; } break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum between %d and %d is %d " , num1 , num2 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j = = 1 || j = = i || i = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { if ( i = = 1 || j = = i || j = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( 2 * i-1 ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( rows * 2 - ( 2 * i-1 ) ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , columns ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & N ) ; columns = 1 ; for ( i = 1 ; i <N * 2 ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } if ( i < N ) { columns + + ; } else { columns-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ( i %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ! ( j %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < i + cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( N-i + 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = ( N-i + 1 ) ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> i ; j-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N-1 ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( j & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( i & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( k % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( k & 1 ) ) ; k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = i ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { if ( i & 1 ) k = 1 ; else k = 2 ; for ( j = 1 ; j < = i ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 2 ; j < = i * 2 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2 ; j> = 2 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , colCount , value ; colCount = 1 ; value = 1 ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = colCount ; j + + ) { if ( value = = 10 ) value = 1 ; printf ( " %d " , value ) ; value + + ; } printf ( " \n  " ) ; colCount * = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { diff = N-1 ; value = i ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; diff = 1 ; value = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i < = ( N / 2 ) ) { printf ( " %d " , i ) ; } else { printf ( " %d " , ( N - i + 1 ) ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { printf ( " %d\n  " , num ) ; num = num / 10 ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , firstDigit , digits , placeValue ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num > 0 ) { printf ( " %d\n  " , num ) ; digits = ( int ) log10 ( num ) ; placeValue = ( int ) ceil ( pow ( 10 , digits ) ) ; firstDigit = ( int ) ( num / placeValue ) ; num = num - ( placeValue * firstDigit ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> double cube ( double num ) ; int main ( ) { int num ; double c ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; c = cube ( num ) ; printf ( " Cube of %d is %.2f " , num , c ) ; return 0 ; } double cube ( double num ) { return ( num * num * num ) ; }
#include <stdio.h> int isEven ( int num ) { return ! ( num & 1 ) ; } int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isEven ( num ) ) { printf ( " The number is even. " ) ; } else { printf ( " The number is odd. " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int main ( ) { int num , rev ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; rev = reverse ( num ) ; printf ( " Reverse of %d = %d " , num , rev ) ; return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> int sumOfDigits ( int num ) ; int main ( ) { int num , sum ; printf ( " Enter any number to find sum of digits : " ) ; scanf ( " %d " , & num ) ; sum = sumOfDigits ( num ) ; printf ( " Sum of digits of %d = %d " , num , sum ) ; return 0 ; } int sumOfDigits ( int num ) { if ( num = = 0 ) return 0 ; return ( ( num % 10 ) + sumOfDigits ( num / 10 ) ) ; }
#include <stdio.h> unsigned long long fact ( int num ) ; int main ( ) { int num ; unsigned long long factorial ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial of %d is %llu " , num , factorial ) ; return 0 ; } unsigned long long fact ( int num ) { if ( num = = 0 ) return 1 ; else return num * fact ( num - 1 ) ; }
#include <stdio.h> unsigned long long fibo ( int num ) ; int main ( ) { int num ; unsigned long long fibonacci ; printf ( " Enter any number to find nth fiboacci term : " ) ; scanf ( " %d " , & num ) ; fibonacci = fibo ( num ) ; printf ( " %d fibonacci term is %llu " , num , fibonacci ) ; return 0 ; } unsigned long long fibo ( int num ) { if ( num = = 0 ) return 0 ; else if ( num = = 1 ) return 1 ; else return fibo ( num-1 ) + fibo ( num-2 ) ; }
#include <stdio.h> int gcd ( int a , int b ) ; int main ( ) { int num1 , num2 , hcf ; printf ( " Enter any two numbers to find GCD : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; printf ( " GCD of %d and %d = %d " , num1 , num2 , hcf ) ; return 0 ; } int gcd ( int a , int b ) { if ( b = = 0 ) return a ; else return gcd ( b , a %b ) ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int i ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { count + + ; } printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = -1 ; while ( text2 [ i ] = text1 [ + + i ] ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; char * str1 = text1 ; char * str2 = text2 ; printf ( " Enter any string : " ) ; gets ( text1 ) ; while ( * ( str2 + + ) = * ( str1 + + ) ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = -1 ; while ( str1 [ + + i ] ) ; j = 0 ; while ( str1 [ i + + ] = str2 [ j + + ] ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; char * s1 = str1 ; char * s2 = str2 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; while ( * ( + + s1 ) ) ; while ( * ( s1 + + ) = * ( s2 + + ) ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter your text : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { str [ i ] = str [ i ] - 32 ; } } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; printf ( " Enter your text : " ) ; gets ( str ) ; while ( * s ) { * s = ( * s > 'a' & & * s < = 'z' ) ? * s-32 : * s ; s + + ; } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter your text : " ) ; gets ( str ) ; strupr ( str ) ; printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { str [ i ] = str [ i ] + 32 ; } } printf ( " Lower case string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; strlwr ( str ) ; printf ( " Lowercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , words ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; words = 1 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = ' ' || str [ i ] = = '\n ' || str [ i ] = = '\t' ) { words + + ; } i + + ; } printf ( " Total number of words = %d " , words ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int flag ; printf ( " Enter any string : " ) ; gets ( str ) ; strcpy ( reverse , str ) ; strrev ( reverse ) ; flag = strcmp ( str , reverse ) ; if ( flag = = 0 ) { printf ( " String is Palindrome. " ) ; } else { printf ( " String is Not Palindrome. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { printf ( " ' %c' is found at index %d\n  " , toSearch , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i , count ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; count = 0 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { count + + ; } i + + ; } printf ( " Total occurrence of ' %c' = %d " , toSearch , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * ptr ; ptr = & num ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of ptr = %d\n  " , & ptr ) ; printf ( " Value of ptr = %d\n  " , ptr ) ; printf ( " Value pointed by ptr = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int i ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { count + + ; } printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = -1 ; while ( text2 [ i ] = text1 [ + + i ] ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; char * str1 = text1 ; char * str2 = text2 ; printf ( " Enter any string : " ) ; gets ( text1 ) ; while ( * ( str2 + + ) = * ( str1 + + ) ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = -1 ; while ( str1 [ + + i ] ) ; j = 0 ; while ( str1 [ i + + ] = str2 [ j + + ] ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; char * s1 = str1 ; char * s2 = str2 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; while ( * ( + + s1 ) ) ; while ( * ( s1 + + ) = * ( s2 + + ) ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> void greetMorning ( ) ; void greeEvening ( ) ; void greetNight ( ) ; void greet ( void ( * greeter ) ( ) ) ; int main ( ) { greet ( greetMorning ) ; greet ( greeEvening ) ; greet ( greetNight ) ; return 0 ; } void greet ( void ( * greeter ) ( ) ) { greeter ( ) ; } void greetMorning ( ) { printf ( " Good , morning!\n  " ) ; } void greeEvening ( ) { printf ( " Good , evening!\n  " ) ; } void greetNight ( ) { printf ( " Good , night!\n  " ) ; }
#include <stdio.h> #include <stdlib.h> #define DATA_SIZE 1000 int main ( ) { char data [ DATA_SIZE ] ; FILE * fPtr ; fPtr = fopen ( " data / file1.txt " , " w " ) ; if ( fPtr = = NULL ) { printf ( " Unable to create file.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " Enter contents to store in file : \n  " ) ; fgets ( data , DATA_SIZE , stdin ) ; fputs ( data , fPtr ) ; fclose ( fPtr ) ; printf ( " File created and saved successfully. 🙂 \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fPtr ; char ch ; fPtr = fopen ( __FILE__ , " r " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } while ( ( ch = fgetc ( fPtr ) ) ! = EOF ) { printf ( " %c " , ch ) ; } fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char oldName [ 100 ] , newName [ 100 ] ; printf ( " Enter old file path : " ) ; scanf ( " %s " , oldName ) ; printf ( " Enter new file path : " ) ; scanf ( " %s " , newName ) ; if ( rename ( oldName , newName ) = = 0 ) { printf ( " File renamed successfully.\n  " ) ; } else { printf ( " Unable to rename files. Please check files exist and you have permissions to modify files.\n  " ) ; } return 0 ; }
#include <stdio.h> #include <sys / types.h> #include <dirent.h> void listFiles ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; listFiles ( path ) ; return 0 ; } void listFiles ( const char * path ) { struct dirent * dp ; DIR * dir = opendir ( path ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { printf ( " %s\n  " , dp-> d_name ) ; } closedir ( dir ) ; }
#include <stdio.h> #define EVEN_ODD ( num ) \ if ( num & 1 ) \ printf ( " %d is odd\n  " , num ) ; \ else \ printf ( " %d is even\n  " , num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; EVEN_ODD ( num ) ; return 0 ; }
#include <stdio.h> #define EVEN_ODD ( num ) \ if ( num & 1 ) \ printf ( " %d is odd\n  " , num ) ; \ else \ printf ( " %d is even\n  " , num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; EVEN_ODD ( num ) ; return 0 ; }
#include <stdio.h> #define IS_UPPER ( x ) ( x > = 'A' & & x < = 'Z' ) #define IS_LOWER ( x ) ( x > = 'a' & & x < = 'z' ) int main ( ) { char ch ; printf ( " Enter any character : " ) ; ch = getchar ( ) ; if ( IS_UPPER ( ch ) ) printf ( " ' %c' is uppercase\n  " , ch ) ; else if ( IS_LOWER ( ch ) ) printf ( " ' %c' is lowercase\n  " , ch ) ; else printf ( " Entered character is not alphabet " ) ; return 0 ; }
#include <stdio.h> #define IS_UPPER ( x ) ( x > = 'A' & & x < = 'Z' ) #define IS_LOWER ( x ) ( x > = 'a' & & x < = 'z' ) int main ( ) { char ch ; printf ( " Enter any character : " ) ; ch = getchar ( ) ; if ( IS_UPPER ( ch ) ) printf ( " ' %c' is uppercase\n  " , ch ) ; else if ( IS_LOWER ( ch ) ) printf ( " ' %c' is lowercase\n  " , ch ) ; else printf ( " Entered character is not alphabet " ) ; return 0 ; }
#include <stdio.h> #define IS_ODD ( x ) ( x & 1 ) int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( IS_ODD ( num ) ) printf ( " %d is ODD\n  " , num ) ; else printf ( " %d is EVEN\n  " , num ) ; return 0 ; }
#include <stdio.h> #define IS_ODD ( x ) ( x & 1 ) int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( IS_ODD ( num ) ) printf ( " %d is ODD\n  " , num ) ; else printf ( " %d is EVEN\n  " , num ) ; return 0 ; }
#include <stdio.h> #define SQUARE ( x ) ( x * x ) #define CUBE ( x ) ( x * x * x ) int main ( ) { int num ; printf ( " Enter any number to find square and cube : " ) ; scanf ( " %d " , & num ) ; printf ( " SQUARE ( %d ) = %d\n  " , num , SQUARE ( num ) ) ; printf ( " CUBE ( %d ) = %d\n  " , num , CUBE ( num ) ) ; return 0 ; }
#include <stdio.h> #define SQUARE ( x ) ( x * x ) #define CUBE ( x ) ( x * x * x ) int main ( ) { int num ; printf ( " Enter any number to find square and cube : " ) ; scanf ( " %d " , & num ) ; printf ( " SQUARE ( %d ) = %d\n  " , num , SQUARE ( num ) ) ; printf ( " CUBE ( %d ) = %d\n  " , num , CUBE ( num ) ) ; return 0 ; }
#include <stdio.h> #define SUM ( x , y ) ( x + y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Sum ( %d , %d ) = %d\n  " , num1 , num2 , SUM ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> #define SUM ( x , y ) ( x + y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Sum ( %d , %d ) = %d\n  " , num1 , num2 , SUM ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14 int main ( ) { printf ( " Value of PI : %f\n  " , PI ) ; #ifdef PI #undef PI #endif #define PI 3.14159 printf ( " Value of PI after redefinition : %f " , PI ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14 int main ( ) { printf ( " Value of PI : %f\n  " , PI ) ; #ifdef PI #undef PI #endif #define PI 3.14159 printf ( " Value of PI after redefinition : %f " , PI ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerVar ; printf ( " Size of char = %d\n  " , sizeof ( char ) ) ; printf ( " Size of int = %d\n  " , sizeof ( integerVar ) ) ; printf ( " Size of expression ( 3 + 2.5 ) = %d\n  " , sizeof ( 3 + 2.5 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( isupper ( ch ) ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( islower ( ch ) ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( side1 = = side2 & & side2 = = side3 ) { printf ( " Equilateral triangle. " ) ; } else if ( side1 = = side2 || side1 = = side3 || side2 = = side3 ) { printf ( " Isosceles triangle. " ) ; } else { printf ( " Scalene triangle. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , i , terms ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & terms ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; for ( i = 1 ; i < = terms ; i + + ) { printf ( " %d , " , c ) ; a = b ; b = c ; c = a + b ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter year : " ) ; scanf ( " %d " , & year ) ; if ( ( ( year % 4 = = 0 ) & & ( year % 100 ! = 0 ) ) || ( year % 400 = = 0 ) ) { printf ( " LEAP YEAR " ) ; } else { printf ( " COMMON YEAR " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int base , exponent ; long long power = 1 ; int i ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %d " , & exponent ) ; for ( i = 1 ; i < = exponent ; i + + ) { power = power * base ; } printf ( " %d ^ %d = %lld " , base , exponent , power ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int MONTHS [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month > = 1 & & month < = 12 ) { printf ( " %d days " , MONTHS [ month - 1 ] ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int angle1 , angle2 , angle3 , sum ; printf ( " Enter three angles of triangle : \n  " ) ; scanf ( " %d %d %d " , & angle1 , & angle2 , & angle3 ) ; sum = angle1 + angle2 + angle3 ; if ( sum = = 180 & & angle1 ! = 0 & & angle2 ! = 0 & & angle3 ! = 0 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 > side3 ) & & ( side1 + side3 > side2 ) & & ( side2 + side3 > side1 ) ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , n , sum = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements in the array : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; sum + = arr [ i ] ; } printf ( " Sum of all elements of array = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { max = num1 ; } else { max = num3 ; } } else { if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1 > num2 ) & & ( num1 > num3 ) ) { max = num1 ; } else if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( num % 2 = = 0 ) { printf ( " Number is Even. " ) ; } else { printf ( " Number is Odd. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( ( num % 5 = = 0 ) & & ( num % 11 = = 0 ) ) { printf ( " Number is divisible by 5 and 11 " ) ; } else { printf ( " Number is not divisible by 5 and 11 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } if ( num = = 0 ) { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } else if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } else { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num , isPrime ; isPrime = 1 ; printf ( " Enter any number to check prime : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d is prime number " , num ) ; } else { printf ( " %d is composite number " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " Even numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Enter any number : " ) ; scanf ( " %d " , & n ) ; printf ( " Natural numbers from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter start value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; printf ( " Natural numbers from %d to %d : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; for ( i = start ; i> = 1 ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i> = end ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , binary ; int rem , place = 1 ; binary = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 2 ; binary = ( rem * place ) + binary ; tempDecimal / = 2 ; place * = 10 ; } printf ( " Decimal number = %lld\n  " , decimal ) ; printf ( " Binary number = %lld " , binary ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; ( num %2 = = 0 ) ? printf ( " The number is EVEN " ) : printf ( " The number is ODD " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; printf ( " The number is %s " , ( num %2 = = 0 ? " EVEN " : " ODD " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { const char * WEEKS [ ] = { " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " } ; int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; if ( week > 0 & & week < 8 ) { printf ( " %s " , WEEKS [ week-1 ] ) ; } else { printf ( " Invalid input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ? printf ( " It is ALPHABET " ) : printf ( " It is NOT ALPHABET " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 24 ; printf ( " 24 / ( 2^1 ) = > %d\n  " , ( a > > 1 ) ) ; printf ( " 24 / ( 2^2 ) = > %d\n  " , ( a > > 2 ) ) ; printf ( " 24 / ( 2^3 ) = > %d\n  " , ( a > > 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 ; printf ( " 12 * ( 2^1 ) = > %d\n  " , ( a < < 1 ) ) ; printf ( " 12 * ( 2^2 ) = > %d\n  " , ( a < < 2 ) ) ; printf ( " 12 * ( 2^3 ) = > %d\n  " , ( a < < 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 21 ; if ( num1 & 1 ) printf ( " %d is an ODD number.\n  " , num1 ) ; else printf ( " %d is an EVEN number.\n  " , num1 ) ; if ( num2 & 1 ) printf ( " %d is an ODD number.\n  " , num2 ) ; else printf ( " %d is an EVEN number.\n  " , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 8 ; printf ( " 1s complement of %d = %d\n  " , num , ( ~num ) ) ; printf ( " 2s complement of %d = %d\n  " , num , ( ~num + 1 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " 'a' = > ' %c'\n  " , ( 'a' | ' ' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'A' | ' ' ) ) ; printf ( " 'a' = > ' %c'\n  " , ( 'a' & '_' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'a' & '_' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 20 , x ; x = a ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = x ^ x ; printf ( " x = %d\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 20 ; int min = ( y ^ ( x ^ y ) & - ( x < y ) ) ; int max = ( x ^ ( x ^ y ) & - ( x < y ) ) ; printf ( " Minimum ( 10 , 20 ) = > %d\n  " , min ) ; printf ( " Maximum ( 10 , 20 ) = > %d\n  " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " Enter two numbers to swap : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Original value : a = %d , b = %d\n  " , a , b ) ; a ^ = b ; b ^ = a ; a ^ = b ; printf ( " Swapped value : a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter any number to find its factor : " ) ; scanf ( " %d " , & num ) ; printf ( " All factors of %d are : \n  " , num ) ; for ( i = 1 ; i < = num ; i + + ) { if ( num % i = = 0 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; unsigned long long fact = 1LL ; printf ( " Enter any number to calculate factorial : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d = %llu " , num , fact ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , end ; printf ( " Print all natural numbers from 1 to : " ) ; scanf ( " %d " , & end ) ; i = 1 ; while ( i < = end ) { printf ( " %d\n  " , i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; max = ( num1 > num2 & & num1 > num3 ) ? num1 : ( num2 > num3 ) ? num2 : num3 ; printf ( " \n Maximum between %d , %d and %d = %d " , num1 , num2 , num3 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 1 ; while ( i < = n ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 2 ; while ( i < = n ) { printf ( " %d\n  " , i ) ; i + = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; while ( n> = 1 ) { printf ( " %d\n  " , n ) ; n-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'a' ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 'z' ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch = 97 ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 122 ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = ( i * i ) ; j + = i ) { printf ( " %-3d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num , sum = 0 ; printf ( " Enter any number to check perfect number : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i <num ; i + + ) { if ( num %i = = 0 ) { sum + = i ; } } if ( sum = = num ) { printf ( " %d is PERFECT NUMBER " , num ) ; } else { printf ( " %d is NOT PERFECT NUMBER " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { sum + = i ; } printf ( " Sum of first %d natural numbers = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i < = end ; i + + ) { sum + = i ; } printf ( " Sum of natural numbers from %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of all even number between 1 to %d = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , reverse = 0 ; printf ( " Enter any number to find reverse : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { reverse = ( reverse * 10 ) + ( num % 10 ) ; num / = 10 ; } printf ( " Reverse = %d " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , num , rev = 0 ; printf ( " Enter any number to check palindrome : " ) ; scanf ( " %d " , & n ) ; num = n ; while ( n ! = 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n / = 10 ; } if ( rev = = num ) { printf ( " %d is palindrome. " , num ) ; } else { printf ( " %d is not palindrome. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = '0' & & ch < = '9' ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = 48 & & ch < = 57 ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 255 ; i + + ) { printf ( " ASCII value of character %c = %d\n  " , i , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * ptr ; ptr = & num ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of ptr = %d\n  " , & ptr ) ; printf ( " Value of ptr = %d\n  " , ptr ) ; printf ( " Value pointed by ptr = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int arr [ SIZE ] ; int * ptr = arr ; int i ; printf ( " Enter %d array elements : " , SIZE ) ; while ( ptr < & arr [ SIZE ] ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Elements in array are : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; int num ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; num = atoi ( number ) ; printf ( " Converted integer = %d\n  " , num ) ; return 0 ; }
#include <stdio.h> #include <sys / types.h> #include <dirent.h> void listFiles ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; listFiles ( path ) ; return 0 ; } void listFiles ( const char * path ) { struct dirent * dp ; DIR * dir = opendir ( path ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { printf ( " %s\n  " , dp-> d_name ) ; } closedir ( dir ) ; }
#include <stdio.h> int main ( ) { char oldName [ 100 ] , newName [ 100 ] ; printf ( " Enter old file path : " ) ; scanf ( " %s " , oldName ) ; printf ( " Enter new file path : " ) ; scanf ( " %s " , newName ) ; if ( rename ( oldName , newName ) = = 0 ) { printf ( " File renamed successfully.\n  " ) ; } else { printf ( " Unable to rename files. Please check files exist and you have permissions to modify files.\n  " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fPtr ; char ch ; fPtr = fopen ( __FILE__ , " r " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } while ( ( ch = fgetc ( fPtr ) ) ! = EOF ) { printf ( " %c " , ch ) ; } fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long long int bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atoll ( number ) ; printf ( " Converted long long int = %lld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 5 ) ; if ( ptr = = NULL ) return 0 ; free ( ptr ) ; * ptr = 50 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 10 ) ; if ( !ptr ) { printf ( " Unable to allocate memory " ) ; return ; } free ( ptr ) ; ptr = NULL ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #define PRINT ( msg ) #msg int main ( ) { printf ( PRINT ( C Programming in Codeforwin ) ) ; return 0 ; }
#include <stdio.h> #define CONCAT ( a , b ) a##b int main ( ) { printf ( " CONCAT ( 10 , 20 ) = %d\n  " , CONCAT ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> #include " main.h " #include " win / display.c "
#include <stdio.h> #define COUNTRY " INDIA " #define TRUE 1 #define FALSE 0 #define SUM ( 10 + 20 ) int main ( ) { printf ( " COUNTRY : %s\n  " , COUNTRY ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; printf ( " SUM ( 10 + 20 ) : %d\n  " , SUM ) ; return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( ) { printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; #undef TRUE #undef FALSE #define TRUE 0 #define FALSE 1 printf ( " \n Macro values are redefinition\n  " ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { return ( a + b ) ; } #define SUM ( a , b ) ( a + b ) int main ( ) { printf ( " SUM using function : %d\n  " , sum ( 100 , 200 ) ) ; printf ( " SUM using macro : %d\n  " , SUM ( 100 , 200 ) ) ; return 0 ; }
#include <stdio.h> #define COUNTRY " INDIA " int main ( ) { #ifdef COUNTRY printf ( " Country is defined\n  " ) ; #endif #ifndef STATE printf ( " State is not defined. Defining state. \n  " ) ; #define STATE " PATNA " #endif printf ( " State is : %s\n  " , STATE ) ; return 0 ; }
#include <stdio.h> #define IND 1 #define USA 2 #define UK 3 #define COUNTRY IND int main ( ) { #if COUNTRY = = IND printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #elif COUNTRY = = USA printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #else printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #endif return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 5 ) ; if ( ptr = = NULL ) return 0 ; free ( ptr ) ; * ptr = 50 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 10 ) ; if ( !ptr ) { printf ( " Unable to allocate memory " ) ; return ; } free ( ptr ) ; ptr = NULL ; free ( ptr ) ; return 0 ; }
#include <stdio.h> typedef struct point { int x ; int y ; } Point ; typedef int ( * Fptr ) ( const void * , const void * ) ; int main ( ) { typedef int Integer ; typedef char CharArray [ 100 ] ; Fptr functionPointer ; Point point = { 10 , 20 } ; Integer num = 100 ; CharArray name = " Codeforwin " ; printf ( " Point x = %d , y = %d\n  " , point.x , point.y ) ; printf ( " num = %d\n  " , num ) ; printf ( " name = %s\n  " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; switch ( num > 0 ) { case 1 : printf ( " %d is positive. " , num ) ; break ; case 0 : switch ( num < 0 ) { case 1 : printf ( " %d is negative. " , num ) ; break ; case 0 : printf ( " %d is zero. " , num ) ; break ; } break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; ( year %4 = = 0 & & year %100! = 0 ) ? printf ( " LEAP YEAR " ) : ( year %400 = = 0 ) ? printf ( " LEAP YEAR " ) : printf ( " COMMON YEAR " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; printf ( " %s " , ( ( year %4 = = 0 & & year %100! = 0 ) ? " LEAP YEAR " : ( year %400 = = 0 ) ? " LEAP YEAR " : " COMMON YEAR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define BASE 2 int main ( ) { long long binary , decimal = 0 , tempBinary ; int N = 0 ; printf ( " Enter any binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; while ( tempBinary! = 0 ) { if ( tempBinary % 10 = = 1 ) { decimal + = pow ( BASE , N ) ; } N + + ; tempBinary / = 10 ; } printf ( " Binary number = %lld\n  " , binary ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2! = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Alphabets from a - z are : \n  " ) ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { printf ( " %c\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; printf ( " Alphabets from a - z are : \n  " ) ; for ( i = 97 ; i < = 122 ; i + + ) { printf ( " %c\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2! = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , octal ; int i , rem , place = 1 ; octal = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 8 ; octal = ( rem * place ) + octal ; tempDecimal / = 8 ; place * = 10 ; } printf ( " \n Decimal number = %lld\n  " , decimal ) ; printf ( " Octal number = %lld " , octal ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long octal , tempOctal , decimal ; int rem , place ; printf ( " Enter any octal number : " ) ; scanf ( " %lld " , & octal ) ; tempOctal = octal ; decimal = 0 ; place = 0 ; while ( tempOctal > 0 ) { rem = tempOctal % 10 ; decimal + = pow ( 8 , place ) * rem ; tempOctal / = 10 ; place + + ; } printf ( " Octal number = %lld\n  " , octal ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter number to print table : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d * %d = %d\n  " , num , i , ( num * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 , firstDigit , lastDigit ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; firstDigit = num ; while ( num > = 10 ) { num = num / 10 ; } firstDigit = num ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , sum , digits , firstDigit , lastDigit ; sum = 0 ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , num , rev = 0 ; printf ( " Enter any number to check palindrome : " ) ; scanf ( " %d " , & n ) ; num = n ; while ( n ! = 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n / = 10 ; } if ( rev = = num ) { printf ( " %d is palindrome. " , num ) ; } else { printf ( " %d is not palindrome. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; long long product = 1ll ; printf ( " Enter any number to calculate product of digit : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } printf ( " Product of digits = %lld " , product ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtol ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long = %ld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atol ( number ) ; printf ( " Converted long int = %ld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; double decimalNumber ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; decimalNumber = atof ( number ) ; printf ( " Converted floating point number = %lf\n  " , decimalNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long long int bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoll ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long long int = %lld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; unsigned long int bigNumber ; int base ; printf ( " Enter any number : " ) ; gets ( number ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoul ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted unsigned long int = %lu\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 24 ; printf ( " 24 / ( 2^1 ) = > %d\n  " , ( a > > 1 ) ) ; printf ( " 24 / ( 2^2 ) = > %d\n  " , ( a > > 2 ) ) ; printf ( " 24 / ( 2^3 ) = > %d\n  " , ( a > > 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 ; printf ( " 12 * ( 2^1 ) = > %d\n  " , ( a < < 1 ) ) ; printf ( " 12 * ( 2^2 ) = > %d\n  " , ( a < < 2 ) ) ; printf ( " 12 * ( 2^3 ) = > %d\n  " , ( a < < 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 21 ; if ( num1 & 1 ) printf ( " %d is an ODD number.\n  " , num1 ) ; else printf ( " %d is an EVEN number.\n  " , num1 ) ; if ( num2 & 1 ) printf ( " %d is an ODD number.\n  " , num2 ) ; else printf ( " %d is an EVEN number.\n  " , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 8 ; printf ( " 1s complement of %d = %d\n  " , num , ( ~num ) ) ; printf ( " 2s complement of %d = %d\n  " , num , ( ~num + 1 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " 'a' = > ' %c'\n  " , ( 'a' | ' ' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'A' | ' ' ) ) ; printf ( " 'a' = > ' %c'\n  " , ( 'a' & '_' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'a' & '_' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 20 , x ; x = a ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = x ^ x ; printf ( " x = %d\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 20 ; int min = ( y ^ ( x ^ y ) & - ( x < y ) ) ; int max = ( x ^ ( x ^ y ) & - ( x < y ) ) ; printf ( " Minimum ( 10 , 20 ) = > %d\n  " , min ) ; printf ( " Maximum ( 10 , 20 ) = > %d\n  " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " Enter two numbers to swap : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Original value : a = %d , b = %d\n  " , a , b ) ; a ^ = b ; b ^ = a ; a ^ = b ; printf ( " Swapped value : a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long long int bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atoll ( number ) ; printf ( " Converted long long int = %lld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long long int bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoll ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long long int = %lld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; unsigned long int bigNumber ; int base ; printf ( " Enter any number : " ) ; gets ( number ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoul ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted unsigned long int = %lu\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtol ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long = %ld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; double decimalNumber ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; decimalNumber = atof ( number ) ; printf ( " Converted floating point number = %lf\n  " , decimalNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atol ( number ) ; printf ( " Converted long int = %ld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; int num ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; num = atoi ( number ) ; printf ( " Converted integer = %d\n  " , num ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define DATA_SIZE 1000 int main ( ) { char data [ DATA_SIZE ] ; FILE * fPtr ; fPtr = fopen ( " data / file1.txt " , " w " ) ; if ( fPtr = = NULL ) { printf ( " Unable to create file.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " Enter contents to store in file : \n  " ) ; fgets ( data , DATA_SIZE , stdin ) ; fputs ( data , fPtr ) ; fclose ( fPtr ) ; printf ( " File created and saved successfully. 🙂 \n  " ) ; return 0 ; }
#include <stdio.h> void greetMorning ( ) ; void greeEvening ( ) ; void greetNight ( ) ; void greet ( void ( * greeter ) ( ) ) ; int main ( ) { greet ( greetMorning ) ; greet ( greeEvening ) ; greet ( greetNight ) ; return 0 ; } void greet ( void ( * greeter ) ( ) ) { greeter ( ) ; } void greetMorning ( ) { printf ( " Good , morning!\n  " ) ; } void greeEvening ( ) { printf ( " Good , evening!\n  " ) ; } void greetNight ( ) { printf ( " Good , night!\n  " ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int * const const_ptr = & num1 ; * const_ptr = 10 ; const_ptr = & num2 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * const_ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; const int * ptr_const ; ptr_const = & num ; num = 20 ; * ptr_const = 100 ; printf ( " Num = %d\n  " , num ) ; printf ( " Num = %d\n  " , * ptr_const ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; const int * const ptr = & num1 ; ptr = & num2 ; * ptr = 100 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int arr [ SIZE ] ; int * ptr = arr ; int i ; printf ( " Enter %d array elements : " , SIZE ) ; while ( ptr < & arr [ SIZE ] ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Elements in array are : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ptr ) ; ptr + + ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ( ptr + count ) ) ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr = & arr [ 0 ] ; printf ( " Accessing array elements using pointer \n  " ) ; while ( ptr < & arr [ SIZE ] ) { printf ( " %d \n  " , * ptr ) ; ptr + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Address of num in hexadecimal = %x " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , * ( & num ) ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int marks [ SIZE ] ; int index , sum ; float avg ; printf ( " Enter marks of %d students : " , SIZE ) ; for ( index = 0 ; index <SIZE ; index + + ) { scanf ( " %d " , & marks [ index ] ) ; } sum = 0 ; for ( index = 0 ; index <SIZE ; index + + ) { sum = sum + marks [ index ] ; } avg = ( float ) sum / SIZE ; printf ( " Average marks = %f " , avg ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int array [ SIZE ] ; int index ; for ( index = 0 ; index < = SIZE ; index + + ) { scanf ( " %d " , & array [ index ] ) ; } return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> int num ; void display ( ) { int i ; for ( i = 1 ; i < = num ; i + + ) { printf ( " num = %d\n  " , i ) ; } }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 ; static int n2 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; }
#include <stdio.h> int main ( ) { int outervariable = 10 ; { printf ( " I can access outervariable in inner block = %d\n  " , outervariable ) ; } printf ( " I can also access outervariable in same block = %d " , outervariable ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " 'num' is accessible within same block = %d\n  " , num ) ; { int num = 20 ; printf ( " Inner block 'num' shadows outer block 'num' = %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; printf ( " 'num1 = %d' and 'num2 = %d' declared in outer block is accessible within same block.\n  " , num1 , num2 ) ; { int sum = num1 + num2 ; printf ( " sum = %d\n  " , sum ) ; } return 0 ; }
#include <stdio.h> void print ( int n ) ; int main ( ) { print ( 5 ) ; return 0 ; } void print ( int n ) { printf ( " %d " , n ) ; if ( n < = 1 ) { return ; } print ( n - 1 ) ; }
#include <stdio.h> int evenOdd ( int num ) ; int main ( ) { int num , isEven ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; isEven = evenOdd ( num ) ; if ( isEven = = 0 ) printf ( " The given number is EVEN. " ) ; else printf ( " The given number is ODD. " ) ; return 0 ; } int evenOdd ( int num ) { if ( num % 2 = = 0 ) return 0 ; else return 1 ; }
#include <stdio.h> int max ( int num1 , int num2 ) ; int main ( ) { int num1 , num2 , maximum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; maximum = max ( num1 , num2 ) ; printf ( " Maximum = %d " , maximum ) ; return 0 ; } int max ( int num1 , int num2 ) { int maximum ; if ( num1 > num2 ) maximum = num1 ; else maximum = num2 ; return maximum ; }
#include <stdio.h> int add ( int num1 , int num2 ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = add ( n1 , n2 ) ; printf ( " Sum = %d " , sum ) ; return 0 ; } int add ( int num1 , int num2 ) { int s = num1 + num2 ; return s ; }
#include <stdio.h> int main ( ) { int i = 1 ; start : goto print ; print : printf ( " %d " , i ) ; goto next ; increment : i + + ; goto print ; next : if ( i < 10 ) goto increment ; else goto exit ; printf ( " I cannot execute. " ) ; exit : return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 10 ; j + + ) { k = 1 ; while ( k < = 10 ) { if ( j = = 5 & & k = = 5 ) { goto out_of_loop ; } printf ( " %d " , k ) ; k + + ; } } } out_of_loop : return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Even numbers between 1 to 100 : \n  " ) ; for ( num = 1 ; num < = 100 ; num + + ) { if ( num % 2 = = 1 ) continue ; printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , isPrime , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; isPrime = 1 ; for ( i = 2 ; i <num ; i + + ) { if ( num % i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " Number is prime number. " ) ; } else { printf ( " Number is composite number. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 5 ; j + + ) { printf ( " %d\t " , ( i * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; do { printf ( " %d " , n ) ; n + + ; } while ( n < = 10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; while ( n < = 10 ) { printf ( " %d " , n ) ; n + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int count ; for ( count = 1 ; count < = 10 ; count + + ) { printf ( " %d " , count ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { printf ( " Num1 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } else { if ( num2 > num3 ) { printf ( " Num2 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " First number is maximum. " ) ; } else { printf ( " Second number is maximum. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num < 0 ) { printf ( " NUMBER IS NEGATIVE. " ) ; } else if ( num = = 0 ) { printf ( " NUMBER IS ZERO. " ) ; } else { printf ( " NUMBER IS POSITIVE. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible to vote in India. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char grade ; printf ( " Enter student grade : " ) ; grade = getchar ( ) ; putchar ( grade ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerVar ; printf ( " Size of char = %d\n  " , sizeof ( char ) ) ; printf ( " Size of int = %d\n  " , sizeof ( integerVar ) ) ; printf ( " Size of expression ( 3 + 2.5 ) = %d\n  " , sizeof ( 3 + 2.5 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; int max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum is %d. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 10 ; b = + + a ; c = a + + printf ( " a = %d , b = %d , c = %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Learn at Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * ptr ; ptr = & num ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of ptr = %d\n  " , & ptr ) ; printf ( " Value of ptr = %d\n  " , ptr ) ; printf ( " Value pointed by ptr = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = i ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( k % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( k & 1 ) ) ; k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( i & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( j & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = ( i * i ) ; j + = i ) { printf ( " %-3d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , firstDigit , digits , placeValue ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num > 0 ) { printf ( " %d\n  " , num ) ; digits = ( int ) log10 ( num ) ; placeValue = ( int ) ceil ( pow ( 10 , digits ) ) ; firstDigit = ( int ) ( num / placeValue ) ; num = num - ( placeValue * firstDigit ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { printf ( " %d\n  " , num ) ; num = num / 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i < = ( N / 2 ) ) { printf ( " %d " , i ) ; } else { printf ( " %d " , ( N - i + 1 ) ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; diff = 1 ; value = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { diff = N-1 ; value = i ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 2 ; j < = i * 2 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2 ; j> = 2 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , colCount , value ; colCount = 1 ; value = 1 ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = colCount ; j + + ) { if ( value = = 10 ) value = 1 ; printf ( " %d " , value ) ; value + + ; } printf ( " \n  " ) ; colCount * = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { if ( i & 1 ) k = 1 ; else k = 2 ; for ( j = 1 ; j < = i ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N-1 ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( N-i + 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = ( N-i + 1 ) ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> i ; j-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < i + cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ! ( j %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ( i %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { printf ( " ' %c' is found at index %d\n  " , toSearch , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i , count ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; count = 0 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { count + + ; } i + + ; } printf ( " Total occurrence of ' %c' = %d " , toSearch , count ) ; return 0 ; }
#include <stdio.h> int gcd ( int a , int b ) ; int main ( ) { int num1 , num2 , hcf ; printf ( " Enter any two numbers to find GCD : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; printf ( " GCD of %d and %d = %d " , num1 , num2 , hcf ) ; return 0 ; } int gcd ( int a , int b ) { if ( b = = 0 ) return a ; else return gcd ( b , a %b ) ; }
#include <stdio.h> int sumOfDigits ( int num ) ; int main ( ) { int num , sum ; printf ( " Enter any number to find sum of digits : " ) ; scanf ( " %d " , & num ) ; sum = sumOfDigits ( num ) ; printf ( " Sum of digits of %d = %d " , num , sum ) ; return 0 ; } int sumOfDigits ( int num ) { if ( num = = 0 ) return 0 ; return ( ( num % 10 ) + sumOfDigits ( num / 10 ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int main ( ) { int num , rev ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; rev = reverse ( num ) ; printf ( " Reverse of %d = %d " , num , rev ) ; return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> unsigned long long fibo ( int num ) ; int main ( ) { int num ; unsigned long long fibonacci ; printf ( " Enter any number to find nth fiboacci term : " ) ; scanf ( " %d " , & num ) ; fibonacci = fibo ( num ) ; printf ( " %d fibonacci term is %llu " , num , fibonacci ) ; return 0 ; } unsigned long long fibo ( int num ) { if ( num = = 0 ) return 0 ; else if ( num = = 1 ) return 1 ; else return fibo ( num-1 ) + fibo ( num-2 ) ; }
#include <stdio.h> unsigned long long fact ( int num ) ; int main ( ) { int num ; unsigned long long factorial ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial of %d is %llu " , num , factorial ) ; return 0 ; } unsigned long long fact ( int num ) { if ( num = = 0 ) return 1 ; else return num * fact ( num - 1 ) ; }
#include <stdio.h> int isEven ( int num ) { return ! ( num & 1 ) ; } int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isEven ( num ) ) { printf ( " The number is even. " ) ; } else { printf ( " The number is odd. " ) ; } return 0 ; }
#include <stdio.h> double cube ( double num ) ; int main ( ) { int num ; double c ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; c = cube ( num ) ; printf ( " Cube of %d is %.2f " , num , c ) ; return 0 ; } double cube ( double num ) { return ( num * num * num ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Original value of num1 = %d\n  " , num1 ) ; printf ( " Original value of num2 = %d\n  " , num2 ) ; num1 ^ = num2 ; num2 ^ = num1 ; num1 ^ = num2 ; printf ( " Num1 after swapping = %d\n  " , num1 ) ; printf ( " Num2 after swapping = %d\n  " , num2 ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , index , i ; int bin [ INT_SIZE ] ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; index = INT_SIZE - 1 ; while ( index > = 0 ) { bin [ index ] = num & 1 ; index-- ; num > > = 1 ; } printf ( " Converted binary : " ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { printf ( " %d " , bin [ i ] ) ; } return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , zeros , ones , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; zeros = 0 ; ones = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( num & 1 ) ones + + ; else zeros + + ; num > > = 1 ; } printf ( " Total zero bit is %d\n  " , zeros ) ; printf ( " Total one bit is %d " , ones ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , msb , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( INT_SIZE - 1 ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num < < i ) & msb ) { break ; } count + + ; } printf ( " Total number of leading zeros in %d is %d " , num , count ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { int num , count ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; while ( ! ( num & ( ~INT_MAX ) ) ) { count + + ; num < < = 1 ; } printf ( " Total number of leading zeros = %d " , count ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num > > i ) & 1 ) { break ; } count + + ; } printf ( " Total number of trailing zeros in %d is %d. " , num , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( ! ( num & 1 ) ) { count + + ; num > > = 1 ; } printf ( " Total number of trailing zeros = %d. " , count ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; order = INT_SIZE - 1 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) { order = i ; break ; } } printf ( " Lowest order set bit in %d is %d " , num , order ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order = -1 , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) order = i ; } if ( order ! = -1 ) printf ( " Highest order set bit in %d is %d " , num , order ) ; else printf ( " 0 has no set bits. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , flippedNumber ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; flippedNumber = ~num ; printf ( " Original number = %d ( in decimal ) \n  " , num ) ; printf ( " Number after bits are flipped = %d ( in decimal ) " , flippedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , bitStatus ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to check ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; bitStatus = ( num > > n ) & 1 ; printf ( " The %d bit is set to %d " , n , bitStatus ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) { printf ( " %d is odd. " , num ) ; } else { printf ( " %d is even. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; ( num & 1 ) ? printf ( " %d is odd. " , num ) : printf ( " %d is even. " , num ) ; return 0 ; }
#include <stdio.h> #define BITS sizeof ( int ) * 8 int main ( ) { int num , msb ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( BITS - 1 ) ; if ( num & msb ) printf ( " MSB of %d is set ( 1 ) . " , num ) ; else printf ( " MSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) printf ( " LSB of %d is set ( 1 ) . " , num ) ; else printf ( " LSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = -1 ; while ( str1 [ + + i ] ) ; j = 0 ; while ( str1 [ i + + ] = str2 [ j + + ] ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; char * s1 = str1 ; char * s2 = str2 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; while ( * ( + + s1 ) ) ; while ( * ( s1 + + ) = * ( s2 + + ) ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = -1 ; while ( text2 [ i ] = text1 [ + + i ] ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; char * str1 = text1 ; char * str2 = text2 ; printf ( " Enter any string : " ) ; gets ( text1 ) ; while ( * ( str2 + + ) = * ( str1 + + ) ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( isupper ( ch ) ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( islower ( ch ) ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long octal , tempOctal , decimal ; int rem , place ; printf ( " Enter any octal number : " ) ; scanf ( " %lld " , & octal ) ; tempOctal = octal ; decimal = 0 ; place = 0 ; while ( tempOctal > 0 ) { rem = tempOctal % 10 ; decimal + = pow ( 8 , place ) * rem ; tempOctal / = 10 ; place + + ; } printf ( " Octal number = %lld\n  " , octal ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , octal ; int i , rem , place = 1 ; octal = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 8 ; octal = ( rem * place ) + octal ; tempDecimal / = 8 ; place * = 10 ; } printf ( " \n Decimal number = %lld\n  " , decimal ) ; printf ( " Octal number = %lld " , octal ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , binary ; int rem , place = 1 ; binary = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 2 ; binary = ( rem * place ) + binary ; tempDecimal / = 2 ; place * = 10 ; } printf ( " Decimal number = %lld\n  " , decimal ) ; printf ( " Binary number = %lld " , binary ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define BASE 2 int main ( ) { long long binary , decimal = 0 , tempBinary ; int N = 0 ; printf ( " Enter any binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; while ( tempBinary! = 0 ) { if ( tempBinary % 10 = = 1 ) { decimal + = pow ( BASE , N ) ; } N + + ; tempBinary / = 10 ; } printf ( " Binary number = %lld\n  " , binary ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> int main ( ) { int base , exponent ; long long power = 1 ; int i ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %d " , & exponent ) ; for ( i = 1 ; i < = exponent ; i + + ) { power = power * base ; } printf ( " %d ^ %d = %lld " , base , exponent , power ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , n , sum = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements in the array : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; sum + = arr [ i ] ; } printf ( " Sum of all elements of array = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'a' ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 'z' ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch = 97 ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 122 ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { if ( i = = 1 || j = = i || j = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j = = 1 || j = = i || i = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; while ( n> = 1 ) { printf ( " %d\n  " , n ) ; n-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; for ( i = start ; i> = 1 ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i> = end ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , columns ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & N ) ; columns = 1 ; for ( i = 1 ; i <N * 2 ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } if ( i < N ) { columns + + ; } else { columns-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( rows * 2 - ( 2 * i-1 ) ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( 2 * i-1 ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 1 ; while ( i < = n ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 2 ; while ( i < = n ) { printf ( " %d\n  " , i ) ; i + = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , end ; printf ( " Print all natural numbers from 1 to : " ) ; scanf ( " %d " , & end ) ; i = 1 ; while ( i < = end ) { printf ( " %d\n  " , i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num , sum = 0 ; printf ( " Enter any number to check perfect number : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i <num ; i + + ) { if ( num %i = = 0 ) { sum + = i ; } } if ( sum = = num ) { printf ( " %d is PERFECT NUMBER " , num ) ; } else { printf ( " %d is NOT PERFECT NUMBER " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 , firstDigit , lastDigit ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; firstDigit = num ; while ( num > = 10 ) { num = num / 10 ; } firstDigit = num ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , sum , digits , firstDigit , lastDigit ; sum = 0 ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 255 ; i + + ) { printf ( " ASCII value of character %c = %d\n  " , i , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , num , rev = 0 ; printf ( " Enter any number to check palindrome : " ) ; scanf ( " %d " , & n ) ; num = n ; while ( n ! = 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n / = 10 ; } if ( rev = = num ) { printf ( " %d is palindrome. " , num ) ; } else { printf ( " %d is not palindrome. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , reverse = 0 ; printf ( " Enter any number to find reverse : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { reverse = ( reverse * 10 ) + ( num % 10 ) ; num / = 10 ; } printf ( " Reverse = %d " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { sum + = i ; } printf ( " Sum of first %d natural numbers = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i < = end ; i + + ) { sum + = i ; } printf ( " Sum of natural numbers from %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; long long product = 1ll ; printf ( " Enter any number to calculate product of digit : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } printf ( " Product of digits = %lld " , product ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; unsigned long long fact = 1LL ; printf ( " Enter any number to calculate factorial : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d = %llu " , num , fact ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num , isPrime ; isPrime = 1 ; printf ( " Enter any number to check prime : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d is prime number " , num ) ; } else { printf ( " %d is composite number " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter any number to find its factor : " ) ; scanf ( " %d " , & num ) ; printf ( " All factors of %d are : \n  " , num ) ; for ( i = 1 ; i < = num ; i + + ) { if ( num % i = = 0 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter number to print table : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d * %d = %d\n  " , num , i , ( num * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of all even number between 1 to %d = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2! = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " Even numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Alphabets from a - z are : \n  " ) ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { printf ( " %c\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; printf ( " Alphabets from a - z are : \n  " ) ; for ( i = 97 ; i < = 122 ; i + + ) { printf ( " %c\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Enter any number : " ) ; scanf ( " %d " , & n ) ; printf ( " Natural numbers from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter start value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; printf ( " Natural numbers from %d to %d : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; switch ( num % 2 ) { case 0 : printf ( " Number is Even " ) ; break ; case 1 : printf ( " Number is Odd " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ? printf ( " It is ALPHABET " ) : printf ( " It is NOT ALPHABET " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; ( year %4 = = 0 & & year %100! = 0 ) ? printf ( " LEAP YEAR " ) : ( year %400 = = 0 ) ? printf ( " LEAP YEAR " ) : printf ( " COMMON YEAR " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; printf ( " %s " , ( ( year %4 = = 0 & & year %100! = 0 ) ? " LEAP YEAR " : ( year %400 = = 0 ) ? " LEAP YEAR " : " COMMON YEAR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; ( num %2 = = 0 ) ? printf ( " The number is EVEN " ) : printf ( " The number is ODD " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; printf ( " The number is %s " , ( num %2 = = 0 ? " EVEN " : " ODD " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; max = ( num1 > num2 & & num1 > num3 ) ? num1 : ( num2 > num3 ) ? num2 : num3 ; printf ( " \n Maximum between %d , %d and %d = %d " , num1 , num2 , num3 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum between %d and %d is %d " , num1 , num2 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers to find maximum : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; switch ( num1 > num2 ) { case 0 : printf ( " %d is maximum " , num2 ) ; break ; case 1 : printf ( " %d is maximum " , num1 ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : printf ( " Vowel " ) ; break ; default : printf ( " Consonant " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int days , years , weeks ; printf ( " Enter days : " ) ; scanf ( " %d " , & days ) ; years = ( days / 365 ) ; weeks = ( days % 365 ) / 7 ; days = days - ( ( years * 365 ) + ( weeks * 7 ) ) ; printf ( " YEARS : %d\n  " , years ) ; printf ( " WEEKS : %d\n  " , weeks ) ; printf ( " DAYS : %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fahrenheit ) ; celsius = ( fahrenheit - 32 ) * 5 / 9 ; printf ( " %.2f Fahrenheit = %.2f Celsius " , fahrenheit , celsius ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , i , terms ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & terms ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; for ( i = 1 ; i < = terms ; i + + ) { printf ( " %d , " , c ) ; a = b ; b = c ; c = a + b ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( ( num % 5 = = 0 ) & & ( num % 11 = = 0 ) ) { printf ( " Number is divisible by 5 and 11 " ) ; } else { printf ( " Number is not divisible by 5 and 11 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { max = num1 ; } else { max = num3 ; } } else { if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1 > num2 ) & & ( num1 > num3 ) ) { max = num1 ; } else if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( side1 = = side2 & & side2 = = side3 ) { printf ( " Equilateral triangle. " ) ; } else if ( side1 = = side2 || side1 = = side3 || side2 = = side3 ) { printf ( " Isosceles triangle. " ) ; } else { printf ( " Scalene triangle. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 > side3 ) & & ( side1 + side3 > side2 ) & & ( side2 + side3 > side1 ) ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int angle1 , angle2 , angle3 , sum ; printf ( " Enter three angles of triangle : \n  " ) ; scanf ( " %d %d %d " , & angle1 , & angle2 , & angle3 ) ; sum = angle1 + angle2 + angle3 ; if ( sum = = 180 & & angle1 ! = 0 & & angle2 ! = 0 & & angle3 ! = 0 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { const int MONTHS [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month > = 1 & & month < = 12 ) { printf ( " %d days " , MONTHS [ month - 1 ] ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { const char * WEEKS [ ] = { " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " } ; int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; if ( week > 0 & & week < 8 ) { printf ( " %s " , WEEKS [ week-1 ] ) ; } else { printf ( " Invalid input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = '0' & & ch < = '9' ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = 48 & & ch < = 57 ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( num % 2 = = 0 ) { printf ( " Number is Even. " ) ; } else { printf ( " Number is Odd. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } if ( num = = 0 ) { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } else if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } else { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter year : " ) ; scanf ( " %d " , & year ) ; if ( ( ( year % 4 = = 0 ) & & ( year % 100 ! = 0 ) ) || ( year % 400 = = 0 ) ) { printf ( " LEAP YEAR " ) ; } else { printf ( " COMMON YEAR " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } if ( num2 > num1 ) { printf ( " %d is maximum " , num2 ) ; } if ( num1 = = num2 ) { printf ( " Both are equal " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } else { printf ( " %d is maximum " , num2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) max = num1 ; else max = num2 ; printf ( " %d is maximum. " , max ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float principle , rate , time , CI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; CI = principle * ( pow ( ( 1 + rate / 100 ) , time ) ) ; printf ( " Compound Interest = %f " , CI ) ; return 0 ; }
#include <stdio.h> int main ( ) { float principle , time , rate , SI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; SI = ( principle * time * rate ) / 100 ; printf ( " Simple Interest = %f " , SI ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num , root ; printf ( " Enter any number to find square root : " ) ; scanf ( " %lf " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2lf = %.2lf " , num , root ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float side , area ; printf ( " Enter side of an equilateral triangle : " ) ; scanf ( " %f " , & side ) ; area = ( sqrt ( 3 ) / 4 ) * ( side * side ) ; printf ( " Area of equilateral triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float base , height , area ; printf ( " Enter base of the triangle : " ) ; scanf ( " %f " , & base ) ; printf ( " Enter height of the triangle : " ) ; scanf ( " %f " , & height ) ; area = ( base * height ) / 2 ; printf ( " Area of the triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , expo , power ; printf ( " Enter base : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %lf " , & expo ) ; power = pow ( base , expo ) ; printf ( " %.2lf ^ %.2lf = %.2lf " , base , expo , power ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two angles of triangle : " ) ; scanf ( " %d %d " , & a , & b ) ; c = 180 - ( a + b ) ; printf ( " Third angle of the triangle = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( celsius * 9 / 5 ) + 32 ; printf ( " %.2f Celsius = %.2f Fahrenheit " , celsius , fahrenheit ) ; return 0 ; }
#include <stdio.h> int main ( ) { float cm , meter , km ; printf ( " Enter length in centimeter : " ) ; scanf ( " %f " , & cm ) ; meter = cm / 100.0 ; km = cm / 100000.0 ; printf ( " Length in Meter = %.2f m \n  " , meter ) ; printf ( " Length in Kilometer = %.2f km " , km ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * 3.14 * radius ; area = 3.14 * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * M_PI * radius ; area = M_PI * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , area ; printf ( " Enter length of rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of rectangle : " ) ; scanf ( " %d " , & width ) ; area = length * width ; printf ( " Area of rectangle = %f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , perimeter ; printf ( " Enter length of the rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of the rectangle : " ) ; scanf ( " %f " , & width ) ; perimeter = 2 * ( length + width ) ; printf ( " Perimeter of rectangle = %f units " , perimeter ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d\n  " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { str [ i ] = str [ i ] + 32 ; } } printf ( " Lower case string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; strlwr ( str ) ; printf ( " Lowercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter your text : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { str [ i ] = str [ i ] - 32 ; } } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; printf ( " Enter your text : " ) ; gets ( str ) ; while ( * s ) { * s = ( * s > 'a' & & * s < = 'z' ) ? * s-32 : * s ; s + + ; } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter your text : " ) ; gets ( str ) ; strupr ( str ) ; printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int flag ; printf ( " Enter any string : " ) ; gets ( str ) ; strcpy ( reverse , str ) ; strrev ( reverse ) ; flag = strcmp ( str , reverse ) ; if ( flag = = 0 ) { printf ( " String is Palindrome. " ) ; } else { printf ( " String is Not Palindrome. " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int i ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { count + + ; } printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , words ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; words = 1 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = ' ' || str [ i ] = = '\n ' || str [ i ] = = '\t' ) { words + + ; } i + + ; } printf ( " Total number of words = %d " , words ) ; return 0 ; }
