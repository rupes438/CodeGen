#include <stdio.h> int main ( ) { int rad ; float PI = 3.14 , area , ci ; printf ( " \n  Enter radius of circle : " ) ; scanf ( " %d " , & rad ) ; area = PI * rad * rad ; printf ( " \n Area of circle : %f " , area ) ; ci = 2 * PI * rad ; printf ( " \n Circumference : %f " , ci ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int s1 , s2 , angle ; float area ; printf ( " \n Enter Side1 : " ) ; scanf ( " %d " , & s1 ) ; printf ( " \n Enter Side2 : " ) ; scanf ( " %d " , & s2 ) ; printf ( " \n Enter included angle : " ) ; scanf ( " %d " , & angle ) ; area = ( s1 * s2 * sin ( ( M_PI / 180 ) * angle ) ) / 2 ; printf ( " \n Area of Scalene Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int side ; float area , r_4 ; r_4 = sqrt ( 3 ) / 4 ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = r_4 * side * side ; printf ( " \n Area of Equilateral Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int base , height ; float area ; printf ( " \n Enter the base of Right Angle Triangle : " ) ; scanf ( " %d " , & base ) ; printf ( " \n Enter the height of Right Angle Triangle : " ) ; scanf ( " %d " , & height ) ; area = 0.5 * base * height ; printf ( " \n Area of Right Angle Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float radius , area ; printf ( " \n Enter the radius of Circle : " ) ; scanf ( " %d " , & radius ) ; area = 3.14 * radius * radius ; printf ( " \n Area of Circle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int length , breadth , area ; printf ( " \n Enter the Length of Rectangle : " ) ; scanf ( " %d " , & length ) ; printf ( " \n Enter the Breadth of Rectangle : " ) ; scanf ( " %d " , & breadth ) ; area = length * breadth ; printf ( " \n Area of Rectangle : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int side , area ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = side * side ; printf ( " \n Area of Square : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int numArray [ 10 ] ; int i , sum = 0 ; int * ptr ; printf ( " \n Enter 10 elements : " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %d " , & numArray [ i ] ) ; ptr = numArray ; for ( i = 0 ; i < 10 ; i + + ) { sum = sum + * ptr ; ptr + + ; } printf ( " The sum of array elements : %d " , sum ) ; }
#include <stdio.h> #define ACCURACY 0.0001 int main ( ) { int n , count ; float x , term , sum ; printf ( " \n Enter value of x : " ) ; scanf ( " %f " , & x ) ; n = term = sum = count = 1 ; while ( n < = 100 ) { term = term * x / n ; sum = sum + term ; count = count + 1 ; if ( term < ACCURACY ) n = 999 ; else n = n + 1 ; } printf ( " \n Terms = %d Sum = %f " , count , sum ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x , y , z ; float a , b , c ; clrscr ( ) ; printf ( " \n Enter the values of x , y and z : " ) ; scanf ( " %d %d %d " , & x , & y , & z ) ; a = ( x + y + z ) / ( x - y - z ) ; b = ( x + y + z ) / 3 ; c = ( x + y ) * ( x - y ) * ( y - z ) ; printf ( " \n Value of a = %f " , a ) ; printf ( " \n Value of b = %f " , b ) ; printf ( " \n Value of c = %f " , c ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int cust_no , powerUsage ; float amount ; clrscr ( ) ; printf ( " Enter the customer number : " ) ; scanf ( " %d " , & cust_no ) ; printf ( " Enter the power consumed : " ) ; scanf ( " %d " , & powerUsage ) ; if ( powerUsage > = 0 & & powerUsage < = 200 ) amount = powerUsage * 0.50 ; else if ( powerUsage > 200 & & powerUsage < 400 ) amount = 100 + ( ( powerUsage - 200 ) * 0.65 ) ; else if ( powerUsage > 400 & & powerUsage < = 600 ) amount = 230 + ( ( powerUsage - 400 ) * 0.80 ) ; printf ( " Amount to be paid by customer no. %d is Rs. : %5.2f. " , cust_no , amount ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " \n Enter value of a , b & c : " ) ; scanf ( " %d %d %d " , & a , & b , & c ) ; if ( ( a > b ) & & ( a > c ) ) printf ( " \n a is greatest " ) ; if ( ( b > c ) & & ( b > a ) ) printf ( " \n b is greatest " ) ; if ( ( c > a ) & & ( c > b ) ) printf ( " \n c is greatest " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int gross_salary , basic , da , ta ; printf ( " Enter basic salary : " ) ; scanf ( " %d " , & basic ) ; da = ( 10 * basic ) / 100 ; ta = ( 12 * basic ) / 100 ; gross_salary = basic + da + ta ; printf ( " \n Gross salary : %d " , gross_salary ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , rem , rev = 0 ; printf ( " \n Enter any no to be reversed : " ) ; scanf ( " %d " , & num ) ; while ( num > = 1 ) { rem = num % 10 ; rev = rev * 10 + rem ; num = num / 10 ; } printf ( " \n Reversed Number : %d " , rev ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int s1 , s2 , s3 , s4 , s5 , sum , total = 500 ; float per ; printf ( " \n Enter marks of 5 subjects : " ) ; scanf ( " %d %d %d %d %d " , & s1 , & s2 , & s3 , & s4 , & s5 ) ; sum = s1 + s2 + s3 + s4 + s5 ; printf ( " \n Sum : %d " , sum ) ; per = ( sum * 100 ) / total ; printf ( " \n Percentage : %f " , per ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " \n Enter temp in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( 1.8 * celsius ) + 32 ; printf ( " \n Temperature in Fahrenheit : %f " , fahrenheit ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int amount , rate , time , si ; printf ( " \n Enter Principal Amount : " ) ; scanf ( " %d " , & amount ) ; printf ( " \n Enter Rate of Interest : " ) ; scanf ( " %d " , & rate ) ; printf ( " \n Enter Period of Time : " ) ; scanf ( " %d " , & time ) ; si = ( amount * rate * time ) / 100 ; printf ( " \n Simple Interest : %d " , si ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , sum ; printf ( " \n Enter two no : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , b , c ; float desc , root1 , root2 ; printf ( " \n Enter the Values of a : " ) ; scanf ( " %f " , & a ) ; printf ( " \n Enter the Values of b : " ) ; scanf ( " %f " , & b ) ; printf ( " \n Enter the Values of c : " ) ; scanf ( " %f " , & c ) ; desc = sqrt ( b * b - 4 * a * c ) ; root1 = ( -b + desc ) / ( 2.0 * a ) ; root2 = ( -b - desc ) / ( 2.0 * a ) ; printf ( " \n First Root : %f " , root1 ) ; printf ( " \n Second Root : %f " , root2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int fact ( int ) ; int main ( ) { int factorial , num ; printf ( " Enter the value of num : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial is %d " , factorial ) ; return ( 0 ) ; } int fact ( int n ) { if ( n = = 0 ) { return ( 1 ) ; } return ( n * fact ( n - 1 ) ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> int fm ( int date , int month , int year ) { int fmonth , leap ; if ( ( year % 100 = = 0 ) & & ( year % 400 ! = 0 ) ) leap = 0 ; else if ( year % 4 = = 0 ) leap = 1 ; else leap = 0 ; fmonth = 3 + ( 2 - leap ) * ( ( month + 2 ) / ( 2 * month ) ) + ( 5 * month + month / 9 ) / 2 ; fmonth = fmonth % 7 ; return fmonth ; } int day_of_week ( int date , int month , int year ) { int dayOfWeek ; int YY = year % 100 ; int century = year / 100 ; printf ( " \n Date : %d / %d / %d \n  " , date , month , year ) ; dayOfWeek = 1.25 * YY + fm ( date , month , year ) + date - 2 * ( century % 4 ) ; dayOfWeek = dayOfWeek % 7 ; switch ( dayOfWeek ) { case 0 : printf ( " weekday = Saturday " ) ; break ; case 1 : printf ( " weekday = Sunday " ) ; break ; case 2 : printf ( " weekday = Monday " ) ; break ; case 3 : printf ( " weekday = Tuesday " ) ; break ; case 4 : printf ( " weekday = Wednesday " ) ; break ; case 5 : printf ( " weekday = Thursday " ) ; break ; case 6 : printf ( " weekday = Friday " ) ; break ; default : printf ( " Incorrect data " ) ; } return 0 ; } int main ( ) { int date , month , year ; printf ( " \n Enter the year " ) ; scanf ( " %d " , & year ) ; printf ( " \n Enter the month " ) ; scanf ( " %d " , & month ) ; printf ( " \n Enter the date " ) ; scanf ( " %d " , & date ) ; day_of_week ( date , month , year ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " \n Enter value for num1 & num2 : " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " \n After swapping value of a : %d " , a ) ; printf ( " \n After swapping value of b : %d " , b ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int first , second , sum , num , counter = 0 ; printf ( " Enter the term : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter First Number : " ) ; scanf ( " %d " , & first ) ; printf ( " \n Enter Second Number : " ) ; scanf ( " %d " , & second ) ; printf ( " \n Fibonacci Series : %d %d " , first , second ) ; while ( counter < num ) { sum = first + second ; printf ( " %d " , sum ) ; first = second ; second = sum ; counter + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " % d " , i ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d " , i ) ; i + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " %d " , i ) ; i + + ; } while ( i < = 10 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , i , count = 0 ; char str1 [ 10 ] , str2 [ 10 ] ; printf ( " nEnter a number : " ) ; scanf ( " %d " , & num ) ; sprintf ( str1 , " %d " , num ) ; strcpy ( str2 , str1 ) ; strrev ( str2 ) ; count = strcmp ( str1 , str2 ) ; if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , i , count = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num % i = = 0 ) { count + + ; break ; } } if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , temp , sum = 0 , rem ; printf ( " \n Enter number for checking Armstrong : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( num ! = 0 ) { rem = num % 10 ; sum = sum + ( rem * rem * rem ) ; num = num / 10 ; } if ( temp = = sum ) printf ( " %d is Amstrong Number " , temp ) ; else printf ( " %d is Amstrong Number " , temp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , i = 1 , sum = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; while ( i < num ) { if ( num % i = = 0 ) { sum = sum + i ; } i + + ; } if ( sum = = num ) printf ( " %d is a Perfect Number " , i ) ; else printf ( " %d is Non Perfect Number " , i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; char ch ; for ( i = 0 ; i < 256 ; i + + ) { printf ( " %c " , ch ) ; ch = ch + 1 ; } }
#include <stdio.h> #include <conio.h> #include <stdlib.h> #define size 5 struct stack { int s [ size ] ; int top ; } st ; int stfull ( ) { if ( st.top > = size - 1 ) return 1 ; else return 0 ; } void push ( int item ) { st.top + + ; st.s [ st.top ] = item ; } int stempty ( ) { if ( st.top = = -1 ) return 1 ; else return 0 ; } int pop ( ) { int item ; item = st.s [ st.top ] ; st.top-- ; return ( item ) ; } void display ( ) { int i ; if ( stempty ( ) ) printf ( " \n Stack Is Empty! " ) ; else { for ( i = st.top ; i > = 0 ; i-- ) printf ( " \n  %d " , st.s [ i ] ) ; } } int main ( ) { int item , choice ; char ans ; st.top = -1 ; printf ( " \n \tImplementation Of Stack " ) ; do { printf ( " \n Main Menu " ) ; printf ( " \n 1.Push \n 2.Pop \n 3.Display \n 4.exit " ) ; printf ( " \n Enter Your Choice " ) ; scanf ( " %d " , & choice ) ; switch ( choice ) { case 1 : printf ( " \n Enter The item to be pushed " ) ; scanf ( " %d " , & item ) ; if ( stfull ( ) ) printf ( " \n Stack is Full! " ) ; else push ( item ) ; break ; case 2 : if ( stempty ( ) ) printf ( " \n Empty stack!Underflow !! " ) ; else { item = pop ( ) ; printf ( " \n The popped element is %d " , item ) ; } break ; case 3 : display ( ) ; break ; case 4 : exit ( 0 ) ; } printf ( " \n Do You want To Continue? " ) ; ans = getche ( ) ; } while ( ans = = 'Y' || ans = = 'y' ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #define MAX 30 void main ( ) { int size , i , arr [ MAX ] ; int * ptr ; clrscr ( ) ; ptr = & arr [ 0 ] ; printf ( " \n Enter the size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter %d integers into array : " , size ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = & arr [ size - 1 ] ; printf ( " \n Elements of array in reverse order are : " ) ; for ( i = size - 1 ; i > = 0 ; i-- ) { printf ( " \n Element %d is %d : " , i , * ptr ) ; ptr-- ; } getch ( ) ; }
#include <stdio.h> int main ( ) { int arr [ 20 ] , i , j , k , size ; printf ( " \n Enter array size : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Accept Numbers : " ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & arr [ i ] ) ; printf ( " \n Array with Unique list : " ) ; for ( i = 0 ; i < size ; i + + ) { for ( j = i + 1 ; j < size ; ) { if ( arr [ j ] = = arr [ i ] ) { for ( k = j ; k < size ; k + + ) { arr [ k ] = arr [ k + 1 ] ; } size-- ; } else j + + ; } } for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , arr [ 50 ] , sum , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & arr [ i ] ) ; sum = 0 ; for ( i = 0 ; i < num ; i + + ) sum = sum + arr [ i ] ; for ( i = 0 ; i < num ; i + + ) printf ( " \n a [ %d ] = %d " , i , arr [ i ] ) ; printf ( " \n Sum = %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a [ 30 ] , i , num , smallest ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & a [ i ] ) ; smallest = a [ 0 ] ; for ( i = 0 ; i < num ; i + + ) { if ( a [ i ] < smallest ) { smallest = a [ i ] ; } } printf ( " \n Smallest Element : %d " , smallest ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a [ 30 ] , i , num , largest ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & a [ i ] ) ; largest = a [ 0 ] ; for ( i = 0 ; i < num ; i + + ) { if ( a [ i ] > largest ) { largest = a [ i ] ; } } printf ( " \n Largest Element : %d " , largest ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr [ 30 ] , i , j , num , temp ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } j = i - 1 ; i = 0 ; while ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i + + ; j-- ; } printf ( " \n Result after reversal : " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d \t " , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr1 [ 30 ] , arr2 [ 30 ] , res [ 60 ] ; int i , j , k , n1 , n2 ; printf ( " \n Enter no of elements in 1st array : " ) ; scanf ( " %d " , & n1 ) ; for ( i = 0 ; i < n1 ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } printf ( " \n Enter no of elements in 2nd array : " ) ; scanf ( " %d " , & n2 ) ; for ( i = 0 ; i < n2 ; i + + ) { scanf ( " %d " , & arr2 [ i ] ) ; } i = 0 ; j = 0 ; k = 0 ; while ( i < n1 & & j < n2 ) { if ( arr1 [ i ] < = arr2 [ j ] ) { res [ k ] = arr1 [ i ] ; i + + ; k + + ; } else { res [ k ] = arr2 [ j ] ; k + + ; j + + ; } } while ( i < n1 ) { res [ k ] = arr1 [ i ] ; i + + ; k + + ; } while ( j < n2 ) { res [ k ] = arr2 [ j ] ; k + + ; j + + ; } printf ( " \n Merged array is : " ) ; for ( i = 0 ; i < n1 + n2 ; i + + ) printf ( " %d " , res [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a [ 30 ] , ele , num , i ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } printf ( " \n Enter the elements to be searched : " ) ; scanf ( " %d " , & ele ) ; i = 0 ; while ( i < num & & ele ! = a [ i ] ) { i + + ; } if ( i < num ) { printf ( " Number found at the location = %d " , i + 1 ) ; } else { printf ( " Number not found " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr1 [ 30 ] , arr2 [ 30 ] , i , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { arr2 [ i ] = arr1 [ i ] ; } printf ( " The copied array is : " ) ; for ( i = 0 ; i < num ; i + + ) printf ( " \n arr2 [ %d ] = %d " , i , arr2 [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr [ 30 ] , element , num , i , location ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Enter the element to be inserted : " ) ; scanf ( " %d " , & element ) ; printf ( " \n Enter the location " ) ; scanf ( " %d " , & location ) ; for ( i = num ; i > = location ; i-- ) { arr [ i ] = arr [ i - 1 ] ; } num + + ; arr [ location - 1 ] = element ; for ( i = 0 ; i < num ; i + + ) printf ( " n %d " , arr [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr [ 30 ] , num , i , loc ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter %d elements : " , num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n  location of the element to be deleted : " ) ; scanf ( " %d " , & loc ) ; while ( loc < num ) { arr [ loc - 1 ] = arr [ loc ] ; loc + + ; } num-- ; for ( i = 0 ; i < num ; i + + ) printf ( " \n  %d " , arr [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , arr [ 50 ] , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { printf ( " \n arr [ %d ] = %d " , i , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , arr [ 50 ] , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { printf ( " \n arr [ %d ] = %d " , i , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int size = 3 ; int matrix [ 3 ] [ 3 ] ; int row , column = 0 ; int sum , sum1 , sum2 ; int flag = 0 ; printf ( " \n Enter matrix : " ) ; for ( row = 0 ; row < size ; row + + ) { for ( column = 0 ; column < size ; column + + ) scanf ( " %d " , & matrix [ row ] [ column ] ) ; } printf ( " Entered matrix is : \n  " ) ; for ( row = 0 ; row < size ; row + + ) { printf ( " \n  " ) ; for ( column = 0 ; column < size ; column + + ) { printf ( " \t %d " , matrix [ row ] [ column ] ) ; } } sum = 0 ; for ( row = 0 ; row < size ; row + + ) { for ( column = 0 ; column < size ; column + + ) { if ( row = = column ) sum = sum + matrix [ row ] [ column ] ; } } for ( row = 0 ; row < size ; row + + ) { sum1 = 0 ; for ( column = 0 ; column < size ; column + + ) { sum1 = sum1 + matrix [ row ] [ column ] ; } if ( sum = = sum1 ) flag = 1 ; else { flag = 0 ; break ; } } for ( row = 0 ; row < size ; row + + ) { sum2 = 0 ; for ( column = 0 ; column < size ; column + + ) { sum2 = sum2 + matrix [ column ] [ row ] ; } if ( sum = = sum2 ) flag = 1 ; else { flag = 0 ; break ; } } if ( flag = = 1 ) printf ( " \n Magic square " ) ; else printf ( " \n No Magic square " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #define MAX_ROWS 3 #define MAX_COLS 4 void print_square ( int [ ] ) ; void main ( void ) { int row ; int num [ MAX_ROWS ] [ MAX_COLS ] = { { 0 , 1 , 2 , 3 } , { 4 , 5 , 6 , 7 } , { 8 , 9 , 10 , 11 } } ; for ( row = 0 ; row < MAX_ROWS ; row + + ) print_square ( num [ row ] ) ; } void print_square ( int x [ ] ) { int col ; for ( col = 0 ; col < MAX_COLS ; col + + ) printf ( " %d\t " , x [ col ] * x [ col ] ) ; printf ( " \n  " ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int arr [ 10 ] [ 10 ] , size , i , j , temp ; printf ( " \n Enter the size of matrix : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter the values a : " ) ; for ( i = 0 ; i < size ; i + + ) { for ( j = 0 ; j < size ; j + + ) { scanf ( " %d " , & arr [ i ] [ j ] ) ; } } printf ( " \n Given square matrix is " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < size ; j + + ) { printf ( " %d\t " , arr [ i ] [ j ] ) ; } } for ( i = 1 ; i < size ; i + + ) { for ( j = 0 ; j < i ; j + + ) { temp = arr [ i ] [ j ] ; arr [ i ] [ j ] = arr [ j ] [ i ] ; arr [ j ] [ i ] = temp ; } } printf ( " \n Transpose matrix is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < size ; j + + ) { printf ( " %d\t " , arr [ i ] [ j ] ) ; } } getch ( ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , j , a [ 10 ] [ 10 ] , sum , rows , columns ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { printf ( " \n Enter the Element a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } sum = 0 ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { if ( i > j ) { sum = sum + a [ i ] [ j ] ; } } printf ( " \n Sum of Lower Triangle Elements : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , j , a [ 10 ] [ 10 ] , sum , rows , columns ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { printf ( " \n Enter the Element a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } sum = 0 ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { if ( i < j ) { sum = sum + a [ i ] [ j ] ; } } printf ( " \n Sum of Upper Triangle Elements : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , mat [ 10 ] [ 10 ] , row , col ; int sum = 0 ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & row ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & col ) ; for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { printf ( " \n Enter the Element a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { if ( i = = j ) sum = sum + mat [ i ] [ j ] ; } } printf ( " \n Sum of Diagonal Elements in Matrix : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , mat [ 10 ] [ 10 ] , row , col ; int sum = 0 ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & row ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & col ) ; for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { printf ( " \n Enter the Element mat [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { sum = sum + mat [ i ] [ j ] ; } } printf ( " \n Sum of All Elements in Matrix : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , a [ 3 ] [ 3 ] ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { printf ( " \n Enter the a [ %d ] [ %d ] = " , i , j ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { printf ( " %d\t " , a [ i ] [ j ] ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> void reduction ( float a [ ] [ 6 ] , int size , int pivot , int col ) { int i , j ; float factor ; factor = a [ pivot ] [ col ] ; for ( i = 0 ; i < 2 * size ; i + + ) { a [ pivot ] [ i ] / = factor ; } for ( i = 0 ; i < size ; i + + ) { if ( i ! = pivot ) { factor = a [ i ] [ col ] ; for ( j = 0 ; j < 2 * size ; j + + ) { a [ i ] [ j ] = a [ i ] [ j ] - a [ pivot ] [ j ] * factor ; } } } } void main ( ) { float matrix [ 3 ] [ 6 ] ; int i , j ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 6 ; j + + ) { if ( j = = i + 3 ) { matrix [ i ] [ j ] = 1 ; } else { matrix [ i ] [ j ] = 0 ; } } } printf ( " \n Enter a 3 X 3 Matrix : " ) ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { scanf ( " %f " , & matrix [ i ] [ j ] ) ; } } for ( i = 0 ; i < 3 ; i + + ) { reduction ( matrix , 3 , i , i ) ; } printf ( " \n Invers Matrix " ) ; for ( i = 0 ; i < 3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 3 ; j + + ) { printf ( " %8.3f " , matrix [ i ] [ j + 3 ] ) ; } } }
#include <stdio.h> #include <math.h> char a [ 10 ] [ 10 ] ; int n ; void printmatrix ( ) { int i , j ; printf ( " \n  " ) ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) printf ( " %c\t " , a [ i ] [ j ] ) ; printf ( " \n \n  " ) ; } } int getmarkedcol ( int row ) { int i ; for ( i = 0 ; i < n ; i + + ) if ( a [ row ] [ i ] = = 'Q' ) { return ( i ) ; break ; } } int feasible ( int row , int col ) { int i , tcol ; for ( i = 0 ; i < n ; i + + ) { tcol = getmarkedcol ( i ) ; if ( col = = tcol || abs ( row - i ) = = abs ( col - tcol ) ) return 0 ; } return 1 ; } void nqueen ( int row ) { int i , j ; if ( row < n ) { for ( i = 0 ; i < n ; i + + ) { if ( feasible ( row , i ) ) { a [ row ] [ i ] = 'Q' ; nqueen ( row + 1 ) ; a [ row ] [ i ] = '.' ; } } } else { printf ( " \n The solution is : - " ) ; printmatrix ( ) ; } } int main ( ) { int i , j ; printf ( " \n Enter the no. of queens : - " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) for ( j = 0 ; j < n ; j + + ) a [ i ] [ j ] = '.' ; nqueen ( 0 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( int args , char * argv [ ] ) { int i = 0 ; for ( i = 0 ; i < args ; i + + ) printf ( " \n  %s " , argv [ i ] ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { unsigned int mask ; clrscr ( ) ; printf ( " Memory Required : %d butes " , sizeof ( mask ) ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void binary ( unsigned int ) ; void main ( ) { unsigned int num ; printf ( " Enter Decimal Number : " ) ; scanf ( " %u " , & num ) ; binary ( num ) ; getch ( ) ; } void binary ( unsigned int num ) { unsigned int mask = 32768 ; printf ( " Binary Eqivalent : " ) ; while ( mask > 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } }
#include <stdio.h> #include <conio.h> #include <math.h> void bin_dec ( long int num ) { long int rem , sum = 0 , power = 0 ; while ( num> 0 ) { rem = num %10 ; num = num / 10 ; sum = sum + rem * pow ( 2 , power ) ; power + + ; } printf ( " Decimal number : %d " , sum ) ; } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the Binary number ( 0 and 1 ) : " ) ; scanf ( " %ld " , & num ) ; bin_dec ( num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void dec_hex ( long int num ) { long int rem [ 50 ] , i = 0 , length = 0 ; while ( num> 0 ) { rem [ i ] = num %16 ; num = num / 16 ; i + + ; length + + ; } printf ( " Hexadecimal number : " ) ; for ( i = length-1 ; i> = 0 ; i-- ) { switch ( rem [ i ] ) { case 10 : printf ( " A " ) ; break ; case 11 : printf ( " B " ) ; break ; case 12 : printf ( " C " ) ; break ; case 13 : printf ( " D " ) ; break ; case 14 : printf ( " E " ) ; break ; case 15 : printf ( " F " ) ; break ; default : printf ( " %ld " , rem [ i ] ) ; } } } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & num ) ; dec_hex ( num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void dec_oct ( long int num ) { long int rem [ 50 ] , i = 0 , length = 0 ; while ( num> 0 ) { rem [ i ] = num %8 ; num = num / 8 ; i + + ; length + + ; } printf ( " nOctal number : " ) ; for ( i = length-1 ; i> = 0 ; i-- ) printf ( " %ld " , rem [ i ] ) ; } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & num ) ; dec_oct ( num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void dec_bin ( long int num ) { long int rem [ 50 ] , i = 0 , length = 0 ; while ( num> 0 ) { rem [ i ] = num %2 ; num = num / 2 ; i + + ; length + + ; } printf ( " nBinary number : " ) ; for ( i = length-1 ; i> = 0 ; i-- ) printf ( " %ld " , rem [ i ] ) ; } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & num ) ; dec_bin ( num ) ; getch ( ) ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i , sum = 0 ; if ( argc ! = 3 ) { printf ( " You have forgot to type numbers. " ) ; exit ( 1 ) ; } printf ( " The sum is : " ) ; for ( i = 1 ; i < argc ; i + + ) sum = sum + atoi ( argv [ i ] ) ; printf ( " %d " , sum ) ; }
#include <stdio.h> int main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f + %f = %f\n  " , a , b , a + b ) ; printf ( " %f - %f = %f\n  " , a , b , a - b ) ; printf ( " %f * %f = %f\n  " , a , b , a * b ) ; printf ( " %f / %f = %f\n  " , a , b , a / b ) ; return ( 0 ) ; }
#include <stdio.h> main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f % % %f = %fn " , a , b , a % b ) ; }
#include <stdio.h> int main ( ) { int a = 5 ; int b = 5 ; printf ( " %d + %d = %d \n  " , a , b , a + b ) ; printf ( " %d - %d = %d \n  " , a , b , a - b ) ; printf ( " %d * %d = %d \n  " , a , b , a * b ) ; printf ( " %d / %d = %d \n  " , a , b , a / b ) ; printf ( " %d % % %d = %d\n  " , a , b , a % b ) ; return ( 0 ) ; }
#include <stdio.h> #include <process.h> void main ( ) { FILE * fp1 , * fp2 ; char a ; clrscr ( ) ; fp1 = fopen ( " test.txt " , " r " ) ; if ( fp1 = = NULL ) { puts ( " cannot open this file " ) ; exit ( 1 ) ; } fp2 = fopen ( " test1.txt " , " w " ) ; if ( fp2 = = NULL ) { puts ( " Not able to open this file " ) ; fclose ( fp1 ) ; exit ( 1 ) ; } do { a = fgetc ( fp1 ) ; fputc ( a , fp2 ) ; } while ( a ! = EOF ) ; fcloseall ( ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; int num ; long length ; printf ( " Enter the value of num : " ) ; scanf ( " %d " , & num ) ; fp = fopen ( " test.txt " , " r " ) ; if ( fp = = NULL ) { puts ( " cannot open this file " ) ; exit ( 1 ) ; } fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fseek ( fp , ( length - num ) , SEEK_SET ) ; do { ch = fgetc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> #include <process.h> void main ( ) { FILE * fp1 , * fp2 ; char a ; clrscr ( ) ; fp1 = fopen ( " test.txt " , " r " ) ; if ( fp1 = = NULL ) { puts ( " cannot open this file " ) ; exit ( 1 ) ; } fp2 = fopen ( " test1.txt " , " w " ) ; if ( fp2 = = NULL ) { puts ( " Not able to open this file " ) ; fclose ( fp1 ) ; exit ( 1 ) ; } do { a = fgetc ( fp1 ) ; a = toupper ( a ) ; fputc ( a , fp2 ) ; } while ( a ! = EOF ) ; fcloseall ( ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { FILE * fp1 , * fp2 ; int ch1 , ch2 ; char fname1 [ 40 ] , fname2 [ 40 ] ; printf ( " Enter name of first file : " ) ; gets ( fname1 ) ; printf ( " Enter name of second file : " ) ; gets ( fname2 ) ; fp1 = fopen ( fname1 , " r " ) ; fp2 = fopen ( fname2 , " r " ) ; if ( fp1 = = NULL ) { printf ( " Cannot open %s for reading " , fname1 ) ; exit ( 1 ) ; } else if ( fp2 = = NULL ) { printf ( " Cannot open %s for reading " , fname2 ) ; exit ( 1 ) ; } else { ch1 = getc ( fp1 ) ; ch2 = getc ( fp2 ) ; while ( ( ch1 ! = EOF ) & & ( ch2 ! = EOF ) & & ( ch1 = = ch2 ) ) { ch1 = getc ( fp1 ) ; ch2 = getc ( fp2 ) ; } if ( ch1 = = ch2 ) printf ( " Files are identical n " ) ; else if ( ch1 ! = ch2 ) printf ( " Files are Not identical n " ) ; fclose ( fp1 ) ; fclose ( fp2 ) ; } return ( 0 ) ; }
#include <stdio.h> struct Student { int roll ; char name [ 12 ] ; int percent ; } s1 = { 10 , " SMJC " , 80 } ; int main ( ) { FILE * fp ; struct Student s2 ; fp = fopen ( " ip.txt " , " w " ) ; fwrite ( & s1 , sizeof ( s1 ) , 1 , fp ) ; fclose ( fp ) ; fp = fopen ( " ip.txt " , " r " ) ; fread ( & s2 , sizeof ( s2 ) , 1 , fp ) ; fclose ( fp ) ; printf ( " \n Roll : %d " , s2.roll ) ; printf ( " \n Name : %s " , s2.name ) ; printf ( " \n Percent : %d " , s2.percent ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { FILE * fp1 , * fp2 ; char ch ; clrscr ( ) ; fp1 = fopen ( " Sample.txt " , " r " ) ; fp2 = fopen ( " Output.txt " , " w " ) ; while ( 1 ) { ch = fgetc ( fp1 ) ; if ( ch = = EOF ) break ; else putc ( ch , fp2 ) ; } printf ( " File copied Successfully! " ) ; fclose ( fp1 ) ; fclose ( fp2 ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { float c [ 10 ] , num , Cp = 0 ; int i ; clrscr ( ) ; printf ( " Enter the number of Capacitors : " ) ; scanf ( " %f " , & num ) ; printf ( " \n Enter Value of Each Capacitor : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n C %d : " , i + 1 ) ; scanf ( " %f " , & c [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Cp = Cp + c [ i ] ; } printf ( " \n Equivalent Parallel Capacitance : %f mFarad " , Cp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float c [ 10 ] , num , Cs = 0 ; int i ; clrscr ( ) ; printf ( " Enter the number of Capacitors : " ) ; scanf ( " %f " , & num ) ; printf ( " \n Enter Value of Each Capacitor : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n C %d : " , i + 1 ) ; scanf ( " %f " , & c [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Cs = Cs + ( 1.0 / c [ i ] ) ; } Cs = 1.0 / Cs ; printf ( " \n Equivalent Series Capacitance : %f mFarad " , Cs ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int r [ 10 ] , num , i , Rs = 0 ; printf ( " Enter the number of Resistances : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter Value of Each Resistance : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n  R %d : " , i + 1 ) ; scanf ( " %d " , & r [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Rs = Rs + r [ i ] ; } printf ( " \n Equivalent Series Resistance : %d Kohm " , Rs ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int r [ 10 ] , num , i , Rs = 0 ; printf ( " Enter the number of Resistances : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter Value of Each Resistance : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n R %d : " , i + 1 ) ; scanf ( " %d " , & r [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Rs = Rs + r [ i ] ; } printf ( " \n Equivalent Series Resistance : %d Kohm " , Rs ) ; return ( 0 ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x1 = 200 , y1 = 200 ; int x2 = 300 , y2 = 300 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; line ( x1 , y1 , x2 , y2 ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 200 , 150 , 200 ) ; arc ( 200 , 200 , 0 , 180 , 50 ) ; arc ( 260 , 200 , 0 , 180 , 50 ) ; arc ( 230 , 200 , 180 , 360 , 20 ) ; arc ( 320 , 200 , 0 , 180 , 50 ) ; arc ( 290 , 200 , 180 , 360 , 20 ) ; arc ( 380 , 200 , 0 , 180 , 50 ) ; arc ( 350 , 200 , 180 , 360 , 20 ) ; line ( 430 , 200 , 470 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 90 , 100 , 100 , 100 ) ; line ( 100 , 100 , 110 , 120 ) ; line ( 110 , 120 , 120 , 100 ) ; line ( 120 , 100 , 130 , 120 ) ; line ( 130 , 120 , 140 , 100 ) ; line ( 140 , 100 , 150 , 120 ) ; line ( 150 , 120 , 160 , 100 ) ; line ( 160 , 100 , 170 , 100 ) ; outtextxy ( 100 , 130 , " Resisitor " ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 100 , 175 , 110 , 200 ) ; line ( 100 , 175 , 125 , 175 ) ; outtextxy ( 200 , 150 , " PNP Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 140 , 190 , 150 , 210 ) ; line ( 130 , 210 , 150 , 210 ) ; outtextxy ( 100 , 250 , " NPN Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; outtextxy ( 110 , 60 , " C " ) ; line ( 80 , 100 , 100 , 100 ) ; line ( 100 , 80 , 100 , 120 ) ; line ( 120 , 80 , 120 , 120 ) ; line ( 120 , 100 , 140 , 100 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 300 , 100 , 200 , 200 ) ; line ( 300 , 100 , 400 , 200 ) ; line ( 200 , 200 , 400 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x = 200 , y = 200 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; outtextxy ( x , y , " Hello World " ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; circle ( 300 , 300 , 50 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 50 , 125 , 100 , 125 ) ; line ( 50 , 175 , 100 , 175 ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 100 , 100 , 150 , 150 ) ; line ( 150 , 150 , 100 , 200 ) ; line ( 125 , 100 , 125 , 125 ) ; line ( 125 , 175 , 125 , 200 ) ; line ( 150 , 150 , 200 , 150 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; int main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) { printf ( " Mouse support not available.n " ) ; } else { showmouseptr ( ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; union REGS i , o ; int main ( ) { int flag ; flag = initmouse ( ) ; if ( flag = = 0 ) { printf ( " Mouse support not available. " ) ; } else { printf ( " Mouse support available. " ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; }
#include <stdio.h> void swap ( int * num1 , int * num2 ) { int temp ; temp = * num1 ; * num1 = * num2 ; * num2 = temp ; } int main ( ) { int num1 , num2 ; printf ( " \n Enter the first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " \n Enter the Second number : " ) ; scanf ( " %d " , & num2 ) ; swap ( & num1 , & num2 ) ; printf ( " \n First number : %d " , num1 ) ; printf ( " \n Second number : %d " , num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <ctype.h> #include <conio.h> #define low 1 #define high 0 void main ( ) { int nob , now , nod , nov , nos , pos = high ; char * str ; nob = now = nod = nov = nos = 0 ; clrscr ( ) ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * str ! = '\0' ) { if ( * str = = ' ' ) { pos = high ; + + nob ; } else if ( pos = = high ) { pos = low ; + + now ; } if ( isdigit ( * str ) ) + + nod ; if ( isalpha ( * str ) ) switch ( * str ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : + + nov ; break ; } if ( !isdigit ( * str ) & & !isalpha ( * str ) ) + + nos ; str + + ; } printf ( " \n Number of words %d " , now ) ; printf ( " \n Number of spaces %d " , nob ) ; printf ( " \n Number of vowels %d " , nov ) ; printf ( " \n Number of digits %d " , nod ) ; printf ( " \n Number of special characters %d " , nos ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> int string_ln ( char * ) ; void main ( ) { char str [ 20 ] ; int length ; clrscr ( ) ; printf ( " \n Enter any string : " ) ; gets ( str ) ; length = string_ln ( str ) ; printf ( " The length of the given string %s is : %d " , str , length ) ; getch ( ) ; } int string_ln ( char * p ) { int count = 0 ; while ( * p ! = '\0' ) { count + + ; p + + ; } return count ; }
#include <stdio.h> int main ( ) { int * ptr1 , * ptr2 ; int num ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , ptr1 , ptr2 ) ; num = * ptr1 + * ptr2 ; printf ( " Sum = %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch = ' * ' ; int i , j , no_of_spaces = 4 , spaceCount ; for ( i = 1 ; i < = 5 ; i + + ) { for ( spaceCount = no_of_spaces ; spaceCount > = 1 ; spaceCount-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %2c " , ch ) ; } printf ( " \n  " ) ; no_of_spaces-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k = 1 ; int range ; printf ( " Enter the range : " ) ; scanf ( " %d " , & range ) ; printf ( " \n FLOYD'S TRIANGLE : \n  " ) ; for ( i = 1 ; i < = range ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , num , j , xpos = 30 , ypos = 10 ; clrscr ( ) ; printf ( " Enter n ( between 2 & 9 ) : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { gotoxy ( xpos , ypos ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %d " , i ) ; xpos = xpos - 1 ; ypos + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , num = 2 ; for ( i = 0 ; i < 4 ; i + + ) { num = 2 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , num ) ; num = num + 2 ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int prime ( int num ) ; int main ( ) { int i , j ; int num = 2 ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < = i ; j + + ) { while ( !prime ( num ) ) { num + + ; } printf ( " %d\t " , num + + ) ; } } return ( 0 ) ; } int prime ( int num ) { int i , flag ; for ( i = 2 ; i < num ; i + + ) { if ( num % i ! = 0 ) flag = 1 ; else { flag = 0 ; break ; } } if ( flag = = 1 || num = = 2 ) return ( 1 ) ; else return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 10 ; j + + ) { if ( i = = 0 || i = = 9 || j = = 0 || j = = 9 ) printf ( " ▲ " ) ; else printf ( " - " ) ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; printf ( " Enter the number of Digits : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < = num ; i + + ) { for ( j = 0 ; j < i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char symbol = 'A' ; int num ; int count = 1 ; printf ( " Enter the number of Letters in Pyramid " ) ; printf ( " ( less than 26 ) : \n  " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { for ( j = 0 ; j < = ( count / 2 ) ; j + + ) { printf ( " %c " , symbol + + ) ; } symbol = symbol - 2 ; for ( j = 0 ; j < ( count / 2 ) ; j + + ) { printf ( " %c " , symbol-- ) ; } count = count + 2 ; symbol = 'A' ; printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , k ; int blank = 0 ; int lines = 6 ; char symbol = 'A' ; int temp ; int diff [ 7 ] = { 0 , 1 , 3 , 5 , 7 , 9 , 11 } ; k = 0 ; for ( i = lines ; i > = 0 ; i-- ) { printf ( " \n  " ) ; symbol = 'A' ; for ( j = i ; j > = 0 ; j-- ) { printf ( " %c\t " , symbol + + ) ; } blank = diff [ k + + ] ; for ( j = 0 ; j < blank ; j + + ) { printf ( " \t " ) ; } symbol = 'F' - ( blank / 2 ) ; if ( blank = = 0 ) { temp = i - 1 ; } else { temp = i ; } for ( j = 0 ; j < = temp ; j + + ) { printf ( " %c\t " , symbol-- ) ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < = 6 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , i * j ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) { printf ( " %d\t " , count ) ; count + + ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = ' * ' ; for ( i = 4 ; i > = 0 ; i-- ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) printf ( " %c " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 1 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , count % 2 ) ; count + + ; } if ( i % 2 = = 0 ) count = 1 ; else count = 0 ; } return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int size ; int fibonacci ( int prev_number , int number ) ; void main ( ) { static int prev_number = 0 , number = 1 ; clrscr ( ) ; printf ( " Enter the Size of Series ( < 20 ) : " ) ; scanf ( " %d " , & size ) ; printf ( " 1 " ) ; fibonacci ( prev_number , number ) ; getch ( ) ; } int fibonacci ( int prev_number , int number ) { static int i = 1 ; int next_num ; if ( i = = size ) return ( 0 ) ; else { next_num = prev_number + number ; prev_number = number ; number = next_num ; printf ( " %d " , next_num ) ; i + + ; fibonacci ( prev_number , number ) ; } return ( 0 ) ; }
#include <stdio.h> int calculateSum ( int ) ; int main ( ) { int i , num ; int result ; printf ( " Input a number : " ) ; scanf ( " %d " , & num ) ; result = calculateSum ( num ) ; printf ( " \n Sum of Number From 1 to %d : %d " , num , result ) ; return ( 0 ) ; } int calculateSum ( int num ) { int res ; if ( num = = 1 ) { return ( 1 ) ; } else { res = num + calculateSum ( num - 1 ) ; } return ( res ) ; }
#include <stdio.h> int calsum ( int num ) { int rem , sum ; if ( num ! = 0 ) { rem = num % 10 ; sum = sum + rem ; calsum ( num / 10 ) ; } return sum ; } int main ( ) { int num , val ; printf ( " \n Enter a number : " ) ; scanf ( " %d " , & num ) ; val = calsum ( num ) ; printf ( " \n Sum of the digits of %d is : %d " , num , val ) ; return 0 ; }
#include <stdio.h> void TOH ( int num , char x , char y , char z ) ; int main ( ) { int num ; printf ( " \n Enter number of plates : " ) ; scanf ( " %d " , & num ) ; TOH ( num - 1 , 'A' , 'B' , 'C' ) ; return ( 0 ) ; } void TOH ( int num , char x , char y , char z ) { if ( num > 0 ) { TOH ( num - 1 , x , z , y ) ; printf ( " \n  %c -> %c " , x , y ) ; TOH ( num - 1 , z , y , x ) ; } }
#include <stdio.h> struct stud { int roll ; char name [ 10 ] ; int marks ; } ; int main ( ) { int size ; struct stud s ; size = sizeof ( s ) ; printf ( " nSize of Structure : %d " , size ) ; return ( 0 ) ; }
#include <stdio.h> typedef struct XYZ { int far * fptr ; double dvar ; unsigned char ch ; } xyz ; int main ( ) { xyz * ptr = ( XYZ * ) 1000 ; printf ( " Size of Pointer to structure : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int far * ptr ; printf ( " Size of Integer Far Pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float a = 3.14 , * fptr ; fptr = & a ; printf ( " Size of Float Pointer : %d " , sizeof ( fptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char a = 'a' , * cptr ; cptr = & a ; printf ( " \n Size of Char Pointer : %d " , sizeof ( cptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a = 10 , * ptr ; ptr = & a ; printf ( " Size of int pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> #define M 50 struct state { char name [ 50 ] ; long int population ; float literacyRate ; float income ; } st [ M ] ; int main ( ) { int i , n , ml , mi , maximumLiteracyRate , maximumIncome ; float rate ; ml = mi = -1 ; maximumLiteracyRate = maximumIncome = 0 ; printf ( " Enter how many states : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " \n Enter state %d details : " , i ) ; printf ( " \n Enter state name : " ) ; scanf ( " %s " , & st [ i ] .name ) ; printf ( " \n Enter total population : " ) ; scanf ( " %ld " , & st [ i ] .population ) ; printf ( " \n Enter total literary rate : " ) ; scanf ( " %f " , & rate ) ; st [ i ] .literacyRate = rate ; printf ( " \n Enter total income : " ) ; scanf ( " %f " , & st [ i ] .income ) ; } for ( i = 0 ; i < n ; i + + ) { if ( st [ i ] .literacyRate > = maximumLiteracyRate ) { maximumLiteracyRate = st [ i ] .literacyRate ; ml + + ; } if ( st [ i ] .income > maximumIncome ) { maximumIncome = st [ i ] .income ; mi + + ; } } printf ( " \n State with highest literary rate : %s " , st [ ml ] .name ) ; printf ( " \n State with highest income : %s " , st [ mi ] .name ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * str [ 5 ] , * temp ; int i , j , n ; printf ( " \n How many names do you want to have? " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " \n Enter the name %d : " , i ) ; flushall ( ) ; gets ( str [ i ] ) ; } for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n - 1 ; j + + ) { if ( strcmp ( str [ j ] , str [ j + 1 ] ) > 0 ) { strcpy ( temp , str [ j ] ) ; strcpy ( str [ j ] , str [ j + 1 ] ) ; strcpy ( str [ j + 1 ] , temp ) ; } } } flushall ( ) ; printf ( " \n Sorted List : " ) ; for ( i = 0 ; i < n ; i + + ) puts ( str [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void bubble_sort ( int [ ] , int ) ; void main ( ) { int arr [ 30 ] , num , i ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter array elements : " ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & arr [ i ] ) ; bubble_sort ( arr , num ) ; getch ( ) ; } void bubble_sort ( int iarr [ ] , int num ) { int i , j , k , temp ; printf ( " \n Unsorted Data : " ) ; for ( k = 0 ; k < num ; k + + ) { printf ( " %5d " , iarr [ k ] ) ; } for ( i = 1 ; i < num ; i + + ) { for ( j = 0 ; j < num - 1 ; j + + ) { if ( iarr [ j ] > iarr [ j + 1 ] ) { temp = iarr [ j ] ; iarr [ j ] = iarr [ j + 1 ] ; iarr [ j + 1 ] = temp ; } } printf ( " \n After pass %d : " , i ) ; for ( k = 0 ; k < num ; k + + ) { printf ( " %5d " , iarr [ k ] ) ; } } }
#include <stdio.h> struct cricket { char pname [ 20 ] ; char tname [ 20 ] ; int avg ; } player [ 10 ] , temp ; void main ( ) { int i , j , n ; clrscr ( ) ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " \n Enter Player Name : " ) ; scanf ( " %s " , player [ i ] .pname ) ; printf ( " \n Enter Team Name : " ) ; scanf ( " %s " , player [ i ] .tname ) ; printf ( " \n Enter Average : " ) ; scanf ( " %d " , & player [ i ] .avg ) ; printf ( " \n  " ) ; } n = 10 ; for ( i = 1 ; i < n ; i + + ) for ( j = 0 ; j < n - i ; j + + ) { if ( strcmp ( player [ j ] .tname , player [ j + 1 ] .tname ) > 0 ) { temp = player [ j ] ; player [ j ] = player [ j + 1 ] ; player [ j + 1 ] = temp ; } } for ( i = 0 ; i < n ; i + + ) { printf ( " \n  %s\t %s\t %d " , player [ i ] .pname , player [ i ] .tname , player [ i ] .avg ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { int i , j , num , temp , arr [ 20 ] ; printf ( " Enter total elements : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter %d elements : " , num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 1 ; i < num ; i + + ) { temp = arr [ i ] ; j = i - 1 ; while ( ( temp < arr [ j ] ) & & ( j > = 0 ) ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = temp ; } printf ( " After Sorting : " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 5 ] [ 20 ] , t [ 20 ] ; int i , j ; clrscr ( ) ; printf ( " \n Enter any five strings : " ) ; for ( i = 0 ; i < 5 ; i + + ) scanf ( " %s " , s [ i ] ) ; for ( i = 1 ; i < 5 ; i + + ) { for ( j = 1 ; j < 5 ; j + + ) { if ( strcmp ( s [ j - 1 ] , s [ j ] ) > 0 ) { strcpy ( t , s [ j - 1 ] ) ; strcpy ( s [ j - 1 ] , s [ j ] ) ; strcpy ( s [ j ] , t ) ; } } } printf ( " \n Strings in order are : " ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " \n  %s " , s [ i ] ) ; getch ( ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; char marks [ 3 ] ; printf ( " Please Enter Marks : " ) ; scanf ( " %s " , marks ) ; num = atoi ( marks ) ; printf ( " \n Marks : %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " String before to strupr : %sn " , string ) ; strupr ( string ) ; printf ( " String after strupr : %sn " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strupr ( string ) ; printf ( " String after strupr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " \n String before to strlwr : %s " , string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; strcpy ( str2 , str1 ) ; printf ( " \n Copied String : %s " , str2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; char str3 [ 100 ] ; int len ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; printf ( " \n Enter the String 2 : " ) ; gets ( str2 ) ; strcpy ( str3 , str1 ) ; strcat ( str3 , str2 ) ; printf ( " \n Concated String : %s " , str3 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] ; int len ; printf ( " \n Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " \n Length of Given String : %d " , len ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { char msg [ ] = " Welcome to Programming World " ; char str [ 10 ] ; int i = 0 , j = 0 ; clrscr ( ) ; while ( msg [ i ] ! = '\0' ) { if ( msg [ i ] ! = ' ' ) { str [ j ] = msg [ i ] ; j + + ; } else { str [ j ] = '\0' ; printf ( " %s " , strrev ( str ) ) ; printf ( " " ) ; j = 0 ; } i + + ; } str [ j ] = '\0' ; printf ( " %s " , strrev ( str ) ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> char * encode ( char * str ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { str [ i ] = str [ i ] - 30 ; i + + ; } return ( str ) ; } void main ( ) { char * str ; printf ( " \n Enter the String to be Encode : " ) ; gets ( str ) ; str = encode ( str ) ; printf ( " \n Encoded String : %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void del ( char str [ ] , char ch ) ; void main ( ) { char str [ 10 ] ; char ch ; printf ( " \n Enter the string : " ) ; gets ( str ) ; printf ( " \n Enter character which you want to delete : " ) ; scanf ( " %ch " , & ch ) ; del ( str , ch ) ; getch ( ) ; } void del ( char str [ ] , char ch ) { int i , j = 0 ; int size ; char ch1 ; char str1 [ 10 ] ; size = strlen ( str ) ; for ( i = 0 ; i < size ; i + + ) { if ( str [ i ] ! = ch ) { ch1 = str [ i ] ; str1 [ j ] = ch1 ; j + + ; } } str1 [ j ] = '\0' ; printf ( " \n corrected string is : %s " , str1 ) ; }
#include <stdio.h> #include <string.h> void concat ( char [ ] , char [ ] ) ; int main ( ) { char s1 [ 50 ] , s2 [ 30 ] ; printf ( " \n Enter String 1 : " ) ; gets ( s1 ) ; printf ( " \n Enter String 2 : " ) ; gets ( s2 ) ; concat ( s1 , s2 ) ; printf ( " nConcated string is : %s " , s1 ) ; return ( 0 ) ; } void concat ( char s1 [ ] , char s2 [ ] ) { int i , j ; i = strlen ( s1 ) ; for ( j = 0 ; s2 [ j ] ! = '\0' ; i + + , j + + ) { s1 [ i ] = s2 [ j ] ; } s1 [ i ] = '\0' ; }
#include <stdio.h> #include <string.h> int search ( char [ ] , char [ ] ) ; int main ( ) { int loc ; char source [ ] = " maharashtra " ; char target [ ] = " sht " ; loc = search ( source , target ) ; if ( loc = = -1 ) printf ( " \n Not found " ) ; else printf ( " \n Found at location %d " , loc + 1 ) ; return ( 0 ) ; } int search ( char src [ ] , char str [ ] ) { int i , j , firstOcc ; i = 0 , j = 0 ; while ( src [ i ] ! = '\0' ) { while ( src [ i ] ! = str [ 0 ] & & src [ i ] ! = '\0' ) i + + ; if ( src [ i ] = = '\0' ) return ( -1 ) ; firstOcc = i ; while ( src [ i ] = = str [ j ] & & src [ i ] ! = '\0' & & str [ j ] ! = '\0' ) { i + + ; j + + ; } if ( str [ j ] = = '\0' ) return ( firstOcc ) ; if ( src [ i ] = = '\0' ) return ( -1 ) ; i = firstOcc + 1 ; j = 0 ; } }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] , temp ; int i , j = 0 ; printf ( " \n Enter the string : " ) ; gets ( str ) ; i = 0 ; j = strlen ( str ) - 1 ; while ( i < j ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; i + + ; j-- ; } printf ( " \n Reverse string is : %s " , str ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char str1 [ 30 ] , str2 [ 30 ] ; int i ; printf ( " \n Enter two strings : " ) ; gets ( str1 ) ; gets ( str2 ) ; i = 0 ; while ( str1 [ i ] = = str2 [ i ] & & str1 [ i ] ! = '\0' ) i + + ; if ( str1 [ i ] > str2 [ i ] ) printf ( " str1 > str2 " ) ; else if ( str1 [ i ] < str2 [ i ] ) printf ( " str1 < str2 " ) ; else printf ( " str1 = str2 " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; int i ; printf ( " \n Enter the string : " ) ; gets ( s1 ) ; i = 0 ; while ( s1 [ i ] ! = '\0' ) { s2 [ i ] = s1 [ i ] ; i + + ; } s2 [ i ] = '\0' ; printf ( " \n Copied String is %s " , s2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " Character is uppercase Letters " ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " Character is Not Lowercase Letters " ) ; } else { printf ( " Non alphabet character " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 97 & & ch < = 122 ) printf ( " Character is Lowercase Letters " ) ; else printf ( " Character is Not Lowercase Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 65 & & ch < = 90 ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int upper = 0 , lower = 0 ; char ch [ 80 ] ; int i ; printf ( " \n Enter The String : " ) ; gets ( ch ) ; i = 0 ; while ( ch [ i ] ! = '' ) { if ( ch [ i ] > = 'A' & & ch [ i ] < = 'Z' ) upper + + ; if ( ch [ i ] > = 'a' & & ch [ i ] < = 'z' ) lower + + ; i + + ; } printf ( " \n Uppercase Letters : %d " , upper ) ; printf ( " \n Lowercase Letters : %d " , lower ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char str [ 20 ] , ch ; int count = 0 , i ; printf ( " \n Enter a string : " ) ; scanf ( " %s " , & str ) ; printf ( " \n Enter the character to be searched : " ) ; scanf ( " %c " , & ch ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ch ) count + + ; } if ( count = = 0 ) printf ( " \n Character ' %c'is not present " , ch ) ; else printf ( " \n Occurence of character ' %c' : %d " , ch , count ) ; return ( 0 ) ; }
#include <stdio.h> int FindLength ( char str [ ] ) ; int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = FindLength ( str ) ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; } int FindLength ( char str [ ] ) { int len = 0 ; while ( str [ len ] ! = '\0' ) len + + ; return ( len ) ; }
#include <stdio.h> int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = 0 ; while ( str [ length ] ! = '\0' ) length + + ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { struct student { char name [ 30 ] ; char sex ; int rollno ; float percentage ; } ; union details { struct student st ; } ; union details set ; printf ( " Enter details : " ) ; printf ( " \n Enter name : " ) ; scanf ( " %s " , set.st.name ) ; printf ( " \n Enter roll no : " ) ; scanf ( " %d " , & set.st.rollno ) ; flushall ( ) ; printf ( " \n Enter sex : " ) ; scanf ( " %c " , & set.st.sex ) ; printf ( " \n Enter percentage : " ) ; scanf ( " %f " , & set.st.percentage ) ; printf ( " \n The student details are : \n  " ) ; printf ( " \n ame : %s " , set.st.name ) ; printf ( " \n Rollno : %d " , set.st.rollno ) ; printf ( " \n Sex : %c " , set.st.sex ) ; printf ( " \n Percentage : %f " , set.st.percentage ) ; getch ( ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , digits ; char ch [ 10 ] ; printf ( " \n Enter the Number : " ) ; scanf ( " %d " , & num ) ; sprintf ( ch , " %d " , num ) ; digits = strlen ( ch ) ; printf ( " \n Number of Digits : %d " , digits ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { char password [ 25 ] , ch ; int i ; clrscr ( ) ; puts ( " Enter password : " ) ; while ( 1 ) { if ( i < 0 ) { i = 0 ; } ch = getch ( ) ; if ( ch = = 13 ) break ; if ( ch = = 8 ) { putch ( 'b' ) ; putch ( NULL ) ; putch ( 'b' ) ; i-- ; continue ; } password [ i + + ] = ch ; ch = ' * ' ; putch ( ch ) ; } password [ i ] = '\0' ; printf ( " \n Password Entered : %s " , password ) ; getch ( ) ; }
#include <stdio.h> void main ( ) { int a = 3 , b = 3 , c ; asm { mov ax , a mov bx , a add ax , bx mov c , ax } printf ( " %d " , c ) ; }
#include <stdio.h> int main ( ) { char para [ 100 ] ; printf ( " Enter Paragraph : " ) ; scanf ( " % [ ^\t ] s " , para ) ; printf ( " Accepted Paragraph : %s " , para ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { while ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { switch ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { if ( printf ( " " ) ) { } else if ( printf ( " Hello " ) ) { } else { } }
#include <stdio.h> void main ( ) { while ( !printf ( " Hello " ) ) { } }
#include <stdio.h> #define PRINT printf ( " Hello " ) void main ( ) { if ( PRINT ) { } }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " %d " , printf ( " abcdefghijklmnopqrstuvwxyz " ) ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int num = 1342 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , num ) ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " nEnte the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed + Original Num = %d " , num1 + num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " \n Ente the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed Number : " ) ; printf ( " %d " , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int number = 12354 ; int sum = 0 ; for ( ; number > 0 ; sum + = number % 10 , number / = 10 ) ; printf ( " \n Sum of the Digits : %d " , sum ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " \n Enter First Number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " \n Enter Second Number : " ) ; scanf ( " %d " , & num2 ) ; num1 = num1 ^ num2 ; num2 = num1 ^ num2 ; num1 = num1 ^ num2 ; printf ( " \n  Numbers after Exchange : " ) ; printf ( " \n  Num1 = %d and Num2 = %d " , num1 , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int add ( int , int ) ; int main ( ) { int num1 , num2 ; printf ( " \n Enter the two Numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n Addition of two num is : %d " , add ( num1 , num2 ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { if ( !num1 ) return num2 ; else return add ( ( num1 & num2 ) < < 1 , num1 ^ num2 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2 > 0 ) { num1 + + ; num2-- ; } printf ( " %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2-- ) { num1 + + ; } printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int sum ( int , int ) ; int main ( ) { int a , b ; printf ( " Enter the two Numbers : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Addition of two num. is : %d " , add ( a , b ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { int i ; for ( i = 0 ; i < num2 ; i + + ) num1 + + ; return num1 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 ; num1 = num1 - ( -num2 ) ; printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> #include " myhead.h " void main ( ) { int num1 = 10 , num2 = 10 , num3 ; num3 = add ( num1 , num2 ) ; printf ( " Addition of Two numbers : %d " , num3 ) ; }
#include <stdio.h> #define begin main int begin ( ) { printf ( " Hello " ) ; return ( 0 ) ; }
#include <stdio.h> #define begin m##a##i##n void begin ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #define begin ( m , a , i , n ) m##a##i##n #define start begin ( m , a , i , n ) void start ( ) { printf ( " Hello " ) ; }
#include <dos.h> void main ( ) { char * path = " BIN " ; _AH = 0x39 ; _DX = ( unsigned int ) path ; __int__ ( 0x21 ) ; }
#include <dos.h> void main ( ) { char * message = " Pritesh Taral$ " ; _AH = 9 ; _DX = ( int ) message ; geninterrupt ( 0x21 ) ; }
#include <stdio.h> void main ( ) { printf ( " 1 " ) ; printf ( " 2 " ) ; printf ( " 3 " ) ; printf ( " 4 " ) ; printf ( " 5 " ) ; printf ( " 6 " ) ; printf ( " 7 " ) ; printf ( " 8 " ) ; printf ( " 9 " ) ; printf ( " 10 " ) ; }
#include <stdio.h> void printNumber ( int value ) { int i ; printf ( " %d\n  " , value ) ; i = value + 1 ; if ( i > 10 ) return ; printNumber ( i ) ; } void main ( ) { printNumber ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; Start : i = i + 1 ; printf ( " %d " , i ) ; if ( i < = 10 ) goto Start ; }
#include <stdio.h> void main ( ) { static int i = 1 ; if ( i < = 10 ) { printf ( " %d " , i + + ) ; main ( ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { FILE * fp ; char str [ 80 ] , fname [ 50 ] ; printf ( " Enter the file name : " ) ; scanf ( " %s " , fname ) ; if ( ( fp = fopen ( fname , " r " ) ) = = NULL ) { printf ( " cannot open file " ) ; exit ( 1 ) ; } while ( !feof ( fp ) ) { fgets ( str , 79 , fp ) ; printf ( " %s " , str ) ; } fclose ( fp ) ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { FILE * fp ; char str [ 80 ] , fname [ 50 ] ; printf ( " Enter the file name : " ) ; scanf ( " %s " , fname ) ; if ( ( fp = fopen ( fname , " r " ) ) = = NULL ) { printf ( " cannot open file " ) ; exit ( 1 ) ; } while ( !feof ( fp ) ) { fgets ( str , 79 , fp ) ; printf ( " %s " , str ) ; } fclose ( fp ) ; }
#include <stdio.h> void main ( ) { float a = 15.0 ; float b = 4.0 ; printf ( " %f + %f = %fn " , a , b , a + b ) ; printf ( " %f - %f = %fn " , a , b , a - b ) ; printf ( " %f * %f = %fn " , a , b , a * b ) ; printf ( " %f / %f = %fn " , a , b , a / b ) ; }
#include <stdio.h> void main ( ) { float a = 15.0 ; float b = 4.0 ; printf ( " %f + %f = %fn " , a , b , a + b ) ; printf ( " %f - %f = %fn " , a , b , a - b ) ; printf ( " %f * %f = %fn " , a , b , a * b ) ; printf ( " %f / %f = %fn " , a , b , a / b ) ; }
#include <stdio.h> main ( ) { int a = 25 ; int b = 5 ; printf ( " %d + %d = %d\n  " , a , b , a + b ) ; printf ( " %d - %d = %d\n  " , a , b , a - b ) ; printf ( " %d * %d = %d\n  " , a , b , a * b ) ; printf ( " %d / %d = %d\n  " , a , b , a / b ) ; printf ( " %d % % %d = %d\n  " , a , b , a % b ) ; }
#include <stdio.h> main ( ) { int a = 25 ; int b = 5 ; printf ( " %d + %d = %d\n  " , a , b , a + b ) ; printf ( " %d - %d = %d\n  " , a , b , a - b ) ; printf ( " %d * %d = %d\n  " , a , b , a * b ) ; printf ( " %d / %d = %d\n  " , a , b , a / b ) ; printf ( " %d % % %d = %d\n  " , a , b , a % b ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int i , count = 0 ; unsigned int num ; printf ( " \n Enter the number : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Decimal number in binary format : " ) ; printBinary ( num ) ; while ( num ! = 0 ) { if ( num & 1 = = 1 ) { break ; } else { count + + ; num = num > > 1 ; } } printf ( " \n Trailing Zeros : %d " , count ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int i , count = 0 ; unsigned int num ; printf ( " \n Enter the number : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Decimal number in binary format : " ) ; printBinary ( num ) ; while ( num ! = 0 ) { if ( num & 1 = = 1 ) { break ; } else { count + + ; num = num > > 1 ; } } printf ( " \n Trailing Zeros : %d " , count ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int intNum ; printf ( " \n Enter a integer number : " ) ; scanf ( " %d " , & intNum ) ; printf ( " \n Integer number in binary format : " ) ; printBinary ( intNum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int intNum ; printf ( " \n Enter a integer number : " ) ; scanf ( " %d " , & intNum ) ; printf ( " \n Integer number in binary format : " ) ; printBinary ( intNum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int intNum , shiftedNumber , n ; printf ( " \Right Shift Operation : " ) ; printf ( " \n Enter a integer number : " ) ; scanf ( " %d " , & intNum ) ; printf ( " \n Places by which you want to right shift : " ) ; scanf ( " %d " , & n ) ; shiftedNumber = intNum > > n ; printf ( " \n Original Number : " ) ; printBinary ( intNum ) ; printf ( " \n Number after Right Shifting : " ) ; printBinary ( shiftedNumber ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int intNum , shiftedNumber , n ; printf ( " \Right Shift Operation : " ) ; printf ( " \n Enter a integer number : " ) ; scanf ( " %d " , & intNum ) ; printf ( " \n Places by which you want to right shift : " ) ; scanf ( " %d " , & n ) ; shiftedNumber = intNum > > n ; printf ( " \n Original Number : " ) ; printBinary ( intNum ) ; printf ( " \n Number after Right Shifting : " ) ; printBinary ( shiftedNumber ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int intNum , y , shiftedNumber , n ; printf ( " \n Left Shift Operation : " ) ; printf ( " \n Enter a integer number : " ) ; scanf ( " %d " , & intNum ) ; printf ( " \n Places by which you want to left shift : " ) ; scanf ( " %d " , & n ) ; shiftedNumber = intNum < < n ; printf ( " \n Original Number : " ) ; printBinary ( intNum ) ; printf ( " \n Number after Left Shifting : " ) ; printBinary ( shiftedNumber ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void printBinary ( int num ) { int mask = 0x4000 ; if ( ( num & 0x8000 ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; while ( mask ! = 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } } void main ( ) { int intNum , y , shiftedNumber , n ; printf ( " \n Left Shift Operation : " ) ; printf ( " \n Enter a integer number : " ) ; scanf ( " %d " , & intNum ) ; printf ( " \n Places by which you want to left shift : " ) ; scanf ( " %d " , & n ) ; shiftedNumber = intNum < < n ; printf ( " \n Original Number : " ) ; printBinary ( intNum ) ; printf ( " \n Number after Left Shifting : " ) ; printBinary ( shiftedNumber ) ; getch ( ) ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> #include <conio.h> void main ( ) { double y [ 20 ] [ 20 ] , x [ 20 ] ; int i , j , k , num ; printf ( " \n Backwad differences generation for Interpolation " ) ; printf ( " \n \n Enter the value of x and y = f ( x ) " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n Enter value of x %d : " , i ) ; scanf ( " %lf " , & x [ i ] ) ; printf ( " \n Enter value of y %d : " , i ) ; scanf ( " %lf " , & y [ i ] [ 0 ] ) ; } k = 0 ; for ( j = 1 ; j < num ; j + + ) { k + + ; for ( i = num - 1 ; i > = k ; i-- ) { y [ i ] [ j ] = y [ i ] [ j - 1 ] - y [ i - 1 ] [ j - 1 ] ; } } k = num ; printf ( " \n Backward Difference Table\n  " ) ; printf ( " \n \tx\ty\tDy\tD2y\tD3y\tD4y\tD5y\tD6y\n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n x %d = %4.2lf " , i , x [ i ] ) ; for ( j = 0 ; j < i + 1 ; j + + ) { printf ( " \t %4.2lf " , y [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #include <math.h> #include <stdlib.h> #include <conio.h> void main ( ) { double y [ 20 ] [ 20 ] , x [ 20 ] ; int i , j , k , num ; printf ( " \n Backwad differences generation for Interpolation " ) ; printf ( " \n \n Enter the value of x and y = f ( x ) " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n Enter value of x %d : " , i ) ; scanf ( " %lf " , & x [ i ] ) ; printf ( " \n Enter value of y %d : " , i ) ; scanf ( " %lf " , & y [ i ] [ 0 ] ) ; } k = 0 ; for ( j = 1 ; j < num ; j + + ) { k + + ; for ( i = num - 1 ; i > = k ; i-- ) { y [ i ] [ j ] = y [ i ] [ j - 1 ] - y [ i - 1 ] [ j - 1 ] ; } } k = num ; printf ( " \n Backward Difference Table\n  " ) ; printf ( " \n \tx\ty\tDy\tD2y\tD3y\tD4y\tD5y\tD6y\n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n x %d = %4.2lf " , i , x [ i ] ) ; for ( j = 0 ; j < i + 1 ; j + + ) { printf ( " \t %4.2lf " , y [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { for ( col = 1 ; col < = number ; col + + ) { if ( row = = 1 || row = = number ) { printf ( " 1\t " ) ; } else if ( col = = 1 || col = = number ) { printf ( " 1\t " ) ; } else { printf ( " 0\t " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { for ( col = 1 ; col < = number ; col + + ) { if ( row = = 1 || row = = number ) { printf ( " 1\t " ) ; } else if ( col = = 1 || col = = number ) { printf ( " 1\t " ) ; } else { printf ( " 0\t " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { for ( col = 1 ; col < = number ; col + + ) { if ( row = = 1 || row = = number ) { printf ( " 0\t " ) ; } else if ( col = = 1 || col = = number ) { printf ( " 0\t " ) ; } else { printf ( " 1\t " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { for ( col = 1 ; col < = number ; col + + ) { if ( row = = 1 || row = = number ) { printf ( " 0\t " ) ; } else if ( col = = 1 || col = = number ) { printf ( " 0\t " ) ; } else { printf ( " 1\t " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = number ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum-- ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = number ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum-- ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = 1 ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; row < = number ; row + + ) { displayNum = 1 ; for ( col = 1 ; col < = number ; col + + ) { printf ( " %d\t " , displayNum + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; displayNum = number ; for ( row = 1 ; row < = number ; row + + , displayNum-- ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , displayNum ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; int displayNum ; printf ( " \n Enter Number of Rows to be display : \n  " ) ; scanf ( " %d " , & number ) ; displayNum = number ; for ( row = 1 ; row < = number ; row + + , displayNum-- ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , displayNum ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , row = 1 , i ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; row < = num ; row + + ) { for ( i = 1 ; i < = row ; i + + ) { printf ( " @ " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , row = 1 , i ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; row < = num ; row + + ) { for ( i = 1 ; i < = row ; i + + ) { printf ( " @ " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , r = 1 , i , space ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( ; num > = 1 ; num-- , r + + ) { for ( space = r ; space > 1 ; space-- ) { printf ( " \t " ) ; } for ( i = 1 ; i < = num ; i + + ) { printf ( " @\t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , r = 1 , i , space ; printf ( " Enter number of rows : \n  " ) ; scanf ( " %d " , & num ) ; for ( ; num > = 1 ; num-- , r + + ) { for ( space = r ; space > 1 ; space-- ) { printf ( " \t " ) ; } for ( i = 1 ; i < = num ; i + + ) { printf ( " @\t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #define size 10 int main ( ) { int a [ 3 ] = { 11 , 22 , 33 } ; printf ( " \n  a [ 0 ] , value = %d : address = %u " , a [ 0 ] , & a [ 0 ] ) ; printf ( " \n  a [ 1 ] , value = %d : address = %u " , a [ 1 ] , & a [ 1 ] ) ; printf ( " \n  a [ 2 ] , value = %d : address = %u " , a [ 2 ] , & a [ 2 ] ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #define size 10 int main ( ) { int a [ 3 ] = { 11 , 22 , 33 } ; printf ( " \n  a [ 0 ] , value = %d : address = %u " , a [ 0 ] , & a [ 0 ] ) ; printf ( " \n  a [ 1 ] , value = %d : address = %u " , a [ 1 ] , & a [ 1 ] ) ; printf ( " \n  a [ 2 ] , value = %d : address = %u " , a [ 2 ] , & a [ 2 ] ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #define size 10 int binsearch ( int [ ] , int , int , int ) ; int main ( ) { int num , i , key , position ; int low , high , list [ size ] ; printf ( " \n Enter the total number of elements " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the elements of list : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & list [ i ] ) ; } low = 0 ; high = num - 1 ; printf ( " \n Enter element to be searched : " ) ; scanf ( " %d " , & key ) ; position = binsearch ( list , key , low , high ) ; if ( position ! = -1 ) { printf ( " \n Number present at %d " , ( position + 1 ) ) ; } else printf ( " \n  The number is not present in the list " ) ; return ( 0 ) ; } int binsearch ( int a [ ] , int x , int low , int high ) { int mid ; if ( low > high ) return -1 ; mid = ( low + high ) / 2 ; if ( x = = a [ mid ] ) { return ( mid ) ; } else if ( x < a [ mid ] ) { binsearch ( a , x , low , mid - 1 ) ; } else { binsearch ( a , x , mid + 1 , high ) ; } }
#include <stdio.h> #include <stdlib.h> #define size 10 int binsearch ( int [ ] , int , int , int ) ; int main ( ) { int num , i , key , position ; int low , high , list [ size ] ; printf ( " \n Enter the total number of elements " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the elements of list : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & list [ i ] ) ; } low = 0 ; high = num - 1 ; printf ( " \n Enter element to be searched : " ) ; scanf ( " %d " , & key ) ; position = binsearch ( list , key , low , high ) ; if ( position ! = -1 ) { printf ( " \n Number present at %d " , ( position + 1 ) ) ; } else printf ( " \n  The number is not present in the list " ) ; return ( 0 ) ; } int binsearch ( int a [ ] , int x , int low , int high ) { int mid ; if ( low > high ) return -1 ; mid = ( low + high ) / 2 ; if ( x = = a [ mid ] ) { return ( mid ) ; } else if ( x < a [ mid ] ) { binsearch ( a , x , low , mid - 1 ) ; } else { binsearch ( a , x , mid + 1 , high ) ; } }
#include <stdio.h> #include <math.h> int main ( ) { int side1 , side2 , side3 ; side1 = 5 ; side2 = 4 ; side3 = 3 ; if ( ( side1 + side2 > side3 & & side1 + side3 > side2 & & side2 + side3 > side1 ) & & ( side1 > 0 & & side2 > 0 & & side3 > 0 ) ) { if ( side1 = = side2 & & side2 = = side3 ) { printf ( " Equilateral Triangle " ) ; } else if ( side1 = = side2 || side2 = = side3 || side1 = = side3 ) { printf ( " Isosceles Triangle " ) ; } else { printf ( " Scalene Triangle " ) ; } } else { printf ( " Triangle formation not possible " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int side1 , side2 , side3 ; side1 = 5 ; side2 = 4 ; side3 = 3 ; if ( ( side1 + side2 > side3 & & side1 + side3 > side2 & & side2 + side3 > side1 ) & & ( side1 > 0 & & side2 > 0 & & side3 > 0 ) ) { if ( side1 = = side2 & & side2 = = side3 ) { printf ( " Equilateral Triangle " ) ; } else if ( side1 = = side2 || side2 = = side3 || side1 = = side3 ) { printf ( " Isosceles Triangle " ) ; } else { printf ( " Scalene Triangle " ) ; } } else { printf ( " Triangle formation not possible " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " C\tF " ) ; printf ( " \n ------------ " ) ; celsius = lower ; while ( celsius < = upper ) { fahrenheit = ( 9.0 / 5.0 ) * celsius + 32.0 ; printf ( " \n  %3.0f %6.1f " , celsius , fahrenheit ) ; celsius = celsius + step ; } return 0 ; }
#include <stdio.h> int main ( ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " C\tF " ) ; printf ( " \n ------------ " ) ; celsius = lower ; while ( celsius < = upper ) { fahrenheit = ( 9.0 / 5.0 ) * celsius + 32.0 ; printf ( " \n  %3.0f %6.1f " , celsius , fahrenheit ) ; celsius = celsius + step ; } return 0 ; }
#include <stdio.h> int main ( void ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " F\tC " ) ; printf ( " \n ------------ " ) ; fahrenheit = lower ; while ( fahrenheit < = upper ) { celsius = ( 5.0 / 9.0 ) * ( fahrenheit - 32.0 ) ; printf ( " \n  %3.0f %6.1f " , fahrenheit , celsius ) ; fahrenheit = fahrenheit + step ; } return 0 ; }
#include <stdio.h> int main ( void ) { float fahrenheit , celsius ; int lower , upper , step ; lower = 0 ; upper = 200 ; step = 20 ; printf ( " F\tC " ) ; printf ( " \n ------------ " ) ; fahrenheit = lower ; while ( fahrenheit < = upper ) { celsius = ( 5.0 / 9.0 ) * ( fahrenheit - 32.0 ) ; printf ( " \n  %3.0f %6.1f " , fahrenheit , celsius ) ; fahrenheit = fahrenheit + step ; } return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { printf ( " \n Hello , world\a " ) ; printf ( " \n Hello , world\b " ) ; printf ( " \n Hello , world\c " ) ; printf ( " \n Hello , world\d " ) ; printf ( " \n Hello , world\e " ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { printf ( " \n Hello , world\a " ) ; printf ( " \n Hello , world\b " ) ; printf ( " \n Hello , world\c " ) ; printf ( " \n Hello , world\d " ) ; printf ( " \n Hello , world\e " ) ; return 0 ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) }
#include <stdio.h> main ( ) { printf ( " hello , world\n  " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) ; }
#include <stdio.h> main ( ) { printf ( " hello , world " ) }
#include <stdio.h> main ( ) { printf ( " hello , world\n  " ) ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; number > = row ; row + + ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , row ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , row , col ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & number ) ; for ( row = 1 ; number > = row ; row + + ) { for ( col = 1 ; col < = number ; col + + ) printf ( " %d\t " , row ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " \n Enter value for num1 & num2 : " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " \n After swapping value of a : %d " , a ) ; printf ( " \n After swapping value of b : %d " , b ) ; return ( 0 ) ; }
#include <graphics.h> #include <conio.h> #include <dos.h> void showmouseptr ( ) ; void hidemouseptr ( ) ; union REGS i , o ; int main ( ) { int count = 1 , gDriver = DETECT , gMode ; initgraph ( & gDriver , & gMode , " C\\ : tc\\bgi " ) ; i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; if ( o.x.ax = = 0 ) { printf ( " ntMouse Support is Unavailable !! " ) ; } else { showmouseptr ( ) ; while ( count < = 10 ) { getch ( ) ; count + + ; if ( count % 2 = = 0 ) hidemouseptr ( ) ; else showmouseptr ( ) ; } } getch ( ) ; return 0 ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void hidemouseptr ( ) { i.x.ax = 2 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> int main ( ) { int num , row , column ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; num > = row ; row + + ) { for ( column = 1 ; column < = num ; column + + ) { printf ( " # " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <process.h> void main ( ) { FILE * fp1 , * fp2 ; char a ; clrscr ( ) ; fp1 = fopen ( " test.txt " , " r " ) ; if ( fp1 = = NULL ) { puts ( " cannot open this file " ) ; exit ( 1 ) ; } fp2 = fopen ( " test1.txt " , " w " ) ; if ( fp2 = = NULL ) { puts ( " Not able to open this file " ) ; fclose ( fp1 ) ; exit ( 1 ) ; } do { a = fgetc ( fp1 ) ; fputc ( a , fp2 ) ; } while ( a ! = EOF ) ; fcloseall ( ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; int num ; long length ; printf ( " Enter the value of num : " ) ; scanf ( " %d " , & num ) ; fp = fopen ( " test.txt " , " r " ) ; if ( fp = = NULL ) { puts ( " cannot open this file " ) ; exit ( 1 ) ; } fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fseek ( fp , ( length - num ) , SEEK_SET ) ; do { ch = fgetc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> #include <process.h> void main ( ) { FILE * fp1 , * fp2 ; char a ; clrscr ( ) ; fp1 = fopen ( " test.txt " , " r " ) ; if ( fp1 = = NULL ) { puts ( " cannot open this file " ) ; exit ( 1 ) ; } fp2 = fopen ( " test1.txt " , " w " ) ; if ( fp2 = = NULL ) { puts ( " Not able to open this file " ) ; fclose ( fp1 ) ; exit ( 1 ) ; } do { a = fgetc ( fp1 ) ; a = toupper ( a ) ; fputc ( a , fp2 ) ; } while ( a ! = EOF ) ; fcloseall ( ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { FILE * fp1 , * fp2 ; int ch1 , ch2 ; char fname1 [ 40 ] , fname2 [ 40 ] ; printf ( " Enter name of first file : " ) ; gets ( fname1 ) ; printf ( " Enter name of second file : " ) ; gets ( fname2 ) ; fp1 = fopen ( fname1 , " r " ) ; fp2 = fopen ( fname2 , " r " ) ; if ( fp1 = = NULL ) { printf ( " Cannot open %s for reading " , fname1 ) ; exit ( 1 ) ; } else if ( fp2 = = NULL ) { printf ( " Cannot open %s for reading " , fname2 ) ; exit ( 1 ) ; } else { ch1 = getc ( fp1 ) ; ch2 = getc ( fp2 ) ; while ( ( ch1 ! = EOF ) & & ( ch2 ! = EOF ) & & ( ch1 = = ch2 ) ) { ch1 = getc ( fp1 ) ; ch2 = getc ( fp2 ) ; } if ( ch1 = = ch2 ) printf ( " Files are identical n " ) ; else if ( ch1 ! = ch2 ) printf ( " Files are Not identical n " ) ; fclose ( fp1 ) ; fclose ( fp2 ) ; } return ( 0 ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { FILE * fp1 , * fp2 ; char ch ; clrscr ( ) ; fp1 = fopen ( " Sample.txt " , " r " ) ; fp2 = fopen ( " Output.txt " , " w " ) ; while ( 1 ) { ch = fgetc ( fp1 ) ; if ( ch = = EOF ) break ; else putc ( ch , fp2 ) ; } printf ( " File copied Successfully! " ) ; fclose ( fp1 ) ; fclose ( fp2 ) ; }
#include <stdio.h> struct Student { int roll ; char name [ 12 ] ; int percent ; } s1 = { 10 , " SMJC " , 80 } ; int main ( ) { FILE * fp ; struct Student s2 ; fp = fopen ( " ip.txt " , " w " ) ; fwrite ( & s1 , sizeof ( s1 ) , 1 , fp ) ; fclose ( fp ) ; fp = fopen ( " ip.txt " , " r " ) ; fread ( & s2 , sizeof ( s2 ) , 1 , fp ) ; fclose ( fp ) ; printf ( " \n Roll : %d " , s2.roll ) ; printf ( " \n Name : %s " , s2.name ) ; printf ( " \n Percent : %d " , s2.percent ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " \n Enter First Number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " \n Enter Second Number : " ) ; scanf ( " %d " , & num2 ) ; num1 = num1 ^ num2 ; num2 = num1 ^ num2 ; num1 = num1 ^ num2 ; printf ( " \n  Numbers after Exchange : " ) ; printf ( " \n  Num1 = %d and Num2 = %d " , num1 , num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int search ( char [ ] , char [ ] ) ; int main ( ) { int loc ; char source [ ] = " maharashtra " ; char target [ ] = " sht " ; loc = search ( source , target ) ; if ( loc = = -1 ) printf ( " \n Not found " ) ; else printf ( " \n Found at location %d " , loc + 1 ) ; return ( 0 ) ; } int search ( char src [ ] , char str [ ] ) { int i , j , firstOcc ; i = 0 , j = 0 ; while ( src [ i ] ! = '\0' ) { while ( src [ i ] ! = str [ 0 ] & & src [ i ] ! = '\0' ) i + + ; if ( src [ i ] = = '\0' ) return ( -1 ) ; firstOcc = i ; while ( src [ i ] = = str [ j ] & & src [ i ] ! = '\0' & & str [ j ] ! = '\0' ) { i + + ; j + + ; } if ( str [ j ] = = '\0' ) return ( firstOcc ) ; if ( src [ i ] = = '\0' ) return ( -1 ) ; i = firstOcc + 1 ; j = 0 ; } }
#include <stdio.h> #include <stdlib.h> #include <ctype.h> #include <conio.h> #define low 1 #define high 0 void main ( ) { int nob , now , nod , nov , nos , pos = high ; char * str ; nob = now = nod = nov = nos = 0 ; clrscr ( ) ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * str ! = '\0' ) { if ( * str = = ' ' ) { pos = high ; + + nob ; } else if ( pos = = high ) { pos = low ; + + now ; } if ( isdigit ( * str ) ) + + nod ; if ( isalpha ( * str ) ) switch ( * str ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : + + nov ; break ; } if ( !isdigit ( * str ) & & !isalpha ( * str ) ) + + nos ; str + + ; } printf ( " \n Number of words %d " , now ) ; printf ( " \n Number of spaces %d " , nob ) ; printf ( " \n Number of vowels %d " , nov ) ; printf ( " \n Number of digits %d " , nod ) ; printf ( " \n Number of special characters %d " , nos ) ; getch ( ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * str [ 5 ] , * temp ; int i , j , n ; printf ( " \n How many names do you want to have? " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " \n Enter the name %d : " , i ) ; flushall ( ) ; gets ( str [ i ] ) ; } for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n - 1 ; j + + ) { if ( strcmp ( str [ j ] , str [ j + 1 ] ) > 0 ) { strcpy ( temp , str [ j ] ) ; strcpy ( str [ j ] , str [ j + 1 ] ) ; strcpy ( str [ j + 1 ] , temp ) ; } } } flushall ( ) ; printf ( " \n Sorted List : " ) ; for ( i = 0 ; i < n ; i + + ) puts ( str [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int string_ln ( char * ) ; void main ( ) { char str [ 20 ] ; int length ; clrscr ( ) ; printf ( " \n Enter any string : " ) ; gets ( str ) ; length = string_ln ( str ) ; printf ( " The length of the given string %s is : %d " , str , length ) ; getch ( ) ; } int string_ln ( char * p ) { int count = 0 ; while ( * p ! = '\0' ) { count + + ; p + + ; } return count ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 5 ] [ 20 ] , t [ 20 ] ; int i , j ; clrscr ( ) ; printf ( " \n Enter any five strings : " ) ; for ( i = 0 ; i < 5 ; i + + ) scanf ( " %s " , s [ i ] ) ; for ( i = 1 ; i < 5 ; i + + ) { for ( j = 1 ; j < 5 ; j + + ) { if ( strcmp ( s [ j - 1 ] , s [ j ] ) > 0 ) { strcpy ( t , s [ j - 1 ] ) ; strcpy ( s [ j - 1 ] , s [ j ] ) ; strcpy ( s [ j ] , t ) ; } } } printf ( " \n Strings in order are : " ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " \n  %s " , s [ i ] ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { char msg [ ] = " Welcome to Programming World " ; char str [ 10 ] ; int i = 0 , j = 0 ; clrscr ( ) ; while ( msg [ i ] ! = '\0' ) { if ( msg [ i ] ! = ' ' ) { str [ j ] = msg [ i ] ; j + + ; } else { str [ j ] = '\0' ; printf ( " %s " , strrev ( str ) ) ; printf ( " " ) ; j = 0 ; } i + + ; } str [ j ] = '\0' ; printf ( " %s " , strrev ( str ) ) ; getch ( ) ; }
#include <stdio.h> #include <string.h> void concat ( char [ ] , char [ ] ) ; int main ( ) { char s1 [ 50 ] , s2 [ 30 ] ; printf ( " \n Enter String 1 : " ) ; gets ( s1 ) ; printf ( " \n Enter String 2 : " ) ; gets ( s2 ) ; concat ( s1 , s2 ) ; printf ( " nConcated string is : %s " , s1 ) ; return ( 0 ) ; } void concat ( char s1 [ ] , char s2 [ ] ) { int i , j ; i = strlen ( s1 ) ; for ( j = 0 ; s2 [ j ] ! = '\0' ; i + + , j + + ) { s1 [ i ] = s2 [ j ] ; } s1 [ i ] = '\0' ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] , temp ; int i , j = 0 ; printf ( " \n Enter the string : " ) ; gets ( str ) ; i = 0 ; j = strlen ( str ) - 1 ; while ( i < j ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; i + + ; j-- ; } printf ( " \n Reverse string is : %s " , str ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char str1 [ 30 ] , str2 [ 30 ] ; int i ; printf ( " \n Enter two strings : " ) ; gets ( str1 ) ; gets ( str2 ) ; i = 0 ; while ( str1 [ i ] = = str2 [ i ] & & str1 [ i ] ! = '\0' ) i + + ; if ( str1 [ i ] > str2 [ i ] ) printf ( " str1 > str2 " ) ; else if ( str1 [ i ] < str2 [ i ] ) printf ( " str1 < str2 " ) ; else printf ( " str1 = str2 " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; int i ; printf ( " \n Enter the string : " ) ; gets ( s1 ) ; i = 0 ; while ( s1 [ i ] ! = '\0' ) { s2 [ i ] = s1 [ i ] ; i + + ; } s2 [ i ] = '\0' ; printf ( " \n Copied String is %s " , s2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; char marks [ 3 ] ; printf ( " Please Enter Marks : " ) ; scanf ( " %s " , marks ) ; num = atoi ( marks ) ; printf ( " \n Marks : %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " Character is uppercase Letters " ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " Character is Not Lowercase Letters " ) ; } else { printf ( " Non alphabet character " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 97 & & ch < = 122 ) printf ( " Character is Lowercase Letters " ) ; else printf ( " Character is Not Lowercase Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " \n Enter The Character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 65 & & ch < = 90 ) printf ( " Character is Upper Case Letters " ) ; else printf ( " Character is Not Upper Case Letters " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int upper = 0 , lower = 0 ; char ch [ 80 ] ; int i ; printf ( " \n Enter The String : " ) ; gets ( ch ) ; i = 0 ; while ( ch [ i ] ! = '' ) { if ( ch [ i ] > = 'A' & & ch [ i ] < = 'Z' ) upper + + ; if ( ch [ i ] > = 'a' & & ch [ i ] < = 'z' ) lower + + ; i + + ; } printf ( " \n Uppercase Letters : %d " , upper ) ; printf ( " \n Lowercase Letters : %d " , lower ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " String before to strupr : %sn " , string ) ; strupr ( string ) ; printf ( " String after strupr : %sn " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strupr ( string ) ; printf ( " String after strupr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * string = " Pritesh Taral " ; printf ( " \n String before to strlwr : %s " , string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; printf ( " Enter String : " ) ; gets ( string ) ; strlwr ( string ) ; printf ( " \n String after strlwr : %s " , string ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; strcpy ( str2 , str1 ) ; printf ( " \n Copied String : %s " , str2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 100 ] ; char str2 [ 100 ] ; char str3 [ 100 ] ; int len ; printf ( " \n Enter the String 1 : " ) ; gets ( str1 ) ; printf ( " \n Enter the String 2 : " ) ; gets ( str2 ) ; strcpy ( str3 , str1 ) ; strcat ( str3 , str2 ) ; printf ( " \n Concated String : %s " , str3 ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char str [ 20 ] , ch ; int count = 0 , i ; printf ( " \n Enter a string : " ) ; scanf ( " %s " , & str ) ; printf ( " \n Enter the character to be searched : " ) ; scanf ( " %c " , & ch ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ch ) count + + ; } if ( count = = 0 ) printf ( " \n Character ' %c'is not present " , ch ) ; else printf ( " \n Occurence of character ' %c' : %d " , ch , count ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 100 ] ; int len ; printf ( " \n Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " \n Length of Given String : %d " , len ) ; return ( 0 ) ; }
#include <stdio.h> int FindLength ( char str [ ] ) ; int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = FindLength ( str ) ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; } int FindLength ( char str [ ] ) { int len = 0 ; while ( str [ len ] ! = '\0' ) len + + ; return ( len ) ; }
#include <stdio.h> int main ( ) { char str [ 100 ] ; int length ; printf ( " \n Enter the String : " ) ; gets ( str ) ; length = 0 ; while ( str [ length ] ! = '\0' ) length + + ; printf ( " \n Length of the String is : %d " , length ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , row , column ; printf ( " \n Enter Number of Rows to be display : " ) ; scanf ( " %d " , & num ) ; for ( row = 1 ; num > = row ; row + + ) { for ( column = 1 ; column < = num ; column + + ) { printf ( " # " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int row , column , first_no = 0 , second_no = 1 , sum = 1 ; for ( row = 1 ; row < = 4 ; row + + ) { for ( column = 1 ; column < = row ; column + + ) { if ( row = = 1 & & column = = 1 ) { printf ( " 0 " ) ; continue ; } printf ( " %d\t " , sum ) ; sum = first_no + second_no ; first_no = second_no ; second_no = sum ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int row , column , first_no = 0 , second_no = 1 , sum = 1 ; for ( row = 1 ; row < = 4 ; row + + ) { for ( column = 1 ; column < = row ; column + + ) { if ( row = = 1 & & column = = 1 ) { printf ( " 0 " ) ; continue ; } printf ( " %d\t " , sum ) ; sum = first_no + second_no ; first_no = second_no ; second_no = sum ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int row , column ; for ( row = 0 ; row < 4 ; row + + ) { for ( column = 0 ; column < = row ; column + + ) { if ( ( ( row + column ) % 2 ) = = 0 ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } printf ( " \t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int row , column ; for ( row = 0 ; row < 4 ; row + + ) { for ( column = 0 ; column < = row ; column + + ) { if ( ( ( row + column ) % 2 ) = = 0 ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } printf ( " \t " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j ; clrscr ( ) ; for ( i = 0 ; i < = 9 ; i + + ) { for ( j = 0 ; j < ( 1 + 2 * i ) ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j ; clrscr ( ) ; for ( i = 0 ; i < = 9 ; i + + ) { for ( j = 0 ; j < ( 1 + 2 * i ) ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { char ch = ' * ' ; int i , j , no_of_spaces = 4 , spaceCount ; for ( i = 1 ; i < = 5 ; i + + ) { for ( spaceCount = no_of_spaces ; spaceCount > = 1 ; spaceCount-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %2c " , ch ) ; } printf ( " \n  " ) ; no_of_spaces-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k = 1 ; int range ; printf ( " Enter the range : " ) ; scanf ( " %d " , & range ) ; printf ( " \n FLOYD'S TRIANGLE : \n  " ) ; for ( i = 1 ; i < = range ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , num , j , xpos = 30 , ypos = 10 ; clrscr ( ) ; printf ( " Enter n ( between 2 & 9 ) : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { gotoxy ( xpos , ypos ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %d " , i ) ; xpos = xpos - 1 ; ypos + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , num = 2 ; for ( i = 0 ; i < 4 ; i + + ) { num = 2 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , num ) ; num = num + 2 ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int prime ( int num ) ; int main ( ) { int i , j ; int num = 2 ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < = i ; j + + ) { while ( !prime ( num ) ) { num + + ; } printf ( " %d\t " , num + + ) ; } } return ( 0 ) ; } int prime ( int num ) { int i , flag ; for ( i = 2 ; i < num ; i + + ) { if ( num % i ! = 0 ) flag = 1 ; else { flag = 0 ; break ; } } if ( flag = = 1 || num = = 2 ) return ( 1 ) ; else return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 10 ; j + + ) { if ( i = = 0 || i = = 9 || j = = 0 || j = = 9 ) printf ( " ▲ " ) ; else printf ( " - " ) ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; printf ( " Enter the number of Digits : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < = num ; i + + ) { for ( j = 0 ; j < i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char symbol = 'A' ; int num ; int count = 1 ; printf ( " Enter the number of Letters in Pyramid " ) ; printf ( " ( less than 26 ) : \n  " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { for ( j = 0 ; j < = ( count / 2 ) ; j + + ) { printf ( " %c " , symbol + + ) ; } symbol = symbol - 2 ; for ( j = 0 ; j < ( count / 2 ) ; j + + ) { printf ( " %c " , symbol-- ) ; } count = count + 2 ; symbol = 'A' ; printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , k ; int blank = 0 ; int lines = 6 ; char symbol = 'A' ; int temp ; int diff [ 7 ] = { 0 , 1 , 3 , 5 , 7 , 9 , 11 } ; k = 0 ; for ( i = lines ; i > = 0 ; i-- ) { printf ( " \n  " ) ; symbol = 'A' ; for ( j = i ; j > = 0 ; j-- ) { printf ( " %c\t " , symbol + + ) ; } blank = diff [ k + + ] ; for ( j = 0 ; j < blank ; j + + ) { printf ( " \t " ) ; } symbol = 'F' - ( blank / 2 ) ; if ( blank = = 0 ) { temp = i - 1 ; } else { temp = i ; } for ( j = 0 ; j < = temp ; j + + ) { printf ( " %c\t " , symbol-- ) ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 0 ; i < = 6 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d\t " , i * j ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) { printf ( " %d\t " , count ) ; count + + ; } } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = ' * ' ; for ( i = 4 ; i > = 0 ; i-- ) { printf ( " \n  " ) ; for ( j = 0 ; j < i ; j + + ) printf ( " %c " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j ; int count = 1 ; for ( i = 1 ; i < = 4 ; i + + ) { printf ( " \n  " ) ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , count % 2 ) ; count + + ; } if ( i % 2 = = 0 ) count = 1 ; else count = 0 ; } return ( 0 ) ; }
#include <iostream.h> int main ( ) { cout < < " Hello , Welcome to C + + " ; return ( 0 ) ; }
#include <iostream.h> int main ( ) { cout < < " Hello , Welcome to C + + " ; return ( 0 ) ; }
#include <stdio.h> int calculateSum ( int ) ; int main ( ) { int i , num ; int result ; printf ( " Input a number : " ) ; scanf ( " %d " , & num ) ; result = calculateSum ( num ) ; printf ( " \n Sum of Number From 1 to %d : %d " , num , result ) ; return ( 0 ) ; } int calculateSum ( int num ) { int res ; if ( num = = 1 ) { return ( 1 ) ; } else { res = num + calculateSum ( num - 1 ) ; } return ( res ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 , res ; printf ( " \n Enter the two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; res = sum ( num1 , num2 ) ; printf ( " nAddition of two number is : " ) ; return ( 0 ) ; } int sum ( int num1 , int num2 ) { int num3 ; num3 = num1 + num2 ; return ( num3 ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 , res ; printf ( " \n Enter the two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; res = sum ( num1 , num2 ) ; printf ( " nAddition of two number is : " ) ; return ( 0 ) ; } int sum ( int num1 , int num2 ) { int num3 ; num3 = num1 + num2 ; return ( num3 ) ; }
#include <stdio.h> void message ( ) ; void main ( ) { message ( ) ; } void message ( ) { printf ( " Hi , How are you ? " ) ; }
#include <stdio.h> void message ( ) ; void main ( ) { message ( ) ; } void message ( ) { printf ( " Hi , How are you ? " ) ; }
#include <stdio.h> int main ( ) { int first , second , sum , num , counter = 0 ; printf ( " Enter the term : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter First Number : " ) ; scanf ( " %d " , & first ) ; printf ( " \n Enter Second Number : " ) ; scanf ( " %d " , & second ) ; printf ( " \n Fibonacci Series : %d %d " , first , second ) ; while ( counter < num ) { sum = first + second ; printf ( " %d " , sum ) ; first = second ; second = sum ; counter + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d " , i ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d " , i ) ; i + + ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " %d " , i ) ; i + + ; } while ( i < = 10 ) ; return ( 0 ) ; }
#include <stdio.h> int calsum ( int num ) { int rem , sum ; if ( num ! = 0 ) { rem = num % 10 ; sum = sum + rem ; calsum ( num / 10 ) ; } return sum ; } int main ( ) { int num , val ; printf ( " \n Enter a number : " ) ; scanf ( " %d " , & num ) ; val = calsum ( num ) ; printf ( " \n Sum of the digits of %d is : %d " , num , val ) ; return 0 ; }
#include <stdio.h> void TOH ( int num , char x , char y , char z ) ; int main ( ) { int num ; printf ( " \n Enter number of plates : " ) ; scanf ( " %d " , & num ) ; TOH ( num - 1 , 'A' , 'B' , 'C' ) ; return ( 0 ) ; } void TOH ( int num , char x , char y , char z ) { if ( num > 0 ) { TOH ( num - 1 , x , z , y ) ; printf ( " \n  %c -> %c " , x , y ) ; TOH ( num - 1 , z , y , x ) ; } }
#include <stdio.h> #include <string.h> int main ( ) { int num , i , count = 0 ; char str1 [ 10 ] , str2 [ 10 ] ; printf ( " nEnter a number : " ) ; scanf ( " %d " , & num ) ; sprintf ( str1 , " %d " , num ) ; strcpy ( str2 , str1 ) ; strrev ( str2 ) ; count = strcmp ( str1 , str2 ) ; if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , i , count = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num % i = = 0 ) { count + + ; break ; } } if ( count = = 0 ) printf ( " %d is a prime number " , num ) ; else printf ( " %d is not a prime number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , temp , sum = 0 , rem ; printf ( " \n Enter number for checking Armstrong : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( num ! = 0 ) { rem = num % 10 ; sum = sum + ( rem * rem * rem ) ; num = num / 10 ; } if ( temp = = sum ) printf ( " %d is Amstrong Number " , temp ) ; else printf ( " %d is Amstrong Number " , temp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , i = 1 , sum = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; while ( i < num ) { if ( num % i = = 0 ) { sum = sum + i ; } i + + ; } if ( sum = = num ) printf ( " %d is a Perfect Number " , i ) ; else printf ( " %d is Non Perfect Number " , i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; char ch ; for ( i = 0 ; i < 256 ; i + + ) { printf ( " %c " , ch ) ; ch = ch + 1 ; } }
#include <stdio.h> #define M 50 struct state { char name [ 50 ] ; long int population ; float literacyRate ; float income ; } st [ M ] ; int main ( ) { int i , n , ml , mi , maximumLiteracyRate , maximumIncome ; float rate ; ml = mi = -1 ; maximumLiteracyRate = maximumIncome = 0 ; printf ( " Enter how many states : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " \n Enter state %d details : " , i ) ; printf ( " \n Enter state name : " ) ; scanf ( " %s " , & st [ i ] .name ) ; printf ( " \n Enter total population : " ) ; scanf ( " %ld " , & st [ i ] .population ) ; printf ( " \n Enter total literary rate : " ) ; scanf ( " %f " , & rate ) ; st [ i ] .literacyRate = rate ; printf ( " \n Enter total income : " ) ; scanf ( " %f " , & st [ i ] .income ) ; } for ( i = 0 ; i < n ; i + + ) { if ( st [ i ] .literacyRate > = maximumLiteracyRate ) { maximumLiteracyRate = st [ i ] .literacyRate ; ml + + ; } if ( st [ i ] .income > maximumIncome ) { maximumIncome = st [ i ] .income ; mi + + ; } } printf ( " \n State with highest literary rate : %s " , st [ ml ] .name ) ; printf ( " \n State with highest income : %s " , st [ mi ] .name ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> #define size 5 struct stack { int s [ size ] ; int top ; } st ; int stfull ( ) { if ( st.top > = size - 1 ) return 1 ; else return 0 ; } void push ( int item ) { st.top + + ; st.s [ st.top ] = item ; } int stempty ( ) { if ( st.top = = -1 ) return 1 ; else return 0 ; } int pop ( ) { int item ; item = st.s [ st.top ] ; st.top-- ; return ( item ) ; } void display ( ) { int i ; if ( stempty ( ) ) printf ( " \n Stack Is Empty! " ) ; else { for ( i = st.top ; i > = 0 ; i-- ) printf ( " \n  %d " , st.s [ i ] ) ; } } int main ( ) { int item , choice ; char ans ; st.top = -1 ; printf ( " \n \tImplementation Of Stack " ) ; do { printf ( " \n Main Menu " ) ; printf ( " \n 1.Push \n 2.Pop \n 3.Display \n 4.exit " ) ; printf ( " \n Enter Your Choice " ) ; scanf ( " %d " , & choice ) ; switch ( choice ) { case 1 : printf ( " \n Enter The item to be pushed " ) ; scanf ( " %d " , & item ) ; if ( stfull ( ) ) printf ( " \n Stack is Full! " ) ; else push ( item ) ; break ; case 2 : if ( stempty ( ) ) printf ( " \n Empty stack!Underflow !! " ) ; else { item = pop ( ) ; printf ( " \n The popped element is %d " , item ) ; } break ; case 3 : display ( ) ; break ; case 4 : exit ( 0 ) ; } printf ( " \n Do You want To Continue? " ) ; ans = getche ( ) ; } while ( ans = = 'Y' || ans = = 'y' ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #define MAX 30 void main ( ) { int size , i , arr [ MAX ] ; int * ptr ; clrscr ( ) ; ptr = & arr [ 0 ] ; printf ( " \n Enter the size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter %d integers into array : " , size ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = & arr [ size - 1 ] ; printf ( " \n Elements of array in reverse order are : " ) ; for ( i = size - 1 ; i > = 0 ; i-- ) { printf ( " \n Element %d is %d : " , i , * ptr ) ; ptr-- ; } getch ( ) ; }
#include <stdio.h> int main ( ) { int arr [ 20 ] , i , j , k , size ; printf ( " \n Enter array size : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Accept Numbers : " ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & arr [ i ] ) ; printf ( " \n Array with Unique list : " ) ; for ( i = 0 ; i < size ; i + + ) { for ( j = i + 1 ; j < size ; ) { if ( arr [ j ] = = arr [ i ] ) { for ( k = j ; k < size ; k + + ) { arr [ k ] = arr [ k + 1 ] ; } size-- ; } else j + + ; } } for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , arr [ 50 ] , sum , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & arr [ i ] ) ; sum = 0 ; for ( i = 0 ; i < num ; i + + ) sum = sum + arr [ i ] ; for ( i = 0 ; i < num ; i + + ) printf ( " \n a [ %d ] = %d " , i , arr [ i ] ) ; printf ( " \n Sum = %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a [ 30 ] , i , num , smallest ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & a [ i ] ) ; smallest = a [ 0 ] ; for ( i = 0 ; i < num ; i + + ) { if ( a [ i ] < smallest ) { smallest = a [ i ] ; } } printf ( " \n Smallest Element : %d " , smallest ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a [ 30 ] , i , num , largest ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & a [ i ] ) ; largest = a [ 0 ] ; for ( i = 0 ; i < num ; i + + ) { if ( a [ i ] > largest ) { largest = a [ i ] ; } } printf ( " \n Largest Element : %d " , largest ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr [ 30 ] , i , j , num , temp ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } j = i - 1 ; i = 0 ; while ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i + + ; j-- ; } printf ( " \n Result after reversal : " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d \t " , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr1 [ 30 ] , arr2 [ 30 ] , res [ 60 ] ; int i , j , k , n1 , n2 ; printf ( " \n Enter no of elements in 1st array : " ) ; scanf ( " %d " , & n1 ) ; for ( i = 0 ; i < n1 ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } printf ( " \n Enter no of elements in 2nd array : " ) ; scanf ( " %d " , & n2 ) ; for ( i = 0 ; i < n2 ; i + + ) { scanf ( " %d " , & arr2 [ i ] ) ; } i = 0 ; j = 0 ; k = 0 ; while ( i < n1 & & j < n2 ) { if ( arr1 [ i ] < = arr2 [ j ] ) { res [ k ] = arr1 [ i ] ; i + + ; k + + ; } else { res [ k ] = arr2 [ j ] ; k + + ; j + + ; } } while ( i < n1 ) { res [ k ] = arr1 [ i ] ; i + + ; k + + ; } while ( j < n2 ) { res [ k ] = arr2 [ j ] ; k + + ; j + + ; } printf ( " \n Merged array is : " ) ; for ( i = 0 ; i < n1 + n2 ; i + + ) printf ( " %d " , res [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a [ 30 ] , ele , num , i ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } printf ( " \n Enter the elements to be searched : " ) ; scanf ( " %d " , & ele ) ; i = 0 ; while ( i < num & & ele ! = a [ i ] ) { i + + ; } if ( i < num ) { printf ( " Number found at the location = %d " , i + 1 ) ; } else { printf ( " Number not found " ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr1 [ 30 ] , arr2 [ 30 ] , i , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { arr2 [ i ] = arr1 [ i ] ; } printf ( " The copied array is : " ) ; for ( i = 0 ; i < num ; i + + ) printf ( " \n arr2 [ %d ] = %d " , i , arr2 [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr [ 30 ] , element , num , i , location ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Enter the element to be inserted : " ) ; scanf ( " %d " , & element ) ; printf ( " \n Enter the location " ) ; scanf ( " %d " , & location ) ; for ( i = num ; i > = location ; i-- ) { arr [ i ] = arr [ i - 1 ] ; } num + + ; arr [ location - 1 ] = element ; for ( i = 0 ; i < num ; i + + ) printf ( " n %d " , arr [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int arr [ 30 ] , num , i , loc ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter %d elements : " , num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n  location of the element to be deleted : " ) ; scanf ( " %d " , & loc ) ; while ( loc < num ) { arr [ loc - 1 ] = arr [ loc ] ; loc + + ; } num-- ; for ( i = 0 ; i < num ; i + + ) printf ( " \n  %d " , arr [ i ] ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , arr [ 50 ] , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { printf ( " \n arr [ %d ] = %d " , i , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , arr [ 50 ] , num ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter the values : " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { printf ( " \n arr [ %d ] = %d " , i , arr [ i ] ) ; } return ( 0 ) ; }
#include <stdio.h> void swap ( int * num1 , int * num2 ) { int temp ; temp = * num1 ; * num1 = * num2 ; * num2 = temp ; } int main ( ) { int num1 , num2 ; printf ( " \n Enter the first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " \n Enter the Second number : " ) ; scanf ( " %d " , & num2 ) ; swap ( & num1 , & num2 ) ; printf ( " \n First number : %d " , num1 ) ; printf ( " \n Second number : %d " , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int * ptr1 , * ptr2 ; int num ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , ptr1 , ptr2 ) ; num = * ptr1 + * ptr2 ; printf ( " Sum = %d " , num ) ; return ( 0 ) ; }
#include <stdio.h> typedef struct XYZ { int far * fptr ; double dvar ; unsigned char ch ; } xyz ; int main ( ) { xyz * ptr = ( XYZ * ) 1000 ; printf ( " Size of Pointer to structure : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int far * ptr ; printf ( " Size of Integer Far Pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float a = 3.14 , * fptr ; fptr = & a ; printf ( " Size of Float Pointer : %d " , sizeof ( fptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char a = 'a' , * cptr ; cptr = & a ; printf ( " \n Size of Char Pointer : %d " , sizeof ( cptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a = 10 , * ptr ; ptr = & a ; printf ( " Size of int pointer : %d " , sizeof ( ptr ) ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int rad ; float PI = 3.14 , area , ci ; printf ( " \n Enter radius of circle : " ) ; scanf ( " %d " , & rad ) ; area = PI * rad * rad ; printf ( " \n Area of circle : %f " , area ) ; ci = 2 * PI * rad ; printf ( " \n Circumference : %f " , ci ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int s1 , s2 , angle ; float area ; printf ( " \n Enter Side1 : " ) ; scanf ( " %d " , & s1 ) ; printf ( " \n Enter Side2 : " ) ; scanf ( " %d " , & s2 ) ; printf ( " \n Enter included angle : " ) ; scanf ( " %d " , & angle ) ; area = ( s1 * s2 * sin ( ( M_PI / 180 ) * angle ) ) / 2 ; printf ( " \n Area of Scalene Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int side ; float area , r_4 ; r_4 = sqrt ( 3 ) / 4 ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = r_4 * side * side ; printf ( " \n Area of Equilateral Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int base , height ; float area ; printf ( " \n Enter the base of Right Angle Triangle : " ) ; scanf ( " %d " , & base ) ; printf ( " \n Enter the height of Right Angle Triangle : " ) ; scanf ( " %d " , & height ) ; area = 0.5 * base * height ; printf ( " \n Area of Right Angle Triangle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float radius , area ; printf ( " \n Enter the radius of Circle : " ) ; scanf ( " %d " , & radius ) ; area = 3.14 * radius * radius ; printf ( " \n Area of Circle : %f " , area ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int length , breadth , area ; printf ( " \n Enter the Length of Rectangle : " ) ; scanf ( " %d " , & length ) ; printf ( " \n Enter the Breadth of Rectangle : " ) ; scanf ( " %d " , & breadth ) ; area = length * breadth ; printf ( " \n Area of Rectangle : %d " , area ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int side , area ; printf ( " \n Enter the Length of Side : " ) ; scanf ( " %d " , & side ) ; area = side * side ; printf ( " \n Area of Square : %d " , area ) ; return ( 0 ) ; }
#include <graphics.h> #include <conio.h> #include <dos.h> void showmouseptr ( ) ; void hidemouseptr ( ) ; union REGS i , o ; int main ( ) { int count = 1 , gDriver = DETECT , gMode ; initgraph ( & gDriver , & gMode , " C\\ : tc\\bgi " ) ; i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; if ( o.x.ax = = 0 ) { printf ( " ntMouse Support is Unavailable !! " ) ; } else { showmouseptr ( ) ; while ( count < = 10 ) { getch ( ) ; count + + ; if ( count % 2 = = 0 ) hidemouseptr ( ) ; else showmouseptr ( ) ; } } getch ( ) ; return 0 ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void hidemouseptr ( ) { i.x.ax = 2 ; int86 ( 0X33 , & i , & o ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x1 = 200 , y1 = 200 ; int x2 = 300 , y2 = 300 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; line ( x1 , y1 , x2 , y2 ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> int fm ( int date , int month , int year ) { int fmonth , leap ; if ( ( year % 100 = = 0 ) & & ( year % 400 ! = 0 ) ) leap = 0 ; else if ( year % 4 = = 0 ) leap = 1 ; else leap = 0 ; fmonth = 3 + ( 2 - leap ) * ( ( month + 2 ) / ( 2 * month ) ) + ( 5 * month + month / 9 ) / 2 ; fmonth = fmonth % 7 ; return fmonth ; } int day_of_week ( int date , int month , int year ) { int dayOfWeek ; int YY = year % 100 ; int century = year / 100 ; printf ( " \n Date : %d / %d / %d \n  " , date , month , year ) ; dayOfWeek = 1.25 * YY + fm ( date , month , year ) + date - 2 * ( century % 4 ) ; dayOfWeek = dayOfWeek % 7 ; switch ( dayOfWeek ) { case 0 : printf ( " weekday = Saturday " ) ; break ; case 1 : printf ( " weekday = Sunday " ) ; break ; case 2 : printf ( " weekday = Monday " ) ; break ; case 3 : printf ( " weekday = Tuesday " ) ; break ; case 4 : printf ( " weekday = Wednesday " ) ; break ; case 5 : printf ( " weekday = Thursday " ) ; break ; case 6 : printf ( " weekday = Friday " ) ; break ; default : printf ( " Incorrect data " ) ; } return 0 ; } int main ( ) { int date , month , year ; printf ( " \n Enter the year " ) ; scanf ( " %d " , & year ) ; printf ( " \n Enter the month " ) ; scanf ( " %d " , & month ) ; printf ( " \n Enter the date " ) ; scanf ( " %d " , & date ) ; day_of_week ( date , month , year ) ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int size = 3 ; int matrix [ 3 ] [ 3 ] ; int row , column = 0 ; int sum , sum1 , sum2 ; int flag = 0 ; printf ( " \n Enter matrix : " ) ; for ( row = 0 ; row < size ; row + + ) { for ( column = 0 ; column < size ; column + + ) scanf ( " %d " , & matrix [ row ] [ column ] ) ; } printf ( " Entered matrix is : \n  " ) ; for ( row = 0 ; row < size ; row + + ) { printf ( " \n  " ) ; for ( column = 0 ; column < size ; column + + ) { printf ( " \t %d " , matrix [ row ] [ column ] ) ; } } sum = 0 ; for ( row = 0 ; row < size ; row + + ) { for ( column = 0 ; column < size ; column + + ) { if ( row = = column ) sum = sum + matrix [ row ] [ column ] ; } } for ( row = 0 ; row < size ; row + + ) { sum1 = 0 ; for ( column = 0 ; column < size ; column + + ) { sum1 = sum1 + matrix [ row ] [ column ] ; } if ( sum = = sum1 ) flag = 1 ; else { flag = 0 ; break ; } } for ( row = 0 ; row < size ; row + + ) { sum2 = 0 ; for ( column = 0 ; column < size ; column + + ) { sum2 = sum2 + matrix [ column ] [ row ] ; } if ( sum = = sum2 ) flag = 1 ; else { flag = 0 ; break ; } } if ( flag = = 1 ) printf ( " \n Magic square " ) ; else printf ( " \n No Magic square " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int numArray [ 10 ] ; int i , sum = 0 ; int * ptr ; printf ( " \n Enter 10 elements : " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %d " , & numArray [ i ] ) ; ptr = numArray ; for ( i = 0 ; i < 10 ; i + + ) { sum = sum + * ptr ; ptr + + ; } printf ( " The sum of array elements : %d " , sum ) ; }
#include <stdio.h> int main ( int args , char * argv [ ] ) { int i = 0 ; for ( i = 0 ; i < args ; i + + ) printf ( " \n  %s " , argv [ i ] ) ; return 0 ; }
#include <stdio.h> #define ACCURACY 0.0001 int main ( ) { int n , count ; float x , term , sum ; printf ( " \n Enter value of x : " ) ; scanf ( " %f " , & x ) ; n = term = sum = count = 1 ; while ( n < = 100 ) { term = term * x / n ; sum = sum + term ; count = count + 1 ; if ( term < ACCURACY ) n = 999 ; else n = n + 1 ; } printf ( " \n Terms = %d Sum = %f " , count , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> char a [ 10 ] [ 10 ] ; int n ; void printmatrix ( ) { int i , j ; printf ( " \n  " ) ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) printf ( " %c\t " , a [ i ] [ j ] ) ; printf ( " \n \n  " ) ; } } int getmarkedcol ( int row ) { int i ; for ( i = 0 ; i < n ; i + + ) if ( a [ row ] [ i ] = = 'Q' ) { return ( i ) ; break ; } } int feasible ( int row , int col ) { int i , tcol ; for ( i = 0 ; i < n ; i + + ) { tcol = getmarkedcol ( i ) ; if ( col = = tcol || abs ( row - i ) = = abs ( col - tcol ) ) return 0 ; } return 1 ; } void nqueen ( int row ) { int i , j ; if ( row < n ) { for ( i = 0 ; i < n ; i + + ) { if ( feasible ( row , i ) ) { a [ row ] [ i ] = 'Q' ; nqueen ( row + 1 ) ; a [ row ] [ i ] = '.' ; } } } else { printf ( " \n The solution is : - " ) ; printmatrix ( ) ; } } int main ( ) { int i , j ; printf ( " \n Enter the no. of queens : - " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) for ( j = 0 ; j < n ; j + + ) a [ i ] [ j ] = '.' ; nqueen ( 0 ) ; return ( 0 ) ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i , sum = 0 ; if ( argc ! = 3 ) { printf ( " You have forgot to type numbers. " ) ; exit ( 1 ) ; } printf ( " The sum is : " ) ; for ( i = 1 ; i < argc ; i + + ) sum = sum + atoi ( argv [ i ] ) ; printf ( " %d " , sum ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { unsigned int mask ; clrscr ( ) ; printf ( " Memory Required : %d butes " , sizeof ( mask ) ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void binary ( unsigned int ) ; void main ( ) { unsigned int num ; printf ( " Enter Decimal Number : " ) ; scanf ( " %u " , & num ) ; binary ( num ) ; getch ( ) ; } void binary ( unsigned int num ) { unsigned int mask = 32768 ; printf ( " Binary Eqivalent : " ) ; while ( mask > 0 ) { if ( ( num & mask ) = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; mask = mask > > 1 ; } }
#include <stdio.h> #include <conio.h> #include <math.h> void bin_dec ( long int num ) { long int rem , sum = 0 , power = 0 ; while ( num> 0 ) { rem = num %10 ; num = num / 10 ; sum = sum + rem * pow ( 2 , power ) ; power + + ; } printf ( " Decimal number : %d " , sum ) ; } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the Binary number ( 0 and 1 ) : " ) ; scanf ( " %ld " , & num ) ; bin_dec ( num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void dec_hex ( long int num ) { long int rem [ 50 ] , i = 0 , length = 0 ; while ( num> 0 ) { rem [ i ] = num %16 ; num = num / 16 ; i + + ; length + + ; } printf ( " Hexadecimal number : " ) ; for ( i = length-1 ; i> = 0 ; i-- ) { switch ( rem [ i ] ) { case 10 : printf ( " A " ) ; break ; case 11 : printf ( " B " ) ; break ; case 12 : printf ( " C " ) ; break ; case 13 : printf ( " D " ) ; break ; case 14 : printf ( " E " ) ; break ; case 15 : printf ( " F " ) ; break ; default : printf ( " %ld " , rem [ i ] ) ; } } } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & num ) ; dec_hex ( num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void dec_oct ( long int num ) { long int rem [ 50 ] , i = 0 , length = 0 ; while ( num> 0 ) { rem [ i ] = num %8 ; num = num / 8 ; i + + ; length + + ; } printf ( " nOctal number : " ) ; for ( i = length-1 ; i> = 0 ; i-- ) printf ( " %ld " , rem [ i ] ) ; } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & num ) ; dec_oct ( num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void dec_bin ( long int num ) { long int rem [ 50 ] , i = 0 , length = 0 ; while ( num> 0 ) { rem [ i ] = num %2 ; num = num / 2 ; i + + ; length + + ; } printf ( " nBinary number : " ) ; for ( i = length-1 ; i> = 0 ; i-- ) printf ( " %ld " , rem [ i ] ) ; } void main ( ) { long int num ; clrscr ( ) ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & num ) ; dec_bin ( num ) ; getch ( ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; int main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) { printf ( " Mouse support not available.n " ) ; } else { showmouseptr ( ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> #include <dos.h> int initmouse ( ) ; union REGS i , o ; int main ( ) { int flag ; flag = initmouse ( ) ; if ( flag = = 0 ) { printf ( " Mouse support not available. " ) ; } else { printf ( " Mouse support available. " ) ; } return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; }
#include <stdio.h> int main ( ) { float c [ 10 ] , num , Cp = 0 ; int i ; clrscr ( ) ; printf ( " Enter the number of Capacitors : " ) ; scanf ( " %f " , & num ) ; printf ( " \n Enter Value of Each Capacitor : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n C %d : " , i + 1 ) ; scanf ( " %f " , & c [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Cp = Cp + c [ i ] ; } printf ( " \n Equivalent Parallel Capacitance : %f mFarad " , Cp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float c [ 10 ] , num , Cs = 0 ; int i ; clrscr ( ) ; printf ( " Enter the number of Capacitors : " ) ; scanf ( " %f " , & num ) ; printf ( " \n Enter Value of Each Capacitor : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n C %d : " , i + 1 ) ; scanf ( " %f " , & c [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Cs = Cs + ( 1.0 / c [ i ] ) ; } Cs = 1.0 / Cs ; printf ( " \n Equivalent Series Capacitance : %f mFarad " , Cs ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int r [ 10 ] , num , i , Rs = 0 ; printf ( " Enter the number of Resistances : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter Value of Each Resistance : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n  R %d : " , i + 1 ) ; scanf ( " %d " , & r [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Rs = Rs + r [ i ] ; } printf ( " \n Equivalent Series Resistance : %d Kohm " , Rs ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int r [ 10 ] , num , i , Rs = 0 ; printf ( " Enter the number of Resistances : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter Value of Each Resistance : n " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " \n R %d : " , i + 1 ) ; scanf ( " %d " , & r [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { Rs = Rs + r [ i ] ; } printf ( " \n Equivalent Series Resistance : %d Kohm " , Rs ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 200 , 150 , 200 ) ; arc ( 200 , 200 , 0 , 180 , 50 ) ; arc ( 260 , 200 , 0 , 180 , 50 ) ; arc ( 230 , 200 , 180 , 360 , 20 ) ; arc ( 320 , 200 , 0 , 180 , 50 ) ; arc ( 290 , 200 , 180 , 360 , 20 ) ; arc ( 380 , 200 , 0 , 180 , 50 ) ; arc ( 350 , 200 , 180 , 360 , 20 ) ; line ( 430 , 200 , 470 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 90 , 100 , 100 , 100 ) ; line ( 100 , 100 , 110 , 120 ) ; line ( 110 , 120 , 120 , 100 ) ; line ( 120 , 100 , 130 , 120 ) ; line ( 130 , 120 , 140 , 100 ) ; line ( 140 , 100 , 150 , 120 ) ; line ( 150 , 120 , 160 , 100 ) ; line ( 160 , 100 , 170 , 100 ) ; outtextxy ( 100 , 130 , " Resisitor " ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 100 , 175 , 110 , 200 ) ; line ( 100 , 175 , 125 , 175 ) ; outtextxy ( 200 , 150 , " PNP Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 70 , 150 , 100 , 150 ) ; line ( 100 , 125 , 150 , 90 ) ; line ( 100 , 175 , 150 , 210 ) ; line ( 140 , 190 , 150 , 210 ) ; line ( 130 , 210 , 150 , 210 ) ; outtextxy ( 100 , 250 , " NPN Transistor " ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; outtextxy ( 110 , 60 , " C " ) ; line ( 80 , 100 , 100 , 100 ) ; line ( 100 , 80 , 100 , 120 ) ; line ( 120 , 80 , 120 , 120 ) ; line ( 120 , 100 , 140 , 100 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 300 , 100 , 200 , 200 ) ; line ( 300 , 100 , 400 , 200 ) ; line ( 200 , 200 , 400 , 200 ) ; getch ( ) ; closegraph ( ) ; }
#include <graphics.h> #include <stdio.h> int main ( void ) { int gdriver = DETECT , gmode ; int x = 200 , y = 200 ; initgraph ( & gdriver , & gmode , " c : \\tc\\bgi " ) ; outtextxy ( x , y , " Hello World " ) ; closegraph ( ) ; }
#include <graphics.h> #include <conio.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; circle ( 300 , 300 , 50 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> #include <graphics.h> void main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " c : \\tc\\bgi " ) ; line ( 50 , 125 , 100 , 125 ) ; line ( 50 , 175 , 100 , 175 ) ; line ( 100 , 100 , 100 , 200 ) ; line ( 100 , 100 , 150 , 150 ) ; line ( 150 , 150 , 100 , 200 ) ; line ( 125 , 100 , 125 , 125 ) ; line ( 125 , 175 , 125 , 200 ) ; line ( 150 , 150 , 200 , 150 ) ; getch ( ) ; closegraph ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x , y , z ; float a , b , c ; clrscr ( ) ; printf ( " \n Enter the values of x , y and z : " ) ; scanf ( " %d %d %d " , & x , & y , & z ) ; a = ( x + y + z ) / ( x - y - z ) ; b = ( x + y + z ) / 3 ; c = ( x + y ) * ( x - y ) * ( y - z ) ; printf ( " \n Value of a = %f " , a ) ; printf ( " \n Value of b = %f " , b ) ; printf ( " \n Value of c = %f " , c ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int cust_no , powerUsage ; float amount ; clrscr ( ) ; printf ( " Enter the customer number : " ) ; scanf ( " %d " , & cust_no ) ; printf ( " Enter the power consumed : " ) ; scanf ( " %d " , & powerUsage ) ; if ( powerUsage > = 0 & & powerUsage < = 200 ) amount = powerUsage * 0.50 ; else if ( powerUsage > 200 & & powerUsage < 400 ) amount = 100 + ( ( powerUsage - 200 ) * 0.65 ) ; else if ( powerUsage > 400 & & powerUsage < = 600 ) amount = 230 + ( ( powerUsage - 400 ) * 0.80 ) ; printf ( " Amount to be paid by customer no. %d is Rs. : %5.2f. " , cust_no , amount ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f + %f = %f\n  " , a , b , a + b ) ; printf ( " %f - %f = %f\n  " , a , b , a - b ) ; printf ( " %f * %f = %f\n  " , a , b , a * b ) ; printf ( " %f / %f = %f\n  " , a , b , a / b ) ; return ( 0 ) ; }
#include <stdio.h> main ( ) { float a = 14.0 ; float b = 5.0 ; printf ( " %f % % %f = %fn " , a , b , a % b ) ; }
#include <stdio.h> int main ( ) { int a = 5 ; int b = 5 ; printf ( " %d + %d = %d \n  " , a , b , a + b ) ; printf ( " %d - %d = %d \n  " , a , b , a - b ) ; printf ( " %d * %d = %d \n  " , a , b , a * b ) ; printf ( " %d / %d = %d \n  " , a , b , a / b ) ; printf ( " %d % % %d = %d\n  " , a , b , a % b ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " \n Enter value of a , b & c : " ) ; scanf ( " %d %d %d " , & a , & b , & c ) ; if ( ( a > b ) & & ( a > c ) ) printf ( " \n a is greatest " ) ; if ( ( b > c ) & & ( b > a ) ) printf ( " \n b is greatest " ) ; if ( ( c > a ) & & ( c > b ) ) printf ( " \n c is greatest " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int gross_salary , basic , da , ta ; printf ( " Enter basic salary : " ) ; scanf ( " %d " , & basic ) ; da = ( 10 * basic ) / 100 ; ta = ( 12 * basic ) / 100 ; gross_salary = basic + da + ta ; printf ( " \n Gross salary : %d " , gross_salary ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , rem , rev = 0 ; printf ( " \n Enter any no to be reversed : " ) ; scanf ( " %d " , & num ) ; while ( num > = 1 ) { rem = num % 10 ; rev = rev * 10 + rem ; num = num / 10 ; } printf ( " \n Reversed Number : %d " , rev ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int s1 , s2 , s3 , s4 , s5 , sum , total = 500 ; float per ; printf ( " \n Enter marks of 5 subjects : " ) ; scanf ( " %d %d %d %d %d " , & s1 , & s2 , & s3 , & s4 , & s5 ) ; sum = s1 + s2 + s3 + s4 + s5 ; printf ( " \n Sum : %d " , sum ) ; per = ( sum * 100 ) / total ; printf ( " \n Percentage : %f " , per ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " \n Enter temp in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( 1.8 * celsius ) + 32 ; printf ( " \n Temperature in Fahrenheit : %f " , fahrenheit ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int amount , rate , time , si ; printf ( " \n Enter Principal Amount : " ) ; scanf ( " %d " , & amount ) ; printf ( " \n Enter Rate of Interest : " ) ; scanf ( " %d " , & rate ) ; printf ( " \n Enter Period of Time : " ) ; scanf ( " %d " , & time ) ; si = ( amount * rate * time ) / 100 ; printf ( " \n Simple Interest : %d " , si ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b , sum ; printf ( " \n Enter two no : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , b , c ; float desc , root1 , root2 ; printf ( " \n Enter the Values of a : " ) ; scanf ( " %f " , & a ) ; printf ( " \n Enter the Values of b : " ) ; scanf ( " %f " , & b ) ; printf ( " \n Enter the Values of c : " ) ; scanf ( " %f " , & c ) ; desc = sqrt ( b * b - 4 * a * c ) ; root1 = ( -b + desc ) / ( 2.0 * a ) ; root2 = ( -b - desc ) / ( 2.0 * a ) ; printf ( " \n First Root : %f " , root1 ) ; printf ( " \n Second Root : %f " , root2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int fact ( int ) ; int main ( ) { int factorial , num ; printf ( " Enter the value of num : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial is %d " , factorial ) ; return ( 0 ) ; } int fact ( int n ) { if ( n = = 0 ) { return ( 1 ) ; } return ( n * fact ( n - 1 ) ) ; }
#include <stdio.h> #include <conio.h> #define MAX_ROWS 3 #define MAX_COLS 4 void print_square ( int [ ] ) ; void main ( void ) { int row ; int num [ MAX_ROWS ] [ MAX_COLS ] = { { 0 , 1 , 2 , 3 } , { 4 , 5 , 6 , 7 } , { 8 , 9 , 10 , 11 } } ; for ( row = 0 ; row < MAX_ROWS ; row + + ) print_square ( num [ row ] ) ; } void print_square ( int x [ ] ) { int col ; for ( col = 0 ; col < MAX_COLS ; col + + ) printf ( " %d\t " , x [ col ] * x [ col ] ) ; printf ( " \n  " ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int arr [ 10 ] [ 10 ] , size , i , j , temp ; printf ( " \n Enter the size of matrix : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter the values a : " ) ; for ( i = 0 ; i < size ; i + + ) { for ( j = 0 ; j < size ; j + + ) { scanf ( " %d " , & arr [ i ] [ j ] ) ; } } printf ( " \n Given square matrix is " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < size ; j + + ) { printf ( " %d\t " , arr [ i ] [ j ] ) ; } } for ( i = 1 ; i < size ; i + + ) { for ( j = 0 ; j < i ; j + + ) { temp = arr [ i ] [ j ] ; arr [ i ] [ j ] = arr [ j ] [ i ] ; arr [ j ] [ i ] = temp ; } } printf ( " \n Transpose matrix is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < size ; j + + ) { printf ( " %d\t " , arr [ i ] [ j ] ) ; } } getch ( ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , j , a [ 10 ] [ 10 ] , sum , rows , columns ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { printf ( " \n Enter the Element a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } sum = 0 ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { if ( i > j ) { sum = sum + a [ i ] [ j ] ; } } printf ( " \n Sum of Lower Triangle Elements : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { int i , j , a [ 10 ] [ 10 ] , sum , rows , columns ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { printf ( " \n Enter the Element a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } sum = 0 ; for ( i = 0 ; i < rows ; i + + ) for ( j = 0 ; j < columns ; j + + ) { if ( i < j ) { sum = sum + a [ i ] [ j ] ; } } printf ( " \n Sum of Upper Triangle Elements : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , mat [ 10 ] [ 10 ] , row , col ; int sum = 0 ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & row ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & col ) ; for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { printf ( " \n Enter the Element a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { if ( i = = j ) sum = sum + mat [ i ] [ j ] ; } } printf ( " \n Sum of Diagonal Elements in Matrix : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , mat [ 10 ] [ 10 ] , row , col ; int sum = 0 ; printf ( " \n Enter the number of Rows : " ) ; scanf ( " %d " , & row ) ; printf ( " \n Enter the number of Columns : " ) ; scanf ( " %d " , & col ) ; for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { printf ( " \n Enter the Element mat [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < col ; j + + ) { sum = sum + mat [ i ] [ j ] ; } } printf ( " \n Sum of All Elements in Matrix : %d " , sum ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i , j , a [ 3 ] [ 3 ] ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { printf ( " \n Enter the a [ %d ] [ %d ] = " , i , j ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { printf ( " %d\t " , a [ i ] [ j ] ) ; } printf ( " \n  " ) ; } return ( 0 ) ; }
#include <stdio.h> void reduction ( float a [ ] [ 6 ] , int size , int pivot , int col ) { int i , j ; float factor ; factor = a [ pivot ] [ col ] ; for ( i = 0 ; i < 2 * size ; i + + ) { a [ pivot ] [ i ] / = factor ; } for ( i = 0 ; i < size ; i + + ) { if ( i ! = pivot ) { factor = a [ i ] [ col ] ; for ( j = 0 ; j < 2 * size ; j + + ) { a [ i ] [ j ] = a [ i ] [ j ] - a [ pivot ] [ j ] * factor ; } } } } void main ( ) { float matrix [ 3 ] [ 6 ] ; int i , j ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 6 ; j + + ) { if ( j = = i + 3 ) { matrix [ i ] [ j ] = 1 ; } else { matrix [ i ] [ j ] = 0 ; } } } printf ( " \n Enter a 3 X 3 Matrix : " ) ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { scanf ( " %f " , & matrix [ i ] [ j ] ) ; } } for ( i = 0 ; i < 3 ; i + + ) { reduction ( matrix , 3 , i , i ) ; } printf ( " \n Invers Matrix " ) ; for ( i = 0 ; i < 3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 3 ; j + + ) { printf ( " %8.3f " , matrix [ i ] [ j + 3 ] ) ; } } }
#include <stdio.h> #include <conio.h> int size ; int fibonacci ( int prev_number , int number ) ; void main ( ) { static int prev_number = 0 , number = 1 ; clrscr ( ) ; printf ( " Enter the Size of Series ( < 20 ) : " ) ; scanf ( " %d " , & size ) ; printf ( " 1 " ) ; fibonacci ( prev_number , number ) ; getch ( ) ; } int fibonacci ( int prev_number , int number ) { static int i = 1 ; int next_num ; if ( i = = size ) return ( 0 ) ; else { next_num = prev_number + number ; prev_number = number ; number = next_num ; printf ( " %d " , next_num ) ; i + + ; fibonacci ( prev_number , number ) ; } return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void bubble_sort ( int [ ] , int ) ; void main ( ) { int arr [ 30 ] , num , i ; printf ( " \n Enter no of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter array elements : " ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & arr [ i ] ) ; bubble_sort ( arr , num ) ; getch ( ) ; } void bubble_sort ( int iarr [ ] , int num ) { int i , j , k , temp ; printf ( " \n Unsorted Data : " ) ; for ( k = 0 ; k < num ; k + + ) { printf ( " %5d " , iarr [ k ] ) ; } for ( i = 1 ; i < num ; i + + ) { for ( j = 0 ; j < num - 1 ; j + + ) { if ( iarr [ j ] > iarr [ j + 1 ] ) { temp = iarr [ j ] ; iarr [ j ] = iarr [ j + 1 ] ; iarr [ j + 1 ] = temp ; } } printf ( " \n After pass %d : " , i ) ; for ( k = 0 ; k < num ; k + + ) { printf ( " %5d " , iarr [ k ] ) ; } } }
#include <stdio.h> struct cricket { char pname [ 20 ] ; char tname [ 20 ] ; int avg ; } player [ 10 ] , temp ; void main ( ) { int i , j , n ; clrscr ( ) ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " \n Enter Player Name : " ) ; scanf ( " %s " , player [ i ] .pname ) ; printf ( " \n Enter Team Name : " ) ; scanf ( " %s " , player [ i ] .tname ) ; printf ( " \n Enter Average : " ) ; scanf ( " %d " , & player [ i ] .avg ) ; printf ( " \n  " ) ; } n = 10 ; for ( i = 1 ; i < n ; i + + ) for ( j = 0 ; j < n - i ; j + + ) { if ( strcmp ( player [ j ] .tname , player [ j + 1 ] .tname ) > 0 ) { temp = player [ j ] ; player [ j ] = player [ j + 1 ] ; player [ j + 1 ] = temp ; } } for ( i = 0 ; i < n ; i + + ) { printf ( " \n  %s\t %s\t %d " , player [ i ] .pname , player [ i ] .tname , player [ i ] .avg ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { int i , j , num , temp , arr [ 20 ] ; printf ( " Enter total elements : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter %d elements : " , num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 1 ; i < num ; i + + ) { temp = arr [ i ] ; j = i - 1 ; while ( ( temp < arr [ j ] ) & & ( j > = 0 ) ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = temp ; } printf ( " After Sorting : " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { struct student { char name [ 30 ] ; char sex ; int rollno ; float percentage ; } ; union details { struct student st ; } ; union details set ; printf ( " Enter details : " ) ; printf ( " \n Enter name : " ) ; scanf ( " %s " , set.st.name ) ; printf ( " \n Enter roll no : " ) ; scanf ( " %d " , & set.st.rollno ) ; flushall ( ) ; printf ( " \n Enter sex : " ) ; scanf ( " %c " , & set.st.sex ) ; printf ( " \n Enter percentage : " ) ; scanf ( " %f " , & set.st.percentage ) ; printf ( " \n The student details are : \n  " ) ; printf ( " \n ame : %s " , set.st.name ) ; printf ( " \n Rollno : %d " , set.st.rollno ) ; printf ( " \n Sex : %c " , set.st.sex ) ; printf ( " \n Percentage : %f " , set.st.percentage ) ; getch ( ) ; }
#include <stdio.h> struct stud { int roll ; char name [ 10 ] ; int marks ; } ; int main ( ) { int size ; struct stud s ; size = sizeof ( s ) ; printf ( " nSize of Structure : %d " , size ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " \n Enter value for num1 & num2 : " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " \n After swapping value of a : %d " , a ) ; printf ( " \n After swapping value of b : %d " , b ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int num , digits ; char ch [ 10 ] ; printf ( " \n Enter the Number : " ) ; scanf ( " %d " , & num ) ; sprintf ( ch , " %d " , num ) ; digits = strlen ( ch ) ; printf ( " \n Number of Digits : %d " , digits ) ; return ( 0 ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { char password [ 25 ] , ch ; int i ; clrscr ( ) ; puts ( " Enter password : " ) ; while ( 1 ) { if ( i < 0 ) { i = 0 ; } ch = getch ( ) ; if ( ch = = 13 ) break ; if ( ch = = 8 ) { putch ( 'b' ) ; putch ( NULL ) ; putch ( 'b' ) ; i-- ; continue ; } password [ i + + ] = ch ; ch = ' * ' ; putch ( ch ) ; } password [ i ] = '\0' ; printf ( " \n Password Entered : %s " , password ) ; getch ( ) ; }
#include <stdio.h> void main ( ) { int a = 3 , b = 3 , c ; asm { mov ax , a mov bx , a add ax , bx mov c , ax } printf ( " %d " , c ) ; }
#include <stdio.h> int main ( ) { char para [ 100 ] ; printf ( " Enter Paragraph : " ) ; scanf ( " % [ ^\t ] s " , para ) ; printf ( " Accepted Paragraph : %s " , para ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { while ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { switch ( printf ( " Hello " ) ) { } }
#include <stdio.h> void main ( ) { if ( printf ( " " ) ) { } else if ( printf ( " Hello " ) ) { } else { } }
#include <stdio.h> void main ( ) { while ( !printf ( " Hello " ) ) { } }
#include <stdio.h> #define PRINT printf ( " Hello " ) void main ( ) { if ( PRINT ) { } }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " %d " , printf ( " abcdefghijklmnopqrstuvwxyz " ) ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int num = 1342 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , num ) ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " nEnte the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed + Original Num = %d " , num1 + num2 ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int num1 , num2 ; char str [ 10 ] ; printf ( " \n Ente the Number : " ) ; scanf ( " %d " , & num1 ) ; sprintf ( str , " %d " , num1 ) ; strrev ( str ) ; num2 = atoi ( str ) ; printf ( " \n Reversed Number : " ) ; printf ( " %d " , num2 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int number = 12354 ; int sum = 0 ; for ( ; number > 0 ; sum + = number % 10 , number / = 10 ) ; printf ( " \n Sum of the Digits : %d " , sum ) ; }
#include <stdio.h> int add ( int , int ) ; int main ( ) { int num1 , num2 ; printf ( " \n Enter the two Numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n Addition of two num is : %d " , add ( num1 , num2 ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { if ( !num1 ) return num2 ; else return add ( ( num1 & num2 ) < < 1 , num1 ^ num2 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2 > 0 ) { num1 + + ; num2-- ; } printf ( " %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 , i ; while ( num2-- ) { num1 + + ; } printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> int sum ( int , int ) ; int main ( ) { int a , b ; printf ( " Enter the two Numbers : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Addition of two num. is : %d " , add ( a , b ) ) ; return ( 0 ) ; } int add ( int num1 , int num2 ) { int i ; for ( i = 0 ; i < num2 ; i + + ) num1 + + ; return num1 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 5 ; num1 = num1 - ( -num2 ) ; printf ( " Sum is : %d " , num1 ) ; return ( 0 ) ; }
#include <stdio.h> #include " myhead.h " void main ( ) { int num1 = 10 , num2 = 10 , num3 ; num3 = add ( num1 , num2 ) ; printf ( " Addition of Two numbers : %d " , num3 ) ; }
#include <stdio.h> #define begin main int begin ( ) { printf ( " Hello " ) ; return ( 0 ) ; }
#include <stdio.h> #define begin m##a##i##n void begin ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #define begin ( m , a , i , n ) m##a##i##n #define start begin ( m , a , i , n ) void start ( ) { printf ( " Hello " ) ; }
#include <dos.h> void main ( ) { char * path = " BIN " ; _AH = 0x39 ; _DX = ( unsigned int ) path ; __int__ ( 0x21 ) ; }
#include <dos.h> void main ( ) { char * message = " Pritesh Taral$ " ; _AH = 9 ; _DX = ( int ) message ; geninterrupt ( 0x21 ) ; }
#include <stdio.h> void main ( ) { printf ( " 1 " ) ; printf ( " 2 " ) ; printf ( " 3 " ) ; printf ( " 4 " ) ; printf ( " 5 " ) ; printf ( " 6 " ) ; printf ( " 7 " ) ; printf ( " 8 " ) ; printf ( " 9 " ) ; printf ( " 10 " ) ; }
#include <stdio.h> void printNumber ( int value ) { int i ; printf ( " %d\n  " , value ) ; i = value + 1 ; if ( i > 10 ) return ; printNumber ( i ) ; } void main ( ) { printNumber ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; Start : i = i + 1 ; printf ( " %d " , i ) ; if ( i < = 10 ) goto Start ; }
#include <stdio.h> void main ( ) { static int i = 1 ; if ( i < = 10 ) { printf ( " %d " , i + + ) ; main ( ) ; } }
#include <stdio.h> int main ( ) { printf ( " Hello World " ) ; return 0 ; }
#include void hello ( ) { printf ( " Hello World " ) ; } int main ( ) { hello ( ) ; return 0 ; }
#include <stdio.h> void main ( ) { int num ; printf ( " Enter a number : \n  " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) printf ( " %d is a positive number \n  " , num ) ; else if ( num < 0 ) printf ( " %d is a negative number \n  " , num ) ; else printf ( " 0 is neither positive nor negative " ) ; }
#include <stdio.h> int main ( ) { int num , reverse_number ; printf ( " \n Enter any number : " ) ; scanf ( " %d " , & num ) ; reverse_number = reverse_function ( num ) ; printf ( " \n After reverse the no is : %d " , reverse_number ) ; return 0 ; } int sum = 0 , rem ; reverse_function ( int num ) { if ( num ) { rem = num %10 ; sum = sum * 10 + rem ; reverse_function ( num / 10 ) ; } else return sum ; return sum ; }
#include <stdio.h> int main ( ) { int num , rem , reverse_num = 0 ; printf ( " \n Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num> = 1 ) { rem = num % 10 ; reverse_num = reverse_num * 10 + rem ; num = num / 10 ; } printf ( " \n Reverse of input number is : %d " , reverse_num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; printf ( " \n Enter value of num1 , num2 and num3 : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1> num2 ) & & ( num1> num3 ) ) printf ( " \n  Number1 is greatest " ) ; else if ( ( num2> num3 ) & & ( num2> num1 ) ) printf ( " \n  Number2 is greatest " ) ; else printf ( " \n  Number3 is greatest " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int count , first_term = 0 , second_term = 1 , next_term , i ; printf ( " Enter the number of terms : \n  " ) ; scanf ( " %d " , & count ) ; printf ( " First %d terms of Fibonacci series : \n  " , count ) ; for ( i = 0 ; i < count ; i + + ) { if ( i < = 1 ) next_term = i ; else { next_term = first_term + second_term ; first_term = second_term ; second_term = next_term ; } printf ( " %d\n  " , next_term ) ; } return 0 ; }
#include <stdio.h> int fibonacci_series ( int ) ; int main ( ) { int count , c = 0 , i ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & count ) ; printf ( " \n Fibonacci series : \n  " ) ; for ( i = 1 ; i < = count ; i + + ) { printf ( " %d\n  " , fibonacci_series ( c ) ) ; c + + ; } return 0 ; } int fibonacci_series ( int num ) { if ( num = = 0 ) return 0 ; else if ( num = = 1 ) return 1 ; else return ( fibonacci_series ( num-1 ) + fibonacci_series ( num-2 ) ) ; }
#include <stdio.h> int find_factorial ( int ) ; int main ( ) { int num , fact ; printf ( " \n Enter any integer number : " ) ; scanf ( " %d " , & num ) ; fact = find_factorial ( num ) ; printf ( " \n factorial of %d is : %d " , num , fact ) ; return 0 ; } int find_factorial ( int n ) { if ( n = = 0 ) return ( 1 ) ; return ( n * find_factorial ( n-1 ) ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 , flag_var , i , j ; printf ( " Enter two range ( input integer numbers only ) : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Prime numbers from %d and %d are : \n  " , num1 , num2 ) ; for ( i = num1 + 1 ; i <num2 ; + + i ) { flag_var = 0 ; for ( j = 2 ; j < = i / 2 ; + + j ) { if ( i %j = = 0 ) { flag_var = 1 ; break ; } } if ( flag_var = = 0 ) printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , copy_of_num , sum = 0 , rem ; printf ( " \n Enter a number : " ) ; scanf ( " %d " , & num ) ; copy_of_num = num ; while ( num ! = 0 ) { rem = num % 10 ; sum = sum + ( rem * rem * rem ) ; num = num / 10 ; } if ( copy_of_num = = sum ) printf ( " \n  %d is an Armstrong Number " , copy_of_num ) ; else printf ( " \n  %d is not an Armstrong Number " , copy_of_num ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int num , reverse_num = 0 , remainder , temp ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( temp! = 0 ) { remainder = temp %10 ; reverse_num = reverse_num * 10 + remainder ; temp / = 10 ; } if ( reverse_num = = num ) printf ( " %d is a palindrome number " , num ) ; else printf ( " %d is not a palindrome number " , num ) ; return 0 ; }
#include <stdio.h> int check_palindrome ( int num ) { static int reverse_num = 0 , rem ; if ( num! = 0 ) { rem = num %10 ; reverse_num = reverse_num * 10 + rem ; check_palindrome ( num / 10 ) ; } return reverse_num ; } int main ( ) { int num , reverse_num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; reverse_num = check_palindrome ( num ) ; if ( num = = reverse_num ) printf ( " %d is a palindrome number " , num ) ; else printf ( " %d is not a palindrome number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , rem , reverse_num , temp , start , end ; printf ( " Enter the lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter the upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Palindrome numbers between %d and %d are : " , start , end ) ; for ( num = start ; num < = end ; num + + ) { temp = num ; reverse_num = 0 ; while ( temp ) { rem = temp %10 ; temp = temp / 10 ; reverse_num = reverse_num * 10 + rem ; } if ( num = = reverse_num ) printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) printf ( " %d is an even number " , num ) ; else printf ( " %d is an odd number " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; if ( n & 1 ) printf ( " %d is an odd number " , n ) ; else printf ( " %d is an even number " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; printf ( " ASCII value of character %c is : %d " , ch , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Size of char : %ld byte\n  " , sizeof ( char ) ) ; printf ( " Size of int : %ld bytes\n  " , sizeof ( int ) ) ; printf ( " Size of float : %ld bytes\n  " , sizeof ( float ) ) ; printf ( " Size of double : %ld bytes " , sizeof ( double ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; bool isVowel = false ; printf ( " Enter an alphabet : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'a'||ch = = 'A'||ch = = 'e'||ch = = 'E'||ch = = 'i'||ch = = 'I' ||ch = = 'o'||ch = = 'O'||ch = = 'u'||ch = = 'U' ) { isVowel = true ; } if ( isVowel = = true ) printf ( " %c is a Vowel " , ch ) ; else printf ( " %c is a Consonant " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int y ; printf ( " Enter year : " ) ; scanf ( " %d " , & y ) ; if ( y % 4 = = 0 ) { if ( y % 100 = = 0 ) { if ( y % 400 = = 0 ) printf ( " %d is a Leap Year " , y ) ; else printf ( " %d is not a Leap Year " , y ) ; } else printf ( " %d is a Leap Year " , y ) ; } else printf ( " %d is not a Leap Year " , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , count , sum = 0 ; printf ( " Enter the value of n ( positive integer ) : " ) ; scanf ( " %d " , & n ) ; for ( count = 1 ; count < = n ; count + + ) { sum = sum + count ; } printf ( " Sum of first %d natural numbers is : %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , count , sum = 0 ; printf ( " Enter the value of n ( positive integer ) : " ) ; scanf ( " %d " , & n ) ; count = 1 ; while ( count < = n ) { sum = sum + count ; count + + ; } printf ( " Sum of first %d natural numbers is : %d " , n , sum ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 25 ] ; int i ; printf ( " Enter the string : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 65 & & str [ i ] < = 90 ) str [ i ] = str [ i ] + 32 ; } printf ( " \n Lower Case String is : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 25 ] ; int i ; printf ( " Enter the string : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 97 & & str [ i ] < = 122 ) str [ i ] = str [ i ] -32 ; } printf ( " \n Upper Case String is : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int i , j , count ; char str [ 25 ] [ 25 ] , temp [ 25 ] ; puts ( " How many strings u are going to enter? : " ) ; scanf ( " %d " , & count ) ; puts ( " Enter Strings one by one : " ) ; for ( i = 0 ; i < = count ; i + + ) gets ( str [ i ] ) ; for ( i = 0 ; i < = count ; i + + ) for ( j = i + 1 ; j < = count ; j + + ) { if ( strcmp ( str [ i ] , str [ j ] ) > 0 ) { strcpy ( temp , str [ i ] ) ; strcpy ( str [ i ] , str [ j ] ) ; strcpy ( str [ j ] , temp ) ; } } printf ( " Order of Sorted Strings : " ) ; for ( i = 0 ; i < = count ; i + + ) puts ( str [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 100 ] , i ; printf ( " Enter a string : \n  " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; + + i ) ; printf ( " \n Length of input string : %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str1 [ 50 ] , str2 [ 50 ] , i , j ; printf ( " \n Enter first string : " ) ; scanf ( " %s " , str1 ) ; printf ( " \n Enter second string : " ) ; scanf ( " %s " , str2 ) ; for ( i = 0 ; str1 [ i ] ! = '\0' ; + + i ) ; for ( j = 0 ; str2 [ j ] ! = '\0' ; + + j , + + i ) { str1 [ i ] = str2 [ j ] ; } str1 [ i ] = '\0' ; printf ( " \n Output : %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> void reverse_string ( char * , int , int ) ; int main ( ) { char string_array [ 150 ] ; printf ( " Enter any string : " ) ; scanf ( " %s " , & string_array ) ; reverse_string ( string_array , 0 , strlen ( string_array ) -1 ) ; printf ( " \n Reversed String is : %s " , string_array ) ; return 0 ; } void reverse_string ( char * x , int start , int end ) { char ch ; if ( start > = end ) return ; ch = * ( x + start ) ; * ( x + start ) = * ( x + end ) ; * ( x + end ) = ch ; reverse_string ( x , + + start , --end ) ; }
#include <stdio.h> void sort_numbers_ascending ( int number [ ] , int count ) { int temp , i , j , k ; for ( j = 0 ; j < count ; + + j ) { for ( k = j + 1 ; k < count ; + + k ) { if ( number [ j ] > number [ k ] ) { temp = number [ j ] ; number [ j ] = number [ k ] ; number [ k ] = temp ; } } } printf ( " Numbers in ascending order : \n  " ) ; for ( i = 0 ; i < count ; + + i ) printf ( " %d\n  " , number [ i ] ) ; } void main ( ) { int i , count , number [ 20 ] ; printf ( " How many numbers you are gonna enter : " ) ; scanf ( " %d " , & count ) ; printf ( " \n Enter the numbers one by one : " ) ; for ( i = 0 ; i < count ; + + i ) scanf ( " %d " , & number [ i ] ) ; sort_numbers_ascending ( number , count ) ; }
#include <stdio.h> int largest_element ( int arr [ ] , int num ) { int i , max_element ; max_element = arr [ 0 ] ; for ( i = 1 ; i < num ; i + + ) if ( arr [ i ] > max_element ) max_element = arr [ i ] ; return max_element ; } int main ( ) { int arr [ ] = { 1 , 24 , 145 , 20 , 8 , -101 , 300 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( " Largest element of array is %d " , largest_element ( arr , n ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int sum ; sum = sum_array_elements ( array , 6 ) ; printf ( " \n Sum of array elements is : %d " , sum ) ; return 0 ; } int sum_array_elements ( int arr [ ] , int n ) { if ( n < 0 ) { return 0 ; } else { return arr [ n ] + sum_array_elements ( arr , n-1 ) ; } }
#include <stdio.h> int main ( ) { int array [ 5 ] ; int i , sum = 0 ; int * ptr ; printf ( " \n Enter array elements ( 5 integer values ) : " ) ; for ( i = 0 ; i <5 ; i + + ) scanf ( " %d " , & array [ i ] ) ; ptr = array ; for ( i = 0 ; i <5 ; i + + ) { sum = sum + * ptr ; ptr + + ; } printf ( " \n The sum is : %d " , sum ) ; }
#include <stdio.h> int main ( ) { double arr [ ] = { 11 , 22 , 33 , 44 , 55 , 66 } ; int n ; n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( " Size of the array is : %d\n  " , n ) ; return 0 ; } Output :
#include <stdio.h> int main ( ) { int count , temp , i , j , number [ 30 ] ; printf ( " How many numbers are u going to enter? : " ) ; scanf ( " %d " , & count ) ; printf ( " Enter %d numbers : " , count ) ; for ( i = 0 ; i <count ; i + + ) scanf ( " %d " , & number [ i ] ) ; for ( i = count-2 ; i> = 0 ; i-- ) { for ( j = 0 ; j < = i ; j + + ) { if ( number [ j ] > number [ j + 1 ] ) { temp = number [ j ] ; number [ j ] = number [ j + 1 ] ; number [ j + 1 ] = temp ; } } } printf ( " Sorted elements : " ) ; for ( i = 0 ; i <count ; i + + ) printf ( " %d " , number [ i ] ) ; return 0 ; }
#include <stdio.h> void main ( ) { int n , r , npr_var ; printf ( " Enter the value of n : " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter the value of r : " ) ; scanf ( " %d " , & r ) ; npr_var = fact ( n ) / fact ( n - r ) ; printf ( " \n The value of P ( %d , %d ) is : %d " , n , r , npr_var ) ; } int fact ( int num ) { int k = 1 , i ; if ( num = = 0 ) { return ( k ) ; } else { for ( i = 1 ; i < = num ; i + + ) { k = k * i ; } } return ( k ) ; }
#include <stdio.h> int fact ( int num ) ; void main ( ) { int n , r , ncr_var ; printf ( " Enter the value of n : " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter the value of r : " ) ; scanf ( " %d " , & r ) ; ncr_var = fact ( n ) / ( fact ( r ) * fact ( n - r ) ) ; printf ( " \n The value of C ( %d , %d ) is : %d " , n , r , ncr_var ) ; } int fact ( int num ) { int k = 1 , i ; if ( num = = 0 ) { return ( k ) ; } else { for ( i = 1 ; i < = num ; i + + ) { k = k * i ; } } return ( k ) ; }
#include <stdio.h> int main ( ) { float num1 , num2 , product ; printf ( " Enter first Number : " ) ; scanf ( " %f " , & num1 ) ; printf ( " Enter second Number : " ) ; scanf ( " %f " , & num2 ) ; product = num1 * num2 ; printf ( " Product of entered numbers is : %.3f " , product ) ; return 0 ; }
#include <stdio.h> float product ( float a , float b ) { return a * b ; } int main ( ) { float num1 , num2 , prod ; printf ( " Enter first Number : " ) ; scanf ( " %f " , & num1 ) ; printf ( " Enter second Number : " ) ; scanf ( " %f " , & num2 ) ; prod = product ( num1 , num2 ) ; printf ( " Product of entered numbers is : %.3f " , prod ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , quot , rem ; printf ( " Enter dividend : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter divisor : " ) ; scanf ( " %d " , & num2 ) ; quot = num1 / num2 ; rem = num1 % num2 ; printf ( " Quotient is : %d\n  " , quot ) ; printf ( " Remainder is : %d " , rem ) ; return 0 ; }
#include <stdio.h> int quotient ( int a , int b ) { return a / b ; } int remainder ( int a , int b ) { return a % b ; } int main ( ) { int num1 , num2 , quot , rem ; printf ( " Enter dividend : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter divisor : " ) ; scanf ( " %d " , & num2 ) ; quot = quotient ( num1 , num2 ) ; rem = remainder ( num1 , num2 ) ; printf ( " Quotient is : %d\n  " , quot ) ; printf ( " Remainder is : %d " , rem ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; float avg ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; avg = ( float ) ( num1 + num2 ) / 2 ; printf ( " Average of %d and %d is : %.2f " , num1 , num2 , avg ) ; return 0 ; }
#include <stdio.h> float average ( int a , int b ) { return ( float ) ( a + b ) / 2 ; } int main ( ) { int num1 , num2 ; float avg ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; avg = average ( num1 , num2 ) ; printf ( " Average of %d and %d is : %.2f " , num1 , num2 , avg ) ; return 0 ; }
#include <stdio.h> #include <math.h> int binaryToDecimal ( long binarynum ) { int decimalnum = 0 , temp = 0 , remainder ; while ( binarynum! = 0 ) { remainder = binarynum % 10 ; binarynum = binarynum / 10 ; decimalnum = decimalnum + remainder * pow ( 2 , temp ) ; temp + + ; } return decimalnum ; } int main ( ) { long binarynum ; printf ( " Enter a binary number : " ) ; scanf ( " %ld " , & binarynum ) ; printf ( " Equivalent decimal number is : %d " , binaryToDecimal ( binarynum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> long decimalToBinary ( int decimalnum ) { long binarynum = 0 ; int rem , temp = 1 ; while ( decimalnum! = 0 ) { rem = decimalnum %2 ; decimalnum = decimalnum / 2 ; binarynum = binarynum + rem * temp ; temp = temp * 10 ; } return binarynum ; } int main ( ) { int decimalnum ; printf ( " Enter a Decimal Number : " ) ; scanf ( " %d " , & decimalnum ) ; printf ( " Equivalent Binary Number is : %ld " , decimalToBinary ( decimalnum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int decimalToOctal ( int decimalnum ) { int octalnum = 0 , temp = 1 ; while ( decimalnum ! = 0 ) { octalnum = octalnum + ( decimalnum % 8 ) * temp ; decimalnum = decimalnum / 8 ; temp = temp * 10 ; } return octalnum ; } int main ( ) { int decimalnum ; printf ( " Enter a Decimal Number : " ) ; scanf ( " %d " , & decimalnum ) ; printf ( " Equivalent Octal Number : %d " , decimalToOctal ( decimalnum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> long octalToDecimal ( int octalnum ) { int decimalnum = 0 , temp = 0 ; while ( octalnum ! = 0 ) { decimalnum = decimalnum + ( octalnum %10 ) * pow ( 8 , temp ) ; temp + + ; octalnum = octalnum / 10 ; } return decimalnum ; } int main ( ) { int octalnum ; printf ( " Enter an octal number : " ) ; scanf ( " %d " , & octalnum ) ; printf ( " Equivalent decimal number is : %ld " , octalToDecimal ( octalnum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int binaryToOctal ( long binarynum ) { int octalnum = 0 , decimalnum = 0 , i = 0 ; while ( binarynum ! = 0 ) { decimalnum = decimalnum + ( binarynum %10 ) * pow ( 2 , i ) ; i + + ; binarynum = binarynum / 10 ; } i = 1 ; while ( decimalnum ! = 0 ) { octalnum = octalnum + ( decimalnum % 8 ) * i ; decimalnum = decimalnum / 8 ; i = i * 10 ; } return octalnum ; } int main ( ) { long binarynum ; printf ( " Enter a binary number : " ) ; scanf ( " %ld " , & binarynum ) ; printf ( " Equivalent octal value : %d " , binaryToOctal ( binarynum ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> long octalToBinary ( int octalnum ) { int decimalnum = 0 , i = 0 ; long binarynum = 0 ; while ( octalnum ! = 0 ) { decimalnum = decimalnum + ( octalnum %10 ) * pow ( 8 , i ) ; i + + ; octalnum = octalnum / 10 ; } i = 1 ; while ( decimalnum ! = 0 ) { binarynum = binarynum + ( decimalnum % 2 ) * i ; decimalnum = decimalnum / 2 ; i = i * 10 ; } return binarynum ; } int main ( ) { int octalnum ; printf ( " Enter an octal number : " ) ; scanf ( " %d " , & octalnum ) ; printf ( " Equivalent binary number is : %ld " , octalToBinary ( octalnum ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int circle_radius ; float PI_VALUE = 3.14 , circle_area , circle_circumf ; printf ( " \n Enter radius of circle : " ) ; scanf ( " %d " , & circle_radius ) ; circle_area = PI_VALUE * circle_radius * circle_radius ; printf ( " \n Area of circle is : %f " , circle_area ) ; circle_circumf = 2 * PI_VALUE * circle_radius ; printf ( " \n Circumference of circle is : %f " , circle_circumf ) ; return ( 0 ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int triangle_side ; float triangle_area , temp_variable ; printf ( " \n Enter the Side of the triangle : " ) ; scanf ( " %d " , & triangle_side ) ; temp_variable = sqrt ( 3 ) / 4 ; triangle_area = temp_variable * triangle_side * triangle_side ; printf ( " \n Area of Equilateral Triangle is : %f " , triangle_area ) ; return ( 0 ) ; }
#include <stdio.h> int addition ( int num1 , int num2 ) { int sum ; sum = num1 + num2 ; return sum ; } int main ( ) { int var1 , var2 ; printf ( " Enter number 1 : " ) ; scanf ( " %d " , & var1 ) ; printf ( " Enter number 2 : " ) ; scanf ( " %d " , & var2 ) ; int res = addition ( var1 , var2 ) ; printf ( " Output : %d " , res ) ; return 0 ; }
#include <stdio.h> void introduction ( ) { printf ( " Hi\n  " ) ; printf ( " My name is Chaitanya\n  " ) ; printf ( " How are you? " ) ; } int main ( ) { introduction ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & num ) ; printf ( " The number entered by user is : %d " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of the entered numbers : %d " , sum ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { return a + b ; } int main ( ) { int num1 , num2 , num3 ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; num3 = sum ( num1 , num2 ) ; printf ( " Sum of the entered numbers : %d " , num3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ) printf ( " The entered character %c is an Alphabet " , ch ) ; else printf ( " The entered character %c is not an Alphabet " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 20 ; int y = 22 ; if ( x <y ) { printf ( " Variable x is less than y " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x , y ; printf ( " enter the value of x : " ) ; scanf ( " %d " , & x ) ; printf ( " enter the value of y : " ) ; scanf ( " %d " , & y ) ; if ( x> y ) { printf ( " x is greater than y\n  " ) ; } if ( x <y ) { printf ( " x is less than y\n  " ) ; } if ( x = = y ) { printf ( " x is equal to y\n  " ) ; } printf ( " End of Program " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible for voting " ) ; } else { printf ( " You are not eligible for voting " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) printf ( " You are eligible for voting " ) ; else printf ( " You are not eligible for voting " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var1 , var2 ; printf ( " Input the value of var1 : " ) ; scanf ( " %d " , & var1 ) ; printf ( " Input the value of var2 : " ) ; scanf ( " %d " , & var2 ) ; if ( var1 ! = var2 ) { printf ( " var1 is not equal to var2\n  " ) ; if ( var1 > var2 ) { printf ( " var1 is greater than var2\n  " ) ; } else { printf ( " var2 is greater than var1\n  " ) ; } } else { printf ( " var1 is equal to var2\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int var1 , var2 ; printf ( " Input the value of var1 : " ) ; scanf ( " %d " , & var1 ) ; printf ( " Input the value of var2 : " ) ; scanf ( " %d " , & var2 ) ; if ( var1 ! = var2 ) { printf ( " var1 is not equal to var2\n  " ) ; } else if ( var1 > var2 ) { printf ( " var1 is greater than var2\n  " ) ; } else if ( var2 > var1 ) { printf ( " var2 is greater than var1\n  " ) ; } else { printf ( " var1 is equal to var2\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 3 ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { for ( int i = 0 ; i <2 ; i + + ) { for ( int j = 0 ; j <4 ; j + + ) { printf ( " %d , %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 , j = 1 ; i <3 || j <5 ; i + + , j + + ) { printf ( " %d , %d\n  " , i , j ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int count = 1 ; while ( count < = 4 ) { printf ( " %d " , count ) ; count + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int var = 1 ; while ( var < = 2 ) { printf ( " %d " , var ) ; } }
#include <stdio.h> int main ( ) { int var = 6 ; while ( var > = 5 ) { printf ( " %d " , var ) ; var + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; while ( var < = 10 ) { printf ( " %d " , var ) ; var-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 , j = 1 ; while ( i < = 4 || j < = 3 ) { printf ( " %d %d\n  " , i , j ) ; i + + ; j + + ; } return 0 ; }
#include <stdio.h> int main ( ) { double num1 , num2 , temp ; printf ( " Enter First Number : " ) ; scanf ( " %lf " , & num1 ) ; printf ( " Enter Second Number : " ) ; scanf ( " %lf " , & num2 ) ; printf ( " Before swapping : \n  " ) ; printf ( " num1 is : %.2lf and num2 is : %.2lf\n  " , num1 , num2 ) ; temp = num1 ; num1 = num2 ; num2 = temp ; printf ( " After swapping : \n  " ) ; printf ( " num1 is : %.2lf and num2 is : %.2lf " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { double num1 , num2 ; printf ( " Enter First Number : " ) ; scanf ( " %lf " , & num1 ) ; printf ( " Enter Second Number : " ) ; scanf ( " %lf " , & num2 ) ; printf ( " Before swapping : \n  " ) ; printf ( " num1 is : %.2lf and num2 is : %.2lf\n  " , num1 , num2 ) ; num1 = num1 - num2 ; num2 = num1 + num2 ; num1 = num2 - num1 ; printf ( " After swapping : \n  " ) ; printf ( " num1 is : %.2lf and num2 is : %.2lf " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { int c = a + b ; return c ; } int main ( { int var1 = 10 ; int var2 = 20 ; int var3 = sum ( var1 , var2 ) ; printf ( " %d " , var3 ) ; return 0 ; }
#include <stdio.h> int increment ( int var ) { var = var + 1 ; return var ; } int main ( ) { int num1 = 20 ; int num2 = increment ( num1 ) ; printf ( " num1 value is : %d " , num1 ) ; printf ( " \n num2 value is : %d " , num2 ) ; return 0 ; }
#include <stdio.h> void swapnum ( int var1 , int var2 ) { int tempnum ; tempnum = var1 ; var1 = var2 ; var2 = tempnum ; } int main ( ) { int num1 = 35 , num2 = 45 ; printf ( " Before swapping : %d , %d " , num1 , num2 ) ; swapnum ( num1 , num2 ) ; printf ( " \n After swapping : %d , %d " , num1 , num2 ) ; }
#include <stdio.h> void increment ( int * var ) { * var = * var + 1 ; } int main ( ) { int num = 20 ; increment ( & num ) ; printf ( " Value of num is : %d " , num ) ; return 0 ; }
#include void swapnum ( int * var1 , int * var2 ) { int tempnum ; tempnum = * var1 ; * var1 = * var2 ; * var2 = tempnum ; } int main ( ) { int num1 = 35 , num2 = 45 ; printf ( " Before swapping : " ) ; printf ( " \n num1 value is %d " , num1 ) ; printf ( " \n num2 value is %d " , num2 ) ; swapnum ( & num1 , & num2 ) ; printf ( " \n After swapping : " ) ; printf ( " \n num1 value is %d " , num1 ) ; printf ( " \n num2 value is %d " , num2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char nickname [ 20 ] ; printf ( " Enter your Nick name : " ) ; scanf ( " %s " , nickname ) ; printf ( " %s " , nickname ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char nickname [ 20 ] ; puts ( " Enter your Nick name : " ) ; gets ( nickname ) ; puts ( nickname ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 20 ] = " BeginnersBook " ; printf ( " Length of string str1 : %d " , strlen ( str1 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 20 ] = " BeginnersBook " ; printf ( " Length of string str1 when maxlen is 30 : %d " , strnlen ( str1 , 30 ) ) ; printf ( " Length of string str1 when maxlen is 10 : %d " , strnlen ( str1 , 10 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 20 ] = " BeginnersBook " ; char s2 [ 20 ] = " BeginnersBook.COM " ; if ( strcmp ( s1 , s2 ) = = 0 ) { printf ( " string 1 and string 2 are equal " ) ; } else { printf ( " string 1 and 2 are different " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 20 ] = " BeginnersBook " ; char s2 [ 20 ] = " BeginnersBook.COM " ; if ( strncmp ( s1 , s2 , 8 ) = = 0 ) { printf ( " string 1 and string 2 are equal " ) ; } else { printf ( " string 1 and 2 are different " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 10 ] = " Hello " ; char s2 [ 10 ] = " World " ; strcat ( s1 , s2 ) ; printf ( " Output string after concatenation : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 10 ] = " Hello " ; char s2 [ 10 ] = " World " ; strncat ( s1 , s2 , 3 ) ; printf ( " Concatenation using strncat : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 30 ] = " string 1 " ; char s2 [ 30 ] = " string 2 : I’m gonna copied into s1 " ; strcpy ( s1 , s2 ) ; printf ( " String s1 is : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char first [ 30 ] = " string 1 " ; char second [ 30 ] = " string 2 : I’m using strncpy now " ; strncpy ( s1 , s2 , 12 ) ; printf ( " String s1 is : %s " , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char mystr [ 30 ] = " I’m an example of function strchr " ; printf ( " %s " , strchr ( mystr , 'f' ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char mystr [ 30 ] = " I’m an example of function strchr " ; printf ( " %s " , strrchr ( mystr , 'f' ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char inputstr [ 70 ] = " String Function in C at BeginnersBook.COM " ; printf ( " Output string is : %s " , strstr ( inputstr , 'Begi' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter your age : " ) ; scanf ( " %d " , & num ) ; if ( num <18 ) { printf ( " you are not eligible for voting " ) ; } else { printf ( " You can vote!! " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int j = 0 ; do { printf ( " Value of variable j is : %d\n  " , j ) ; j + + ; } while ( j < = 3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 ; while ( i = = 1 ) { printf ( " while vs do-while " ) ; } printf ( " Out of loop " ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { printf ( " while vs do-while\n  " ) ; } while ( i = = 1 ) ; printf ( " Out of loop " ) ; }
#include <stdio.h> int main ( ) { for ( int j = 0 ; j < = 8 ; j + + ) { if ( j = = 4 ) { continue ; } printf ( " %d " , j ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int counter = 10 ; while ( counter > = 0 ) { if ( counter = = 7 ) { counter-- ; continue ; } printf ( " %d " , counter ) ; counter-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int j = 0 ; do { if ( j = = 7 ) { j + + ; continue ; } printf ( " %d " , j ) ; j + + ; } while ( j <10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 0 ; while ( num < = 100 ) { printf ( " value of variable num is : %d\n  " , num ) ; if ( num = = 2 ) { break ; } num + + ; } printf ( " Out of while-loop " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var ; for ( var = 100 ; var> = 10 ; var -- ) { printf ( " var : %d\n  " , var ) ; if ( var = = 99 ) { break ; } } printf ( " Out of for-loop " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter value of num : " ) ; scanf ( " %d " , & num ) ; switch ( num ) { case 1 : printf ( " You have entered value 1\n  " ) ; break ; case 2 : printf ( " You have entered value 2\n  " ) ; break ; case 3 : printf ( " You have entered value 3\n  " ) ; break ; default : printf ( " Input value is other than 1 , 2 & 3 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int sum = 0 ; for ( int i = 0 ; i < = 10 ; i + + ) { sum = sum + i ; if ( i = = 5 ) { goto addition ; } } addition : printf ( " %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int avg = 0 ; int sum = 0 ; int x = 0 ; int num [ 4 ] ; for ( x = 0 ; x <4 ; x + + ) { printf ( " Enter number %d \n  " , ( x + 1 ) ) ; scanf ( " %d " , & num [ x ] ) ; } for ( x = 0 ; x <4 ; x + + ) { sum = sum + num [ x ] ; } avg = sum / 4 ; printf ( " Average of entered number is : %d " , avg ) ; return 0 ; }
#include <stdio.h> int main ( ) { int disp [ 2 ] [ 3 ] ; int i , j ; for ( i = 0 ; i <2 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " Enter value for disp [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & disp [ i ] [ j ] ) ; } } printf ( " Two Dimensional array elements : \n  " ) ; for ( i = 0 ; i <2 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " %d " , disp [ i ] [ j ] ) ; if ( j = = 2 ) { printf ( " \n  " ) ; } } } return 0 ; }
#include <stdio.h> int main ( ) { int abc [ 5 ] [ 4 ] ; int i , j ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <4 ; j + + ) { printf ( " Enter value for abc [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & abc [ i ] [ j ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int abc [ 5 ] [ 4 ] = { { 0 , 1 , 2 , 3 } , { 4 , 5 , 6 , 7 } , { 8 , 9 , 10 , 11 } , { 12 , 13 , 14 , 15 } , { 16 , 17 , 18 , 19 } } ; for ( int i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , abc [ i ] ) ; } return 0 ; }
#include <stdio.h> void disp ( char ch ) { printf ( " %c " , ch ) ; } int main ( ) { char arr [ ] = { 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' } ; for ( int x = 0 ; x <10 ; x + + ) { disp ( arr [ x ] ) ; } return 0 ; }
#include <stdio.h> void disp ( int * num ) { printf ( " %d " , * num ) ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; for ( int i = 0 ; i <10 ; i + + ) { disp ( & arr [ i ] ) ; } return 0 ; }
#include <stdio.h> void myfuncn ( int * var1 , int var2 ) { for ( int x = 0 ; x <var2 ; x + + ) { printf ( " Value of var_arr [ %d ] is : %d \n  " , x , * var1 ) ; var1 + + ; } } int main ( ) { int var_arr [ ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; myfuncn ( var_arr , 7 ) ; return 0 ; }
#include <stdio.h> struct StudentData { char * stu_name ; int stu_id ; int stu_age ; } ; int main ( ) { struct StudentData student ; student.stu_name = " Steve " ; student.stu_id = 1234 ; student.stu_age = 30 ; printf ( " Student Name is : %s " , student.stu_name ) ; printf ( " \n Student Id is : %d " , student.stu_id ) ; printf ( " \n Student Age is : %d " , student.stu_age ) ; return 0 ; }
#include <stdio.h> struct numbers { int num1 , num2 ; } ; int main ( ) { struct numbers s1 = { .num2 = 22 , .num1 = 11 } ; struct numbers s2 = { .num2 = 30 } ; printf ( " num1 : %d , num2 : %d\n  " , s1.num1 , s1.num2 ) ; printf ( " num1 : %d " , s2.num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of variable num is : %d " , num ) ; printf ( " \n Address of variable num is : %p " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * p ; p = # printf ( " Address of variable num is : %p " , p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int var = 10 ; p = & var ; printf ( " Value of variable var is : %d " , var ) ; printf ( " \n Value of variable var is : %d " , * p ) ; printf ( " \n Address of variable var is : %p " , & var ) ; printf ( " \n Address of variable var is : %p " , p ) ; printf ( " \n Address of pointer p is : %p " , & p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var = 10 ; int * p ; p = & var ; printf ( " Address of var is : %p " , & var ) ; printf ( " \n Address of var is : %p " , p ) ; printf ( " \n Value of var is : %d " , var ) ; printf ( " \n Value of var is : %d " , * p ) ; printf ( " \n Value of var is : %d " , * ( & var ) ) ; printf ( " \n Value of pointer p is : %p " , p ) ; printf ( " \n Address of pointer p is : %p " , & p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 123 ; int * pr2 ; int * * pr1 ; pr2 = # pr1 = & pr2 ; printf ( " \n  Value of num is : %d " , num ) ; printf ( " \n  Value of num using pr2 is : %d " , * pr2 ) ; printf ( " \n  Value of num using pr1 is : %d " , * * pr1 ) ; printf ( " \n  Address of num is : %p " , & num ) ; printf ( " \n  Address of num using pr2 is : %p " , pr2 ) ; printf ( " \n  Address of num using pr1 is : %p " , * pr1 ) ; printf ( " \n  Value of Pointer pr2 is : %p " , pr2 ) ; printf ( " \n  Value of Pointer pr2 using pr1 is : %p " , * pr1 ) ; printf ( " \n  Address of Pointer pr2 is : %p " , & pr2 ) ; printf ( " \n  Address of Pointer pr2 using pr1 is : %p " , pr1 ) ; printf ( " \n  Value of Pointer pr1 is : %p " , pr1 ) ; printf ( " \n  Address of Pointer pr1 is : %p " , & pr1 ) ; return 0 ; }
#include <stdio.h> void salaryhike ( int * var , int b ) { * var = * var + b ; } int main ( ) { int salary = 0 , bonus = 0 ; printf ( " Enter the employee current salary : " ) ; scanf ( " %d " , & salary ) ; printf ( " Enter bonus : " ) ; scanf ( " %d " , & bonus ) ; salaryhike ( & salary , bonus ) ; printf ( " Final salary : %d " , salary ) ; return 0 ; }
#include <stdio.h> void swapnum ( int * num1 , int * num2 ) { int tempnum ; tempnum = * num1 ; * num1 = * num2 ; * num2 = tempnum ; } int main ( ) { int v1 = 11 , v2 = 77 ; printf ( " Before swapping : " ) ; printf ( " \n Value of v1 is : %d " , v1 ) ; printf ( " \n Value of v2 is : %d " , v2 ) ; swapnum ( & v1 , & v2 ) ; printf ( " \n After swapping : " ) ; printf ( " \n Value of v1 is : %d " , v1 ) ; printf ( " \n Value of v2 is : %d " , v2 ) ; }
#include <stdio.h> int main ( ) { int val [ 7 ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; for ( int i = 0 ; i < 7 ; i + + ) { printf ( " val [ %d ] : value is %d and address is %d\n  " , i , val [ i ] , & val [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int val [ 7 ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; p = & val [ 0 ] ; for ( int i = 0 ; i <7 ; i + + ) { printf ( " val [ %d ] : value is %d and address is %p\n  " , i , * p , p ) ; p + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int val [ 7 ] = { 11 , 22 , 33 , 44 , 55 , 66 , 77 } ; p = val ; for ( int i = 0 ; i <7 ; i + + ) { printf ( " val [ %d ] : value is %d and address is %p\n  " , i , * ( p + i ) , ( p + i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 ; char c ; fp1 = fopen ( " C : \\myfiles\\n ewfile.txt " , " r " ) ; while ( 1 ) { c = fgetc ( fp1 ) ; if ( c = = EOF ) break ; else printf ( " %c " , c ) ; } fclose ( fp1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 ; char c ; fp1 = fopen ( " C : \\myfiles\\n ewfile.txt " , " r " ) ; while ( 1 ) { c = fgetc ( fp1 ) ; if ( c = = EOF ) break ; else printf ( " %c " , c ) ; } fclose ( fp1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; FILE * fpw ; fpw = fopen ( " C : \\n ewfile.txt " , " w " ) ; if ( fpw = = NULL ) { printf ( " Error " ) ; exit ( 1 ) ; } printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; fprintf ( fpw , " %c " , ch ) ; fclose ( fpw ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; FILE * fpr , * fpw ; fpr = fopen ( " C : \\file1.txt " , " r " ) ; if ( fpr = = NULL ) { puts ( " Input file cannot be opened " ) ; } fpw = fopen ( " C : \\file2.txt " , " w " ) ; if ( fpw = = NULL ) { puts ( " Output file cannot be opened " ) ; } while ( 1 ) { ch = fgetc ( fpr ) ; if ( ch = = EOF ) break ; else fputc ( ch , fpw ) ; } fclose ( fpr ) ; fclose ( fpw ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fpr ; char str [ 100 ] ; fpr = fopen ( " C : \\mynewtextfile.txt " , " r " ) ; if ( fpr = = NULL ) { puts ( " Issue in opening the input file " ) ; } while ( 1 ) { if ( fgets ( str , 10 , fpr ) = = NULL ) break ; else printf ( " %s " , str ) ; } fclose ( fpr ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fpw ; char str [ 100 ] ; fpw = fopen ( " C : \\mynewtextfile2.txt " , " w " ) ; if ( fpw = = NULL ) { puts ( " Issue in opening the Output file " ) ; } printf ( " Enter your string : " ) ; gets ( str ) ; fputs ( str , fpw ) ; fclose ( fpw ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; FILE * fpbr , * fpbw ; fpbr = fopen ( " bin1.exe " , " rb " ) ; if ( fpbr = = NULL ) { puts ( " Input Binary file is having issues while opening " ) ; } fpbw = fopen ( " bin2.exe " , " wb " ) ; if ( fpbw = = NULL ) { puts ( " Output binary file is having issues while opening " ) ; } while ( 1 ) { ch = fgetc ( fpbr ) ; if ( ch = = EOF ) break ; else fputc ( ch , fpbw ) ; } fclose ( fpbr ) ; fclose ( fpbw ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Catch me if you can. " ) ; } < / stdio.h>
#include <stdio.h> #include <math.h> int main ( ) { float num , root ; printf ( " Enter a number : " ) ; scanf ( " %f " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2f = %.2f " , num , root ) ; return 0 ; }
#include <stdio.h> #include <stdbool.h> int main ( ) { bool a = true ; return 0 ; }
#include <stdio.h> #include <complex.h> int main ( ) { int complex z = 2 + 1 * I ; }
#include <stdio.h> int main ( ) { short a ; long b ; long long c ; long double d ; printf ( " size of short = %d bytes\n  " , sizeof ( a ) ) ; printf ( " size of long = %d bytes\n  " , sizeof ( b ) ) ; printf ( " size of long long = %d bytes\n  " , sizeof ( c ) ) ; printf ( " size of long double = %d bytes\n  " , sizeof ( d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " C Programming " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger = 5 ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & testInteger ) ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; printf ( " Enter a number : " ) ; scanf ( " %f " , & f ) ; printf ( " Value = %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c.\n  " , chr ) ; printf ( " ASCII value of %c is %d. " , chr , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int chr = 69 ; printf ( " Character having ASCII value 69 is %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integer = 9876 ; float decimal = 987.6543 ; printf ( " 4 digit integer right justified to 6 column : %6d\n  " , integer ) ; printf ( " 4 digit integer right justified to 3 column : %3d\n  " , integer ) ; printf ( " Floating point number rounded to 2 digits : %.2f\n  " , decimal ) ; printf ( " Floating point number rounded to 0 digits : %.f\n  " , 987.6543 ) ; printf ( " Floating point number in exponential form : %e\n  " , 987.6543 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 9 , b = 4 , c ; c = a + b ; printf ( " a + b = %d \n  " , c ) ; c = a-b ; printf ( " a-b = %d \n  " , c ) ; c = a * b ; printf ( " a * b = %d \n  " , c ) ; c = a / b ; printf ( " a / b = %d \n  " , c ) ; c = a %b ; printf ( " Remainder when a divided by b = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , c ; c = a ; printf ( " c = %d \n  " , c ) ; c + = a ; printf ( " c = %d \n  " , c ) ; c - = a ; printf ( " c = %d \n  " , c ) ; c * = a ; printf ( " c = %d \n  " , c ) ; c / = a ; printf ( " c = %d \n  " , c ) ; c % = a ; printf ( " c = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 ; printf ( " %d = = %d = %d \n  " , a , b , a = = b ) ; printf ( " %d = = %d = %d \n  " , a , c , a = = c ) ; printf ( " %d > %d = %d \n  " , a , b , a > b ) ; printf ( " %d > %d = %d \n  " , a , c , a > c ) ; printf ( " %d < %d = %d \n  " , a , b , a < b ) ; printf ( " %d < %d = %d \n  " , a , c , a < c ) ; printf ( " %d ! = %d = %d \n  " , a , b , a ! = b ) ; printf ( " %d ! = %d = %d \n  " , a , c , a ! = c ) ; printf ( " %d > = %d = %d \n  " , a , b , a > = b ) ; printf ( " %d > = %d = %d \n  " , a , c , a > = c ) ; printf ( " %d < = %d = %d \n  " , a , b , a < = b ) ; printf ( " %d < = %d = %d \n  " , a , c , a < = c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 , result ; result = ( a = = b ) & & ( c > b ) ; printf ( " ( a = = b ) & & ( c > b ) equals to %d \n  " , result ) ; result = ( a = = b ) & & ( c < b ) ; printf ( " ( a = = b ) & & ( c < b ) equals to %d \n  " , result ) ; result = ( a = = b ) || ( c < b ) ; printf ( " ( a = = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ( a ! = b ) || ( c < b ) ; printf ( " ( a ! = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ! ( a ! = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; result = ! ( a = = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , e [ 10 ] ; float b ; double c ; char d ; printf ( " Size of int = %lu bytes\n  " , sizeof ( a ) ) ; printf ( " Size of float = %lu bytes\n  " , sizeof ( b ) ) ; printf ( " Size of double = %lu bytes\n  " , sizeof ( c ) ) ; printf ( " Size of char = %lu byte\n  " , sizeof ( d ) ) ; printf ( " Size of integer type array having 10 elements = %lu bytes\n  " , sizeof ( e ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number < 0 ) { printf ( " You entered %d.\n  " , number ) ; } printf ( " The if statement is easy. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) printf ( " %d is an even integer. " , number ) ; else printf ( " %d is an odd integer. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else if ( number1 > number2 ) { printf ( " Result : %d > %d " , number1 , number2 ) ; } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 > = number2 ) { if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else { printf ( " Result : %d > %d " , number1 , number2 ) ; } } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , count , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; for ( count = 1 ; count < = num ; + + count ) { sum + = count ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; long long factorial ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; factorial = 1 ; while ( number > 0 ) { factorial * = number ; --number ; } printf ( " Factorial = %lld " , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number , sum = 0 ; do { printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; sum + = number ; } while ( number ! = 0.0 ) ; printf ( " Sum = %.2lf " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char operator ; double firstNumber , secondNumber ; printf ( " Enter an operator ( + , - , * , / ) : " ) ; scanf ( " %c " , & operator ) ; printf ( " Enter two operands : " ) ; scanf ( " %lf %lf " , & firstNumber , & secondNumber ) ; switch ( operator ) { case ' + ' : printf ( " %.1lf + %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber + secondNumber ) ; break ; case '-' : printf ( " %.1lf - %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber-secondNumber ) ; break ; case ' * ' : printf ( " %.1lf * %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber * secondNumber ) ; break ; case ' / ' : printf ( " %.1lf / %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber / secondNumber ) ; break ; default : printf ( " Error! operator is not correct " ) ; } return 0 ; }
#include <stdio.h> int addNumbers ( int a , int b ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enters two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = addNumbers ( n1 , n2 ) ; printf ( " sum = %d " , sum ) ; return 0 ; } int addNumbers ( int a , int b ) { int result ; result = a + b ; return result ; }
#include <stdio.h> void checkPrimeNumber ( ) ; int main ( ) { checkPrimeNumber ( ) ; return 0 ; } void checkPrimeNumber ( ) { int n , i , flag = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; } } if ( flag = = 1 ) printf ( " %d is not a prime number. " , n ) ; else printf ( " %d is a prime number. " , n ) ; }
#include <stdio.h> int getInteger ( ) ; int main ( ) { int n , i , flag = 0 ; n = getInteger ( ) ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; break ; } } if ( flag = = 1 ) printf ( " %d is not a prime number. " , n ) ; else printf ( " %d is a prime number. " , n ) ; return 0 ; } int getInteger ( ) { int n ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; return n ; }
#include <stdio.h> void checkPrimeAndDisplay ( int n ) ; int main ( ) { int n ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; checkPrimeAndDisplay ( n ) ; return 0 ; } void checkPrimeAndDisplay ( int n ) { int i , flag = 0 ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; break ; } } if ( flag = = 1 ) printf ( " %d is not a prime number. " , n ) ; else printf ( " %d is a prime number. " , n ) ; }
#include <stdio.h> int checkPrimeNumber ( int n ) ; int main ( ) { int n , flag ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; flag = checkPrimeNumber ( n ) ; if ( flag = = 1 ) printf ( " %d is not a prime number " , n ) ; else printf ( " %d is a prime number " , n ) ; return 0 ; } int checkPrimeNumber ( int n ) { int i ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) return 1 ; } return 0 ; }
#include <stdio.h> int sum ( int n ) ; int main ( ) { int number , result ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & number ) ; result = sum ( number ) ; printf ( " sum = %d " , result ) ; return 0 ; } int sum ( int num ) { if ( num! = 0 ) return num + sum ( num-1 ) ; else return num ; }
#include <stdio.h> void display ( ) ; int n = 5 ; int main ( ) { + + n ; display ( ) ; return 0 ; } void display ( ) { + + n ; printf ( " n = %d " , n ) ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; } void display ( ) { static int c = 0 ; printf ( " %d " , c ) ; c + = 5 ; }
#include <stdio.h> int main ( ) { int marks [ 10 ] , i , n , sum = 0 , average ; printf ( " Enter n : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i <n ; + + i ) { printf ( " Enter number %d : " , i + 1 ) ; scanf ( " %d " , & marks [ i ] ) ; sum + = marks [ i ] ; } average = sum / n ; printf ( " Average = %d " , average ) ; return 0 ; }
#include <stdio.h> const int CITY = 2 ; const int WEEK = 7 ; int main ( ) { int temperature [ CITY ] [ WEEK ] ; for ( int i = 0 ; i < CITY ; + + i ) { for ( int j = 0 ; j < WEEK ; + + j ) { printf ( " City %d , Day %d : " , i + 1 , j + 1 ) ; scanf ( " %d " , & temperature [ i ] [ j ] ) ; } } printf ( " \n Displaying values : \n \n  " ) ; for ( int i = 0 ; i < CITY ; + + i ) { for ( int j = 0 ; j < WEEK ; + + j ) { printf ( " City %d , Day %d = %d\n  " , i + 1 , j + 1 , temperature [ i ] [ j ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { float a [ 2 ] [ 2 ] , b [ 2 ] [ 2 ] , c [ 2 ] [ 2 ] ; int i , j ; printf ( " Enter elements of 1st matrix\n  " ) ; for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { printf ( " Enter a %d %d : " , i + 1 , j + 1 ) ; scanf ( " %f " , & a [ i ] [ j ] ) ; } printf ( " Enter elements of 2nd matrix\n  " ) ; for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { printf ( " Enter b %d %d : " , i + 1 , j + 1 ) ; scanf ( " %f " , & b [ i ] [ j ] ) ; } for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { c [ i ] [ j ] = a [ i ] [ j ] + b [ i ] [ j ] ; } printf ( " \n Sum Of Matrix : " ) ; for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { printf ( " %.1f\t " , c [ i ] [ j ] ) ; if ( j = = 1 ) printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , test [ 2 ] [ 3 ] [ 2 ] ; printf ( " Enter 12 values : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) { for ( j = 0 ; j < 3 ; + + j ) { for ( k = 0 ; k < 2 ; + + k ) { scanf ( " %d " , & test [ i ] [ j ] [ k ] ) ; } } } printf ( " \n Displaying values : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) { for ( j = 0 ; j < 3 ; + + j ) { for ( k = 0 ; k < 2 ; + + k ) { printf ( " test [ %d ] [ %d ] [ %d ] = %d\n  " , i , j , k , test [ i ] [ j ] [ k ] ) ; } } } return 0 ; }
#include <stdio.h> void display ( int age ) { printf ( " %d " , age ) ; } int main ( ) { int ageArray [ ] = { 2 , 3 , 4 } ; display ( ageArray [ 2 ] ) ; return 0 ; }
#include <stdio.h> float average ( float age [ ] ) ; int main ( ) { float avg , age [ ] = { 23.4 , 55 , 22.6 , 3 , 40.5 , 18 } ; avg = average ( age ) ; printf ( " Average age = %.2f " , avg ) ; return 0 ; } float average ( float age [ ] ) { int i ; float avg , sum = 0.0 ; for ( i = 0 ; i < 6 ; + + i ) { sum + = age [ i ] ; } avg = ( sum / 6 ) ; return avg ; }
#include <stdio.h> void displayNumbers ( int num [ 2 ] [ 2 ] ) ; int main ( ) { int num [ 2 ] [ 2 ] , i , j ; printf ( " Enter 4 numbers : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) for ( j = 0 ; j < 2 ; + + j ) scanf ( " %d " , & num [ i ] [ j ] ) ; displayNumbers ( num ) ; return 0 ; } void displayNumbers ( int num [ 2 ] [ 2 ] ) { int i , j ; printf ( " Displaying : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) for ( j = 0 ; j < 2 ; + + j ) printf ( " %d\n  " , num [ i ] [ j ] ) ; }
#include <stdio.h> int main ( ) { char name [ 20 ] ; printf ( " Enter name : " ) ; scanf ( " %s " , name ) ; printf ( " Your name is %s. " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> void displayString ( char str [ ] ) ; int main ( ) { char str [ 50 ] ; printf ( " Enter string : " ) ; gets ( str ) ; displayString ( str ) ; return 0 ; } void displayString ( char str [ ] ) { printf ( " String Output : " ) ; puts ( str ) ; }
#include <stdio.h> int main ( void ) { char name [ ] = " Harry Potter " ; printf ( " %c " , * name ) ; printf ( " %c " , * ( name + 1 ) ) ; printf ( " %c " , * ( name + 7 ) ) ; char * namePtr ; namePtr = name ; printf ( " %c " , * namePtr ) ; printf ( " %c " , * ( namePtr + 1 ) ) ; printf ( " %c " , * ( namePtr + 7 ) ) ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> int main ( ) { int var = 5 ; printf ( " Value : %d\n  " , var ) ; printf ( " Address : %u " , & var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * pc , c ; c = 22 ; printf ( " Address of c : %u\n  " , & c ) ; printf ( " Value of c : %d\n \n  " , c ) ; pc = & c ; printf ( " Address of pointer pc : %u\n  " , pc ) ; printf ( " Content of pointer pc : %d\n \n  " , * pc ) ; c = 11 ; printf ( " Address of pointer pc : %u\n  " , pc ) ; printf ( " Content of pointer pc : %d\n \n  " , * pc ) ; * pc = 2 ; printf ( " Address of c : %u\n  " , & c ) ; printf ( " Value of c : %d\n \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 4 ] ; int i ; for ( i = 0 ; i < 4 ; + + i ) { printf ( " & x [ %d ] = %u\n  " , i , & x [ i ] ) ; } printf ( " Address of array x : %u " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , x [ 6 ] , sum = 0 ; printf ( " Enter 6 numbers : " ) ; for ( i = 0 ; i < 6 ; + + i ) { scanf ( " %d " , x + i ) ; sum + = * ( x + i ) ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * ptr ; ptr = & x [ 2 ] ; printf ( " * ptr = %d \n  " , * ptr ) ; printf ( " * ptr + 1 = %d \n  " , * ptr + 1 ) ; printf ( " * ptr-1 = %d " , * ptr-1 ) ; return 0 ; }
#include <stdio.h> void swap ( int * n1 , int * n2 ) ; int main ( ) { int num1 = 5 , num2 = 10 ; swap ( & num1 , & num2 ) ; printf ( " num1 = %d\n  " , num1 ) ; printf ( " num2 = %d " , num2 ) ; return 0 ; } void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Error! memory not allocated. " ) ; exit ( 0 ) ; } printf ( " Enter elements : " ) ; for ( i = 0 ; i < n ; + + i ) { scanf ( " %d " , ptr + i ) ; sum + = * ( ptr + i ) ; } printf ( " Sum = %d " , sum ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Error! memory not allocated. " ) ; exit ( 0 ) ; } printf ( " Enter elements : " ) ; for ( i = 0 ; i < n ; + + i ) { scanf ( " %d " , ptr + i ) ; sum + = * ( ptr + i ) ; } printf ( " Sum = %d " , sum ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr , i , n1 , n2 ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & n1 ) ; ptr = ( int * ) malloc ( n1 * sizeof ( int ) ) ; printf ( " Addresses of previously allocated memory : " ) ; for ( i = 0 ; i < n1 ; + + i ) printf ( " %u\n  " , ptr + i ) ; printf ( " \n Enter new size of array : " ) ; scanf ( " %d " , & n2 ) ; ptr = realloc ( ptr , n2 * sizeof ( int ) ) ; printf ( " Addresses of newly allocated memory : " ) ; for ( i = 0 ; i < n2 ; + + i ) printf ( " %u\n  " , ptr + i ) ; return 0 ; }
#include <stdio.h> struct Distance { int feet ; float inch ; } dist1 , dist2 , sum ; int main ( ) { printf ( " 1st distance\n  " ) ; printf ( " Enter feet : " ) ; scanf ( " %d " , & dist1.feet ) ; printf ( " Enter inch : " ) ; scanf ( " %f " , & dist1.inch ) ; printf ( " 2nd distance\n  " ) ; printf ( " Enter feet : " ) ; scanf ( " %d " , & dist2.feet ) ; printf ( " Enter inch : " ) ; scanf ( " %f " , & dist2.inch ) ; sum.feet = dist1.feet + dist2.feet ; sum.inch = dist1.inch + dist2.inch ; while ( sum.inch > = 12 ) { + + sum.feet ; sum.inch = sum.inch - 12 ; } printf ( " Sum of distances = %d\'- %.1f\ " " , sum.feet , sum.inch ) ; return 0 ; }
#include <stdio.h> struct person { int age ; float weight ; } ; int main ( ) { struct person * personPtr , person1 ; personPtr = & person1 ; printf ( " Enter age : " ) ; scanf ( " %d " , & personPtr- ; > age ) ; printf ( " Enter weight : " ) ; scanf ( " %f " , & personPtr- ; > weight ) ; printf ( " Displaying : \n  " ) ; printf ( " Age : %d\n  " , personPtr-> age ) ; printf ( " weight : %f " , personPtr-> weight ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct person { int age ; float weight ; char name [ 30 ] ; } ; int main ( ) { struct person * ptr ; int i , n ; printf ( " Enter number of persons : " ) ; scanf ( " %d " , & n ) ; ptr = ( struct person * ) malloc ( num * sizeof ( struct person ) ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " Enter first name and age respectively : " ) ; scanf ( " %s %d " , & ( ptr + i ) -> name , & ( ptr + i ) -> age ) ; } printf ( " Displaying Information : \n  " ) ; for ( i = 0 ; i < n ; + + i ) printf ( " Name : %s\tAge : %d\n  " , ( ptr + i ) -> name , ( ptr + i ) -> age ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 50 ] ; int age ; } ; void display ( struct student s ) ; int main ( ) { struct student s1 ; printf ( " Enter name : " ) ; scanf ( " % [ ^\n  ] % * c " , s1.name ) ; printf ( " Enter age : " ) ; scanf ( " %d " , & s1.age ) ; display ( s1 ) ; return 0 ; } void display ( struct student s ) { printf ( " \n Displaying information\n  " ) ; printf ( " Name : %s " , s.name ) ; printf ( " \n Roll : %d " , s.age ) ; }
#include <stdio.h> struct student { char name [ 50 ] ; int age ; } ; struct student getInformation ( ) ; int main ( ) { struct student s ; s = getInformation ( ) ; printf ( " \n Displaying information\n  " ) ; printf ( " Name : %s " , s.name ) ; printf ( " \n Roll : %d " , s.age ) ; return 0 ; } struct student getInformation ( ) { struct student s1 ; printf ( " Enter name : " ) ; scanf ( " % [ ^\n  ] % * c " , s1.name ) ; printf ( " Enter age : " ) ; scanf ( " %d " , & s1.age ) ; return s1 ; }
#include <stdio.h> typedef struct Complex { float real ; float imag ; } complex ; void addNumbers ( complex c1 , complex c2 , complex * result ) ; int main ( ) { complex c1 , c2 , result ; printf ( " For first number , \n  " ) ; printf ( " Enter real part : " ) ; scanf ( " %f " , & c1.real ) ; printf ( " Enter imaginary part : " ) ; scanf ( " %f " , & c1.imag ) ; printf ( " For second number , \n  " ) ; printf ( " Enter real part : " ) ; scanf ( " %f " , & c2.real ) ; printf ( " Enter imaginary part : " ) ; scanf ( " %f " , & c2.imag ) ; addNumbers ( c1 , c2 , & result ) ; printf ( " \n result.real = %.1f\n  " , result.real ) ; printf ( " result.imag = %.1f " , result.imag ) ; return 0 ; } void addNumbers ( complex c1 , complex c2 , complex * result ) { result-> real = c1.real + c2.real ; result-> imag = c1.imag + c2.imag ; }
#include <stdio.h> union unionJob { char name [ 32 ] ; float salary ; int workerNo ; } uJob ; struct structJob { char name [ 32 ] ; float salary ; int workerNo ; } sJob ; int main ( ) { printf ( " size of union = %d bytes " , sizeof ( uJob ) ) ; printf ( " \n size of structure = %d bytes " , sizeof ( sJob ) ) ; return 0 ; }
#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main ( ) { j.salary = 12.3 ; j.workerNo = 100 ; printf ( " Salary = %.1f\n  " , j.salary ) ; printf ( " Number of workers = %d " , j.workerNo ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; fptr = fopen ( " C : \\program.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } printf ( " Enter num : " ) ; scanf ( " %d " , & num ) ; fprintf ( fptr , " %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.txt " , " r " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fscanf ( fptr , " %d " , & num ) ; printf ( " Value of n = %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; } ; int main ( ) { int n ; struct threeNum num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.bin " , " wb " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } for ( n = 1 ; n < 5 ; + + n ) { num.n1 = n ; num.n2 = 5 * n ; num.n3 = 5 * n + 1 ; fwrite ( & num , sizeof ( struct threeNum ) , 1 , fptr ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; } ; int main ( ) { int n ; struct threeNum num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.bin " , " rb " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } for ( n = 1 ; n < 5 ; + + n ) { fread ( & num , sizeof ( struct threeNum ) , 1 , fptr ) ; printf ( " n1 : %d\tn2 : %d\tn3 : %d " , num.n1 , num.n2 , num.n3 ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; } ; int main ( ) { int n ; struct threeNum num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.bin " , " rb " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fseek ( fptr , -sizeof ( struct threeNum ) , SEEK_END ) ; for ( n = 1 ; n < 5 ; + + n ) { fread ( & num , sizeof ( struct threeNum ) , 1 , fptr ) ; printf ( " n1 : %d\tn2 : %d\tn3 : %d\n  " , num.n1 , num.n2 , num.n3 ) ; fseek ( fptr , -2 * sizeof ( struct threeNum ) , SEEK_CUR ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; printf ( " You entered : %d " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int firstNumber , secondNumber , sumOfTwoNumbers ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & firstNumber , & secondNumber ) ; sumOfTwoNumbers = firstNumber + secondNumber ; printf ( " %d + %d = %d " , firstNumber , secondNumber , sumOfTwoNumbers ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber , product ; printf ( " Enter two numbers : " ) ; scanf ( " %lf %lf " , & firstNumber , & secondNumber ) ; product = firstNumber * secondNumber ; printf ( " Product = %.2lf " , product ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; printf ( " ASCII value of %c = %d " , c , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int dividend , divisor , quotient , remainder ; printf ( " Enter dividend : " ) ; scanf ( " %d " , & dividend ) ; printf ( " Enter divisor : " ) ; scanf ( " %d " , & divisor ) ; quotient = dividend / divisor ; remainder = dividend % divisor ; printf ( " Quotient = %d\n  " , quotient ) ; printf ( " Remainder = %d " , remainder ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerType ; float floatType ; double doubleType ; char charType ; printf ( " Size of int : %ld bytes\n  " , sizeof ( integerType ) ) ; printf ( " Size of float : %ld bytes\n  " , sizeof ( floatType ) ) ; printf ( " Size of double : %ld bytes\n  " , sizeof ( doubleType ) ) ; printf ( " Size of char : %ld byte\n  " , sizeof ( charType ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a ; long b ; long long c ; double e ; long double f ; printf ( " Size of int = %ld bytes \n  " , sizeof ( a ) ) ; printf ( " Size of long = %ld bytes\n  " , sizeof ( b ) ) ; printf ( " Size of long long = %ld bytes\n  " , sizeof ( c ) ) ; printf ( " Size of double = %ld bytes\n  " , sizeof ( e ) ) ; printf ( " Size of long double = %ld bytes\n  " , sizeof ( f ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber , temporaryVariable ; printf ( " Enter first number : " ) ; scanf ( " %lf " , & firstNumber ) ; printf ( " Enter second number : " ) ; scanf ( " %lf " , & secondNumber ) ; temporaryVariable = firstNumber ; firstNumber = secondNumber ; secondNumber = temporaryVariable ; printf ( " \n After swapping , firstNumber = %.2lf\n  " , firstNumber ) ; printf ( " After swapping , secondNumber = %.2lf " , secondNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { double firstNumber , secondNumber ; printf ( " Enter first number : " ) ; scanf ( " %lf " , & firstNumber ) ; printf ( " Enter second number : " ) ; scanf ( " %lf " , & secondNumber ) ; firstNumber = firstNumber - secondNumber ; secondNumber = firstNumber + secondNumber ; firstNumber = secondNumber - firstNumber ; printf ( " \n After swapping , firstNumber = %.2lf\n  " , firstNumber ) ; printf ( " After swapping , secondNumber = %.2lf " , secondNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 9 , b = 4 , c ; c = a + b ; printf ( " a + b = %d \n  " , c ) ; c = a-b ; printf ( " a-b = %d \n  " , c ) ; c = a * b ; printf ( " a * b = %d \n  " , c ) ; c = a / b ; printf ( " a / b = %d \n  " , c ) ; c = a %b ; printf ( " Remainder when a divided by b = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , c ; c = a ; printf ( " c = %d \n  " , c ) ; c + = a ; printf ( " c = %d \n  " , c ) ; c - = a ; printf ( " c = %d \n  " , c ) ; c * = a ; printf ( " c = %d \n  " , c ) ; c / = a ; printf ( " c = %d \n  " , c ) ; c % = a ; printf ( " c = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 ; printf ( " %d = = %d = %d \n  " , a , b , a = = b ) ; printf ( " %d = = %d = %d \n  " , a , c , a = = c ) ; printf ( " %d > %d = %d \n  " , a , b , a > b ) ; printf ( " %d > %d = %d \n  " , a , c , a > c ) ; printf ( " %d < %d = %d \n  " , a , b , a < b ) ; printf ( " %d < %d = %d \n  " , a , c , a < c ) ; printf ( " %d ! = %d = %d \n  " , a , b , a ! = b ) ; printf ( " %d ! = %d = %d \n  " , a , c , a ! = c ) ; printf ( " %d > = %d = %d \n  " , a , b , a > = b ) ; printf ( " %d > = %d = %d \n  " , a , c , a > = c ) ; printf ( " %d < = %d = %d \n  " , a , b , a < = b ) ; printf ( " %d < = %d = %d \n  " , a , c , a < = c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 , result ; result = ( a = = b ) & & ( c > b ) ; printf ( " ( a = = b ) & & ( c > b ) equals to %d \n  " , result ) ; result = ( a = = b ) & & ( c < b ) ; printf ( " ( a = = b ) & & ( c < b ) equals to %d \n  " , result ) ; result = ( a = = b ) || ( c < b ) ; printf ( " ( a = = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ( a ! = b ) || ( c < b ) ; printf ( " ( a ! = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ! ( a ! = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; result = ! ( a = = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , e [ 10 ] ; float b ; double c ; char d ; printf ( " Size of int = %lu bytes\n  " , sizeof ( a ) ) ; printf ( " Size of float = %lu bytes\n  " , sizeof ( b ) ) ; printf ( " Size of double = %lu bytes\n  " , sizeof ( c ) ) ; printf ( " Size of char = %lu byte\n  " , sizeof ( d ) ) ; printf ( " Size of integer type array having 10 elements = %lu bytes\n  " , sizeof ( e ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number < 0 ) { printf ( " You entered %d.\n  " , number ) ; } printf ( " The if statement is easy. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) printf ( " %d is an even integer. " , number ) ; else printf ( " %d is an odd integer. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else if ( number1 > number2 ) { printf ( " Result : %d > %d " , number1 , number2 ) ; } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int number1 , number2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & number1 , & number2 ) ; if ( number1 > = number2 ) { if ( number1 = = number2 ) { printf ( " Result : %d = %d " , number1 , number2 ) ; } else { printf ( " Result : %d > %d " , number1 , number2 ) ; } } else { printf ( " Result : %d < %d " , number1 , number2 ) ; } return 0 ; }
#include <stdio.h> #include <stdbool.h> int main ( ) { bool a = true ; return 0 ; }
#include <stdio.h> #include <complex.h> int main ( ) { int complex z = 2 + 1 * I ; }
#include <stdio.h> int main ( ) { short a ; long b ; long long c ; long double d ; printf ( " size of short = %d bytes\n  " , sizeof ( a ) ) ; printf ( " size of long = %d bytes\n  " , sizeof ( b ) ) ; printf ( " size of long long = %d bytes\n  " , sizeof ( c ) ) ; printf ( " size of long double = %d bytes\n  " , sizeof ( d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " C Programming " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger = 5 ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int testInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & testInteger ) ; printf ( " Number = %d " , testInteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; printf ( " Enter a number : " ) ; scanf ( " %f " , & f ) ; printf ( " Value = %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char chr ; printf ( " Enter a character : " ) ; scanf ( " %c " , & chr ) ; printf ( " You entered %c.\n  " , chr ) ; printf ( " ASCII value of %c is %d. " , chr , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int chr = 69 ; printf ( " Character having ASCII value 69 is %c. " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integer = 9876 ; float decimal = 987.6543 ; printf ( " 4 digit integer right justified to 6 column : %6d\n  " , integer ) ; printf ( " 4 digit integer right justified to 3 column : %3d\n  " , integer ) ; printf ( " Floating point number rounded to 2 digits : %.2f\n  " , decimal ) ; printf ( " Floating point number rounded to 0 digits : %.f\n  " , 987.6543 ) ; printf ( " Floating point number in exponential form : %e\n  " , 987.6543 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; for ( count = 1 ; count < = num ; + + count ) { sum + = count ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; long long factorial ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; factorial = 1 ; while ( number > 0 ) { factorial * = number ; --number ; } printf ( " Factorial = %lld " , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number , sum = 0 ; do { printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; sum + = number ; } while ( number ! = 0.0 ) ; printf ( " Sum = %.2lf " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { char operator ; double firstNumber , secondNumber ; printf ( " Enter an operator ( + , - , * , / ) : " ) ; scanf ( " %c " , & operator ) ; printf ( " Enter two operands : " ) ; scanf ( " %lf %lf " , & firstNumber , & secondNumber ) ; switch ( operator ) { case ' + ' : printf ( " %.1lf + %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber + secondNumber ) ; break ; case '-' : printf ( " %.1lf - %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber-secondNumber ) ; break ; case ' * ' : printf ( " %.1lf * %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber * secondNumber ) ; break ; case ' / ' : printf ( " %.1lf / %.1lf = %.1lf " , firstNumber , secondNumber , firstNumber / secondNumber ) ; break ; default : printf ( " Error! operator is not correct " ) ; } return 0 ; }
#include <stdio.h> int addNumbers ( int a , int b ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enters two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = addNumbers ( n1 , n2 ) ; printf ( " sum = %d " , sum ) ; return 0 ; } int addNumbers ( int a , int b ) { int result ; result = a + b ; return result ; }
#include <stdio.h> void checkPrimeNumber ( ) ; int main ( ) { checkPrimeNumber ( ) ; return 0 ; } void checkPrimeNumber ( ) { int n , i , flag = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; } } if ( flag = = 1 ) printf ( " %d is not a prime number. " , n ) ; else printf ( " %d is a prime number. " , n ) ; }
#include <stdio.h> int getInteger ( ) ; int main ( ) { int n , i , flag = 0 ; n = getInteger ( ) ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; break ; } } if ( flag = = 1 ) printf ( " %d is not a prime number. " , n ) ; else printf ( " %d is a prime number. " , n ) ; return 0 ; } int getInteger ( ) { int n ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; return n ; }
#include <stdio.h> void checkPrimeAndDisplay ( int n ) ; int main ( ) { int n ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; checkPrimeAndDisplay ( n ) ; return 0 ; } void checkPrimeAndDisplay ( int n ) { int i , flag = 0 ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; break ; } } if ( flag = = 1 ) printf ( " %d is not a prime number. " , n ) ; else printf ( " %d is a prime number. " , n ) ; }
#include <stdio.h> int checkPrimeNumber ( int n ) ; int main ( ) { int n , flag ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; flag = checkPrimeNumber ( n ) ; if ( flag = = 1 ) printf ( " %d is not a prime number " , n ) ; else printf ( " %d is a prime number " , n ) ; return 0 ; } int checkPrimeNumber ( int n ) { int i ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) return 1 ; } return 0 ; }
#include <stdio.h> int sum ( int n ) ; int main ( ) { int number , result ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & number ) ; result = sum ( number ) ; printf ( " sum = %d " , result ) ; return 0 ; } int sum ( int num ) { if ( num! = 0 ) return num + sum ( num-1 ) ; else return num ; }
#include <stdio.h> void display ( ) ; int n = 5 ; int main ( ) { + + n ; display ( ) ; return 0 ; } void display ( ) { + + n ; printf ( " n = %d " , n ) ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; } void display ( ) { static int c = 0 ; printf ( " %d " , c ) ; c + = 5 ; }
#include <stdio.h> int main ( ) { int marks [ 10 ] , i , n , sum = 0 , average ; printf ( " Enter n : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i <n ; + + i ) { printf ( " Enter number %d : " , i + 1 ) ; scanf ( " %d " , & marks [ i ] ) ; sum + = marks [ i ] ; } average = sum / n ; printf ( " Average = %d " , average ) ; return 0 ; }
#include <stdio.h> const int CITY = 2 ; const int WEEK = 7 ; int main ( ) { int temperature [ CITY ] [ WEEK ] ; for ( int i = 0 ; i < CITY ; + + i ) { for ( int j = 0 ; j < WEEK ; + + j ) { printf ( " City %d , Day %d : " , i + 1 , j + 1 ) ; scanf ( " %d " , & temperature [ i ] [ j ] ) ; } } printf ( " \n Displaying values : \n \n  " ) ; for ( int i = 0 ; i < CITY ; + + i ) { for ( int j = 0 ; j < WEEK ; + + j ) { printf ( " City %d , Day %d = %d\n  " , i + 1 , j + 1 , temperature [ i ] [ j ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { float a [ 2 ] [ 2 ] , b [ 2 ] [ 2 ] , c [ 2 ] [ 2 ] ; int i , j ; printf ( " Enter elements of 1st matrix\n  " ) ; for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { printf ( " Enter a %d %d : " , i + 1 , j + 1 ) ; scanf ( " %f " , & a [ i ] [ j ] ) ; } printf ( " Enter elements of 2nd matrix\n  " ) ; for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { printf ( " Enter b %d %d : " , i + 1 , j + 1 ) ; scanf ( " %f " , & b [ i ] [ j ] ) ; } for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { c [ i ] [ j ] = a [ i ] [ j ] + b [ i ] [ j ] ; } printf ( " \n Sum Of Matrix : " ) ; for ( i = 0 ; i <2 ; + + i ) for ( j = 0 ; j <2 ; + + j ) { printf ( " %.1f\t " , c [ i ] [ j ] ) ; if ( j = = 1 ) printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , test [ 2 ] [ 3 ] [ 2 ] ; printf ( " Enter 12 values : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) { for ( j = 0 ; j < 3 ; + + j ) { for ( k = 0 ; k < 2 ; + + k ) { scanf ( " %d " , & test [ i ] [ j ] [ k ] ) ; } } } printf ( " \n Displaying values : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) { for ( j = 0 ; j < 3 ; + + j ) { for ( k = 0 ; k < 2 ; + + k ) { printf ( " test [ %d ] [ %d ] [ %d ] = %d\n  " , i , j , k , test [ i ] [ j ] [ k ] ) ; } } } return 0 ; }
#include <stdio.h> void display ( int age ) { printf ( " %d " , age ) ; } int main ( ) { int ageArray [ ] = { 2 , 3 , 4 } ; display ( ageArray [ 2 ] ) ; return 0 ; }
#include <stdio.h> float average ( float age [ ] ) ; int main ( ) { float avg , age [ ] = { 23.4 , 55 , 22.6 , 3 , 40.5 , 18 } ; avg = average ( age ) ; printf ( " Average age = %.2f " , avg ) ; return 0 ; } float average ( float age [ ] ) { int i ; float avg , sum = 0.0 ; for ( i = 0 ; i < 6 ; + + i ) { sum + = age [ i ] ; } avg = ( sum / 6 ) ; return avg ; }
#include <stdio.h> void displayNumbers ( int num [ 2 ] [ 2 ] ) ; int main ( ) { int num [ 2 ] [ 2 ] , i , j ; printf ( " Enter 4 numbers : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) for ( j = 0 ; j < 2 ; + + j ) scanf ( " %d " , & num [ i ] [ j ] ) ; displayNumbers ( num ) ; return 0 ; } void displayNumbers ( int num [ 2 ] [ 2 ] ) { int i , j ; printf ( " Displaying : \n  " ) ; for ( i = 0 ; i < 2 ; + + i ) for ( j = 0 ; j < 2 ; + + j ) printf ( " %d\n  " , num [ i ] [ j ] ) ; }
#include <stdio.h> int main ( ) { int var = 5 ; printf ( " Value : %d\n  " , var ) ; printf ( " Address : %u " , & var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * pc , c ; c = 22 ; printf ( " Address of c : %u\n  " , & c ) ; printf ( " Value of c : %d\n \n  " , c ) ; pc = & c ; printf ( " Address of pointer pc : %u\n  " , pc ) ; printf ( " Content of pointer pc : %d\n \n  " , * pc ) ; c = 11 ; printf ( " Address of pointer pc : %u\n  " , pc ) ; printf ( " Content of pointer pc : %d\n \n  " , * pc ) ; * pc = 2 ; printf ( " Address of c : %u\n  " , & c ) ; printf ( " Value of c : %d\n \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 4 ] ; int i ; for ( i = 0 ; i < 4 ; + + i ) { printf ( " & x [ %d ] = %u\n  " , i , & x [ i ] ) ; } printf ( " Address of array x : %u " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , x [ 6 ] , sum = 0 ; printf ( " Enter 6 numbers : " ) ; for ( i = 0 ; i < 6 ; + + i ) { scanf ( " %d " , x + i ) ; sum + = * ( x + i ) ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * ptr ; ptr = & x [ 2 ] ; printf ( " * ptr = %d \n  " , * ptr ) ; printf ( " * ptr + 1 = %d \n  " , * ptr + 1 ) ; printf ( " * ptr-1 = %d " , * ptr-1 ) ; return 0 ; }
#include <stdio.h> void swap ( int * n1 , int * n2 ) ; int main ( ) { int num1 = 5 , num2 = 10 ; swap ( & num1 , & num2 ) ; printf ( " num1 = %d\n  " , num1 ) ; printf ( " num2 = %d " , num2 ) ; return 0 ; } void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Error! memory not allocated. " ) ; exit ( 0 ) ; } printf ( " Enter elements : " ) ; for ( i = 0 ; i < n ; + + i ) { scanf ( " %d " , ptr + i ) ; sum + = * ( ptr + i ) ; } printf ( " Sum = %d " , sum ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Error! memory not allocated. " ) ; exit ( 0 ) ; } printf ( " Enter elements : " ) ; for ( i = 0 ; i < n ; + + i ) { scanf ( " %d " , ptr + i ) ; sum + = * ( ptr + i ) ; } printf ( " Sum = %d " , sum ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr , i , n1 , n2 ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & n1 ) ; ptr = ( int * ) malloc ( n1 * sizeof ( int ) ) ; printf ( " Addresses of previously allocated memory : " ) ; for ( i = 0 ; i < n1 ; + + i ) printf ( " %u\n  " , ptr + i ) ; printf ( " \n Enter new size of array : " ) ; scanf ( " %d " , & n2 ) ; ptr = realloc ( ptr , n2 * sizeof ( int ) ) ; printf ( " Addresses of newly allocated memory : " ) ; for ( i = 0 ; i < n2 ; + + i ) printf ( " %u\n  " , ptr + i ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 20 ] ; printf ( " Enter name : " ) ; scanf ( " %s " , name ) ; printf ( " Your name is %s. " , name ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> void displayString ( char str [ ] ) ; int main ( ) { char str [ 50 ] ; printf ( " Enter string : " ) ; gets ( str ) ; displayString ( str ) ; return 0 ; } void displayString ( char str [ ] ) { printf ( " String Output : " ) ; puts ( str ) ; }
#include <stdio.h> int main ( void ) { char name [ ] = " Harry Potter " ; printf ( " %c " , * name ) ; printf ( " %c " , * ( name + 1 ) ) ; printf ( " %c " , * ( name + 7 ) ) ; char * namePtr ; namePtr = name ; printf ( " %c " , * namePtr ) ; printf ( " %c " , * ( namePtr + 1 ) ) ; printf ( " %c " , * ( namePtr + 7 ) ) ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Name : " ) ; puts ( name ) ; return 0 ; }
#include <stdio.h> struct Distance { int feet ; float inch ; } dist1 , dist2 , sum ; int main ( ) { printf ( " 1st distance\n  " ) ; printf ( " Enter feet : " ) ; scanf ( " %d " , & dist1.feet ) ; printf ( " Enter inch : " ) ; scanf ( " %f " , & dist1.inch ) ; printf ( " 2nd distance\n  " ) ; printf ( " Enter feet : " ) ; scanf ( " %d " , & dist2.feet ) ; printf ( " Enter inch : " ) ; scanf ( " %f " , & dist2.inch ) ; sum.feet = dist1.feet + dist2.feet ; sum.inch = dist1.inch + dist2.inch ; while ( sum.inch > = 12 ) { + + sum.feet ; sum.inch = sum.inch - 12 ; } printf ( " Sum of distances = %d\'- %.1f\ " " , sum.feet , sum.inch ) ; return 0 ; }
#include <stdio.h> struct person { int age ; float weight ; } ; int main ( ) { struct person * personPtr , person1 ; personPtr = & person1 ; printf ( " Enter age : " ) ; scanf ( " %d " , & personPtr- ; > age ) ; printf ( " Enter weight : " ) ; scanf ( " %f " , & personPtr- ; > weight ) ; printf ( " Displaying : \n  " ) ; printf ( " Age : %d\n  " , personPtr-> age ) ; printf ( " weight : %f " , personPtr-> weight ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct person { int age ; float weight ; char name [ 30 ] ; } ; int main ( ) { struct person * ptr ; int i , n ; printf ( " Enter number of persons : " ) ; scanf ( " %d " , & n ) ; ptr = ( struct person * ) malloc ( num * sizeof ( struct person ) ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " Enter first name and age respectively : " ) ; scanf ( " %s %d " , & ( ptr + i ) -> name , & ( ptr + i ) -> age ) ; } printf ( " Displaying Information : \n  " ) ; for ( i = 0 ; i < n ; + + i ) printf ( " Name : %s\tAge : %d\n  " , ( ptr + i ) -> name , ( ptr + i ) -> age ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 50 ] ; int age ; } ; void display ( struct student s ) ; int main ( ) { struct student s1 ; printf ( " Enter name : " ) ; scanf ( " % [ ^\n  ] % * c " , s1.name ) ; printf ( " Enter age : " ) ; scanf ( " %d " , & s1.age ) ; display ( s1 ) ; return 0 ; } void display ( struct student s ) { printf ( " \n Displaying information\n  " ) ; printf ( " Name : %s " , s.name ) ; printf ( " \n Roll : %d " , s.age ) ; }
#include <stdio.h> struct student { char name [ 50 ] ; int age ; } ; struct student getInformation ( ) ; int main ( ) { struct student s ; s = getInformation ( ) ; printf ( " \n Displaying information\n  " ) ; printf ( " Name : %s " , s.name ) ; printf ( " \n Roll : %d " , s.age ) ; return 0 ; } struct student getInformation ( ) { struct student s1 ; printf ( " Enter name : " ) ; scanf ( " % [ ^\n  ] % * c " , s1.name ) ; printf ( " Enter age : " ) ; scanf ( " %d " , & s1.age ) ; return s1 ; }
#include <stdio.h> typedef struct Complex { float real ; float imag ; } complex ; void addNumbers ( complex c1 , complex c2 , complex * result ) ; int main ( ) { complex c1 , c2 , result ; printf ( " For first number , \n  " ) ; printf ( " Enter real part : " ) ; scanf ( " %f " , & c1.real ) ; printf ( " Enter imaginary part : " ) ; scanf ( " %f " , & c1.imag ) ; printf ( " For second number , \n  " ) ; printf ( " Enter real part : " ) ; scanf ( " %f " , & c2.real ) ; printf ( " Enter imaginary part : " ) ; scanf ( " %f " , & c2.imag ) ; addNumbers ( c1 , c2 , & result ) ; printf ( " \n result.real = %.1f\n  " , result.real ) ; printf ( " result.imag = %.1f " , result.imag ) ; return 0 ; } void addNumbers ( complex c1 , complex c2 , complex * result ) { result-> real = c1.real + c2.real ; result-> imag = c1.imag + c2.imag ; }
#include <stdio.h> union unionJob { char name [ 32 ] ; float salary ; int workerNo ; } uJob ; struct structJob { char name [ 32 ] ; float salary ; int workerNo ; } sJob ; int main ( ) { printf ( " size of union = %d bytes " , sizeof ( uJob ) ) ; printf ( " \n size of structure = %d bytes " , sizeof ( sJob ) ) ; return 0 ; }
#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main ( ) { j.salary = 12.3 ; j.workerNo = 100 ; printf ( " Salary = %.1f\n  " , j.salary ) ; printf ( " Number of workers = %d " , j.workerNo ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; fptr = fopen ( " C : \\program.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } printf ( " Enter num : " ) ; scanf ( " %d " , & num ) ; fprintf ( fptr , " %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.txt " , " r " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fscanf ( fptr , " %d " , & num ) ; printf ( " Value of n = %d " , num ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; } ; int main ( ) { int n ; struct threeNum num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.bin " , " wb " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } for ( n = 1 ; n < 5 ; + + n ) { num.n1 = n ; num.n2 = 5 * n ; num.n3 = 5 * n + 1 ; fwrite ( & num , sizeof ( struct threeNum ) , 1 , fptr ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; } ; int main ( ) { int n ; struct threeNum num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.bin " , " rb " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } for ( n = 1 ; n < 5 ; + + n ) { fread ( & num , sizeof ( struct threeNum ) , 1 , fptr ) ; printf ( " n1 : %d\tn2 : %d\tn3 : %d " , num.n1 , num.n2 , num.n3 ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; } ; int main ( ) { int n ; struct threeNum num ; FILE * fptr ; if ( ( fptr = fopen ( " C : \\program.bin " , " rb " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fseek ( fptr , -sizeof ( struct threeNum ) , SEEK_END ) ; for ( n = 1 ; n < 5 ; + + n ) { fread ( & num , sizeof ( struct threeNum ) , 1 , fptr ) ; printf ( " n1 : %d\tn2 : %d\tn3 : %d\n  " , num.n1 , num.n2 , num.n3 ) ; fseek ( fptr , -2 * sizeof ( struct threeNum ) , SEEK_CUR ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 50 ] ; int marks , i , num ; printf ( " Enter number of students : " ) ; scanf ( " %d " , & num ) ; FILE * fptr ; fptr = ( fopen ( " C : \\student.txt " , " w " ) ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } for ( i = 0 ; i < num ; + + i ) { printf ( " For student %d\n Enter name : " , i + 1 ) ; scanf ( " %s " , name ) ; printf ( " Enter marks : " ) ; scanf ( " %d " , & marks ) ; fprintf ( fptr , " \n Name : %s \n Marks = %d \n  " , name , marks ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 50 ] ; int marks , i , num ; printf ( " Enter number of students : " ) ; scanf ( " %d " , & num ) ; FILE * fptr ; fptr = ( fopen ( " C : \\student.txt " , " a " ) ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } for ( i = 0 ; i < num ; + + i ) { printf ( " For student %d\n Enter name : " , i + 1 ) ; scanf ( " %s " , name ) ; printf ( " Enter marks : " ) ; scanf ( " %d " , & marks ) ; fprintf ( fptr , " \n Name : %s \n Marks = %d \n  " , name , marks ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 50 ] ; int height ; } ; int main ( ) { struct student stud1 [ 5 ] , stud2 [ 5 ] ; FILE * fptr ; int i ; fptr = fopen ( " file.txt " , " wb " ) ; for ( i = 0 ; i < 5 ; + + i ) { fflush ( stdin ) ; printf ( " Enter name : " ) ; gets ( stud1 [ i ] .name ) ; printf ( " Enter height : " ) ; scanf ( " %d " , & stud1 [ i ] .height ) ; } fwrite ( stud1 , sizeof ( stud1 ) , 1 , fptr ) ; fclose ( fptr ) ; fptr = fopen ( " file.txt " , " rb " ) ; fread ( stud2 , sizeof ( stud2 ) , 1 , fptr ) ; for ( i = 0 ; i < 5 ; + + i ) { printf ( " Name : %s\n Height : %d " , stud2 [ i ] .name , stud2 [ i ] .height ) ; } fclose ( fptr ) ; }
#include <stdio.h> enum week { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum week today ; today = wednesday ; printf ( " Day %d " , today + 1 ) ; return 0 ; }
#include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main ( ) { card = club ; printf ( " Size of enum variable = %d bytes " , sizeof ( card ) ) ; return 0 ; }
#include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 } ; int main ( ) { int myDesign = BOLD | UNDERLINE ; printf ( " %d " , myDesign ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { printf ( " Catch me if you can. " ) ; } < / stdio.h>
#include <stdio.h> #include <math.h> int main ( ) { float num , root ; printf ( " Enter a number : " ) ; scanf ( " %f " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2f = %.2f " , num , root ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char sentence [ 1000 ] ; FILE * fptr ; fptr = fopen ( " program.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } printf ( " Enter a sentence : \n  " ) ; gets ( sentence ) ; fprintf ( fptr , " %s " , sentence ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> enum week { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum week today ; today = wednesday ; printf ( " Day %d " , today + 1 ) ; return 0 ; }
#include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main ( ) { card = club ; printf ( " Size of enum variable = %d bytes " , sizeof ( card ) ) ; return 0 ; }
#include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 } ; int main ( ) { int myDesign = BOLD | UNDERLINE ; printf ( " %d " , myDesign ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> typedef struct complex { float real ; float imag ; } complex ; complex add ( complex n1 , complex n2 ) ; int main ( ) { complex n1 , n2 , temp ; printf ( " For 1st complex number \n  " ) ; printf ( " Enter real and imaginary part respectively : \n  " ) ; scanf ( " %f %f " , & n1.real , & n1.imag ) ; printf ( " \n For 2nd complex number \n  " ) ; printf ( " Enter real and imaginary part respectively : \n  " ) ; scanf ( " %f %f " , & n2.real , & n2.imag ) ; temp = add ( n1 , n2 ) ; printf ( " Sum = %.1f + %.1fi " , temp.real , temp.imag ) ; return 0 ; } complex add ( complex n1 , complex n2 ) { complex temp ; temp.real = n1.real + n2.real ; temp.imag = n1.imag + n2.imag ; return ( temp ) ; }
#include <stdio.h> int main ( ) { long long n ; int count = 0 ; printf ( " Enter an integer : " ) ; scanf ( " %lld " , & n ) ; while ( n ! = 0 ) { n / = 10 ; + + count ; } printf ( " Number of digits : %d " , count ) ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a & b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a|b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a^b ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Output = %d\n  " , ~35 ) ; printf ( " Output = %d\n  " , ~-12 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 212 , i ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Right shift by %d : %d\n  " , i , num> > i ) ; printf ( " \n  " ) ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Left shift by %d : %d\n  " , i , num < <i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 9 , b = 4 , c ; c = a + b ; printf ( " a + b = %d \n  " , c ) ; c = a-b ; printf ( " a-b = %d \n  " , c ) ; c = a * b ; printf ( " a * b = %d \n  " , c ) ; c = a / b ; printf ( " a / b = %d \n  " , c ) ; c = a %b ; printf ( " Remainder when a divided by b = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , c ; c = a ; printf ( " c = %d \n  " , c ) ; c + = a ; printf ( " c = %d \n  " , c ) ; c - = a ; printf ( " c = %d \n  " , c ) ; c * = a ; printf ( " c = %d \n  " , c ) ; c / = a ; printf ( " c = %d \n  " , c ) ; c % = a ; printf ( " c = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 ; printf ( " %d = = %d = %d \n  " , a , b , a = = b ) ; printf ( " %d = = %d = %d \n  " , a , c , a = = c ) ; printf ( " %d > %d = %d \n  " , a , b , a > b ) ; printf ( " %d > %d = %d \n  " , a , c , a > c ) ; printf ( " %d < %d = %d \n  " , a , b , a < b ) ; printf ( " %d < %d = %d \n  " , a , c , a < c ) ; printf ( " %d ! = %d = %d \n  " , a , b , a ! = b ) ; printf ( " %d ! = %d = %d \n  " , a , c , a ! = c ) ; printf ( " %d > = %d = %d \n  " , a , b , a > = b ) ; printf ( " %d > = %d = %d \n  " , a , c , a > = c ) ; printf ( " %d < = %d = %d \n  " , a , b , a < = b ) ; printf ( " %d < = %d = %d \n  " , a , c , a < = c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 , result ; result = ( a = = b ) & & ( c > b ) ; printf ( " ( a = = b ) & & ( c > b ) equals to %d \n  " , result ) ; result = ( a = = b ) & & ( c < b ) ; printf ( " ( a = = b ) & & ( c < b ) equals to %d \n  " , result ) ; result = ( a = = b ) || ( c < b ) ; printf ( " ( a = = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ( a ! = b ) || ( c < b ) ; printf ( " ( a ! = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ! ( a ! = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; result = ! ( a = = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , e [ 10 ] ; float b ; double c ; char d ; printf ( " Size of int = %lu bytes\n  " , sizeof ( a ) ) ; printf ( " Size of float = %lu bytes\n  " , sizeof ( b ) ) ; printf ( " Size of double = %lu bytes\n  " , sizeof ( c ) ) ; printf ( " Size of char = %lu byte\n  " , sizeof ( d ) ) ; printf ( " Size of integer type array having 10 elements = %lu bytes\n  " , sizeof ( e ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 9 , b = 4 , c ; c = a + b ; printf ( " a + b = %d \n  " , c ) ; c = a-b ; printf ( " a-b = %d \n  " , c ) ; c = a * b ; printf ( " a * b = %d \n  " , c ) ; c = a / b ; printf ( " a / b = %d \n  " , c ) ; c = a %b ; printf ( " Remainder when a divided by b = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , c ; c = a ; printf ( " c = %d \n  " , c ) ; c + = a ; printf ( " c = %d \n  " , c ) ; c - = a ; printf ( " c = %d \n  " , c ) ; c * = a ; printf ( " c = %d \n  " , c ) ; c / = a ; printf ( " c = %d \n  " , c ) ; c % = a ; printf ( " c = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 ; printf ( " %d = = %d = %d \n  " , a , b , a = = b ) ; printf ( " %d = = %d = %d \n  " , a , c , a = = c ) ; printf ( " %d > %d = %d \n  " , a , b , a > b ) ; printf ( " %d > %d = %d \n  " , a , c , a > c ) ; printf ( " %d < %d = %d \n  " , a , b , a < b ) ; printf ( " %d < %d = %d \n  " , a , c , a < c ) ; printf ( " %d ! = %d = %d \n  " , a , b , a ! = b ) ; printf ( " %d ! = %d = %d \n  " , a , c , a ! = c ) ; printf ( " %d > = %d = %d \n  " , a , b , a > = b ) ; printf ( " %d > = %d = %d \n  " , a , c , a > = c ) ; printf ( " %d < = %d = %d \n  " , a , b , a < = b ) ; printf ( " %d < = %d = %d \n  " , a , c , a < = c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 , result ; result = ( a = = b ) & & ( c > b ) ; printf ( " ( a = = b ) & & ( c > b ) equals to %d \n  " , result ) ; result = ( a = = b ) & & ( c < b ) ; printf ( " ( a = = b ) & & ( c < b ) equals to %d \n  " , result ) ; result = ( a = = b ) || ( c < b ) ; printf ( " ( a = = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ( a ! = b ) || ( c < b ) ; printf ( " ( a ! = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ! ( a ! = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; result = ! ( a = = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , e [ 10 ] ; float b ; double c ; char d ; printf ( " Size of int = %lu bytes\n  " , sizeof ( a ) ) ; printf ( " Size of float = %lu bytes\n  " , sizeof ( b ) ) ; printf ( " Size of double = %lu bytes\n  " , sizeof ( c ) ) ; printf ( " Size of char = %lu byte\n  " , sizeof ( d ) ) ; printf ( " Size of integer type array having 10 elements = %lu bytes\n  " , sizeof ( e ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; if ( number % 2 = = 0 ) printf ( " %d is even. " , number ) ; else printf ( " %d is odd. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; ( number % 2 = = 0 ) ? printf ( " %d is even. " , number ) : printf ( " %d is odd. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; int isLowercaseVowel , isUppercaseVowel ; printf ( " Enter an alphabet : " ) ; scanf ( " %c " , & c ) ; isLowercaseVowel = ( c = = 'a' || c = = 'e' || c = = 'i' || c = = 'o' || c = = 'u' ) ; isUppercaseVowel = ( c = = 'A' || c = = 'E' || c = = 'I' || c = = 'O' || c = = 'U' ) ; if ( isLowercaseVowel || isUppercaseVowel ) printf ( " %c is a vowel. " , c ) ; else printf ( " %c is a consonant. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int isLowercaseVowel , isUppercaseVowel ; do { printf ( " Enter an alphabet : " ) ; scanf ( " %c " , & c ) ; } while ( !isalpha ( c ) ) ; isLowercaseVowel = ( c = = 'a' || c = = 'e' || c = = 'i' || c = = 'o' || c = = 'u' ) ; isUppercaseVowel = ( c = = 'A' || c = = 'E' || c = = 'I' || c = = 'O' || c = = 'U' ) ; if ( isLowercaseVowel || isUppercaseVowel ) printf ( " %c is a vowel. " , c ) ; else printf ( " %c is a consonant. " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { double n1 , n2 , n3 ; printf ( " Enter three different numbers : " ) ; scanf ( " %lf %lf %lf " , & n1 , & n2 , & n3 ) ; if ( n1> = n2 & & n1> = n3 ) printf ( " %.2f is the largest number. " , n1 ) ; if ( n2> = n1 & & n2> = n3 ) printf ( " %.2f is the largest number. " , n2 ) ; if ( n3> = n1 & & n3> = n2 ) printf ( " %.2f is the largest number. " , n3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { double n1 , n2 , n3 ; printf ( " Enter three numbers : " ) ; scanf ( " %lf %lf %lf " , & n1 , & n2 , & n3 ) ; if ( n1> = n2 ) { if ( n1> = n3 ) printf ( " %.2lf is the largest number. " , n1 ) ; else printf ( " %.2lf is the largest number. " , n3 ) ; } else { if ( n2> = n3 ) printf ( " %.2lf is the largest number. " , n2 ) ; else printf ( " %.2lf is the largest number. " , n3 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { double n1 , n2 , n3 ; printf ( " Enter three numbers : " ) ; scanf ( " %lf %lf %lf " , & n1 , & n2 , & n3 ) ; if ( n1> = n2 & & n1> = n3 ) printf ( " %.2lf is the largest number. " , n1 ) ; else if ( n2> = n1 & & n2> = n3 ) printf ( " %.2lf is the largest number. " , n2 ) ; else printf ( " %.2lf is the largest number. " , n3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; + + i ) { sum + = i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; i = 1 ; while ( i < = n ) { sum + = i ; + + i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i , sum = 0 ; do { printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; } while ( n < = 0 ) ; for ( i = 1 ; i < = n ; + + i ) { sum + = i ; } printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; unsigned long long factorial = 1 ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; if ( n < 0 ) printf ( " Error! Factorial of a negative number doesn't exist. " ) ; else { for ( i = 1 ; i < = n ; + + i ) { factorial * = i ; } printf ( " Factorial of %d = %llu " , n , factorial ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = 10 ; + + i ) { printf ( " %d * %d = %d \n  " , n , i , n * i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , range ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the range : " ) ; scanf ( " %d " , & range ) ; for ( i = 1 ; i < = range ; + + i ) { printf ( " %d * %d = %d \n  " , n , i , n * i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char line [ 150 ] ; int i , vowels , consonants , digits , spaces ; vowels = consonants = digits = spaces = 0 ; printf ( " Enter a line of string : " ) ; scanf ( " % [ ^\n  ] " , line ) ; for ( i = 0 ; line [ i ] ! = '\0' ; + + i ) { if ( line [ i ] = = 'a' || line [ i ] = = 'e' || line [ i ] = = 'i' || line [ i ] = = 'o' || line [ i ] = = 'u' || line [ i ] = = 'A' || line [ i ] = = 'E' || line [ i ] = = 'I' || line [ i ] = = 'O' || line [ i ] = = 'U' ) { + + vowels ; } else if ( ( line [ i ] > = 'a' & & line [ i ] < = 'z' ) || ( line [ i ] > = 'A' & & line [ i ] < = 'Z' ) ) { + + consonants ; } else if ( line [ i ] > = '0' & & line [ i ] < = '9' ) { + + digits ; } else if ( line [ i ] = = ' ' ) { + + spaces ; } } printf ( " Vowels : %d " , vowels ) ; printf ( " \n Consonants : %d " , consonants ) ; printf ( " \n Digits : %d " , digits ) ; printf ( " \n White spaces : %d " , spaces ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , t1 = 0 , t2 = 1 , nextTerm ; printf ( " Enter the number of terms : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : " ) ; for ( i = 1 ; i < = n ; + + i ) { printf ( " %d , " , t1 ) ; nextTerm = t1 + t2 ; t1 = t2 ; t2 = nextTerm ; } return 0 ; }
#include <stdio.h> int main ( ) { int t1 = 0 , t2 = 1 , nextTerm = 0 , n ; printf ( " Enter a positive number : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : %d , %d , " , t1 , t2 ) ; nextTerm = t1 + t2 ; while ( nextTerm < = n ) { printf ( " %d , " , nextTerm ) ; t1 = t2 ; t2 = nextTerm ; nextTerm = t1 + t2 ; } return 0 ; }
#include <stdio.h> long int multiplyNumbers ( int n ) ; int main ( ) { int n ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; printf ( " Factorial of %d = %ld " , n , multiplyNumbers ( n ) ) ; return 0 ; } long int multiplyNumbers ( int n ) { if ( n > = 1 ) return n * multiplyNumbers ( n-1 ) ; else return 1 ; }
#include <stdio.h> int main ( ) { int n , i , flag = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ; ) ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 1 ; break ; } } if ( n = = 1 ) { printf ( " 1 is neither a prime nor a composite number. " ) ; } else { if ( flag = = 0 ) printf ( " %d is a prime number. " , n ) ; else printf ( " %d is not a prime number. " , n ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int low , high , i , flag ; printf ( " Enter two numbers ( intervals ) : " ) ; scanf ( " %d %d " , & low , & high ) ; printf ( " Prime numbers between %d and %d are : " , low , high ) ; while ( low < high ) { flag = 0 ; for ( i = 2 ; i < = low / 2 ; + + i ) { if ( low % i = = 0 ) { flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " %d " , low ) ; + + low ; } return 0 ; }
#include <stdio.h> int main ( ) { int low , high , i , flag , temp ; printf ( " Enter two numbers ( intevals ) : " ) ; scanf ( " %d %d " , & low , & high ) ; if ( low > high ) { temp = low ; low = high ; high = temp ; } printf ( " Prime numbers between %d and %d are : " , low , high ) ; while ( low < high ) { flag = 0 ; for ( i = 2 ; i < = low / 2 ; + + i ) { if ( low % i = = 0 ) { flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " %d " , low ) ; + + low ; } return 0 ; }
#include <stdio.h> int main ( ) { double number ; printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; if ( number < = 0.0 ) { if ( number = = 0.0 ) printf ( " You entered 0. " ) ; else printf ( " You entered a negative number. " ) ; } else printf ( " You entered a positive number. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { double number ; printf ( " Enter a number : " ) ; scanf ( " %lf " , & number ) ; if ( number < 0.0 ) printf ( " You entered a negative number. " ) ; else if ( number > 0.0 ) printf ( " You entered a positive number. " ) ; else printf ( " You entered 0. " ) ; return 0 ; }
#include <stdio.h> int checkPrimeNumber ( int n ) ; int main ( ) { int n1 , n2 , i , flag ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " Prime numbers between %d and %d are : " , n1 , n2 ) ; for ( i = n1 + 1 ; i <n2 ; + + i ) { flag = checkPrimeNumber ( i ) ; if ( flag = = 1 ) printf ( " %d " , i ) ; } return 0 ; } int checkPrimeNumber ( int n ) { int j , flag = 1 ; for ( j = 2 ; j < = n / 2 ; + + j ) { if ( n %j = = 0 ) { flag = 0 ; break ; } } return flag ; }
#include <stdio.h> #include <math.h> int checkPrimeNumber ( int n ) ; int checkArmstrongNumber ( int n ) ; int main ( ) { int n , flag ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ) ; flag = checkPrimeNumber ( n ) ; if ( flag = = 1 ) printf ( " %d is a prime number.\n  " , n ) ; else printf ( " %d is not a prime number.\n  " , n ) ; flag = checkArmstrongNumber ( n ) ; if ( flag = = 1 ) printf ( " %d is an Armstrong number. " , n ) ; else printf ( " %d is not an Armstrong number. " , n ) ; return 0 ; } int checkPrimeNumber ( int n ) { int i , flag = 1 ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n %i = = 0 ) { flag = 0 ; break ; } } return flag ; } int checkArmstrongNumber ( int number ) { int originalNumber , remainder , result = 0 , n = 0 , flag ; originalNumber = number ; while ( originalNumber ! = 0 ) { originalNumber / = 10 ; + + n ; } originalNumber = number ; while ( originalNumber ! = 0 ) { remainder = originalNumber %10 ; result + = pow ( remainder , n ) ; originalNumber / = 10 ; } if ( result = = number ) flag = 1 ; else flag = 0 ; return flag ; }
#include <stdio.h> int checkPrime ( int n ) ; int main ( ) { int n , i , flag = 0 ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & n ; ) ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( checkPrime ( i ) = = 1 ) { if ( checkPrime ( n-i ) = = 1 ) { printf ( " %d = %d + %d\n  " , n , i , n - i ) ; flag = 1 ; } } } if ( flag = = 0 ) printf ( " %d cannot be expressed as the sum of two prime numbers. " , n ) ; return 0 ; } int checkPrime ( int n ) { int i , isPrime = 1 ; for ( i = 2 ; i < = n / 2 ; + + i ) { if ( n % i = = 0 ) { isPrime = 0 ; break ; } } return isPrime ; }
#include <stdio.h> int addNumbers ( int n ) ; int main ( ) { int num ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & num ) ; printf ( " Sum = %d " , addNumbers ( num ) ) ; return 0 ; } int addNumbers ( int n ) { if ( n ! = 0 ) return n + addNumbers ( n-1 ) ; else return n ; }
#include <stdio.h> int hcf ( int n1 , int n2 ) ; int main ( ) { int n1 , n2 ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " G.C.D of %d and %d is %d. " , n1 , n2 , hcf ( n1 , n2 ) ) ; return 0 ; } int hcf ( int n1 , int n2 ) { if ( n2 ! = 0 ) return hcf ( n2 , n1 %n2 ) ; else return n1 ; }
#include <stdio.h> int main ( ) { FILE * fp ; int c ; fp = fopen ( __FILE__ , " r " ) ; do { c = getc ( fp ) ; putchar ( c ) ; } while ( c ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; float num [ 100 ] , sum = 0.0 , average ; printf ( " Enter the numbers of elements : " ) ; scanf ( " %d " , & n ) ; while ( n > 100 || n < = 0 ) { printf ( " Error! number should in range of ( 1 to 100 ) .\n  " ) ; printf ( " Enter the number again : " ) ; scanf ( " %d " , & n ) ; } for ( i = 0 ; i < n ; + + i ) { printf ( " %d. Enter number : " , i + 1 ) ; scanf ( " %f " , & num [ i ] ) ; sum + = num [ i ] ; } average = sum / n ; printf ( " Average = %.2f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; float arr [ 100 ] ; printf ( " Enter total number of elements ( 1 to 100 ) : " ) ; scanf ( " %d " , & n ) ; printf ( " \n  " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " Enter Number %d : " , i + 1 ) ; scanf ( " %f " , & arr [ i ] ) ; } for ( i = 1 ; i < n ; + + i ) { if ( arr [ 0 ] < arr [ i ] ) arr [ 0 ] = arr [ i ] ; } printf ( " Largest element = %.2f " , arr [ 0 ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; float arr [ 100 ] , temp ; printf ( " Enter total number of elements ( 1 to 100 ) : " ) ; scanf ( " %d " , & n ; ) ; printf ( " \n  " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " Enter Number %d : " , i + 1 ) ; scanf ( " %f " , & arr ; [ i ] ) ; } for ( i = 1 ; i < n ; + + i ) { if ( arr [ 0 ] < arr [ i ] ) { temp = arr [ 0 ] ; arr [ 0 ] = arr [ i ] ; arr [ i ] = temp ; } } printf ( " Largest element = %.2f " , arr [ 0 ] ) ; return 0 ; }
#include <stdio.h> #include <math.h> float calculateSD ( float data [ ] ) ; int main ( ) { int i ; float data [ 10 ] ; printf ( " Enter 10 elements : " ) ; for ( i = 0 ; i < 10 ; + + i ) scanf ( " %f " , & data [ i ] ) ; printf ( " \n Standard Deviation = %.6f " , calculateSD ( data ) ) ; return 0 ; } float calculateSD ( float data [ ] ) { float sum = 0.0 , mean , standardDeviation = 0.0 ; int i ; for ( i = 0 ; i <10 ; + + i ) { sum + = data [ i ] ; } mean = sum / 10 ; for ( i = 0 ; i <10 ; + + i ) standardDeviation + = pow ( data [ i ] - mean , 2 ) ; return sqrt ( standardDeviation / 10 ) ; }
#include <stdio.h> int main ( ) { int data [ 5 ] , i ; printf ( " Enter elements : " ) ; for ( i = 0 ; i < 5 ; + + i ) scanf ( " %d " , data + i ) ; printf ( " You entered : \n  " ) ; for ( i = 0 ; i < 5 ; + + i ) printf ( " %d\n  " , * ( data + i ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int r , c , a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] , i , j ; printf ( " Enter number of rows ( between 1 and 100 ) : " ) ; scanf ( " %d " , & r ) ; printf ( " Enter number of columns ( between 1 and 100 ) : " ) ; scanf ( " %d " , & c ) ; printf ( " \n Enter elements of 1st matrix : \n  " ) ; for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { printf ( " Enter element a %d %d : " , i + 1 , j + 1 ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } printf ( " Enter elements of 2nd matrix : \n  " ) ; for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { printf ( " Enter element a %d %d : " , i + 1 , j + 1 ) ; scanf ( " %d " , & b [ i ] [ j ] ) ; } for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { sum [ i ] [ j ] = a [ i ] [ j ] + b [ i ] [ j ] ; } printf ( " \n Sum of two matrix is : \n \n  " ) ; for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { printf ( " %d " , sum [ i ] [ j ] ) ; if ( j = = c-1 ) { printf ( " \n \n  " ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int a [ 10 ] [ 10 ] , transpose [ 10 ] [ 10 ] , r , c , i , j ; printf ( " Enter rows and columns of matrix : " ) ; scanf ( " %d %d " , & r , & c ) ; printf ( " \n Enter elements of matrix : \n  " ) ; for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { printf ( " Enter element a %d %d : " , i + 1 , j + 1 ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } printf ( " \n Entered Matrix : \n  " ) ; for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { printf ( " %d " , a [ i ] [ j ] ) ; if ( j = = c-1 ) printf ( " \n \n  " ) ; } for ( i = 0 ; i <r ; + + i ) for ( j = 0 ; j <c ; + + j ) { transpose [ j ] [ i ] = a [ i ] [ j ] ; } printf ( " \n Transpose of Matrix : \n  " ) ; for ( i = 0 ; i <c ; + + i ) for ( j = 0 ; j <r ; + + j ) { printf ( " %d " , transpose [ i ] [ j ] ) ; if ( j = = r-1 ) printf ( " \n \n  " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 20 ] = " Program " ; char b [ 20 ] = { 'P' , 'r' , 'o' , 'g' , 'r' , 'a' , 'm' , '\0' } ; char c [ 20 ] ; printf ( " Enter string : " ) ; gets ( c ) ; printf ( " Length of string a = %d \n  " , strlen ( a ) ) ; printf ( " Length of string b = %d \n  " , strlen ( b ) ) ; printf ( " Length of string c = %d \n  " , strlen ( c ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " awesome " ; char str2 [ 10 ] ; char str3 [ 10 ] ; strcpy ( str2 , str1 ) ; strcpy ( str3 , " well " ) ; puts ( str2 ) ; puts ( str3 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " abcd " , str2 [ ] = " abCd " , str3 [ ] = " abcd " ; int result ; result = strcmp ( str1 , str2 ) ; printf ( " strcmp ( str1 , str2 ) = %d\n  " , result ) ; result = strcmp ( str1 , str3 ) ; printf ( " strcmp ( str1 , str3 ) = %d\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " This is " , str2 [ ] = " programiz.com " ; strcat ( str1 , str2 ) ; puts ( str1 ) ; puts ( str2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 1000 ] , ch ; int i , frequency = 0 ; printf ( " Enter a string : " ) ; gets ( str ) ; printf ( " Enter a character to find the frequency : " ) ; scanf ( " %c " , & ch ) ; for ( i = 0 ; str [ i ] ! = '\0' ; + + i ) { if ( ch = = str [ i ] ) + + frequency ; } printf ( " Frequency of %c = %d " , ch , frequency ) ; return 0 ; }
#include <stdio.h> int main ( ) { char line [ 150 ] ; int i , j ; printf ( " Enter a string : " ) ; gets ( line ) ; for ( i = 0 ; line [ i ] ! = '\0' ; + + i ) { while ( ! ( ( line [ i ] > = 'a' & & line [ i ] < = 'z' ) || ( line [ i ] > = 'A' & & line [ i ] < = 'Z' ) || line [ i ] = = '\0' ) ) { for ( j = i ; line [ j ] ! = '\0' ; + + j ) { line [ j ] = line [ j + 1 ] ; } line [ j ] = '\0' ; } } printf ( " Output String : " ) ; puts ( line ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 20 ] = " Program " ; char b [ 20 ] = { 'P' , 'r' , 'o' , 'g' , 'r' , 'a' , 'm' , '\0' } ; char c [ 20 ] ; printf ( " Enter string : " ) ; gets ( c ) ; printf ( " Length of string a = %d \n  " , strlen ( a ) ) ; printf ( " Length of string b = %d \n  " , strlen ( b ) ) ; printf ( " Length of string c = %d \n  " , strlen ( c ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " awesome " ; char str2 [ 10 ] ; char str3 [ 10 ] ; strcpy ( str2 , str1 ) ; strcpy ( str3 , " well " ) ; puts ( str2 ) ; puts ( str3 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " This is " , str2 [ ] = " programiz.com " ; strcat ( str1 , str2 ) ; puts ( str1 ) ; puts ( str2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " abcd " , str2 [ ] = " abCd " , str3 [ ] = " abcd " ; int result ; result = strcmp ( str1 , str2 ) ; printf ( " strcmp ( str1 , str2 ) = %d\n  " , result ) ; result = strcmp ( str1 , str3 ) ; printf ( " strcmp ( str1 , str3 ) = %d\n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] ; int i ; printf ( " Enter a string : " ) ; scanf ( " %s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; + + i ) ; printf ( " Length of string : %d " , i ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int i , j ; char str [ 10 ] [ 50 ] , temp [ 50 ] ; printf ( " Enter 10 words : \n  " ) ; for ( i = 0 ; i <10 ; + + i ) scanf ( " %s [ ^\n  ] " , str [ i ] ) ; for ( i = 0 ; i <9 ; + + i ) for ( j = i + 1 ; j <10 ; + + j ) { if ( strcmp ( str [ i ] , str [ j ] ) > 0 ) { strcpy ( temp , str [ i ] ) ; strcpy ( str [ i ] , str [ j ] ) ; strcpy ( str [ j ] , temp ) ; } } printf ( " \n In lexicographical order : \n  " ) ; for ( i = 0 ; i <10 ; + + i ) { puts ( str [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] , i ; printf ( " Enter string s1 : " ) ; scanf ( " %s " , s1 ) ; for ( i = 0 ; s1 [ i ] ! = '\0' ; + + i ) { s2 [ i ] = s1 [ i ] ; } s2 [ i ] = '\0' ; printf ( " String s2 : %s " , s2 ) ; return 0 ; }
#include <stdio.h> void cyclicSwap ( int * a , int * b , int * c ) ; int main ( ) { int a , b , c ; printf ( " Enter a , b and c respectively : " ) ; scanf ( " %d %d %d " , & a , & b , & c ) ; printf ( " Value before swapping : \n  " ) ; printf ( " a = %d \n b = %d \n c = %d\n  " , a , b , c ) ; cyclicSwap ( & a , & b , & c ) ; printf ( " Value after swapping : \n  " ) ; printf ( " a = %d \n b = %d \n c = %d " , a , b , c ) ; return 0 ; } void cyclicSwap ( int * a , int * b , int * c ) { int temp ; temp = * b ; * b = * a ; * a = * c ; * c = temp ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , num ; float * data ; printf ( " Enter total number of elements ( 1 to 100 ) : " ) ; scanf ( " %d " , & num ) ; data = ( float * ) calloc ( num , sizeof ( float ) ) ; if ( data = = NULL ) { printf ( " Error!!! memory not allocated. " ) ; exit ( 0 ) ; } printf ( " \n  " ) ; for ( i = 0 ; i < num ; + + i ) { printf ( " Enter Number %d : " , i + 1 ) ; scanf ( " %f " , data + i ) ; } for ( i = 1 ; i < num ; + + i ) { if ( * data < * ( data + i ) ) * data = * ( data + i ) ; } printf ( " Largest element = %.2f " , * data ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct course { int marks ; char subject [ 30 ] ; } ; int main ( ) { struct course * ptr ; int i , noOfRecords ; printf ( " Enter number of records : " ) ; scanf ( " %d " , & noOfRecords ) ; ptr = ( struct course * ) malloc ( noOfRecords * sizeof ( struct course ) ) ; for ( i = 0 ; i < noOfRecords ; + + i ) { printf ( " Enter name of the subject and marks respectively : \n  " ) ; scanf ( " %s %d " , & ( ptr + i ) -> subject , & ( ptr + i ) -> marks ) ; } printf ( " Displaying Information : \n  " ) ; for ( i = 0 ; i < noOfRecords ; + + i ) printf ( " %s\t %d\n  " , ( ptr + i ) -> subject , ( ptr + i ) -> marks ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 50 ] ; int roll ; float marks ; } s ; int main ( ) { printf ( " Enter information : \n  " ) ; printf ( " Enter name : " ) ; scanf ( " %s " , s.name ) ; printf ( " Enter roll number : " ) ; scanf ( " %d " , & s.roll ) ; printf ( " Enter marks : " ) ; scanf ( " %f " , & s.marks ) ; printf ( " Displaying Information : \n  " ) ; printf ( " Name : " ) ; puts ( s.name ) ; printf ( " Roll number : %d\n  " , s.roll ) ; printf ( " Marks : %.1f\n  " , s.marks ) ; return 0 ; }
#include <stdio.h> struct Distance { int feet ; float inch ; } d1 , d2 , sumOfDistances ; int main ( ) { printf ( " Enter information for 1st distance\n  " ) ; printf ( " Enter feet : " ) ; scanf ( " %d " , & d1.feet ) ; printf ( " Enter inch : " ) ; scanf ( " %f " , & d1.inch ) ; printf ( " \n Enter information for 2nd distance\n  " ) ; printf ( " Enter feet : " ) ; scanf ( " %d " , & d2.feet ) ; printf ( " Enter inch : " ) ; scanf ( " %f " , & d2.inch ) ; sumOfDistances.feet = d1.feet + d2.feet ; sumOfDistances.inch = d1.inch + d2.inch ; if ( sumOfDistances.inch> 12.0 ) { sumOfDistances.inch = sumOfDistances.inch-12.0 ; + + sumOfDistances.feet ; } printf ( " \n Sum of distances = %d\'- %.1f\ " " , sumOfDistances.feet , sumOfDistances.inch ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 50 ] ; int roll ; float marks ; } s [ 10 ] ; int main ( ) { int i ; printf ( " Enter information of students : \n  " ) ; for ( i = 0 ; i <10 ; + + i ) { s [ i ] .roll = i + 1 ; printf ( " \n For roll number %d , \n  " , s [ i ] .roll ) ; printf ( " Enter name : " ) ; scanf ( " %s " , s [ i ] .name ) ; printf ( " Enter marks : " ) ; scanf ( " %f " , & s [ i ] .marks ) ; printf ( " \n  " ) ; } printf ( " Displaying Information : \n \n  " ) ; for ( i = 0 ; i <10 ; + + i ) { printf ( " \n Roll number : %d\n  " , i + 1 ) ; printf ( " Name : " ) ; puts ( s [ i ] .name ) ; printf ( " Marks : %.1f " , s [ i ] .marks ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> struct TIME { int seconds ; int minutes ; int hours ; } ; void differenceBetweenTimePeriod ( struct TIME t1 , struct TIME t2 , struct TIME * diff ) ; int main ( ) { struct TIME startTime , stopTime , diff ; printf ( " Enter start time : \n  " ) ; printf ( " Enter hours , minutes and seconds respectively : " ) ; scanf ( " %d %d %d " , & startTime.hours , & startTime.minutes , & startTime.seconds ) ; printf ( " Enter stop time : \n  " ) ; printf ( " Enter hours , minutes and seconds respectively : " ) ; scanf ( " %d %d %d " , & stopTime.hours , & stopTime.minutes , & stopTime.seconds ) ; differenceBetweenTimePeriod ( startTime , stopTime , & diff ) ; printf ( " \n TIME DIFFERENCE : %d : %d : %d - " , startTime.hours , startTime.minutes , startTime.seconds ) ; printf ( " %d : %d : %d " , stopTime.hours , stopTime.minutes , stopTime.seconds ) ; printf ( " = %d : %d : %d\n  " , diff.hours , diff.minutes , diff.seconds ) ; return 0 ; } void differenceBetweenTimePeriod ( struct TIME start , struct TIME stop , struct TIME * diff ) { if ( stop.seconds > start.seconds ) { --start.minutes ; start.seconds + = 60 ; } diff-> seconds = start.seconds - stop.seconds ; if ( stop.minutes > start.minutes ) { --start.hours ; start.minutes + = 60 ; } diff-> minutes = start.minutes - stop.minutes ; diff-> hours = start.hours - stop.hours ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char c [ 1000 ] ; FILE * fptr ; if ( ( fptr = fopen ( " program.txt " , " r " ) ) = = NULL ) { printf ( " Error! opening file " ) ; exit ( 1 ) ; } fscanf ( fptr , " % [ ^\n  ] " , c ) ; printf ( " Data from the file : \n  %s " , c ) ; fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 50 ] ; int marks , i , num ; printf ( " Enter number of students : " ) ; scanf ( " %d " , & num ) ; FILE * fptr ; fptr = ( fopen ( " C : \\student.txt " , " w " ) ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } for ( i = 0 ; i < num ; + + i ) { printf ( " For student %d\n Enter name : " , i + 1 ) ; scanf ( " %s " , name ) ; printf ( " Enter marks : " ) ; scanf ( " %d " , & marks ) ; fprintf ( fptr , " \n Name : %s \n Marks = %d \n  " , name , marks ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char name [ 50 ] ; int marks , i , num ; printf ( " Enter number of students : " ) ; scanf ( " %d " , & num ) ; FILE * fptr ; fptr = ( fopen ( " C : \\student.txt " , " a " ) ) ; if ( fptr = = NULL ) { printf ( " Error! " ) ; exit ( 1 ) ; } for ( i = 0 ; i < num ; + + i ) { printf ( " For student %d\n Enter name : " , i + 1 ) ; scanf ( " %s " , name ) ; printf ( " Enter marks : " ) ; scanf ( " %d " , & marks ) ; fprintf ( fptr , " \n Name : %s \n Marks = %d \n  " , name , marks ) ; } fclose ( fptr ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 50 ] ; int height ; } ; int main ( ) { struct student stud1 [ 5 ] , stud2 [ 5 ] ; FILE * fptr ; int i ; fptr = fopen ( " file.txt " , " wb " ) ; for ( i = 0 ; i < 5 ; + + i ) { fflush ( stdin ) ; printf ( " Enter name : " ) ; gets ( stud1 [ i ] .name ) ; printf ( " Enter height : " ) ; scanf ( " %d " , & stud1 [ i ] .height ) ; } fwrite ( stud1 , sizeof ( stud1 ) , 1 , fptr ) ; fclose ( fptr ) ; fptr = fopen ( " file.txt " , " rb " ) ; fread ( stud2 , sizeof ( stud2 ) , 1 , fptr ) ; for ( i = 0 ; i < 5 ; + + i ) { printf ( " Name : %s\n Height : %d " , stud2 [ i ] .name , stud2 [ i ] .height ) ; } fclose ( fptr ) ; }
#include <stdio.h> int main ( ) { char c ; for ( c = 'A' ; c < = 'Z' ; + + c ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; printf ( " Enter u to display alphabets in uppercase. And enter l to display alphabets in lowercase : " ) ; scanf ( " %c " , & c ) ; if ( c = = 'U' || c = = 'u' ) { for ( c = 'A' ; c < = 'Z' ; + + c ) printf ( " %c " , c ) ; } else if ( c = = 'L' || c = = 'l' ) { for ( c = 'a' ; c < = 'z' ; + + c ) printf ( " %c " , c ) ; } else printf ( " Error! You entered invalid character. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , i ; printf ( " Enter a positive integer : " ) ; scanf ( " %d " , & number ) ; printf ( " Factors of %d are : " , number ) ; for ( i = 1 ; i < = number ; + + i ) { if ( number %i = = 0 ) { printf ( " %d " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 , i , gcd ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; for ( i = 1 ; i < = n1 & & i < = n2 ; + + i ) { if ( n1 %i = = 0 & & n2 %i = = 0 ) gcd = i ; } printf ( " G.C.D of %d and %d is %d " , n1 , n2 , gcd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; while ( n1! = n2 ) { if ( n1 > n2 ) n1 - = n2 ; else n2 - = n1 ; } printf ( " GCD = %d " , n1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " Enter two integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; n1 = ( n1 > 0 ) ? n1 : -n1 ; n2 = ( n2 > 0 ) ? n2 : -n2 ; while ( n1! = n2 ) { if ( n1 > n2 ) n1 - = n2 ; else n2 - = n1 ; } printf ( " GCD = %d " , n1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 , minMultiple ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; minMultiple = ( n1> n2 ) ? n1 : n2 ; while ( 1 ) { if ( minMultiple %n1 = = 0 & & minMultiple %n2 = = 0 ) { printf ( " The LCM of %d and %d is %d. " , n1 , n2 , minMultiple ) ; break ; } + + minMultiple ; } return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 , i , gcd , lcm ; printf ( " Enter two positive integers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; for ( i = 1 ; i < = n1 & & i < = n2 ; + + i ) { if ( n1 %i = = 0 & & n2 %i = = 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( " The LCM of two numbers %d and %d is %d. " , n1 , n2 , lcm ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( ( c> = 'a' & & c < = 'z' ) || ( c> = 'A' & & c < = 'Z' ) ) printf ( " %c is an alphabet. " , c ) ; else printf ( " %c is not an alphabet. " , c ) ; return 0 ; }
#include <stdio.h> void reverseSentence ( ) ; int main ( ) { printf ( " Enter a sentence : " ) ; reverseSentence ( ) ; return 0 ; } void reverseSentence ( ) { char c ; scanf ( " %c " , & c ) ; if ( c ! = '\n ' ) { reverseSentence ( ) ; printf ( " %c " , c ) ; } }
#include <stdio.h> int main ( ) { int a = 9 , b = 4 , c ; c = a + b ; printf ( " a + b = %d \n  " , c ) ; c = a-b ; printf ( " a-b = %d \n  " , c ) ; c = a * b ; printf ( " a * b = %d \n  " , c ) ; c = a / b ; printf ( " a / b = %d \n  " , c ) ; c = a %b ; printf ( " Remainder when a divided by b = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( " + + a = %d \n  " , + + a ) ; printf ( " --b = %d \n  " , --b ) ; printf ( " + + c = %f \n  " , + + c ) ; printf ( " --d = %f \n  " , --d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , c ; c = a ; printf ( " c = %d \n  " , c ) ; c + = a ; printf ( " c = %d \n  " , c ) ; c - = a ; printf ( " c = %d \n  " , c ) ; c * = a ; printf ( " c = %d \n  " , c ) ; c / = a ; printf ( " c = %d \n  " , c ) ; c % = a ; printf ( " c = %d \n  " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 ; printf ( " %d = = %d = %d \n  " , a , b , a = = b ) ; printf ( " %d = = %d = %d \n  " , a , c , a = = c ) ; printf ( " %d > %d = %d \n  " , a , b , a > b ) ; printf ( " %d > %d = %d \n  " , a , c , a > c ) ; printf ( " %d < %d = %d \n  " , a , b , a < b ) ; printf ( " %d < %d = %d \n  " , a , c , a < c ) ; printf ( " %d ! = %d = %d \n  " , a , b , a ! = b ) ; printf ( " %d ! = %d = %d \n  " , a , c , a ! = c ) ; printf ( " %d > = %d = %d \n  " , a , b , a > = b ) ; printf ( " %d > = %d = %d \n  " , a , c , a > = c ) ; printf ( " %d < = %d = %d \n  " , a , b , a < = b ) ; printf ( " %d < = %d = %d \n  " , a , c , a < = c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 , b = 5 , c = 10 , result ; result = ( a = = b ) & & ( c > b ) ; printf ( " ( a = = b ) & & ( c > b ) equals to %d \n  " , result ) ; result = ( a = = b ) & & ( c < b ) ; printf ( " ( a = = b ) & & ( c < b ) equals to %d \n  " , result ) ; result = ( a = = b ) || ( c < b ) ; printf ( " ( a = = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ( a ! = b ) || ( c < b ) ; printf ( " ( a ! = b ) || ( c < b ) equals to %d \n  " , result ) ; result = ! ( a ! = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; result = ! ( a = = b ) ; printf ( " ! ( a = = b ) equals to %d \n  " , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , e [ 10 ] ; float b ; double c ; char d ; printf ( " Size of int = %lu bytes\n  " , sizeof ( a ) ) ; printf ( " Size of float = %lu bytes\n  " , sizeof ( b ) ) ; printf ( " Size of double = %lu bytes\n  " , sizeof ( c ) ) ; printf ( " Size of char = %lu byte\n  " , sizeof ( d ) ) ; printf ( " Size of integer type array having 10 elements = %lu bytes\n  " , sizeof ( e ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char February ; int days ; printf ( " If this year is leap year , enter 1. If not enter any integer : " ) ; scanf ( " %c " , & February ) ; days = ( February = = '1' ) ? 29 : 28 ; printf ( " Number of days in February = %d " , days ) ; return 0 ; }
#include <stdio.h> #include <math.h> int convertBinaryToDecimal ( long long n ) ; int main ( ) { long long n ; printf ( " Enter a binary number : " ) ; scanf ( " %lld " , & n ) ; printf ( " %lld in binary = %d in decimal " , n , convertBinaryToDecimal ( n ) ) ; return 0 ; } int convertBinaryToDecimal ( long long n ) { int decimalNumber = 0 , i = 0 , remainder ; while ( n! = 0 ) { remainder = n %10 ; n / = 10 ; decimalNumber + = remainder * pow ( 2 , i ) ; + + i ; } return decimalNumber ; }
#include <stdio.h> #include <math.h> long long convertDecimalToBinary ( int n ) ; int main ( ) { int n ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & n ) ; printf ( " %d in decimal = %lld in binary " , n , convertDecimalToBinary ( n ) ) ; return 0 ; } long long convertDecimalToBinary ( int n ) { long long binaryNumber = 0 ; int remainder , i = 1 , step = 1 ; while ( n! = 0 ) { remainder = n %2 ; printf ( " Step %d : %d / 2 , Remainder = %d , Quotient = %d\n  " , step + + , n , remainder , n / 2 ) ; n / = 2 ; binaryNumber + = remainder * i ; i * = 10 ; } return binaryNumber ; }
#include <stdio.h> int main ( ) { int number , originalNumber , remainder , result = 0 ; printf ( " Enter a three digit integer : " ) ; scanf ( " %d " , & number ) ; originalNumber = number ; while ( originalNumber ! = 0 ) { remainder = originalNumber %10 ; result + = remainder * remainder * remainder ; originalNumber / = 10 ; } if ( result = = number ) printf ( " %d is an Armstrong number. " , number ) ; else printf ( " %d is not an Armstrong number. " , number ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int number , originalNumber , remainder , result = 0 , n = 0 ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & number ) ; originalNumber = number ; while ( originalNumber ! = 0 ) { originalNumber / = 10 ; + + n ; } originalNumber = number ; while ( originalNumber ! = 0 ) { remainder = originalNumber %10 ; result + = pow ( remainder , n ) ; originalNumber / = 10 ; } if ( result = = number ) printf ( " %d is an Armstrong number. " , number ) ; else printf ( " %d is not an Armstrong number. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reversedNumber = 0 , remainder ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { remainder = n %10 ; reversedNumber = reversedNumber * 10 + remainder ; n / = 10 ; } printf ( " Reversed Number = %d " , reversedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reversedInteger = 0 , remainder , originalInteger ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & n ) ; originalInteger = n ; while ( n! = 0 ) { remainder = n %10 ; reversedInteger = reversedInteger * 10 + remainder ; n / = 10 ; } if ( originalInteger = = reversedInteger ) printf ( " %d is a palindrome. " , originalInteger ) ; else printf ( " %d is not a palindrome. " , originalInteger ) ; return 0 ; }
#include <stdio.h> #include <math.h> int convertBinarytoOctal ( long long binaryNumber ) ; int main ( ) { long long binaryNumber ; printf ( " Enter a binary number : " ) ; scanf ( " %lld " , & binaryNumber ) ; printf ( " %lld in binary = %d in octal " , binaryNumber , convertBinarytoOctal ( binaryNumber ) ) ; return 0 ; } int convertBinarytoOctal ( long long binaryNumber ) { int octalNumber = 0 , decimalNumber = 0 , i = 0 ; while ( binaryNumber ! = 0 ) { decimalNumber + = ( binaryNumber %10 ) * pow ( 2 , i ) ; + + i ; binaryNumber / = 10 ; } i = 1 ; while ( decimalNumber ! = 0 ) { octalNumber + = ( decimalNumber % 8 ) * i ; decimalNumber / = 8 ; i * = 10 ; } return octalNumber ; }
#include <stdio.h> #include <math.h> long long convertOctalToBinary ( int octalNumber ) ; int main ( ) { int octalNumber ; printf ( " Enter an octal number : " ) ; scanf ( " %d " , & octalNumber ) ; printf ( " %d in octal = %lld in binary " , octalNumber , convertOctalToBinary ( octalNumber ) ) ; return 0 ; } long long convertOctalToBinary ( int octalNumber ) { int decimalNumber = 0 , i = 0 ; long long binaryNumber = 0 ; while ( octalNumber ! = 0 ) { decimalNumber + = ( octalNumber %10 ) * pow ( 8 , i ) ; + + i ; octalNumber / = 10 ; } i = 1 ; while ( decimalNumber ! = 0 ) { binaryNumber + = ( decimalNumber % 2 ) * i ; decimalNumber / = 2 ; i * = 10 ; } return binaryNumber ; }
#include <stdio.h> int main ( ) { int base , exponent ; long long result = 1 ; printf ( " Enter a base number : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter an exponent : " ) ; scanf ( " %d " , & exponent ) ; while ( exponent ! = 0 ) { result * = base ; --exponent ; } printf ( " Answer = %lld " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , exponent , result ; printf ( " Enter a base number : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter an exponent : " ) ; scanf ( " %lf " , & exponent ) ; result = pow ( base , exponent ) ; printf ( " %.1lf^ %.1lf = %.2lf " , base , exponent , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int convertDecimalToOctal ( int decimalNumber ) ; int main ( ) { int decimalNumber ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & decimalNumber ) ; printf ( " %d in decimal = %d in octal " , decimalNumber , convertDecimalToOctal ( decimalNumber ) ) ; return 0 ; } int convertDecimalToOctal ( int decimalNumber ) { int octalNumber = 0 , i = 1 ; while ( decimalNumber ! = 0 ) { octalNumber + = ( decimalNumber % 8 ) * i ; decimalNumber / = 8 ; i * = 10 ; } return octalNumber ; }
#include <stdio.h> #include <math.h> long long convertOctalToDecimal ( int octalNumber ) ; int main ( ) { int octalNumber ; printf ( " Enter an octal number : " ) ; scanf ( " %d " , & octalNumber ) ; printf ( " %d in octal = %lld in decimal " , octalNumber , convertOctalToDecimal ( octalNumber ) ) ; return 0 ; } long long convertOctalToDecimal ( int octalNumber ) { int decimalNumber = 0 , i = 0 ; while ( octalNumber ! = 0 ) { decimalNumber + = ( octalNumber %10 ) * pow ( 8 , i ) ; + + i ; octalNumber / = 10 ; } i = 1 ; return decimalNumber ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a & b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a|b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 , b = 25 ; printf ( " Output = %d " , a^b ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Output = %d\n  " , ~35 ) ; printf ( " Output = %d\n  " , ~-12 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 212 , i ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Right shift by %d : %d\n  " , i , num> > i ) ; printf ( " \n  " ) ; for ( i = 0 ; i < = 2 ; + + i ) printf ( " Left shift by %d : %d\n  " , i , num < <i ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double a , b , c , discriminant , root1 , root2 , realPart , imaginaryPart ; printf ( " Enter coefficients a , b and c : " ) ; scanf ( " %lf %lf %lf " , & a , & b , & c ) ; discriminant = b * b-4 * a * c ; if ( discriminant > 0 ) { root1 = ( -b + sqrt ( discriminant ) ) / ( 2 * a ) ; root2 = ( -b-sqrt ( discriminant ) ) / ( 2 * a ) ; printf ( " root1 = %.2lf and root2 = %.2lf " , root1 , root2 ) ; } else if ( discriminant = = 0 ) { root1 = root2 = -b / ( 2 * a ) ; printf ( " root1 = root2 = %.2lf ; " , root1 ) ; } else { realPart = -b / ( 2 * a ) ; imaginaryPart = sqrt ( -discriminant ) / ( 2 * a ) ; printf ( " root1 = %.2lf + %.2lfi and root2 = %.2f- %.2fi " , realPart , imaginaryPart , realPart , imaginaryPart ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int low , high , i , temp1 , temp2 , remainder , n = 0 , result = 0 ; printf ( " Enter two numbers ( intervals ) : " ) ; scanf ( " %d %d " , & low , & high ) ; printf ( " Armstrong numbers between %d an %d are : " , low , high ) ; for ( i = low + 1 ; i < high ; + + i ) { temp2 = i ; temp1 = i ; while ( temp1 ! = 0 ) { temp1 / = 10 ; + + n ; } while ( temp2 ! = 0 ) { remainder = temp2 % 10 ; result + = pow ( remainder , n ) ; temp2 / = 10 ; } if ( result = = i ) { printf ( " %d " , i ) ; } n = 0 ; result = 0 ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter a year : " ) ; scanf ( " %d " , & year ) ; if ( year %4 = = 0 ) { if ( year %100 = = 0 ) { if ( year %400 = = 0 ) printf ( " %d is a leap year. " , year ) ; else printf ( " %d is not a leap year. " , year ) ; } else printf ( " %d is a leap year. " , year ) ; } else printf ( " %d is not a leap year. " , year ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] , i , j ; printf ( " Enter first string : " ) ; scanf ( " %s " , s1 ) ; printf ( " Enter second string : " ) ; scanf ( " %s " , s2 ) ; for ( i = 0 ; s1 [ i ] ! = '\0' ; + + i ) ; for ( j = 0 ; s2 [ j ] ! = '\0' ; + + j , + + i ) { s1 [ i ] = s2 [ j ] ; } s1 [ i ] = '\0' ; printf ( " After concatenation : %s " , s1 ) ; return 0 ; }
#include <stdio.h> int power ( int n1 , int n2 ) ; int main ( ) { int base , powerRaised , result ; printf ( " Enter base number : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter power number ( positive integer ) : " ) ; scanf ( " %d " , & powerRaised ) ; result = power ( base , powerRaised ) ; printf ( " %d^ %d = %d " , base , powerRaised , result ) ; return 0 ; } int power ( int base , int powerRaised ) { if ( powerRaised ! = 0 ) return ( base * power ( base , powerRaised-1 ) ) ; else return 1 ; }
#include <stdio.h> #define PI 3.1415 int main ( ) { float radius , area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.1415 #define circleArea ( r ) ( PI * r * r ) int main ( ) { int radius ; float area ; printf ( " Enter the radius : " ) ; scanf ( " %d " , & radius ) ; area = circleArea ( radius ) ; printf ( " Area = %.2f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current time : %s " , __TIME__ ) ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char input , alphabet = 'A' ; printf ( " Enter the uppercase character you want to print in last row : " ) ; scanf ( " %c " , & input ) ; for ( i = 1 ; i < = ( input-'A' + 1 ) ; + + i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %c " , alphabet ) ; } + + alphabet ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = rows ; i> = 1 ; --i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = rows ; i> = 1 ; --i ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , space , rows , k = 0 ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i , k = 0 ) { for ( space = 1 ; space < = rows-i ; + + space ) { printf ( " " ) ; } while ( k ! = 2 * i-1 ) { printf ( " * " ) ; + + k ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , space , rows , k = 0 , count = 0 , count1 = 0 ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; + + i ) { for ( space = 1 ; space < = rows-i ; + + space ) { printf ( " " ) ; + + count ; } while ( k ! = 2 * i-1 ) { if ( count < = rows-1 ) { printf ( " %d " , i + k ) ; + + count ; } else { + + count1 ; printf ( " %d " , ( i + k-2 * count1 ) ) ; } + + k ; } count1 = count = k = 0 ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , i , j , space ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = rows ; i> = 1 ; --i ) { for ( space = 0 ; space < rows-i ; + + space ) printf ( " " ) ; for ( j = i ; j < = 2 * i-1 ; + + j ) printf ( " * " ) ; for ( j = 0 ; j < i-1 ; + + j ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , coef = 1 , space , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 0 ; i <rows ; i + + ) { for ( space = 1 ; space < = rows-i ; space + + ) printf ( " " ) ; for ( j = 0 ; j < = i ; j + + ) { if ( j = = 0 || i = = 0 ) coef = 1 ; else coef = coef * ( i-j + 1 ) / j ; printf ( " %4d " , coef ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , i , j , number = 1 ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i ; + + j ) { printf ( " %d " , number ) ; + + number ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = '5' ; result = isalnum ( c ) ; printf ( " When %c is passed , return value is %d\n  " , c , result ) ; c = 'Q' ; result = isalnum ( c ) ; printf ( " When %c is passed , return value is %d\n  " , c , result ) ; c = 'l' ; result = isalnum ( c ) ; printf ( " When %c is passed , return value is %d\n  " , c , result ) ; c = ' + ' ; result = isalnum ( c ) ; printf ( " When %c is passed , return value is %d\n  " , c , result ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isalnum ( c ) = = 0 ) printf ( " %c is not an alphanumeric character. " , c ) ; else printf ( " %c is an alphanumeric character. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = '5' ; printf ( " Result when numeric character is passed : %d " , isdigit ( c ) ) ; c = ' + ' ; printf ( " \n Result when non-numeric character is passed : %d " , isdigit ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isdigit ( c ) = = 0 ) printf ( " %c is not a digit. " , c ) ; else printf ( " %c is a digit. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'Q' ; printf ( " \n Result when uppercase alphabet is passed : %d " , isalpha ( c ) ) ; c = 'q' ; printf ( " \n Result when lowercase alphabet is passed : %d " , isalpha ( c ) ) ; c = ' + ' ; printf ( " \n Result when non-alphabetic character is passed : %d " , isalpha ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; if ( isalpha ( c ) = = 0 ) printf ( " %c is not an alphabet. " , c ) ; else printf ( " %c is an alphabet. " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = 'Q' ; result = iscntrl ( c ) ; printf ( " When %c is passed to iscntrl ( ) = %d\n  " , c , result ) ; c = '\n ' ; result = iscntrl ( c ) ; printf ( " When %c is passed to iscntrl ( ) = %d " , c , result ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " The ASCII value of all control characters are " ) ; for ( i = 0 ; i < = 127 ; + + i ) { if ( iscntrl ( i ) ! = 0 ) printf ( " %d " , i ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , power , result ; printf ( " Enter the base number : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter the power raised : " ) ; scanf ( " %lf " , & power ) ; result = pow ( base , power ) ; printf ( " %.1lf^ %.1lf = %.2lf " , base , power , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 6 , squareRoot ; squareRoot = sqrt ( num ) ; printf ( " Square root of %lf = %lf " , num , squareRoot ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = ' ' ; result = isgraph ( c ) ; printf ( " When %c is passed to isgraph ( ) = %d\n  " , c , result ) ; c = '\n ' ; result = isgraph ( c ) ; printf ( " When %c is passed to isgraph ( ) = %d\n  " , c , result ) ; c = '9' ; result = isgraph ( c ) ; printf ( " When %c is passed to isgraph ( ) = %d\n  " , c , result ) ;
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All graphic characters in C programming are : \n  " ) ; for ( i = 0 ; i < = 127 ; + + i ) { if ( isgraph ( i ) ! = 0 ) printf ( " %c " , i ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 't' ; printf ( " Return value when %c is passed to islower ( ) : %d " , c , islower ( c ) ) ; c = 'D' ; printf ( " \n Return value when %c is passed to islower ( ) : %d " , c , islower ( c ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char c ; c = 'Q' ; printf ( " Result when a printable character %c is passed to isprint ( ) : %d " , c , isprint ( c ) ) ; c = '\n ' ; printf ( " \n Result when a control character %c is passed to isprint ( ) : %d " , c , isprint ( c ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 127 ; + + c ) if ( isprint ( c ) ! = 0 ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; c = ' : ' ; result = ispunct ( c ) ; if ( result = = 0 ) { printf ( " %c is a punctuation " , c ) ; } else { printf ( " %c is not a punctuation " , c ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All punctuation marks in C programming are : \n  " ) ; for ( i = 0 ; i < = 127 ; + + i ) if ( ispunct ( i ) ! = 0 ) printf ( " %c " , i ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; int result ; printf ( " Enter a character : " ) ; scanf ( " %c " , & c ) ; result = isspace ( c ) ; if ( result = = 0 ) { printf ( " Not a white-space character. " ) ; } else { printf ( " White-space character. " ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'C' ; printf ( " Return value when uppercase character %c is passed to isupper ( ) : %d " , c , isupper ( c ) ) ; c = ' + ' ; printf ( " \n Return value when another character %c is passed to is isupper ( ) : %d " , c , isupper ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = '5' ; printf ( " Result when hexadecimal character %c is passed : %d " , c , isxdigit ( c ) ) ; c = 'M' ; printf ( " \n Result when hexadecimal character %c is not passed : %d " , c , isxdigit ( c ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c , result ; c = 'M' ; result = tolower ( c ) ; printf ( " tolower ( %c ) = %c\n  " , c , result ) ; c = 'm' ; result = tolower ( c ) ; printf ( " tolower ( %c ) = %c\n  " , c , result ) ; c = ' + ' ; result = tolower ( c ) ; printf ( " tolower ( %c ) = %c\n  " , c , result ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char c ; c = 'm' ; printf ( " %c -> %c " , c , toupper ( c ) ) ; c = 'D' ; printf ( " \n  %c -> %c " , c , toupper ( c ) ) ; c = '9' ; printf ( " \n  %c -> %c " , c , toupper ( c ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = -0.5 ; result = acos ( x ) ; printf ( " Inverse of cos ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = acos ( x ) * 180 / PI ; printf ( " Inverse of cos ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 1.2 ; result = acos ( x ) ; printf ( " Inverse of cos ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , facosx ; long double lx , ldacosx ; fx = -0.505405 ; facosx = acosf ( fx ) ; lx = -0.50540593 ; ldacosx = acosf ( lx ) ; printf ( " acosf ( x ) = %f in radians\n  " , facosx ) ; printf ( " acosl ( x ) = %Lf in radians " , ldacosx ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = 5.9 ; result = acosh ( x ) ; printf ( " acosh ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = acosh ( x ) * 180 / PI ; printf ( " acosh ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 0.5 ; result = acosh ( x ) ; printf ( " acosh ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <float.h> int main ( ) { double x , result ; x = DBL_MAX ; result = acosh ( x ) ; printf ( " Maximum value of acosh ( ) in radians = %.3lf\n  " , result ) ; x = INFINITY ; result = acosh ( x ) ; printf ( " When infinity is passed to acosh ( ) , result = %.3lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , facosx ; long double lx , ldacosx ; fx = 5.5054 ; facosx = acoshf ( fx ) ; lx = 5.50540593 ; ldacosx = acoshl ( lx ) ; printf ( " acoshf ( x ) = %f in radians\n  " , facosx ) ; printf ( " acoshl ( x ) = %Lf in radians " , ldacosx ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = -0.5 ; result = asin ( x ) ; printf ( " Inverse of sin ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = asin ( x ) * 180 / PI ; printf ( " Inverse of sin ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 1.2 ; result = asin ( x ) ; printf ( " Inverse of sin ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float fx , fasinx ; long double lx , ldasinx ; fx = -0.505405 ; fasinx = asinf ( fx ) ; lx = -0.50540593 ; ldasinx = asinf ( lx ) ; printf ( " asinf ( x ) = %f in radians\n  " , fasinx ) ; printf ( " asinl ( x ) = %Lf in radians " , ldasinx ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { float num = 8.0 ; double result ; result = asinh ( num ) ; printf ( " Inverse of sinh ( %.2f ) = %.2f in radians " , num , result ) ; result = ( result * 180 ) / PI ; printf ( " \n Inverse of sinh ( %.2f ) = %.2f in degrees " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double num = 1.0 ; double result ; result = atan ( num ) ; printf ( " Inverse of tan ( %.2f ) = %.2f in radians " , num , result ) ; result = ( result * 180 ) / PI ; printf ( " \n Inverse of tan ( %.2f ) = %.2f in degrees " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { const double PI = 3.1415926 ; double x , result ; x = -0.5 ; result = atanh ( x ) ; printf ( " atanh ( %.2f ) = %.2lf in radians\n  " , x , result ) ; result = atanh ( x ) * 180 / PI ; printf ( " atanh ( %.2f ) = %.2lf in degrees\n  " , x , result ) ; x = 3 ; result = atanh ( x ) ; printf ( " atanh ( %.2f ) = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double x , y , result ; y = 2.53 ; x = -10.2 ; result = atan2 ( y , x ) ; result = result * 180.0 / PI ; printf ( " Tangent inverse for ( x = %.1lf , y = %.1lf ) is %.1lf degrees. " , x , y , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 6 , cubeRoot ; cubeRoot = cbrt ( num ) ; printf ( " Cube root of %lf = %lf " , num , cubeRoot ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 8.33 ; int result ; result = ceil ( num ) ; printf ( " Ceiling integer of %.2f = %d " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double arg = 30 , result ; arg = ( arg * PI ) / 180 ; result = cos ( arg ) ; printf ( " cos of %.2lf radian = %.2lf " , arg , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x , result ; x = 0.5 ; result = cosh ( x ) ; printf ( " Hyperbolic cosine of %lf ( in radians ) = %lf\n  " , x , result ) ; x = -0.5 ; result = cosh ( x ) ; printf ( " Hyperbolic cosine of %lf ( in radians ) = %lf\n  " , x , result ) ; x = 0 ; result = cosh ( x ) ; printf ( " Hyperbolic cosine of %lf ( in radians ) = %lf\n  " , x , result ) ; x = 1.5 ; result = cosh ( x ) ; printf ( " Hyperbolic cosine of %lf ( in radians ) = %lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x = 12.0 , result ; result = exp ( x ) ; printf ( " Exponential of %.2lf = %.2lf " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x , result ; x = -1.5 ; result = fabs ( x ) ; printf ( " | %.2lf| = %.2lf\n  " , x , result ) ; x = 11.3 ; result = fabs ( x ) ; printf ( " | %.2lf| = %.2lf\n  " , x , result ) ; x = 0 ; result = fabs ( x ) ; printf ( " | %.2lf| = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = -8.33 ; int result ; result = floor ( num ) ; printf ( " Floor integer of %.2f = %d " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double p , b ; double hypotenuse ; p = 5.0 ; b = 12.0 ; hypotenuse = hypot ( p , b ) ; printf ( " hypot ( %.2lf , %.2lf ) = %.2lf " , p , b , hypotenuse ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 5.6 , result ; result = log ( num ) ; printf ( " log ( %.1f ) = %.2f " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num = 4.00 , result ; result = log10 ( num ) ; printf ( " log10 ( %.1f ) = %.2f " , num , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x ; double result ; x = 2.3 ; result = sin ( x ) ; printf ( " sin ( %.2lf ) = %.2lf\n  " , x , result ) ; x = -2.3 ; result = sin ( x ) ; printf ( " sin ( %.2lf ) = %.2lf\n  " , x , result ) ; x = 0 ; result = sin ( x ) ; printf ( " sin ( %.2lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double angle = 2.50 , result ; result = sinh ( angle ) ; printf ( " Sine hyperbolic of %.2lf ( in radians ) = %.2lf " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double x ; double result ; x = 2.3 ; result = tan ( x ) ; printf ( " tan ( %.2lf ) = %.2lf\n  " , x , result ) ; x = -2.3 ; result = tan ( x ) ; printf ( " tan ( %.2lf ) = %.2lf\n  " , x , result ) ; x = 0 ; result = tan ( x ) ; printf ( " tan ( %.2lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.141592654 int main ( ) { double angle = 0.40 , result ; result = tanh ( angle ) ; printf ( " Tangent hyperbolic of %.2lf ( in radians ) = %.2lf " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " Hello Compiler , I am C " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char name [ 20 ] ; printf ( " Enter Your Name : " ) ; scanf ( " %s " , name ) ; printf ( " Hello , %s. You are at codescracker.com " , name ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int no_star , no_row , i , j ; printf ( " How many stars you want to print ? " ) ; scanf ( " %d " , & no_star ) ; printf ( " Upto how many rows ? " ) ; scanf ( " %d " , & no_row ) ; int p = no_star / no_row ; for ( i = 0 ; i <no_row ; i + + ) { for ( j = 0 ; j <p ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 10 ] ; printf ( " Are you a programmer ? " ) ; scanf ( " %s " , str ) ; if ( !strcmp ( " yes " , str ) ) { printf ( " What a true mind you have..!! " ) ; } else { printf ( " Sorry..!!..You are telling a lie " ) ; } getch ( ) ; }
#include <stdio.h> #include <string.h> #include <conio.h> void main ( ) { clrscr ( ) ; char pass [ 20 ] ; printf ( " Create a Password : " ) ; scanf ( " %s " , pass ) ; int num1 , num2 , sum ; printf ( " Enter the two number to Add : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; char e_pass [ 20 ] ; printf ( " Enter password to watch the result : " ) ; scanf ( " %s " , e_pass ) ; if ( !strcmp ( pass , e_pass ) ) { sum = num1 + num2 ; printf ( " %d + %d = %d " , num1 , num2 , sum ) ; } else { printf ( " Sorry..!!..You entered wrong password " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char arr [ 6 ] [ 20 ] = { " programmer " , " developer " , " engineer " , " student " , " teacher " , " professor " , } ; char name [ 25 ] ; int found = 0 ; printf ( " Who you are ? " ) ; scanf ( " %s " , name ) ; for ( int i = 0 ; i <6 ; i + + ) { if ( !strcmp ( name , arr [ i ] ) ) { printf ( " Congratulation..!!\n  " ) ; printf ( " You are invited from codescracker.com. " ) ; found = 1 ; break ; } else { found + + ; } } if ( found ! = 1 ) { printf ( " Sorry..!!..You are not invited " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; printf ( " Hello World " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char name [ 20 ] ; int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " You entered %d " , num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num = 10 ; printf ( " The value of num is %d " , num ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; sum = a + b ; printf ( " Sum of the two number is %d " , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) { printf ( " This is an even number " ) ; } else { printf ( " This is an odd number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , i , count = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i <num ; i + + ) { if ( num %i = = 0 ) { count + + ; break ; } } if ( count = = 0 ) { printf ( " This is a prime number " ) ; } else { printf ( " This is not a prime number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter a character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ) { printf ( " %c is an alphabet " , ch ) ; } else { printf ( " %c is not an alphabet " , ch ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter an alphabet : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'a' || ch = = 'A' || ch = = 'e' || ch = = 'E' || ch = = 'i' || ch = = 'I' || ch = = 'o' || ch = = 'O' || ch = = 'u' || ch = = 'U' ) { printf ( " This is a vowel " ) ; } else { printf ( " This is not a vowel " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int yr ; printf ( " Enter year : " ) ; scanf ( " %d " , & yr ) ; if ( ( yr %4 = = 0 ) & & ( yr %100! = 0 ) ) { printf ( " This is a Leap Year " ) ; } else if ( ( yr %100 = = 0 ) & & ( yr %400 = = 0 ) ) { printf ( " This is a Leap Year " ) ; } else if ( yr %400 = = 0 ) { printf ( " This is a Leap Year " ) ; } else { printf ( " This is not a Leap Year " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , orig , rev = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; orig = num ; while ( num> 0 ) { rem = num %10 ; rev = rev * 10 + rem ; num = num / 10 ; } if ( orig = = rev ) { printf ( " Reverse is equal to original " ) ; } else { printf ( " Reverse is not equal to original " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , res ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; res = a + b ; printf ( " \n Addition = %d " , res ) ; res = a-b ; printf ( " \n Subtraction = %d " , res ) ; res = a * b ; printf ( " \n Multiplication = %d " , res ) ; res = a / b ; printf ( " \n Division = %d " , res ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b ; char ch ; printf ( " Enter first Number : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter second Number : " ) ; scanf ( " %d " , & b ) ; printf ( " Enter operator ( + , - , * , / ) : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = ' + ' ) printf ( " Result = %d " , a + b ) ; else if ( ch = = '-' ) printf ( " Result = %d " , a-b ) ; else if ( ch = = ' * ' ) printf ( " Result = %d " , a * b ) ; else if ( ch = = ' / ' ) printf ( " Result = %d " , a / b ) ; else printf ( " Wrong Operator!!! " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; float a , b , res ; char choice , ch ; do { printf ( " 1.Addition\n  " ) ; printf ( " 2.Subtraction\n  " ) ; printf ( " 3.Multiplication\n  " ) ; printf ( " 4.Division\n  " ) ; printf ( " 5.Exit\n \n  " ) ; printf ( " Enter Your Choice : " ) ; scanf ( " %c " , & choice ) ; switch ( choice ) { case '1' : printf ( " Enter two number : " ) ; scanf ( " %f %f " , & a , & b ) ; res = a + b ; printf ( " Result = %f " , res ) ; break ; case '2' : printf ( " Enter two number : " ) ; scanf ( " %f %f " , & a , & b ) ; res = a-b ; printf ( " Result = %f " , res ) ; break ; case '3' : printf ( " Enter two number : " ) ; scanf ( " %f %f " , & a , & b ) ; res = a * b ; printf ( " Result = %f " , res ) ; break ; case '4' : printf ( " Enter two number : " ) ; scanf ( " %f %f " , & a , & b ) ; res = a / b ; printf ( " Result = %f " , res ) ; break ; case '5' : exit ( 0 ) ; break ; default : printf ( " Wrong Choice..!! " ) ; break ; } printf ( " \n ------------------------------------\n  " ) ; } while ( choice! = 5 & & choice! = getchar ( ) ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , rem = 0 , sum = 0 ; printf ( " Enter a Number : " ) ; scanf ( " %d " , & num ) ; int temp = num ; while ( num> 0 ) { rem = num %10 ; sum = sum + rem ; num = num / 10 ; } printf ( " Sum of the digits of %d is %d " , temp , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int mark [ 5 ] , i ; float sum = 0 ; printf ( " Enter marks obtained in Physics , Chemistry , Maths , CS , English : " ) ; for ( i = 0 ; i <5 ; i + + ) { scanf ( " %d " , & mark [ i ] ) ; sum = sum + mark [ i ] ; } float avg = sum / 5 ; float perc ; perc = ( sum / 500 ) * 100 ; printf ( " Average Marks = %f " , avg ) ; printf ( " \n Percentage = %f % " , perc ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int n , i , arr [ 50 ] , sum = 0 ; printf ( " How many number you want to enter ?\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d Numbers : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; sum = sum + arr [ i ] ; } int armean = sum / n ; printf ( " Arithmetic Mean = %d " , armean ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int mark [ 5 ] , i ; float sum = 0 , avg ; printf ( " Enter marks obtained in 5 subjects : " ) ; for ( i = 0 ; i <5 ; i + + ) { scanf ( " %d " , & mark [ i ] ) ; sum = sum + mark [ i ] ; } avg = sum / 5 ; printf ( " Your Grade is " ) ; if ( avg> 80 ) { printf ( " A " ) ; } else if ( avg> 60 & & avg < = 80 ) { printf ( " B " ) ; } else if ( avg> 40 & & avg < = 60 ) { printf ( " C " ) ; } else { printf ( " D " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , i , tab ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " Table of %d is \n \n  " , num ) ; for ( i = 1 ; i < = 10 ; i + + ) { tab = num * i ; printf ( " %d * %2d = %2d\n  " , num , i , tab ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int start , end , i , j , count = 0 ; printf ( " Enter starting number : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter ending number : " ) ; scanf ( " %d " , & end ) ; printf ( " Prime Number Between %d and %d is : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { count = 0 ; for ( j = 2 ; j <i ; j + + ) { if ( i %j = = 0 ) { count + + ; break ; } } if ( count = = 0 ) { printf ( " %d " , i ) ; } } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , n , sum = 0 , num ; printf ( " How many number you want to enter and add them ? " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d number : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & num ) ; sum = sum + num ; } printf ( " Sum of all the %d number is %d " , n , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , temp ; printf ( " Enter value of A and B : \n  " ) ; printf ( " A = " ) ; scanf ( " %d " , & a ) ; printf ( " B = " ) ; scanf ( " %d " , & b ) ; temp = a ; a = b ; b = temp ; printf ( " Number interchanged successfully..!!\n  " ) ; printf ( " A = %d\n B = %d " , a , b ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , rev = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { rem = num %10 ; rev = rev * 10 + rem ; num = num / 10 ; } printf ( " Reverse = %d " , rev ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num1 , num2 , swap ; printf ( " Enter two number : " ) ; printf ( " \n First Number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Second Number : " ) ; scanf ( " %d " , & num2 ) ; swap = num1 ; num1 = num2 ; num2 = swap ; printf ( " The value of first and second number after swapping is \n  " ) ; printf ( " First Number = %d\n Second Number = %d " , num1 , num2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int countp = 0 , countn = 0 , countz = 0 , arr [ 10 ] , i ; printf ( " Enter 10 numbers : " ) ; for ( i = 0 ; i <10 ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <10 ; i + + ) { if ( arr [ i ] <0 ) { countn + + ; } else if ( arr [ i ] = = 0 ) { countz + + ; } else { countp + + ; } } printf ( " Positive Numbers = %d\n  " , countp ) ; printf ( " Negative Numbers = %d\n  " , countn ) ; printf ( " Zero = %d " , countz ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , big ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & a , & b ) ; if ( a> b ) { big = a ; } else { big = b ; } printf ( " Biggest of the two number is %d " , big ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , c , big ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & a , & b , & c ) ; big = a ; if ( big <b ) { if ( b> c ) { big = b ; } else { big = c ; } } else if ( big <c ) { if ( c> b ) { big = c ; } else { big = b ; } } else { big = a ; } printf ( " Biggest number is %d " , big ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , i , fact = 1 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; for ( i = num ; i> 0 ; i-- ) { fact = fact * i ; } printf ( " Factorial of %d is %d " , num , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a , b , x , y , t , hcf , lcm ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & x , & y ) ; a = x ; b = y ; while ( b! = 0 ) { t = b ; b = a %b ; a = t ; } hcf = a ; lcm = ( x * y ) / hcf ; printf ( " HCF = %d\n  " , hcf ) ; printf ( " LCM = %d " , lcm ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int len , bre , peri , area ; printf ( " Enter length and breadth of the rectangle : " ) ; scanf ( " %d %d " , & len , & bre ) ; area = len * bre ; peri = ( 2 * len ) + ( 2 * bre ) ; printf ( " Area = %d\tPerimeter = %d " , area , peri ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int side , peri , area ; printf ( " Enter length of a side of square : " ) ; scanf ( " %d " , & side ) ; area = side * side ; peri = 4 * side ; printf ( " Area = %d\tPerimeter = %d " , area , peri ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float r , area , circum ; printf ( " Enter the radius of the circle : " ) ; scanf ( " %f " , & r ) ; area = 3.14 * r * r ; circum = 2 * 3.14 * r ; printf ( " Area of the circle = %f\n Circumference of the circle = %f\n  " , area , circum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float fah , cel ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fah ) ; cel = ( fah-32 ) / 1.8 ; printf ( " Temperature in Celsius = %f " , cel ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; float cen , fah ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & cen ) ; fah = ( 1.8 * cen ) + 32 ; printf ( " \n Temperature in Fahrenheit = %f " , fah ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; int i ; for ( i = 1 ; i <255 ; i + + ) { ch = i ; printf ( " %d -> %c\t " , i , ch ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int a = 0 , b = 1 , c = 0 , limit ; printf ( " Upto How many term ? " ) ; scanf ( " %d " , & limit ) ; printf ( " Fabonacci Series : %d %d " , a , b ) ; c = a + b ; limit = limit-2 ; while ( limit ) { printf ( " %d " , c ) ; a = b ; b = c ; c = a + b ; limit-- ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num , rem , orig , rev = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; orig = num ; while ( num! = 0 ) { rem = num %10 ; rev = rev * 10 + rem ; num = num / 10 ; } if ( rev = = orig ) { printf ( " Palindrome " ) ; } else { printf ( " Not Palindrome " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int n , nu , num = 0 , rem ; printf ( " Enter any positive number : " ) ; scanf ( " %d " , & n ) ; nu = n ; while ( nu! = 0 ) { rem = nu %10 ; num = num + rem * rem * rem ; nu = nu / 10 ; } if ( num = = n ) { printf ( " Armstrong Number " ) ; } else { printf ( " Not Armstrong Number " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num1 , num2 , i , n , rem , temp , count = 0 ; printf ( " Enter Starting Number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter Ending Number : " ) ; scanf ( " %d " , & num2 ) ; for ( i = num1 + 1 ; i <num2 ; i + + ) { temp = i ; n = 0 ; while ( temp! = 0 ) { rem = temp %10 ; n = n + rem * rem * rem ; temp = temp / 10 ; } if ( i = = n ) { if ( count = = 0 ) { printf ( " Armstrong numbers between the given interval are : \n  " ) ; } printf ( " %d " , i ) ; count + + ; } } if ( count = = 0 ) { printf ( " Armstrong number not found between the given interval " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> long int fact ( int ) ; void main ( ) { clrscr ( ) ; int n , r ; long int ncr , npr ; printf ( " Enter the value of n : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the value of r : " ) ; scanf ( " %d " , & r ) ; npr = fact ( n ) / fact ( n-r ) ; ncr = npr / fact ( r ) ; printf ( " NPR value = %ld\n  " , npr ) ; printf ( " NCR value = %ld\n  " , ncr ) ; getch ( ) ; } long int fact ( int x ) { int i , f = 1 ; for ( i = 2 ; i < = x ; i + + ) { f = f * i ; } return f ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int decnum , rem , quot ; int binnum [ 100 ] , i = 1 , j ; printf ( " Enter any decimal number : " ) ; scanf ( " %ld " , & decnum ) ; quot = decnum ; while ( quot! = 0 ) { binnum [ i + + ] = quot %2 ; quot = quot / 2 ; } printf ( " Equivalent binary value of %d : \n  " , decnum ) ; for ( j = i-1 ; j> 0 ; j-- ) { printf ( " %d " , binnum [ j ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int decnum , rem , quot ; int i = 1 , j , octnum [ 100 ] ; printf ( " Enter any decimal number : " ) ; scanf ( " %ld " , & decnum ) ; quot = decnum ; while ( quot! = 0 ) { octnum [ i + + ] = quot %8 ; quot = quot / 8 ; } printf ( " Equivalent octal value of %d is : \n  " , decnum ) ; for ( j = i-1 ; j> 0 ; j-- ) { printf ( " %d " , octnum [ j ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int decnum , rem , quot ; char hexdecnum [ 100 ] ; int i = 1 , j , temp ; printf ( " Enter any decimal number : " ) ; scanf ( " %ld " , & decnum ) ; quot = decnum ; while ( quot! = 0 ) { temp = quot %16 ; if ( temp <10 ) { temp = temp + 48 ; } else { temp = temp + 55 ; } hexdecnum [ i + + ] = temp ; quot = quot / 16 ; } printf ( " Equivalent hexadecimal value of %d is : \n  " , decnum ) ; for ( j = i-1 ; j> 0 ; j-- ) { printf ( " %c " , hexdecnum [ j ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int binnum , decnum = 0 , i = 1 , rem ; printf ( " Enter any binary number : " ) ; scanf ( " %ld " , & binnum ) ; while ( binnum! = 0 ) { rem = binnum %10 ; decnum = decnum + rem * i ; i = i * 2 ; binnum = binnum / 10 ; } printf ( " Equivalent decimal value = %ld " , decnum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { long int binnum , rem , quot ; int octnum [ 100 ] , i = 1 , j ; clrscr ( ) ; printf ( " Enter any binary number : " ) ; scanf ( " %ld " , & binnum ) ; quot = binnum ; while ( quot! = 0 ) { octnum [ i + + ] = quot %8 ; quot = quot / 8 ; } printf ( " Equivalent octal value of %d : \n  " , binnum ) ; for ( j = i-1 ; j> 0 ; j-- ) { printf ( " %d " , octnum [ j ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int decnum , rem , quot ; int i = 1 , j , temp ; char hexdecnum [ 100 ] ; printf ( " Enter decimal number : " ) ; scanf ( " %ld " , & decnum ) ; quot = decnum ; while ( quot! = 0 ) { temp = quot % 16 ; if ( temp < 10 ) { temp = temp + 48 ; } else { temp = temp + 55 ; } hexdecnum [ i + + ] = temp ; quot = quot / 16 ; } printf ( " Equivalent hexadecimal value of %d is : \n  " , decnum ) ; for ( j = i-1 ; j> 0 ; j-- ) { printf ( " %c " , hexdecnum [ j ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <math.h> void main ( ) { clrscr ( ) ; long int octnum , decnum = 0 ; int i = 0 ; printf ( " Enter any Octal Number : " ) ; scanf ( " %ld " , & octnum ) ; while ( octnum! = 0 ) { decnum = decnum + ( octnum %10 ) * pow ( 8 , i ) ; i + + ; octnum = octnum / 10 ; } printf ( " Equivalent Decimal Value = %ld " , decnum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int i = 0 ; char octnum [ 1000 ] ; printf ( " Enter any Octal Number : " ) ; scanf ( " %s " , octnum ) ; printf ( " Equivalent Binary Value = " ) ; while ( octnum [ i ] ) { switch ( octnum [ i ] ) { case '0' : printf ( " 000 " ) ; break ; case '1' : printf ( " 001 " ) ; break ; case '2' : printf ( " 010 " ) ; break ; case '3' : printf ( " 011 " ) ; break ; case '4' : printf ( " 100 " ) ; break ; case '5' : printf ( " 101 " ) ; break ; case '6' : printf ( " 110 " ) ; break ; case '7' : printf ( " 111 " ) ; break ; default : printf ( " \n Invalid Octal Digit %c " , octnum [ i ] ) ; break ; } i + + ; } getch ( ) ; }
#include <stdio.h> #include <stdlib.h> #include <conio.h> #include <math.h> unsigned long convtodecnum ( char hex [ ] ) ; void main ( ) { clrscr ( ) ; unsigned long decnum ; char hex [ 9 ] ; printf ( " Enter 32-bit Hexadecimal Number : " ) ; scanf ( " %s " , hex ) ; decnum = convtodecnum ( hex ) ; printf ( " Value in Decimal Number is %u \n  " , decnum ) ; getch ( ) ; } unsigned long convtodecnum ( char hex [ ] ) { char * hexstr ; int length = 0 ; const int base = 16 ; unsigned long decnum = 0 ; int i ; for ( hexstr = hex ; * hexstr ! = '\0' ; hexstr + + ) { length + + ; } hexstr = hex ; for ( i = 0 ; * hexstr ! = '\0' & & i < length ; i + + , hexstr + + ) { if ( * hexstr > = 48 & & * hexstr < = 57 ) { decnum + = ( ( ( int ) ( * hexstr ) ) - 48 ) * pow ( base , length - i - 1 ) ; } else if ( ( * hexstr > = 65 & & * hexstr < = 70 ) ) { decnum + = ( ( ( int ) ( * hexstr ) ) - 55 ) * pow ( base , length - i - 1 ) ; } else if ( * hexstr > = 97 & & * hexstr < = 102 ) { decnum + = ( ( ( int ) ( * hexstr ) ) - 87 ) * pow ( base , length - i - 1 ) ; } else { printf ( " Invalid Hexadecimal Number \n  " ) ; } } return decnum ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; long int i = 0 ; char binnum [ 100 ] , hexdec [ 100 ] ; printf ( " Enter any hexadecimal number : " ) ; scanf ( " %s " , hexdec ) ; printf ( " \n Equivalent Binary value is : " ) ; while ( hexdec [ i ] ) { switch ( hexdec [ i ] ) { case '0' : printf ( " 0000 " ) ; break ; case '1' : printf ( " 0001 " ) ; break ; case '2' : printf ( " 0010 " ) ; break ; case '3' : printf ( " 0011 " ) ; break ; case '4' : printf ( " 0100 " ) ; break ; case '5' : printf ( " 0101 " ) ; break ; case '6' : printf ( " 0110 " ) ; break ; case '7' : printf ( " 0111 " ) ; break ; case '8' : printf ( " 1000 " ) ; break ; case '9' : printf ( " 1001 " ) ; break ; case 'A' : printf ( " 1010 " ) ; break ; case 'B' : printf ( " 1011 " ) ; break ; case 'C' : printf ( " 1100 " ) ; break ; case 'D' : printf ( " 1101 " ) ; break ; case 'E' : printf ( " 1110 " ) ; break ; case 'F' : printf ( " 1111 " ) ; break ; case 'a' : printf ( " 1010 " ) ; break ; case 'b' : printf ( " 1011 " ) ; break ; case 'c' : printf ( " 1100 " ) ; break ; case 'd' : printf ( " 1101 " ) ; break ; case 'e' : printf ( " 1110 " ) ; break ; case 'f' : printf ( " 1111 " ) ; break ; default : printf ( " \n Invalid hexadecimal digit %c " , hexdec [ i ] ) ; } i + + ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> #include <math.h> int hex_to_oct ( char hex [ ] ) ; void main ( ) { clrscr ( ) ; char hex [ 20 ] , c ; int n ; printf ( " Enter Hexadecimal Number : " ) ; scanf ( " %s " , hex ) ; printf ( " Equivalent Octal Value = %d " , hex_to_oct ( hex ) ) ; getch ( ) ; } int hex_to_oct ( char hex [ ] ) { int i , len , dec = 0 , oct = 0 ; for ( len = 0 ; hex [ len ] ! = '\0' ; len + + ) ; for ( i = 0 ; hex [ i ] ! = '\0' ; i + + , len-- ) { if ( hex [ i ] > = '0' & & hex [ i ] < = '9' ) { dec = dec + ( hex [ i ] -'0' ) * pow ( 16 , len-1 ) ; } if ( hex [ i ] > = 'A' & & hex [ i ] < = 'F' ) { dec = dec + ( hex [ i ] -55 ) * pow ( 16 , len-1 ) ; } if ( hex [ i ] > = 'a' & & hex [ i ] < = 'f' ) { dec = dec + ( hex [ i ] -87 ) * pow ( 16 , len-1 ) ; } } i = 1 ; while ( dec! = 0 ) { oct = oct + ( dec %8 ) * i ; dec = dec / 8 ; i = i * 10 ; } return oct ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " * " ) ; } k = k + 2 ; printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 8 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " " ) ; } k = k-2 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , k = 16 , tim = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j <k ; j + + ) { printf ( " " ) ; } k = k-4 ; for ( j = 0 ; j <tim ; j + + ) { printf ( " * " ) ; } tim = tim + 2 ; printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , n = 1 ; for ( i = 0 ; i <5 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " %d " , n ) ; n + + ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , j , num = 1 ; for ( i = 0 ; i <5 ; i + + ) { num = 1 ; for ( j = 0 ; j < = i ; j + + ) { printf ( " %d " , num ) ; num + + ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , space , rows , k = 0 ; printf ( " Enter the number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( space = 1 ; space < = ( rows-i ) ; space + + ) { printf ( " " ) ; } while ( k! = ( 2 * i-1 ) ) { printf ( " * " ) ; k + + ; } k = 0 ; printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int n , c , k , space = 1 ; printf ( " Enter number of rows ( for diamond dimension ) : " ) ; scanf ( " %d " , & n ) ; space = n-1 ; for ( k = 1 ; k < = n ; k + + ) { for ( c = 1 ; c < = space ; c + + ) { printf ( " " ) ; } space-- ; for ( c = 1 ; c < = ( 2 * k-1 ) ; c + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } space = 1 ; for ( k = 1 ; k < = ( n-1 ) ; k + + ) { for ( c = 1 ; c < = space ; c + + ) { printf ( " " ) ; } space + + ; for ( c = 1 ; c < = ( 2 * ( n-k ) -1 ) ; c + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int range , i , j , k = 1 ; printf ( " Enter the range ( upto how many line ? ) : " ) ; scanf ( " %d " , & range ) ; printf ( " \n Floyd's Triangle : \n  " ) ; for ( i = 1 ; i < = range ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> long fact ( int ) ; void main ( ) { clrscr ( ) ; int i , n , c ; printf ( " Upto how many line ( Enter number of rows ) : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i <n ; i + + ) { for ( c = 0 ; c < = ( n-i-2 ) ; c + + ) { printf ( " " ) ; } for ( c = 0 ; c < = i ; c + + ) { printf ( " %ld " , fact ( i ) / ( fact ( c ) * fact ( i-c ) ) ) ; } printf ( " \n  " ) ; } getch ( ) ; } long fact ( int n ) { int c ; long res = 1 ; for ( c = 1 ; c < = n ; c + + ) { res = res * c ; } return ( res ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int sml = 1 , i , limit ; printf ( " How many smiley face you want to print ? " ) ; scanf ( " %d " , & limit ) ; for ( i = 0 ; i <limit ; i + + ) { printf ( " %c " , sml ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 50 ] , n ; printf ( " How many element you want to store in the array ? " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d element to store in the array : " , n ) ; for ( int i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " The Elements in the Array is : \n  " ) ; for ( i = 0 ; i <n ; i + + ) { printf ( " %d " , arr [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 10 ] , i , num , n , c = 0 , pos ; printf ( " Enter the array size : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter Array Elements : " ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter the number to be search : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i <n ; i + + ) { if ( arr [ i ] = = num ) { c = 1 ; pos = i + 1 ; break ; } } if ( c = = 0 ) { printf ( " Number not found..!! " ) ; } else { printf ( " %d found at position %d " , num , pos ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int n , i , arr [ 50 ] , search , first , last , middle ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d number : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter a number to find : " ) ; scanf ( " %d " , & search ) ; first = 0 ; last = n-1 ; middle = ( first + last ) / 2 ; while ( first < = last ) { if ( arr [ middle ] < search ) { first = middle + 1 ; } else if ( arr [ middle ] = = search ) { printf ( " %d found at location %d\n  " , search , middle + 1 ) ; break ; } else { last = middle - 1 ; } middle = ( first + last ) / 2 ; } if ( first > last ) { printf ( " Not found! %d is not present in the list. " , search ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int num1 , num2 , * ptr1 , * ptr2 , sum = 0 ; printf ( " Enter the two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; ptr1 = & num1 ; ptr2 = & num2 ; sum = * ptr1 + * ptr2 ; printf ( " Sum of the two number is %d " , sum ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int large , arr [ 50 ] , size , i ; printf ( " Enter Array Size ( max 50 ) : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter array elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Searching for largest number ...\n \n  " ) ; large = arr [ 0 ] ; for ( i = 0 ; i <size ; i + + ) { if ( large <arr [ i ] ) { large = arr [ i ] ; } } printf ( " Largest Number = %d " , large ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int small , arr [ 50 ] , size , i ; printf ( " Enter Array Size ( max 50 ) : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter array elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Searching for smallest element ...\n \n  " ) ; small = arr [ 0 ] ; for ( i = 0 ; i <size ; i + + ) { if ( small> arr [ i ] ) { small = arr [ i ] ; } } printf ( " Smallest Element = %d " , small ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 50 ] , size , i , j , temp ; printf ( " Enter array size : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter array elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } j = i-1 ; i = 0 ; while ( i <j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i + + ; j-- ; } printf ( " Now the Reverse of the Array is : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 50 ] , size , insert , i , pos ; printf ( " Enter Array Size : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter array elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter element to be insert : " ) ; scanf ( " %d " , & insert ) ; printf ( " At which position ( Enter index number ) ? " ) ; scanf ( " %d " , & pos ) ; for ( i = size ; i> pos ; i-- ) { arr [ i ] = arr [ i-1 ] ; } arr [ pos ] = insert ; printf ( " Element inserted successfully..!!\n  " ) ; printf ( " Now the new array is : \n  " ) ; for ( i = 0 ; i <size + 1 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 50 ] , size , i , del , count = 0 ; printf ( " Enter array size : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter array elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter element to be delete : " ) ; scanf ( " %d " , & del ) ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] = = del ) { for ( int j = i ; j < ( size-1 ) ; j + + ) { arr [ j ] = arr [ j + 1 ] ; } count + + ; break ; } } if ( count = = 0 ) { printf ( " Element not found..!! " ) ; } else { printf ( " Element deleted successfully..!!\n  " ) ; printf ( " Now the new array is : \n  " ) ; for ( i = 0 ; i < ( size-1 ) ; i + + ) { printf ( " %d " , arr [ i ] ) ; } } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr1 [ 50 ] , arr2 [ 50 ] , size1 , size2 , size , i , j , k , merge [ 100 ] ; printf ( " Enter Array 1 Size : " ) ; scanf ( " %d " , & size1 ) ; printf ( " Enter Array 1 Elements : " ) ; for ( i = 0 ; i <size1 ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } printf ( " Enter Array 2 Size : " ) ; scanf ( " %d " , & size2 ) ; printf ( " Enter Array 2 Elements : " ) ; for ( i = 0 ; i <size2 ; i + + ) { scanf ( " %d " , & arr2 [ i ] ) ; } for ( i = 0 ; i <size1 ; i + + ) { merge [ i ] = arr1 [ i ] ; } size = size1 + size2 ; for ( i = 0 , k = size1 ; k <size & & i <size2 ; i + + , k + + ) { merge [ k ] = arr2 [ i ] ; } printf ( " Now the new array after merging is : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d " , merge [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int n , i , arr [ 50 ] , j , temp ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d numbers : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Sorting array using bubble sort technique...\n  " ) ; for ( i = 0 ; i < ( n-1 ) ; i + + ) { for ( j = 0 ; j < ( n-i-1 ) ; j + + ) { if ( arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; } } } printf ( " Elements sorted successfully..!!\n  " ) ; printf ( " Sorted list in ascending order : \n  " ) ; for ( i = 0 ; i <n ; i + + ) { printf ( " %d " , arr [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int size , arr [ 50 ] , i , j , temp ; printf ( " Enter Array Size : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter Array Elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Sorting array using selection sort...\n  " ) ; for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( " Now the Array after sorting is : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int size , arr [ 50 ] , i , j , temp ; printf ( " Enter Array Size : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter Array Elements : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Sorting array using selection sort ... \n  " ) ; for ( i = 1 ; i <size ; i + + ) { temp = arr [ i ] ; j = i-1 ; while ( ( temp <arr [ j ] ) & & ( j> = 0 ) ) { arr [ j + 1 ] = arr [ j ] ; j = j-1 ; } arr [ j + 1 ] = temp ; } printf ( " Array after sorting : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 10 ] [ 10 ] , row , col , i , j ; printf ( " Enter number of row for Array ( max 10 ) : " ) ; scanf ( " %d " , & row ) ; printf ( " Enter number of column for Array ( max 10 ) : " ) ; scanf ( " %d " , & col ) ; printf ( " Now Enter %d * %d Array Elements : " , row , col ) ; for ( i = 0 ; i <row ; i + + ) { for ( j = 0 ; j <col ; j + + ) { scanf ( " %d " , & arr [ i ] [ j ] ) ; } } printf ( " The Array is : \n  " ) ; for ( i = 0 ; i <row ; i + + ) { for ( j = 0 ; j <col ; j + + ) { printf ( " %d " , arr [ i ] [ j ] ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int mat1 [ 3 ] [ 3 ] , mat2 [ 3 ] [ 3 ] , i , j , mat3 [ 3 ] [ 3 ] ; printf ( " Enter matrix 1 elements : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & mat1 [ i ] [ j ] ) ; } } printf ( " Enter matrix 2 elements : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & mat2 [ i ] [ j ] ) ; } } printf ( " Adding the two matrix to form the third matrix .....\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { mat3 [ i ] [ j ] = mat1 [ i ] [ j ] + mat2 [ i ] [ j ] ; } } printf ( " The two matrix added successfully...!! " ) ; printf ( " The new matrix will be : \n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " %d " , mat3 [ i ] [ j ] ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr1 [ 3 ] [ 3 ] , arr2 [ 3 ] [ 3 ] , arr3 [ 3 ] [ 3 ] , sub , i , j ; printf ( " Enter 3 * 3 Array 1 Elements : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & arr1 [ i ] [ j ] ) ; } } printf ( " Enter 3 * 3 Array 2 Elements : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & arr2 [ i ] [ j ] ) ; } } printf ( " Subtracting array ( array1-array2 ) ... \n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { arr3 [ i ] [ j ] = arr1 [ i ] [ j ] -arr2 [ i ] [ j ] ; } } printf ( " Result of Array1 - Array2 is : \n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " %d " , arr3 [ i ] [ j ] ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 3 ] [ 3 ] , i , j , arrt [ 3 ] [ 3 ] ; printf ( " Enter 3 * 3 Array Elements : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & arr [ i ] [ j ] ) ; } } printf ( " Transposing Array...\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { arrt [ i ] [ j ] = arr [ j ] [ i ] ; } } printf ( " Transpose of the Matrix is : \n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " %d " , arrt [ i ] [ j ] ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int mat1 [ 3 ] [ 3 ] , mat2 [ 3 ] [ 3 ] , mat3 [ 3 ] [ 3 ] , sum = 0 , i , j , k ; printf ( " Enter first matrix element ( 3 * 3 ) : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & mat1 [ i ] [ j ] ) ; } } printf ( " Enter second matrix element ( 3 * 3 ) : " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { scanf ( " %d " , & mat2 [ i ] [ j ] ) ; } } printf ( " Multiplying two matrices...\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { sum = 0 ; for ( k = 0 ; k <3 ; k + + ) { sum = sum + mat1 [ i ] [ k ] * mat2 [ k ] [ j ] ; } mat3 [ i ] [ j ] = sum ; } } printf ( " \n Multiplication of two Matrices : \n  " ) ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " %d " , mat3 [ i ] [ j ] ) ; } printf ( " \n  " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int arr [ 3 ] [ 4 ] [ 2 ] = { { { 2 , 4 } , { 7 , 8 } , { 3 , 4 } , { 5 , 6 } } , { { 7 , 6 } , { 3 , 4 } , { 5 , 3 } , { 2 , 3 } } , { { 8 , 9 } , { 7 , 2 } , { 3 , 4 } , { 5 , 1 } } } ; printf ( " arr [ 0 ] [ 0 ] [ 0 ] = %d\n  " , arr [ 0 ] [ 0 ] [ 0 ] ) ; printf ( " arr [ 0 ] [ 2 ] [ 1 ] = %d\n  " , arr [ 0 ] [ 2 ] [ 1 ] ) ; printf ( " arr [ 2 ] [ 3 ] [ 1 ] = %d\n  " , arr [ 2 ] [ 3 ] [ 1 ] ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; printf ( " Enter your first name : " ) ; scanf ( " %s " , str ) ; printf ( " Hello , %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] , len ; printf ( " Enter a string : " ) ; gets ( str ) ; len = strlen ( str ) ; printf ( " Length of the string is %d " , len ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 100 ] , str2 [ 100 ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; if ( strcmp ( str1 , str2 ) = = 0 ) { printf ( " Both the strings are equal " ) ; } else { printf ( " Both the strings are not equal " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter a string : " ) ; gets ( str1 ) ; printf ( " copying string 1 into string 2 ......\n  " ) ; strcpy ( str2 , str1 ) ; printf ( " String 2 after copying %s " , str2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 50 ] , str2 [ 50 ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " String after concatenation is %s " , str1 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 100 ] , temp ; int i = 0 , j ; printf ( " Enter the String : " ) ; gets ( str ) ; i = 0 ; j = strlen ( str ) -1 ; while ( i <j ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; i + + ; j-- ; } printf ( " Reverse of the String = %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; int len , i , j ; printf ( " Enter a string : " ) ; gets ( str ) ; len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] = = 'a' || str [ i ] = = 'e' || str [ i ] = = 'i' || str [ i ] = = 'o' || str [ i ] = = 'u' || str [ i ] = = 'A' || str [ i ] = = 'E' || str [ i ] = = 'I' || str [ i ] = = 'O' || str [ i ] = = 'U' ) { for ( j = i ; j <len ; j + + ) { str [ j ] = str [ j + 1 ] ; } len-- ; } } printf ( " After deleting the vowels , the string will be : %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; int i , j = 0 , k = 0 , count = 0 ; char str [ 100 ] , str1 [ 10 ] [ 20 ] , word [ 20 ] ; printf ( " Enter the String : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ' ' ) { str1 [ k ] [ j ] = '\0' ; k + + ; j = 0 ; } else { str1 [ k ] [ j ] = str [ i ] ; j + + ; } } str1 [ k ] [ j ] = '\0' ; printf ( " Enter a word to be delete : " ) ; scanf ( " %s " , word ) ; for ( i = 0 ; i <k + 1 ; i + + ) { if ( strcmp ( str1 [ i ] , word ) = = 0 ) { for ( j = i ; j <k + 1 ; j + + ) { strcpy ( str1 [ j ] , str1 [ j + 1 ] ) ; k-- ; } } } printf ( " The new String after deleting the word : \n  " ) ; for ( i = 0 ; i <k + 1 ; i + + ) { printf ( " %s " , str1 [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int i , count = 0 ; char str [ 1000 ] , ch ; printf ( " Enter the String : " ) ; gets ( str ) ; printf ( " Enter a character to find frequency : " ) ; scanf ( " %c " , & ch ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( ch = = str [ i ] ) { count + + ; } } printf ( " Frequency of the character %c = %d " , ch , count ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char strs [ 100 ] , countw = 0 , strw [ 15 ] , i ; printf ( " Write a sentence : " ) ; gets ( strs ) ; int len = strlen ( strs ) ; for ( i = 0 ; i <len ; i + + ) { if ( strs [ i ] = = ' ' ) { countw + + ; } } printf ( " Total number of words in the sentence is %d " , countw + 1 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 80 ] ; int i = 0 , len , j ; printf ( " Enter the String : " ) ; gets ( str ) ; len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] = = ' ' ) { for ( j = i ; j <len ; j + + ) { str [ j ] = str [ j + 1 ] ; } len-- ; } } printf ( " String after removing spaces = %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 5 ] [ 20 ] , t [ 20 ] ; int i , j ; printf ( " Enter any five string ( name ) : " ) ; for ( i = 0 ; i <5 ; i + + ) { scanf ( " %s " , str [ i ] ) ; } for ( i = 1 ; i <5 ; i + + ) { for ( j = 1 ; j <5 ; j + + ) { if ( strcmp ( str [ j-1 ] , str [ j ] ) > 0 ) { strcpy ( t , str [ j-1 ] ) ; strcpy ( str [ j-1 ] , str [ j ] ) ; strcpy ( str [ j ] , t ) ; } } } printf ( " Strings ( Names ) in alphabetical order : \n  " ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %s\n  " , str [ i ] ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; char ch ; printf ( " Enter a character in uppercase : " ) ; scanf ( " %c " , & ch ) ; ch = ch + 32 ; printf ( " character in lowercase = %c " , ch ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; int i ; printf ( " Enter the String ( Enter First Name ) in uppercase : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 65 & & str [ i ] < = 92 ) { str [ i ] = str [ i ] + 32 ; } } printf ( " \n The String in Lowercase = %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str [ 20 ] ; int i ; printf ( " Enter the String ( Enter First Name ) : " ) ; scanf ( " %s " , str ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( str [ i ] > = 97 & & str [ i ] < = 122 ) { str [ i ] = str [ i ] -32 ; } } printf ( " \n The String in Uppercase = %s " , str ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; int i = 0 , j = 0 , k = 0 ; char str1 [ 20 ] , str2 [ 20 ] , temp [ 20 ] ; printf ( " Enter the First String : " ) ; gets ( str1 ) ; printf ( " Enter the Second String : " ) ; gets ( str2 ) ; printf ( " Strings before swapping are : \n  " ) ; printf ( " String 1 = %s\n  " , str1 ) ; printf ( " String 2 = %s\n  " , str2 ) ; while ( str1 [ i ] ! = '\0' ) { temp [ j ] = str1 [ i ] ; i + + ; j + + ; } temp [ j ] = '\0' ; i = 0 , j = 0 ; while ( str2 [ i ] ! = '\0' ) { str1 [ j ] = str2 [ i ] ; i + + ; j + + ; } str1 [ j ] = '\0' ; i = 0 , j = 0 ; while ( temp [ i ] ! = '\0' ) { str2 [ j ] = temp [ i ] ; i + + ; j + + ; } str2 [ j ] = '\0' ; printf ( " Strings after swapping : \n  " ) ; printf ( " String 1 = %s\n  " , str1 ) ; printf ( " String 2 = %s\n  " , str2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> void main ( ) { clrscr ( ) ; char str1 [ 20 ] , str2 [ 20 ] ; int len , len1 , len2 , i , j , found = 0 , not_found = 0 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; len1 = strlen ( str1 ) ; len2 = strlen ( str2 ) ; if ( len1 = = len2 ) { len = len1 ; for ( i = 0 ; i <len ; i + + ) { found = 0 ; for ( j = 0 ; j <len ; j + + ) { if ( str1 [ i ] = = str2 [ j ] ) { found = 1 ; break ; } } if ( found = = 0 ) { not_found = 1 ; break ; } } if ( not_found = = 1 ) { printf ( " Strings are not Anagram to each other " ) ; } else { printf ( " Strings are Anagram " ) ; } } else { printf ( " Two string must have same number of character to be Anagram " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; int i ; for ( i = 0 ; i <100 ; i + + ) { printf ( " %d\t " , rand ( ) ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; char c [ 1000 ] ; FILE * fp ; if ( ( fp = fopen ( " filename.txt " , " r " ) ) = = NULL ) { printf ( " Error in opening file..!! " ) ; getch ( ) ; exit ( 1 ) ; } fscanf ( fp , " %s " , c ) ; printf ( " Data in file = %s " , c ) ; fclose ( fp ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <string.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; FILE * fp ; char s [ 100 ] , fname [ 20 ] ; printf ( " Enter a file name with extension ( like file.txt ) to create a file : " ) ; gets ( fname ) ; fp = fopen ( fname , " w " ) ; if ( fp = = NULL ) { printf ( " Error in opening file..!! " ) ; getch ( ) ; exit ( 1 ) ; } printf ( " \n Enter few lines of text : \n  " ) ; while ( strlen ( gets ( s ) ) > 0 ) { fputs ( s , fp ) ; fputs ( " \n  " , fp ) ; } fclose ( fp ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; FILE * fp ; char s [ 100 ] , fname [ 20 ] ; printf ( " Enter file name to read and display its content ( like file.txt ) : " ) ; scanf ( " %s " , fname ) ; fp = fopen ( fname , " r " ) ; if ( fp = = NULL ) { printf ( " Error in opening file..!! " ) ; getch ( ) ; exit ( 0 ) ; } while ( fgets ( s , 99 , fp ) ! = NULL ) { printf ( " %s " , s ) ; } printf ( " \n  " ) ; fclose ( fp ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; FILE * fs , * ft ; char ch , fname1 [ 20 ] , fname2 [ 20 ] ; printf ( " Enter source file name with extension ( like files.txt ) : " ) ; gets ( fname1 ) ; fs = fopen ( fname1 , " r " ) ; if ( fs = = NULL ) { printf ( " Error in opening source file..!! " ) ; getch ( ) ; exit ( 1 ) ; } printf ( " Enter target file name with extension ( like filet.txt ) : " ) ; gets ( fname2 ) ; ft = fopen ( fname2 , " w " ) ; if ( ft = = NULL ) { printf ( " Error in opening target file..!! " ) ; fclose ( fs ) ; getch ( ) ; exit ( 2 ) ; } while ( 1 ) { ch = fgetc ( fs ) ; if ( ch = = EOF ) { break ; } else { fputc ( ch , ft ) ; } } printf ( " File copied successfully..!! " ) ; fclose ( fs ) ; fclose ( ft ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; FILE * fs1 , * fs2 , * ft ; char ch , fname1 [ 20 ] , fname2 [ 20 ] , fname3 [ 30 ] ; printf ( " Enter first file name ( with extension like file1.txt ) : " ) ; gets ( fname1 ) ; printf ( " Enter second file name ( with extension like file2.txt ) : " ) ; gets ( fname2 ) ; printf ( " Enter name of file ( with extension like file3.txt ) which will store the contents of the two files ( fname1 and fname1 ) : " ) ; gets ( fname3 ) ; fs1 = fopen ( fname1 , " r " ) ; fs2 = fopen ( fname2 , " r " ) ; if ( fs1 = = NULL || fs2 = = NULL ) { perror ( " Error Message " ) ; printf ( " Press any key to exit...\n  " ) ; getch ( ) ; exit ( EXIT_FAILURE ) ; } ft = fopen ( fname3 , " w " ) ; if ( ft = = NULL ) { perror ( " Error Message " ) ; printf ( " Press any key to exit...\n  " ) ; getch ( ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( fs1 ) ) ! = EOF ) { fputc ( ch , ft ) ; } while ( ( ch = fgetc ( fs2 ) ) ! = EOF ) { fputc ( ch , ft ) ; } printf ( " The two files were merged into %s file successfully..!! " , fname3 ) ; fclose ( fs1 ) ; fclose ( fs2 ) ; fclose ( ft ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <dir.h> void main ( ) { clrscr ( ) ; int done , i = 1 ; struct ffblk a ; printf ( " Press any key to list and view all the files in the current directory : \n  " ) ; getch ( ) ; done = findfirst ( " * . * " , & a , 0 ) ; while ( !done ) { printf ( " %d = %s , " , i , a.ff_name ) ; done = findnext ( & a ) ; i + + ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { clrscr ( ) ; int status ; char fname [ 20 ] ; printf ( " Enter name of file , you want to delete : " ) ; gets ( fname ) ; status = remove ( fname ) ; if ( status = = 0 ) { printf ( " file %s deleted successfully..!!\n  " , fname ) ; } else { printf ( " Unable to delete file %s\n  " , fname ) ; perror ( " Error Message " ) ; } getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; char fname [ 20 ] , ch , choice ; FILE * fps , * fpt ; printf ( " Enter file name ( with extension like file.txt ) to encrypt : " ) ; gets ( fname ) ; fps = fopen ( fname , " r " ) ; if ( fps = = NULL ) { printf ( " Error in opening file..!! " ) ; printf ( " \n Press any key to exit... " ) ; getch ( ) ; exit ( 1 ) ; } fpt = fopen ( " temp.txt " , " w " ) ; if ( fpt = = NULL ) { printf ( " Error in creating temp.txt file..!! " ) ; fclose ( fps ) ; printf ( " \n Press any key to exit... " ) ; getch ( ) ; exit ( 2 ) ; } while ( 1 ) { ch = fgetc ( fps ) ; if ( ch = = EOF ) { break ; } else { ch = ch + 100 ; fputc ( ch , fpt ) ; } } fclose ( fps ) ; fclose ( fpt ) ; fps = fopen ( fname , " w " ) ; if ( fps = = NULL ) { printf ( " Error in opening source file..!! " ) ; printf ( " \n Press any key to exit... " ) ; getch ( ) ; exit ( 3 ) ; } fpt = fopen ( " temp.txt " , " r " ) ; if ( fpt = = NULL ) { printf ( " Error in opening temp.txt file...!! " ) ; fclose ( fps ) ; printf ( " \n Press any key to exit... " ) ; getch ( ) ; exit ( 4 ) ; } while ( 1 ) { ch = fgetc ( fpt ) ; if ( ch = = EOF ) { break ; } else { fputc ( ch , fps ) ; } } printf ( " File %s encrypted successfully..!! " , fname ) ; printf ( " \n Press any key to exit... " ) ; fclose ( fps ) ; fclose ( fpt ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; char ch , choice , fname [ 20 ] ; FILE * fps , * fpt ; printf ( " Enter file name ( with extension like file.txt ) which you have encrypted earlier to decrypt : " ) ; gets ( fname ) ; fps = fopen ( fname , " w " ) ; if ( fps = = NULL ) { printf ( " Error in opening source file..!! " ) ; printf ( " \n Press any key to exit... " ) ; getch ( ) ; exit ( 7 ) ; } fpt = fopen ( " temp.txt " , " r " ) ; if ( fpt = = NULL ) { printf ( " Error in opening temp.txt file..!! " ) ; fclose ( fps ) ; printf ( " \n Press any key to exit... " ) ; getch ( ) ; exit ( 9 ) ; } while ( 1 ) { ch = fgetc ( fpt ) ; if ( ch = = EOF ) { break ; } else { ch = ch-100 ; fputc ( ch , fps ) ; } } printf ( " File %s decrypted successfully..!! " , fname ) ; printf ( " \n Press any key to exit... " ) ; fclose ( fps ) ; fclose ( fpt ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <dos.h> void main ( ) { clrscr ( ) ; struct date d ; getdate ( & d ) ; printf ( " Current system date is %d / %d / %d " , d.da_day , d.da_mon , d.da_year ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> #include <dos.h> void main ( ) { clrscr ( ) ; struct date d ; getdate ( & d ) ; int m ; m = d.da_mon ; printf ( " Today is %d " , d.da_day ) ; switch ( m ) { case 1 : printf ( " Jan , %d " , d.da_year ) ; break ; case 2 : printf ( " Feb , %d " , d.da_year ) ; break ; case 3 : printf ( " March , %d " , d.da_year ) ; break ; case 4 : printf ( " April , %d " , d.da_year ) ; break ; case 5 : printf ( " May , %d " , d.da_year ) ; break ; case 6 : printf ( " June , %d " , d.da_year ) ; break ; case 7 : printf ( " July , %d " , d.da_year ) ; break ; case 8 : printf ( " Aug , %d " , d.da_year ) ; break ; case 9 : printf ( " Sep , %d " , d.da_year ) ; break ; case 10 : printf ( " Oct , %d " , d.da_year ) ; break ; case 11 : printf ( " Nov , %d " , d.da_year ) ; break ; case 12 : printf ( " Dec , %d " , d.da_year ) ; break ; } getch ( ) ; }
#include <conio.h> #include <stdlib.h> void main ( ) { clrscr ( ) ; system ( " C : \\Windows\\System32\\ipconfig " ) ; getch ( ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { system ( " C : \\Windows\\System32\\shutdown / s " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { system ( " C : \\Windows\\System32\\shutdown / s / t 0 " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch ; printf ( " Do you want to shutdown your computer ( y / n ) : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) { system ( " C : \\Windows\\System32\\shutdown -s " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> void main ( ) { int ival , remainder ; printf ( " Enter an integer : " ) ; scanf ( " %d " , & ival ) ; remainder = ival % 2 ; if ( remainder = = 0 ) printf ( " %d is an even integer\n  " , ival ) ; else printf ( " %d is an odd integer\n  " , ival ) ; }
#include <stdio.h> void main ( ) { int i , num , odd_sum = 0 , even_sum = 0 ; printf ( " Enter the value of num\n  " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { if ( i % 2 = = 0 ) even_sum = even_sum + i ; else odd_sum = odd_sum + i ; } printf ( " Sum of all odd numbers = %d\n  " , odd_sum ) ; printf ( " Sum of all even numbers = %d\n  " , even_sum ) ; }
#include <stdio.h> void main ( ) { int number ; printf ( " Enter a number \n  " ) ; scanf ( " %d " , & number ) ; if ( number > = 0 ) printf ( " %d is a positive number \n  " , number ) ; else printf ( " %d is a negative number \n  " , number ) ; }
#include <stdio.h> void main ( ) { int i , num1 , num2 , count = 0 , sum = 0 ; printf ( " Enter the value of num1 and num2 \n  " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Integers divisible by 5 are \n  " ) ; for ( i = num1 ; i < num2 ; i + + ) { if ( i % 5 = = 0 ) { printf ( " %3d , " , i ) ; count + + ; sum = sum + i ; } } printf ( " \n  Number of integers divisible by 5 between %d and %d = %d\n  " , num1 , num2 , count ) ; printf ( " Sum of all integers that are divisible by 5 = %d\n  " , sum ) ; }
#include <stdio.h> void swap ( float * ptr1 , float * ptr2 ) ; void main ( ) { float m , n ; printf ( " Enter the values of M and N \n  " ) ; scanf ( " %f %f " , & m , & n ) ; printf ( " Before Swapping : M = %5.2ftN = %5.2f\n  " , m , n ) ; swap ( & m , & n ) ; printf ( " After Swapping : M = %5.2ftN = %5.2f\n  " , m , n ) ; } void swap ( float * ptr1 , float * ptr2 ) { float temp ; temp = * ptr1 ; * ptr1 = * ptr2 ; * ptr2 = temp ; }
#include <stdio.h> void main ( ) { int m , n ; printf ( " Enter the values for M and N\n  " ) ; scanf ( " %d %d " , & m , & n ) ; if ( m = = n ) printf ( " M and N are equal\n  " ) ; else printf ( " M and N are not equal\n  " ) ; }
#include <stdio.h> void main ( ) { long num , temp , digit , sum = 0 ; printf ( " Enter the number \n  " ) ; scanf ( " %ld " , & num ) ; temp = num ; while ( num > 0 ) { digit = num % 10 ; sum = sum + digit ; num / = 10 ; } printf ( " Given number = %ld\n  " , temp ) ; printf ( " Sum of the digits %ld = %ld\n  " , temp , sum ) ; }
#include <stdio.h> void main ( ) { int num , binary_val , decimal_val = 0 , base = 1 , rem ; printf ( " Enter a binary number ( 1s and 0s ) \n  " ) ; scanf ( " %d " , & num ) ; binary_val = num ; while ( num > 0 ) { rem = num % 10 ; decimal_val = decimal_val + rem * base ; num = num / 10 ; base = base * 2 ; } printf ( " The Binary number is = %d \n  " , binary_val ) ; printf ( " Its decimal equivalent is = %d \n  " , decimal_val ) ; }
#include <stdio.h> void main ( ) { long num , decimal_num , remainder , base = 1 , binary = 0 , no_of_1s = 0 ; printf ( " Enter a decimal integer \n  " ) ; scanf ( " %ld " , & num ) ; decimal_num = num ; while ( num > 0 ) { remainder = num % 2 ; if ( remainder = = 1 ) { no_of_1s + + ; } binary = binary + remainder * base ; num = num / 2 ; base = base * 10 ; } printf ( " Input number is = %d\n  " , decimal_num ) ; printf ( " Its binary equivalent is = %ld\n  " , binary ) ; printf ( " No.of 1's in the binary number is = %d\n  " , no_of_1s ) ; }
#include <stdio.h> #define DAYSINWEEK 7 void main ( ) { int ndays , year , week , days ; printf ( " Enter the number of days\n  " ) ; scanf ( " %d " , & ndays ) ; year = ndays / 365 ; week = ( ndays % 365 ) / DAYSINWEEK ; days = ( ndays % 365 ) % DAYSINWEEK ; printf ( " %d is equivalent to %d years , %d weeks and %d daysn " , ndays , year , week , days ) ; }
#include <stdio.h> int main ( ) { long int binarynum , octalnum = 0 , j = 1 , remainder ; printf ( " Enter the value for binary number : " ) ; scanf ( " %ld " , & binarynum ) ; while ( binarynum ! = 0 ) { remainder = binarynum % 10 ; octalnum = octalnum + remainder * j ; j = j * 2 ; binarynum = binarynum / 10 ; } printf ( " Equivalent octal value : %lo " , octalnum ) ; return 0 ; }
#include <stdio.h> int main ( ) { long int binaryval , hexadecimalval = 0 , i = 1 , remainder ; printf ( " Enter the binary number : " ) ; scanf ( " %ld " , & binaryval ) ; while ( binaryval ! = 0 ) { remainder = binaryval % 10 ; hexadecimalval = hexadecimalval + remainder * i ; i = i * 2 ; binaryval = binaryval / 10 ; } printf ( " Equivalent hexadecimal value : %lX " , hexadecimalval ) ; return 0 ; }
#include <stdio.h> int main ( ) { long decimalnum , remainder , quotient ; int octalNumber [ 100 ] , i = 1 , j ; printf ( " Enter the decimal number : " ) ; scanf ( " %ld " , & decimalnum ) ; quotient = decimalnum ; while ( quotient ! = 0 ) { octalNumber [ i + + ] = quotient % 8 ; quotient = quotient / 8 ; } printf ( " Equivalent octal value of decimal no %d : " , decimalnum ) ; for ( j = i - 1 ; j > 0 ; j-- ) printf ( " %d " , octalNumber [ j ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { long decimalnum , quotient , remainder ; int i , j = 0 ; char hexadecimalnum [ 100 ] ; printf ( " Enter decimal number : " ) ; scanf ( " %ld " , & decimalnum ) ; quotient = decimalnum ; while ( quotient ! = 0 ) { remainder = quotient % 16 ; if ( remainder < 10 ) hexadecimalnum [ j + + ] = 48 + remainder ; else hexadecimalnum [ j + + ] = 55 + remainder ; quotient = quotient / 16 ; }
#include <stdio.h> #include <string.h> int digit ( char ) ; int main ( ) { char roman_Number [ 1000 ] ; int i = 0 ; long int number = 0 ; printf ( " Enter any roman number ( Valid digits are I , V , X , L , C , D , M ) : \n  " ) ; scanf ( " %s " , roman_Number ) ; while ( roman_Number [ i ] ) { if ( digit ( roman_Number [ i ] ) < 0 ) { printf ( " Invalid roman digit : %c " , roman_Number [ i ] ) ; return 0 ; } if ( ( strlen ( roman_Number ) -i ) > 2 ) { if ( digit ( roman_Number [ i ] ) < digit ( roman_Number [ i + 2 ] ) ) { printf ( " Invalid roman number " ) ; return 0 ; } } if ( digit ( roman_Number [ i ] ) > = digit ( roman_Number [ i + 1 ] ) ) number = number + digit ( roman_Number [ i ] ) ; else { number = number + ( digit ( roman_Number [ i + 1 ] ) - digit ( roman_Number [ i ] ) ) ; i + + ; } i + + ; } printf ( " Its decimal value is : %ld " , number ) ; return 0 ; } int digit ( char c ) { int value = 0 ; switch ( c ) { case 'I' : value = 1 ; break ; case 'V' : value = 5 ; break ; case 'X' : value = 10 ; break ; case 'L' : value = 50 ; break ; case 'C' : value = 100 ; break ; case 'D' : value = 500 ; break ; case 'M' : value = 1000 ; break ; case '\0' : value = 0 ; break ; default : value = -1 ; } return value ; }
#include <stdio.h> #define MAX 1000 int main ( ) { char octalnum [ MAX ] ; long i = 0 ; printf ( " Enter any octal number : " ) ; scanf ( " %s " , octalnum ) ; printf ( " Equivalent binary value : " ) ; while ( octalnum [ i ] ) { switch ( octalnum [ i ] ) { case '0' : printf ( " 000 " ) ; break ; case '1' : printf ( " 001 " ) ; break ; case '2' : printf ( " 010 " ) ; break ; case '3' : printf ( " 011 " ) ; break ; case '4' : printf ( " 100 " ) ; break ; case '5' : printf ( " 101 " ) ; break ; case '6' : printf ( " 110 " ) ; break ; case '7' : printf ( " 111 " ) ; break ; default : printf ( " \n  Invalid octal digit %c " , octalnum [ i ] ) ; return 0 ; } i + + ; } return 0 ; }
#include <stdio.h> #define MAX 1000 int main ( ) { char binarynum [ MAX ] , hexa [ MAX ] ; long int i = 0 ; printf ( " Enter the value for hexadecimal " ) ; scanf ( " %s " , hexa ) ; printf ( " \n  Equivalent binary value : " ) ; while ( hexa [ i ] ) { switch ( hexa [ i ] ) { case '0' : printf ( " 0000 " ) ; break ; case '1' : printf ( " 0001 " ) ; break ; case '2' : printf ( " 0010 " ) ; break ; case '3' : printf ( " 0011 " ) ; break ; case '4' : printf ( " 0100 " ) ; break ; case '5' : printf ( " 0101 " ) ; break ; case '6' : printf ( " 0110 " ) ; break ; case '7' : printf ( " 0111 " ) ; break ; case '8' : printf ( " 1000 " ) ; break ; case '9' : printf ( " 1001 " ) ; break ; case 'A' : printf ( " 1010 " ) ; break ; case 'B' : printf ( " 1011 " ) ; break ; case 'C' : printf ( " 1100 " ) ; break ; case 'D' : printf ( " 1101 " ) ; break ; case 'E' : printf ( " 1110 " ) ; break ; case 'F' : printf ( " 1111 " ) ; break ; case 'a' : printf ( " 1010 " ) ; break ; case 'b' : printf ( " 1011 " ) ; break ; case 'c' : printf ( " 1100 " ) ; break ; case 'd' : printf ( " 1101 " ) ; break ; case 'e' : printf ( " 1110 " ) ; break ; case 'f' : printf ( " 1111 " ) ; break ; default : printf ( " \n  Invalid hexa digit %c " , hexa [ i ] ) ; return 0 ; } i + + ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long int octal , decimal = 0 ; int i = 0 ; printf ( " Enter any octal number : " ) ; scanf ( " %ld " , & octal ) ; while ( octal ! = 0 ) { decimal = decimal + ( octal % 10 ) * pow ( 8 , i + + ) ; octal = octal / 10 ; } printf ( " Equivalent decimal value : %ld " , decimal ) ; return 0 ; }
#include <stdio.h> int convert ( int ) ; int main ( ) { int dec , bin ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & dec ) ; bin = convert ( dec ) ; printf ( " The binary equivalent of %d is %d.\n  " , dec , bin ) ; return 0 ; } int convert ( int dec ) { if ( dec = = 0 ) { return 0 ; } else { return ( dec % 2 + 10 * convert ( dec / 2 ) ) ; } }
#include <stdio.h> #include <math.h> int bintogray ( int ) ; int main ( ) { int bin , gray ; printf ( " Enter a binary number : " ) ; scanf ( " %d " , & bin ) ; gray = bintogray ( bin ) ; printf ( " The gray code of %d is %d\n  " , bin , gray ) ; return 0 ; } int bintogray ( int bin ) { int a , b , result = 0 , i = 0 ; while ( bin ! = 0 ) { a = bin % 10 ; bin = bin / 10 ; b = bin % 10 ; if ( ( a & & !b ) || ( !a & & b ) ) { result = result + pow ( 10 , i ) ; } i + + ; } return result ; }
#include <stdio.h> int bintogray ( int ) ; int main ( ) { int bin , gray ; printf ( " Enter a binary number : " ) ; scanf ( " %d " , & bin ) ; gray = bintogray ( bin ) ; printf ( " The gray code of %d is %d\n  " , bin , gray ) ; return 0 ; } int bintogray ( int bin ) { int a , b , result = 0 , i = 0 ; if ( !bin ) { return 0 ; } else { a = bin % 10 ; bin = bin / 10 ; b = bin % 10 ; if ( ( a & & !b ) || ( !a & & b ) ) { return ( 1 + 10 * bintogray ( bin ) ) ; } else { return ( 10 * bintogray ( bin ) ) ; } } }
#include <stdio.h> int sum ( int a ) ; int main ( ) { int num , result ; printf ( " Enter the number : " ) ; scanf ( " %d " , & num ) ; result = sum ( num ) ; printf ( " Sum of digits in %d is %d\n  " , num , result ) ; return 0 ; } int sum ( int num ) { if ( num ! = 0 ) { return ( num % 10 + sum ( num / 10 ) ) ; } else { return 0 ; } }
#include <stdio.h> #include <math.h> int rev ( int , int ) ; int main ( ) { int num , result ; int length = 0 , temp ; printf ( " Enter an integer number to reverse : " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( temp ! = 0 ) { length + + ; temp = temp / 10 ; } result = rev ( num , length ) ; printf ( " The reverse of %d is %d.\n  " , num , result ) ; return 0 ; } int rev ( int num , int len ) { if ( len = = 1 ) { return num ; } else { return ( ( ( num % 10 ) * pow ( 10 , len - 1 ) ) + rev ( num / 10 , --len ) ) ; } }
#include <stdio.h> void display ( int ) ; int main ( ) { int num , result ; printf ( " Enter the Nth number : " ) ; scanf ( " %d " , & num ) ; display ( num ) ; return 0 ; } void display ( int num ) { static int i = 1 ; if ( num = = i ) { printf ( " %d \n  " , num ) ; return ; } else { printf ( " %d " , i ) ; i + + ; display ( num ) ; } }
#include <stdio.h> int primeno ( int , int ) ; int main ( ) { int num , check ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; check = primeno ( num , num / 2 ) ; if ( check = = 1 ) { printf ( " %d is a prime number\n  " , num ) ; } else { printf ( " %d is not a prime number\n  " , num ) ; } return 0 ; } int primeno ( int num , int i ) { if ( i = = 1 ) { return 1 ; } else { if ( num % i = = 0 ) { return 0 ; } else { return primeno ( num , i - 1 ) ; } } }
#include <stdio.h> int binary_conversion ( int ) ; int main ( ) { int num , bin ; printf ( " Enter a decimal number : " ) ; scanf ( " %d " , & num ) ; bin = binary_conversion ( num ) ; printf ( " The binary equivalent of %d is %d\n  " , num , bin ) ; } int binary_conversion ( int num ) { if ( num = = 0 ) { return 0 ; } else { return ( num % 2 ) + 10 * binary_conversion ( num / 2 ) ; } }
#include <stdio.h> int product ( int , int ) ; int main ( ) { int a , b , result ; printf ( " Enter two numbers to find their product : " ) ; scanf ( " %d %d " , & a , & b ) ; result = product ( a , b ) ; printf ( " Product of %d and %d is %d\n  " , a , b , result ) ; return 0 ; } int product ( int a , int b ) { if ( a < b ) { return product ( b , a ) ; } else if ( b ! = 0 ) { return ( a + product ( a , b - 1 ) ) ; } else { return 0 ; } }
#include <stdio.h> void main ( ) { int num1 , num2 , num3 ; printf ( " Enter the values of num1 , num2 and num3\n  " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; printf ( " num1 = %d\tnum2 = %d\tnum3 = %d\n  " , num1 , num2 , num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { printf ( " num1 is the greatest among three \n  " ) ; } else { printf ( " num3 is the greatest among three \n  " ) ; } } else if ( num2 > num3 ) printf ( " num2 is the greatest among three \n  " ) ; else printf ( " num3 is the greatest among three \n  " ) ; }
#include <stdio.h> void main ( ) { long num , reverse = 0 , temp , remainder ; printf ( " Enter the number\n  " ) ; scanf ( " %ld " , & num ) ; temp = num ; while ( num > 0 ) { remainder = num % 10 ; reverse = reverse * 10 + remainder ; num / = 10 ; } printf ( " Given number = %ld\n  " , temp ) ; printf ( " Its reverse is = %ld\n  " , reverse ) ; }
#include <stdio.h> void main ( ) { int num , temp , remainder , reverse = 0 ; printf ( " Enter an integer \n  " ) ; scanf ( " %d " , & num ) ; temp = num ; while ( num > 0 ) { remainder = num % 10 ; reverse = reverse * 10 + remainder ; num / = 10 ; } printf ( " Given number is = %d\n  " , temp ) ; printf ( " Its reverse is = %d\n  " , reverse ) ; if ( temp = = reverse ) printf ( " Number is a palindrome \n  " ) ; else printf ( " Number is not a palindrome \n  " ) ; }
#include <stdio.h> int main ( ) { long binary1 , binary2 ; int i = 0 , remainder = 0 , sum [ 20 ] ; printf ( " Enter the first binary number : " ) ; scanf ( " %ld " , & binary1 ) ; printf ( " Enter the second binary number : " ) ; scanf ( " %ld " , & binary2 ) ; while ( binary1 ! = 0 || binary2 ! = 0 ) { sum [ i + + ] = ( binary1 % 10 + binary2 % 10 + remainder ) % 2 ; remainder = ( binary1 % 10 + binary2 % 10 + remainder ) / 2 ; binary1 = binary1 / 10 ; binary2 = binary2 / 10 ; } if ( remainder ! = 0 ) sum [ i + + ] = remainder ; --i ; printf ( " Sum of two binary numbers : " ) ; while ( i > = 0 ) printf ( " %d " , sum [ i-- ] ) ; return 0 ; }
#include <stdio.h> int binaryproduct ( int , int ) ; int main ( ) { long binary1 , binary2 , multiply = 0 ; int digit , factor = 1 ; printf ( " Enter the first binary number : " ) ; scanf ( " %ld " , & binary1 ) ; printf ( " Enter the second binary number : " ) ; scanf ( " %ld " , & binary2 ) ; while ( binary2 ! = 0 ) { digit = binary2 % 10 ; if ( digit = = 1 ) { binary1 = binary1 * factor ; multiply = binaryproduct ( binary1 , multiply ) ; } else binary1 = binary1 * factor ; binary2 = binary2 / 10 ; factor = 10 ; } printf ( " Product of two binary numbers : %ld " , multiply ) ; return 0 ; } int binaryproduct ( int binary1 , int binary2 ) { int i = 0 , remainder = 0 , sum [ 20 ] ; int binaryprod = 0 ; while ( binary1 ! = 0 || binary2 ! = 0 ) { sum [ i + + ] = ( binary1 % 10 + binary2 % 10 + remainder ) % 2 ; remainder = ( binary1 % 10 + binary2 % 10 + remainder ) / 2 ; binary1 = binary1 / 10 ; binary2 = binary2 / 10 ; } if ( remainder ! = 0 ) sum [ i + + ] = remainder ; --i ; while ( i > = 0 ) binaryprod = binaryprod * 10 + sum [ i-- ] ; return binaryprod ; }
#include <stdio.h> int product ( int , int ) ; int main ( ) { int a , b , result ; printf ( " Enter two numbers to find their product : " ) ; scanf ( " %d %d " , & a , & b ) ; result = product ( a , b ) ; printf ( " Product of %d and %d is %d\n  " , a , b , result ) ; return 0 ; } int product ( int a , int b ) { int temp = 0 ; while ( b ! = 0 ) { temp + = a ; b-- ; } return temp ; }
#include <stdio.h> #include <math.h> void main ( ) { int number , sum = 0 , rem = 0 , cube = 0 , temp ; printf ( " enter a number " ) ; scanf ( " %d " , & number ) ; temp = number ; while ( number ! = 0 ) { rem = number % 10 ; cube = pow ( rem , 3 ) ; sum = sum + cube ; number = number / 10 ; } if ( sum = = temp ) printf ( " The given no is armstrong no " ) ; else printf ( " The given no is not a armstrong no " ) ; }
#include <stdio.h> int main ( ) { int number , rem , sum = 0 , i ; printf ( " Enter a Number\n  " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = ( number - 1 ) ; i + + ) { rem = number % i ; if ( rem = = 0 ) { sum = sum + i ; } } if ( sum = = number ) printf ( " Entered Number is perfect number " ) ; else printf ( " Entered Number is not a perfect number " ) ; return 0 ; }
#include <stdio.h> main ( ) { int number , temp , digit1 , digit2 , digit3 ; printf ( " Print all Armstrong numbers between 1 and 1000 : \n  " ) ; number = 001 ; while ( number < = 900 ) { digit1 = number - ( ( number / 10 ) * 10 ) ; digit2 = ( number / 10 ) - ( ( number / 100 ) * 10 ) ; digit3 = ( number / 100 ) - ( ( number / 1000 ) * 10 ) ; temp = ( digit1 * digit1 * digit1 ) + ( digit2 * digit2 * digit2 ) + ( digit3 * digit3 * digit3 ) ; if ( temp = = number ) { printf ( " \n  Armstrong no is : %d " , temp ) ; } number + + ; } }
#include <stdio.h> struct complex { int realpart , imaginary ; } ; main ( ) { struct complex a , b , c ; printf ( " Enter value of a and b complex number a + ib.\n  " ) ; printf ( " value of complex number a is = " ) ; scanf ( " %d " , & a.realpart ) ; printf ( " value of complex number b is = " ) ; scanf ( " %d " , & a.imaginary ) ; printf ( " Enter value of c and d complex number c + id.\n  " ) ; printf ( " value of complex number c is = " ) ; scanf ( " %d " , & b.realpart ) ; printf ( " value of complex number d is = " ) ; scanf ( " %d " , & b.imaginary ) ; c.realpart = a.realpart + b.realpart ; c.imaginary = a.imaginary + b.imaginary ; if ( c.imaginary > = 0 ) printf ( " complex numbers sum is = %d + %di\n  " , c.realpart , c.imaginary ) ; else printf ( " complex numbers sum = %d %di\n  " , c.realpart , c.imaginary ) ; return 0 ; }
#include <stdio.h> void main ( ) { int fib1 = 0 , fib2 = 1 , fib3 , limit , count = 0 ; printf ( " Enter the limit to generate the Fibonacci Series \n  " ) ; scanf ( " %d " , & limit ) ; printf ( " Fibonacci Series is ...\n  " ) ; printf ( " %d\n  " , fib1 ) ; printf ( " %d\n  " , fib2 ) ; count = 2 ; while ( count < limit ) { fib3 = fib1 + fib2 ; count + + ; printf ( " %d\n  " , fib3 ) ; fib1 = fib2 ; fib2 = fib3 ; } }
#include <stdio.h> int first = 0 ; int second = 1 ; int third ; void rec_fibonacci ( int ) ; void main ( int argc , char * argv [ ] ) { int number = atoi ( argv [ 1 ] ) ; printf ( " %d\t %d " , first , second ) ; rec_fibonacci ( number ) ; printf ( " \n  " ) ; } void rec_fibonacci ( int num ) { if ( num = = 2 ) { return ; } third = first + second ; printf ( " \t %d " , third ) ; first = second ; second = third ; num-- ; rec_fibonacci ( num ) ; }
#include <stdio.h> void main ( ) { int num , sum = 0 ; for ( num = 1 ; num < = 50 ; num + + ) { sum = sum + num ; } printf ( " Sum = %4d\n  " , sum ) ; }
#include <stdio.h> void main ( ) { long i , k ; printf ( " Enter two integers \n  " ) ; scanf ( " %ld %ld " , & i , & k ) ; printf ( " \n  Before swapping i = %ld and k = %ld " , i , k ) ; i = i ^ k ; k = i ^ k ; i = i ^ k ; printf ( " \n  After swapping i = %ld and k = %ld " , i , k ) ; }
#include <stdio.h> void main ( ) { long number , tempnum ; printf ( " Enter an integer \n  " ) ; scanf ( " %ld " , & number ) ; tempnum = number ; number = number < < 2 ; printf ( " %ld x 4 = %ld\n  " , tempnum , number ) ; }
#include <stdio.h> void main ( ) { char password [ 10 ] , username [ 10 ] , ch ; int i ; printf ( " Enter User name : " ) ; gets ( username ) ; printf ( " Enter the password < any 8 characters> : " ) ; for ( i = 0 ; i < 8 ; i + + ) { ch = getchar ( ) ; password [ i ] = ch ; ch = ' * ' ; printf ( " %c " , ch ) ; } password [ i ] = '\0' ; printf ( " \n  Your password is : " ) ; for ( i = 0 ; i < 8 ; i + + ) { printf ( " %c " , password [ i ] ) ; } }
#include <stdio.h> #include <string.h> #include <sys / types.h> #include <sys / socket.h> #include <sys / ioctl.h> #include <netinet / in.h> #include <net / if.h> #include <unistd.h> #include <arpa / inet.h> int main ( ) { int n ; struct ifreq ifr ; char array [ ] = " eth0 " ; n = socket ( AF_INET , SOCK_DGRAM , 0 ) ;
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year , yr ; printf ( " Enter the year " ) ; scanf ( " %d " , & year ) ; yr = year % 100 ; printf ( " Last two digits of year is : %02d " , yr ) ; return 0 ; }
#include <stdio.h> void main ( ) { float height ; printf ( " Enter the Height ( in centimetres ) \n  " ) ; scanf ( " %f " , & height ) ; if ( height < 150.0 ) printf ( " Dwarf \n  " ) ; else if ( ( height > = 150.0 ) & & ( height < = 165.0 ) ) printf ( " Average Height \n  " ) ; else if ( ( height > 165.0 ) & & ( height < = 195.0 ) ) printf ( " Taller \n  " ) ; else printf ( " Abnormal height \n  " ) ; }
#include <stdio.h> #include <ctype.h> #include <string.h> void main ( ) { char remark [ 15 ] ; char grade ; printf ( " Enter the grade \n  " ) ; scanf ( " %c " , & grade ) ; grade = toupper ( grade ) ; switch ( grade ) { case 'S' : strcpy ( remark , " SUPER " ) ; break ; case 'A' : strcpy ( remark , " VERY GOOD " ) ; break ; case 'B' : strcpy ( remark , " FAIR " ) ; break ; case 'Y' : strcpy ( remark , " ABSENT " ) ; break ; case 'F' : strcpy ( remark , " FAILS " ) ; break ; default : strcpy ( remark , " ERROR IN GRADE \n  " ) ; break ; } printf ( " RESULT : %s\n  " , remark ) ; }
#include <stdio.h> void main ( ) { union number { int n1 ; float n2 ; } ; union number x ; printf ( " Enter the value of n1 : " ) ; scanf ( " %d " , & x.n1 ) ; printf ( " Value of n1 = %d " , x.n1 ) ; printf ( " \n Enter the value of n2 : " ) ; scanf ( " %f " , & x.n2 ) ; printf ( " Value of n2 = %f\n  " , x.n2 ) ; }
#include <stdio.h> void main ( ) { union sample { int m ; float n ; char ch ; } ; union sample u ; printf ( " The size of union = %d\n  " , sizeof ( u ) ) ; u.m = 25 ; printf ( " %d %f %c\n  " , u.m , u.n , u.ch ) ; u.n = 0.2 ; printf ( " %d %f %c\n  " , u.m , u.n , u.ch ) ; u.ch = 'p' ; printf ( " %d %f %c\n  " , u.m , u.n , u.ch ) ; }
#include <stdio.h> #define decode ( s , t , u , m , p , e , d ) m##s##u##t#define begin decode ( a , n , i , m , a , t , e ) int begin ( ) { printf ( " helloworld " ) ; }
#include <stdio.h> int main ( ) { int number , sum = 0 , remainder , count ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( number ) { remainder = number % 10 ; sum = sum + ( remainder + 1 ) ; number / = 10 ; } printf ( " increasing 1 to all digits : %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , i , k , count = 1 ; printf ( " Enter number of rows\n  " ) ; scanf ( " %d " , & number ) ; count = number - 1 ; for ( k = 1 ; k < = number ; k + + ) { for ( i = 1 ; i < = count ; i + + ) printf ( " " ) ; count-- ; for ( i = 1 ; i < = 2 * k - 1 ; i + + ) printf ( " * " ) ; printf ( " \n  " ) ; } count = 1 ; for ( k = 1 ; k < = number - 1 ; k + + ) { for ( i = 1 ; i < = count ; i + + ) printf ( " " ) ; count + + ; for ( i = 1 ; i < = 2 * ( number - k ) - 1 ; i + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " Hi.. Welcome to sanfoundry " ) ) { } }
#include <stdio.h> int main ( ) { FILE * fp ; char ch ; fp = fopen ( __FILE__ , " r " ) ; do { ch = getc ( fp ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> void cube ( int * x ) ; int main ( ) { int num = 10 ; cube ( & num ) ; printf ( " the cube of the given number is %d " , num ) ; return 0 ; } void cube ( int * x ) { * x = ( * x ) * ( * x ) * ( * x ) ; }
#include <stdio.h> void swap ( int a , int b ) { int temp ; temp = a ; a = b ; b = temp ; } int main ( ) { int num1 = 10 , num2 = 20 ; printf ( " Before swapping num1 = %d num2 = %d\n  " , num1 , num2 ) ; swap ( num1 , num2 ) ; printf ( " After swapping num1 = %d num2 = %d \n  " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int a , b , result ; char ch ; printf ( " arguments entered : \n  " ) ; a = atoi ( argv [ 1 ] ) ; b = atoi ( argv [ 2 ] ) ; ch = * argv [ 3 ] ; printf ( " %d %d %c " , a , b , ch ) ; switch ( ch ) { case ' + ' : result = a + b ; break ; case '-' : result = a - b ; break ; case 'x' : result = a * b ; break ; case ' / ' : result = a / b ; break ; default : printf ( " Enter a valid choice " ) ; } printf ( " \n The result of the operation is %d " , result ) ; printf ( " \n  " ) ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int i ; for ( i = 0 ; i < argc ; i + + ) { printf ( " %s " , argv [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> void main ( ) { int array [ 10 ] ; int i , num , keynum , found = 0 ; printf ( " Enter the value of num \n  " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the elements one by one \n  " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input array is \n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %dn " , array [ i ] ) ; } printf ( " Enter the element to be searched \n  " ) ; scanf ( " %d " , & keynum ) ; for ( i = 0 ; i < num ; i + + ) { if ( keynum = = array [ i ] ) { found = 1 ; break ; } } if ( found = = 1 ) printf ( " Element is present in the array\n  " ) ; else printf ( " Element is not present in the array\n  " ) ; }
#include <stdio.h> #define MAXSIZE 10 void main ( ) { int array [ MAXSIZE ] ; int i , j , num , temp ; printf ( " Enter the value of num \n  " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the elements one by one \n  " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input array is \n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { for ( j = 0 ; j < ( num - i - 1 ) ; j + + ) { if ( array [ j ] > array [ j + 1 ] ) { temp = array [ j ] ; array [ j ] = array [ j + 1 ] ; array [ j + 1 ] = temp ; } } } printf ( " Sorted array is...\n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; } }
#include <stdio.h> #define MAXSIZE 10 void main ( ) { int array [ MAXSIZE ] ; int i , num , negative_sum = 0 , positive_sum = 0 ; float total = 0.0 , average ; printf ( " Enter the value of N \n  " ) ; scanf ( " %d " , & num ) ; printf ( " Enter %d numbers ( -ve , + ve and zero ) \n  " , num ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input array elements \n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " % + 3d\n  " , array [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { if ( array [ i ] < 0 ) { negative_sum = negative_sum + array [ i ] ; } else if ( array [ i ] > 0 ) { positive_sum = positive_sum + array [ i ] ; } else if ( array [ i ] = = 0 ) { ; } total = total + array [ i ] ; } average = total / num ; printf ( " \n  Sum of all negative numbers = %d\n  " , negative_sum ) ; printf ( " Sum of all positive numbers = %d\n  " , positive_sum ) ; printf ( " \n  Average of all input numbers = %.2f\n  " , average ) ; }
#include <stdio.h> void main ( ) { int array [ 10 ] ; int i , j , num , temp , keynum ; int low , mid , high ; printf ( " Enter the value of num \n  " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the elements one by one \n  " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input array elements \n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; } for ( i = 0 ; i < num ; i + + ) { for ( j = 0 ; j < ( num - i - 1 ) ; j + + ) { if ( array [ j ] > array [ j + 1 ] ) { temp = array [ j ] ; array [ j ] = array [ j + 1 ] ; array [ j + 1 ] = temp ; } } } printf ( " Sorted array is...\n  " ) ; for ( i = 0 ; i < num ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; } printf ( " Enter the element to be searched \n  " ) ; scanf ( " %d " , & keynum ) ; low = 1 ; high = num ; do { mid = ( low + high ) / 2 ; if ( keynum < array [ mid ] ) high = mid - 1 ; else if ( keynum > array [ mid ] ) low = mid + 1 ; } while ( keynum ! = array [ mid ] & & low < = high ) ; if ( keynum = = array [ mid ] ) { printf ( " SEARCH SUCCESSFUL \n  " ) ; } else { printf ( " SEARCH FAILED \n  " ) ; } }
#include <stdio.h> #include <math.h> #include <stdlib.h> void main ( ) { int n , x1 ; float accuracy , term , denominator , x , sinx , sinval ; printf ( " Enter the value of x ( in degrees ) \n  " ) ; scanf ( " %f " , & x ) ; x1 = x ; x = x * ( 3.142 / 180.0 ) ; sinval = sin ( x ) ; printf ( " Enter the accuracy for the result \n  " ) ; scanf ( " %f " , & accuracy ) ; term = x ; sinx = term ; n = 1 ; do { denominator = 2 * n * ( 2 * n + 1 ) ; term = -term * x * x / denominator ; sinx = sinx + term ; n = n + 1 ; } while ( accuracy < = fabs ( sinval - sinx ) ) ; printf ( " Sum of the sine series = %f \n  " , sinx ) ; printf ( " Using Library function sin ( %d ) = %f\n  " , x1 , sin ( x ) ) ; }
#include <stdio.h> #include <string.h> void main ( ) { char string [ 25 ] , reverse_string [ 25 ] = { '\0' } ; int i , length = 0 , flag = 0 ; fflush ( stdin ) ; printf ( " Enter a string \n  " ) ; gets ( string ) ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { length + + ; } for ( i = length - 1 ; i > = 0 ; i-- ) { reverse_string [ length - i - 1 ] = string [ i ] ; } for ( i = 0 ; i < length ; i + + ) { if ( reverse_string [ i ] = = string [ i ] ) flag = 1 ; else flag = 0 ; } if ( flag = = 1 ) printf ( " %s is a palindrome \n  " , string ) ; else printf ( " %s is not a palindrome \n  " , string ) ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { int num , j , flag ; printf ( " Enter a number \n  " ) ; scanf ( " %d " , & num ) ; if ( num < = 1 ) { printf ( " %d is not a prime numbers \n  " , num ) ; exit ( 1 ) ; } flag = 0 ; for ( j = 2 ; j < = num / 2 ; j + + ) { if ( ( num % j ) = = 0 ) { flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " %d is a prime number \n  " , num ) ; else printf ( " %d is not a prime number \n  " , num ) ; }
#include <stdio.h> void main ( ) { int fig_code ; float side , base , length , breadth , height , area , radius ; printf ( " -------------------------\n  " ) ; printf ( " 1 --> Circle\n  " ) ; printf ( " 2 --> Rectangle\n  " ) ; printf ( " 3 --> Triangle\n  " ) ; printf ( " 4 --> Square\n  " ) ; printf ( " -------------------------\n  " ) ; printf ( " Enter the Figure code\n  " ) ; scanf ( " %d " , & fig_code ) ; switch ( fig_code ) { case 1 : printf ( " Enter the radius\n  " ) ; scanf ( " %f " , & radius ) ; area = 3.142 * radius * radius ; printf ( " Area of a circle = %f\n  " , area ) ; break ; case 2 : printf ( " Enter the breadth and length\n  " ) ; scanf ( " %f %f " , & breadth , & length ) ; area = breadth * length ; printf ( " Area of a Reactangle = %f\n  " , area ) ; break ; case 3 : printf ( " Enter the base and height\n  " ) ; scanf ( " %f %f " , & base , & height ) ; area = 0.5 * base * height ; printf ( " Area of a Triangle = %f\n  " , area ) ; break ; case 4 : printf ( " Enter the side\n  " ) ; scanf ( " %f " , & side ) ; area = side * side ; printf ( " Area of a Square = %f\n  " , area ) ; break ; default : printf ( " Error in figure code\n  " ) ; break ; } }
#include <stdio.h> void main ( ) { char string [ 80 ] ; int count , nc = 0 , sum = 0 ; printf ( " Enter the string containing both digits and alphabet \n  " ) ; scanf ( " %s " , string ) ; for ( count = 0 ; string [ count ] ! = '\0' ; count + + ) { if ( ( string [ count ] > = '0' ) & & ( string [ count ] < = '9' ) ) { nc + = 1 ; sum + = ( string [ count ] - '0' ) ; } } printf ( " NO. of Digits in the string = %d\n  " , nc ) ; printf ( " Sum of all digits = %d\n  " , sum ) ; }
#include <stdio.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n ; int counter = 0 ; printf ( " Enter the order of the matix \n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the co-efficients of the matix \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & array [ i ] [ j ] ) ; if ( array [ i ] [ j ] = = 0 ) { + + counter ; } } } if ( counter > ( ( m * n ) / 2 ) ) { printf ( " The given matrix is sparse matrix \n  " ) ; } else printf ( " The given matrix is not a sparse matrix \n  " ) ; printf ( " There are %d number of zeros " , counter ) ; }
#include <stdio.h> #define MAX 4 void main ( ) { int array [ MAX ] , i , largest1 , largest2 , temp ; printf ( " Enter %d integer numbers \n  " , MAX ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input integer are \n  " ) ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " %5d " , array [ i ] ) ; } printf ( " \n  " ) ; largest1 = array [ 0 ] ; largest2 = array [ 1 ] ; if ( largest1 < largest2 ) { temp = largest1 ; largest1 = largest2 ; largest2 = temp ; } for ( i = 2 ; i < 4 ; i + + ) { if ( array [ i ] > = largest1 ) { largest2 = largest1 ; largest1 = array [ i ] ; } else if ( array [ i ] > largest2 ) { largest2 = array [ i ] ; } } printf ( " n %d is the first largest \n  " , largest1 ) ; printf ( " %d is the second largest \n  " , largest2 ) ; printf ( " \n  Average of %d and %d = %d \n  " , largest1 , largest2 , ( largest1 + largest2 ) / 2 ) ; }
#include <stdio.h> void main ( ) { int array [ 10 ] ; int i , j , n , m , temp , key , pos ; printf ( " Enter how many elements \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the elements \n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input array elements are \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; }
#include <stdio.h> void main ( ) { float principal_amt , rate , simple_interest ; int time ; printf ( " Enter the values of principal_amt , rate and time \n  " ) ; scanf ( " %f %f %d " , & principal_amt , & rate , & time ) ; simple_interest = ( principal_amt * rate * time ) / 100.0 ; printf ( " Amount = Rs. %5.2f\n  " , principal_amt ) ; printf ( " Rate = Rs. %5.2f %\n  " , rate ) ; printf ( " Time = %d years\n  " , time ) ; printf ( " Simple interest = %5.2f\n  " , simple_interest ) ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { int array [ ] = { 15 , 50 , 34 , 20 , 10 , 79 , 100 } ; int n ; n = sizeof ( array ) ; printf ( " Size of the given array is %d\n  " , n / sizeof ( int ) ) ; return 0 ; }
#include <stdio.h> struct temp { int a [ 10 ] ; char p ; } ;
#include <stdio.h> main ( ) { int a = 1 ; printf ( " size of a is %d , " , sizeof ( + + a ) ) ; printf ( " value of a is %d " , a ) ; } ;
#include <stdio.h> printf ( " %d " , sizeof ( strlen ( " HELLOWORLD " ) ) ) ;
#include <stdio.h> ( sizeof double = 8 , float = 4 , void = 1 ) #define PI 3.14 int main ( ) { printf ( " %d " , sizeof ( PI ) ) ; }
#include <stdio.h> #include <stdlib.h> int maxSubArraySum ( int a [ ] , int size , int * begin , int * end ) { int max_so_far = 0 , max_end = 0 ; int i , current_index = 0 ; for ( i = 0 ; i < size ; i + + ) { max_end = max_end + a [ i ] ; if ( max_end < = 0 ) { max_end = 0 ; current_index = i + 1 ; } else if ( max_so_far < max_end ) { max_so_far = max_end ; * begin = current_index ; * end = i ; } } return max_so_far ; } int main ( ) { int arr [ ] = { 10 , -2 , 15 , 9 , -8 , 12 , 20 , -5 } ; int start = 0 , end = 0 ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( " The max sum is %d " , maxSubArraySum ( arr , size , & start , & end ) ) ; printf ( " The begin and End are %d & %d " , start , end ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> void main ( void ) { printf ( " %d\n  " , fact ( 8 ) ) ; int n , r ; printf ( " Enter value for n and r\n  " ) ; scanf ( " %d %d " , & n , & r ) ; int npr = fact ( n ) / fact ( n - r ) ; printf ( " \n  Permutation values is = %d " , npr ) ; } int fact ( int x ) { if ( x < = 1 ) return 1 ; return x * fact ( x - 1 ) ; }
#include <stdio.h> int fact ( int z ) ; void main ( ) { int n , r , ncr ; printf ( " \n  Enter the value for N and R \n  " ) ; scanf ( " %d %d " , & n , & r ) ; ncr = fact ( n ) / ( fact ( r ) * fact ( n - r ) ) ; printf ( " \n  The value of ncr is : %d " , ncr ) ; } int fact ( int z ) { int f = 1 , i ; if ( z = = 0 ) { return ( f ) ; } else { for ( i = 1 ; i < = z ; i + + ) { f = f * i ; } } return ( f ) ; }
#include <stdio.h> int main ( ) { float a , b , h ; float area ; printf ( " Enter the value for two bases & height of the trapezium : \n  " ) ; scanf ( " %f %f %f " , & a , & b , & h ) ; area = 0.5 * ( a + b ) * h ; printf ( " Area of the trapezium is : %.3f " , area ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 void get_value ( int arr [ ] ) ; void print_value ( int arr [ ] , int n ) ; void function_sort ( int arr [ ] ) ; int find_intersection ( int array1 [ ] , int array2 [ ] , int intersection_array [ ] ) ; int find_union ( int array1 [ ] , int array2 [ ] , int union_array [ ] ) ; void main ( ) { int array1 [ SIZE ] , array2 [ SIZE ] , intersection_array [ SIZE ] , union_array [ SIZE * 2 ] ; int num_elements ;
#include <stdio.h> void main ( ) { int array [ 15 ] [ 15 ] , i , j , rows , num = 25 , k ; printf ( " \n  enter the number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 0 ; i < rows ; i + + ) { for ( k = num - 2 * i ; k > = 0 ; k-- ) printf ( " " ) ; for ( j = 0 ; j < = i ; j + + ) { if ( j = = 0 || i = = j ) { array [ i ] [ j ] = 1 ; } else { array [ i ] [ j ] = array [ i - 1 ] [ j - 1 ] + array [ i - 1 ] [ j ] ; } printf ( " %4d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> void occur ( int [ ] , int , int , int , int * ) ; int main ( ) { int size , key , count = 0 ; int list [ 20 ] ; int i ; printf ( " Enter the size of the list : " ) ; scanf ( " %d " , & size ) ; printf ( " Printing the list : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { list [ i ] = rand ( ) % size ; printf ( " %d " , list [ i ] ) ; } printf ( " \n Enter the key to find it's occurence : " ) ; scanf ( " %d " , & key ) ; occur ( list , size , 0 , key , & count ) ; printf ( " %d occurs for %d times.\n  " , key , count ) ; return 0 ; } void occur ( int list [ ] , int size , int index , int key , int * count ) { if ( size = = index ) { return ; } if ( list [ index ] = = key ) { * count + = 1 ; } occur ( list , size , index + 1 , key , count ) ; }
#include <stdio.h> int main ( ) { float base , altitude ; float area ; printf ( " Enter base and altitude of the given Parallelogram : \n  " ) ; scanf ( " %f %f " , & base , & altitude ) ; area = base * altitude ; printf ( " Area of Parallelogram is : %.3f\n  " , area ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * ) ; void display ( struct node * ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; generate ( & head ) ; display ( head ) ; delete ( & head ) ; return 0 ; } void generate ( struct node * * head ) { int num = 10 , i ; struct node * temp ; for ( i = 0 ; i < num ; i + + ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = i ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } void display ( struct node * head ) { while ( head ! = NULL ) { printf ( " %d " , head-> a ) ; head = head-> next ; } printf ( " \n  " ) ; } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> int large ( int [ ] , int , int ) ; int main ( ) { int size ; int largest ; int list [ 20 ] ; int i ; printf ( " Enter size of the list : " ) ; scanf ( " %d " , & size ) ; printf ( " Printing the list : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { list [ i ] = rand ( ) % size ; printf ( " %d \t " , list [ i ] ) ; } if ( size = = 0 ) { printf ( " Empty list\n  " ) ; } else { largest = list [ 0 ] ; largest = large ( list , size - 1 , largest ) ; printf ( " \n The largest number in the list is : %d\n  " , largest ) ; } } int large ( int list [ ] , int position , int largest ) { if ( position = = 0 ) return largest ; if ( position > 0 ) { if ( list [ position ] > largest ) { largest = list [ position ] ; } return large ( list , position - 1 , largest ) ; } }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * ) ; void display ( struct node * ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; generate ( & head ) ; printf ( " \n Displaying the alternate nodes\n  " ) ; display ( head ) ; delete ( & head ) ; return 0 ; } void display ( struct node * head ) { int flag = 0 ; while ( head ! = NULL ) { if ( ! ( flag % 2 ) ) { printf ( " %d " , head-> a ) ; } flag + + ; head = head-> next ; } } void generate ( struct node * * head ) { int num , i ; struct node * temp ; printf ( " Enter length of list : " ) ; scanf ( " %d " , & num ) ; for ( i = num ; i > 0 ; i-- ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = i ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } } }
#include <stdio.h> #include <string.h> #include <ctype.h> char caps_check ( char * ) ; int main ( ) { char string [ 20 ] , letter ; printf ( " Enter a string to find it's first capital letter : " ) ; scanf ( " %s " , string ) ; letter = caps_check ( string ) ; if ( letter = = 0 ) { printf ( " No capital letter is present in %s.\n  " , string ) ; } else { printf ( " The first capital letter in %s is %c.\n  " , string , letter ) ; } return 0 ; } char caps_check ( char * string ) { static int i = 0 ; if ( i < strlen ( string ) ) { if ( isupper ( string [ i ] ) ) { return string [ i ] ; } else { i = i + 1 ; return caps_check ( string ) ; } } else return 0 ; }
#include <stdio.h> int factorial ( int ) ; int main ( ) { int num ; int result ; printf ( " Enter a number to find it's Factorial : " ) ; scanf ( " %d " , & num ) ; if ( num < 0 ) { printf ( " Factorial of negative number not possible\n  " ) ; } else { result = factorial ( num ) ; printf ( " The Factorial of %d is %d.\n  " , num , result ) ; } return 0 ; } int factorial ( int num ) { if ( num = = 0 || num = = 1 ) { return 1 ; } else { return ( num * factorial ( num - 1 ) ) ; } }
#include <stdio.h> void copy ( char [ ] , char [ ] , int ) ; int main ( ) { char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter string to copy : " ) ; scanf ( " %s " , str1 ) ; copy ( str1 , str2 , 0 ) ; printf ( " Copying success.\n  " ) ; printf ( " The first string is : %s\n  " , str1 ) ; printf ( " The second string is : %s\n  " , str2 ) ; return 0 ; } void copy ( char str1 [ ] , char str2 [ ] , int index ) { str2 [ index ] = str1 [ index ] ; if ( str1 [ index ] = = '\0' ) return ; copy ( str1 , str2 , index + 1 ) ; }
#include <stdio.h> int length ( char [ ] , int ) ; int main ( ) { char word [ 20 ] ; int count ; printf ( " Enter a word to count it's length : " ) ; scanf ( " %s " , word ) ; count = length ( word , 0 ) ; printf ( " The number of characters in %s are %d.\n  " , word , count ) ; return 0 ; } int length ( char word [ ] , int index ) { if ( word [ index ] = = '\0' ) { return 0 ; } return ( 1 + length ( word , index + 1 ) ) ; }
#include <stdio.h> int maximum_difference ( int array [ ] , int arr_size ) { int max_diff = array [ 1 ] - array [ 0 ] ; int i , j ; for ( i = 0 ; i < arr_size ; i + + ) { for ( j = i + 1 ; j < arr_size ; j + + ) { if ( array [ j ] - array [ i ] > max_diff ) max_diff = array [ j ] - array [ i ] ; } } return max_diff ; } int main ( ) { int array [ ] = { 10 , 15 , 90 , 200 , 110 } ; printf ( " Maximum difference is %d " , maximum_difference ( array , 5 ) ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> void main ( ) { int n ; float i , sum , term ; printf ( " 1 + 1 / 2 + 1 / 3 + ...... + 1 / n \n  " ) ; printf ( " Enter the value of n \n  " ) ; scanf ( " %d " , & n ) ; sum = 0 ; for ( i = 1 ; i < = n ; i + + ) { term = 1 / i ; sum = sum + term ; } printf ( " the Sum of H.P Series is = %f " , sum ) ; }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * ) ; int length ( struct node * ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; int count ; generate ( & head ) ; count = length ( head ) ; printf ( " The number of nodes are : %d\n  " , count ) ; delete ( & head ) ; return 0 ; } void generate ( struct node * * head ) { int num = 10 , i ; struct node * temp ; for ( i = 0 ; i < num ; i + + ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = i ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } int length ( struct node * head ) { int num = 0 ; while ( head ! = NULL ) { num + = 1 ; head = head-> next ; } return num ; } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> int main ( ) { int array [ 50 ] ; int * ptr ; int i , j , k , size , n ; printf ( " \n  Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " \n  Enter %d elements of an array : " , n ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & array [ i ] ) ; size = n ; ptr = array ; for ( i = 0 ; i < size ; i + + ) { for ( j = 0 ; j < size ; j + + ) { if ( i = = j ) { continue ; } else if ( * ( ptr + i ) = = * ( ptr + j ) ) { k = j ; size-- ; while ( k < size ) { * ( ptr + k ) = * ( ptr + k + 1 ) ; k + + ; } j = 0 ; } } } printf ( " \n  The array after removing duplicates is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , array [ i ] ) ; } return 0 ; }
#include <stdio.h> int fibo ( int ) ; int main ( ) { int num ; int result ; printf ( " Enter the nth number in fibonacci series : " ) ; scanf ( " %d " , & num ) ; if ( num < 0 ) { printf ( " Fibonacci of negative number is not possible.\n  " ) ; } else { result = fibo ( num ) ; printf ( " The %d number in fibonacci series is %d\n  " , num , result ) ; } return 0 ; } int fibo ( int num ) { if ( num = = 0 ) { return 0 ; } else if ( num = = 1 ) { return 1 ; } else { return ( fibo ( num - 1 ) + fibo ( num - 2 ) ) ; } }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * ) ; void display ( struct node * ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; generate ( & head ) ; printf ( " \n Displaying the alternate nodes\n  " ) ; display ( head ) ; delete ( & head ) ; return 0 ; } void display ( struct node * head ) { static flag = 0 ; if ( head ! = NULL ) { if ( ! ( flag % 2 ) ) { printf ( " %d " , head-> a ) ; } flag + + ; display ( head-> next ) ; } } void generate ( struct node * * head ) { int num , i ; struct node * temp ; printf ( " Enter length of list : " ) ; scanf ( " %d " , & num ) ; for ( i = num ; i > 0 ; i-- ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = i ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> void incrementArray ( int [ ] ) ; void main ( ) { int i ; int array [ 4 ] = { 10 , 20 , 30 , 40 } ; incrementArray ( array ) ; for ( i = 0 ; i < 4 ; i + + ) printf ( " %d\t " , array [ i ] ) ;
#include <stdio.h> #include <stdlib.h> main ( ) { FILE * fsring1 , * fsring2 , * ftemp ; char ch , file1 [ 20 ] , file2 [ 20 ] , file3 [ 20 ] ; printf ( " Enter name of first file " ) ; gets ( file1 ) ; printf ( " Enter name of second file " ) ; gets ( file2 ) ; printf ( " Enter name to store merged file " ) ; gets ( file3 ) ; fsring1 = fopen ( file1 , " r " ) ; fsring2 = fopen ( file2 , " r " ) ; if ( fsring1 = = NULL || fsring2 = = NULL ) { perror ( " Error has occured " ) ; printf ( " Press any key to exit...\n  " ) ; exit ( EXIT_FAILURE ) ; } ftemp = fopen ( file3 , " w " ) ; if ( ftemp = = NULL ) { perror ( " Error has occures " ) ; printf ( " Press any key to exit...\n  " ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( fsring1 ) ) ! = EOF ) fputc ( ch , ftemp ) ; while ( ( ch = fgetc ( fsring2 ) ) ! = EOF ) fputc ( ch , ftemp ) ; printf ( " Two files merged %s successfully.\n  " , file3 ) ; fclose ( fsring1 ) ; fclose ( fsring2 ) ; fclose ( ftemp ) ; return 0 ; }
#include <stdio.h> #include <math.h> void main ( ) { int s , a , b , c , area ; printf ( " Enter the values of a , b and c \n  " ) ; scanf ( " %d %d %d " , & a , & b , & c ) ; s = ( a + b + c ) / 2 ; area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; printf ( " Area of a triangle = %d \n  " , area ) ; }
#include <stdio.h> void main ( ) { long int ARR [ 10 ] , OAR [ 10 ] , EAR [ 10 ] ; int i , j = 0 , k = 0 , n ; printf ( " Enter the size of array AR n " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the elements of the array n " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %ld " , & ARR [ i ] ) ; fflush ( stdin ) ; } for ( i = 0 ; i < n ; i + + ) { if ( ARR [ i ] % 2 = = 0 ) { EAR [ j ] = ARR [ i ] ; j + + ; } else { OAR [ k ] = ARR [ i ] ; k + + ; } } printf ( " The elements of OAR are n " ) ; for ( i = 0 ; i < k ; i + + ) { printf ( " %ldn " , OAR [ i ] ) ; } printf ( " The elements of EAR are n " ) ; for ( i = 0 ; i < j ; i + + ) { printf ( " %ldn " , EAR [ i ] ) ; } }
#include <stdio.h> #include <math.h> #define MAXSIZE 10 void main ( ) { float x [ MAXSIZE ] ; int i , n ; float average , variance , std_deviation , sum = 0 , sum1 = 0 ; printf ( " Enter the value of N \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d real numbers \n  " , n ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %f " , & x [ i ] ) ; } for ( i = 0 ; i < n ; i + + ) { sum = sum + x [ i ] ; } average = sum / ( float ) n ; for ( i = 0 ; i < n ; i + + ) { sum1 = sum1 + pow ( ( x [ i ] - average ) , 2 ) ; } variance = sum1 / ( float ) n ; std_deviation = sqrt ( variance ) ; printf ( " Average of all elements = %.2f\n  " , average ) ; printf ( " variance of all elements = %.2f\n  " , variance ) ; printf ( " Standard deviation = %.2f\n  " , std_deviation ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int a , d , n , i , tn ; int sum = 0 ; printf ( " Enter the first term value of the A.P. series : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter the total numbers in the A.P. series : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the common difference of A.P. series : " ) ; scanf ( " %d " , & d ) ; sum = ( n * ( 2 * a + ( n - 1 ) * d ) ) / 2 ; tn = a + ( n - 1 ) * d ; printf ( " Sum of the A.P series is : " ) ; for ( i = a ; i < = tn ; i = i + d ) { if ( i ! = tn ) printf ( " %d + " , i ) ; else printf ( " %d = %d " , i , sum ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * , int ) ; void search ( struct node * , int ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; int key , num ; printf ( " Enter the number of nodes : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Displaying the list\n  " ) ; generate ( & head , num ) ; printf ( " \n Enter key to search : " ) ; scanf ( " %d " , & key ) ; search ( head , key ) ; delete ( & head ) ; return 0 ; } void generate ( struct node * * head , int num ) { int i ; struct node * temp ; for ( i = 0 ; i < num ; i + + ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = rand ( ) % num ; if ( * head = = NULL ) { * head = temp ; temp-> next = NULL ; } else { temp-> next = * head ; * head = temp ; } printf ( " %d " , temp-> a ) ; } } void search ( struct node * head , int key ) { while ( head ! = NULL ) { if ( head-> a = = key ) { printf ( " key found\n  " ) ; return ; } head = head-> next ; } printf ( " Key not found\n  " ) ; } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> int lcm ( int , int ) ; int main ( ) { int a , b , result ; int prime [ 100 ] ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & a , & b ) ; result = lcm ( a , b ) ; printf ( " The LCM of %d and %d is %d\n  " , a , b , result ) ; return 0 ; } int lcm ( int a , int b ) { static int common = 1 ; if ( common % a = = 0 & & common % b = = 0 ) { return common ; } common + + ; lcm ( a , b ) ; return common ; }
#include <stdio.h> int hcf ( int , int ) ; int main ( ) { int a , b , result ; printf ( " Enter the two numbers to find their HCF : " ) ; scanf ( " %d %d " , & a , & b ) ; result = hcf ( a , b ) ; printf ( " The HCF of %d and %d is %d.\n  " , a , b , result ) ; } int hcf ( int a , int b ) { while ( a ! = b ) { if ( a > b ) { return hcf ( a - b , b ) ; } else { return hcf ( a , b - a ) ; } } return a ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius ; float surface_area , volume ; printf ( " Enter radius of the sphere : \n  " ) ; scanf ( " %f " , & radius ) ; surface_area = 4 * ( 22 / 7 ) * radius * radius ; volume = ( 4.0 / 3 ) * ( 22 / 7 ) * radius * radius * radius ; printf ( " Surface area of sphere is : %.3f " , surface_area ) ; printf ( " \n  Volume of sphere is : %.3f " , volume ) ; return 0 ; }
#include <stdio.h> int search ( int [ ] , int , int ) ; int main ( ) { int size , index , key ; int list [ 20 ] ; int count = 0 ; int i ; printf ( " Enter the size of the list : " ) ; scanf ( " %d " , & size ) ; index = size ; printf ( " Printing the list : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { list [ i ] = rand ( ) % size ; printf ( " %d\t " , list [ i ] ) ; } printf ( " \n Enter the key to search : " ) ; scanf ( " %d " , & key ) ; while ( index > 0 ) { index = search ( list , index - 1 , key ) ; printf ( " Key found at position : %d\n  " , index + 1 ) ; count + + ; } if ( !count ) printf ( " Key not found.\n  " ) ; return 0 ; } int search ( int array [ ] , int size , int key ) { int location ; if ( array [ size ] = = key ) { return size ; } else if ( size = = -1 ) { return -1 ; } else { return ( location = search ( array , size - 1 , key ) ) ; } }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * ) ; void display ( struct node * ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; generate ( & head ) ; display ( head ) ; delete ( & head ) ; return 0 ; } void generate ( struct node * * head ) { int num = 10 , i ; struct node * temp ; for ( i = 0 ; i < num ; i + + ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = i ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } void display ( struct node * head ) { printf ( " %d " , head-> a ) ; if ( head-> next = = NULL ) { return ; } display ( head-> next ) ; } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> int main ( ) { FILE * fileptr1 , * fileptr2 ; char filename [ 40 ] ; char ch ; int delete_line , temp = 1 ; printf ( " Enter file name : " ) ; scanf ( " %s " , filename ) ;
#include <stdio.h> #include <math.h> int main ( ) { float radius , height ; float surface_area , volume ; printf ( " Enter value for radius and height of a cylinder : \n  " ) ; scanf ( " %f %f " , & radius , & height ) ; surface_area = 2 * ( 22 / 7 ) * radius * ( radius + height ) ; volume = ( 22 / 7 ) * radius * radius * height ; printf ( " Surface area of cylinder is : %.3f " , surface_area ) ; printf ( " \n  Volume of cylinder is : %.3f " , volume ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i , fact = 1 , num ; printf ( " Enter the number \n  " ) ; scanf ( " %d " , & num ) ; if ( num < = 0 ) fact = 1 ; else { for ( i = 1 ; i < = num ; i + + ) { fact = fact * i ; } } printf ( " Factorial of %d = %5d\n  " , num , fact ) ; }
#include <stdio.h> #include <stdlib.h> #include <errno.h> #include <string.h> struct emprec { int empid ; char * name ; } ; typedef struct emprec emp ; void insert ( char * a ) ; void display ( char * a ) ; void update ( char * a ) ; int count ; void main ( int argc , char * argv [ ] ) { int choice ; while ( 1 ) { printf ( " Enter the choice\n  " ) ; printf ( " 1-Insert a new record into file\n 2-Display the records\n  " ) ; printf ( " 3-Update the record\n 4-Exit\n  " ) ; scanf ( " %d " , & choice ) ; switch ( choice ) { case 1 : insert ( argv [ 1 ] ) ; break ; case 2 : display ( argv [ 1 ] ) ; break ; case 3 : update ( argv [ 1 ] ) ; break ; case 4 : exit ( 0 ) ; default : printf ( " Enter the correct choice\n  " ) ; } } } void insert ( char * a ) { FILE * fp1 ; emp * temp1 = ( emp * ) malloc ( sizeof ( emp ) ) ; temp1-> name = ( char * ) malloc ( 200 * sizeof ( char ) ) ;
#include <stdio.h> void main ( ) { char str [ 80 ] , search [ 10 ] ; int count1 = 0 , count2 = 0 , i , j , flag ; printf ( " Enter a string : " ) ; gets ( str ) ; printf ( " Enter search substring : " ) ; gets ( search ) ; while ( str [ count1 ] ! = '�' ) count1 + + ; while ( search [ count2 ] ! = '�' ) count2 + + ; for ( i = 0 ; i < = count1 - count2 ; i + + ) { for ( j = i ; j < i + count2 ; j + + ) { flag = 1 ; if ( str [ j ] ! = search [ j - i ] ) { flag = 0 ; break ; } } if ( flag = = 1 ) break ; } if ( flag = = 1 ) printf ( " SEARCH SUCCESSFUL! " ) ; else printf ( " SEARCH UNSUCCESSFUL! " ) ; }
#include <stdio.h> void main ( ) { int fib1 = 0 , fib2 = 1 , fib3 , num , count = 0 ; printf ( " Enter the value of num \n  " ) ; scanf ( " %d " , & num ) ; printf ( " First %d FIBONACCI numbers are ...\n  " , num ) ; printf ( " %d\n  " , fib1 ) ; printf ( " %d\n  " , fib2 ) ; count = 2 ; while ( count < num ) { fib3 = fib1 + fib2 ; count + + ; printf ( " %d\n  " , fib3 ) ; fib1 = fib2 ; fib2 = fib3 ; } }
#include <stdio.h> void main ( ) { int a [ 10 ] [ 10 ] ; int i , j , row , column , flag = 1 ; printf ( " Enter the order of the matrix A \n  " ) ; scanf ( " %d %d " , & row , & column ) ; printf ( " Enter the elements of matrix A \n  " ) ; for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < column ; j + + ) { scanf ( " %d " , & a [ i ] [ j ] ) ; } } printf ( " MATRIX A is \n  " ) ; for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < column ; j + + ) { printf ( " %3d " , a [ i ] [ j ] ) ; } printf ( " \n  " ) ; } for ( i = 0 ; i < row ; i + + ) { for ( j = 0 ; j < column ; j + + ) { if ( a [ i ] [ j ] ! = 1 & & a [ j ] [ i ] ! = 0 ) { flag = 0 ; break ; } } } if ( flag = = 1 ) printf ( " It is identity matrix \n  " ) ; else printf ( " It is not a identity matrix \n  " ) ; }
#include <stdio.h> #include <string.h> void main ( ) { char name [ 10 ] [ 8 ] , tname [ 10 ] [ 8 ] , temp [ 8 ] ; int i , j , n ; printf ( " Enter the value of n \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d names n \n  " , n ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %s " , name [ i ] ) ; strcpy ( tname [ i ] , name [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i + + ) { for ( j = i + 1 ; j < n ; j + + ) { if ( strcmp ( name [ i ] , name [ j ] ) > 0 ) { strcpy ( temp , name [ i ] ) ; strcpy ( name [ i ] , name [ j ] ) ; strcpy ( name [ j ] , temp ) ; } } } printf ( " \n ----------------------------------------\n  " ) ; printf ( " Input NamestSorted names\n  " ) ; printf ( " ------------------------------------------\n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %s\t\t %s\n  " , tname [ i ] , name [ i ] ) ; } printf ( " ------------------------------------------\n  " ) ; }
#include <stdio.h> main ( ) { char file1 [ 10 ] , file2 [ 10 ] ; puts ( " enter the name of file 1 " ) ; scanf ( " %s " , file1 ) ; puts ( " enter the name of file 2 " ) ; scanf ( " %s " , file2 ) ; FILE * fptr1 , * fptr2 , * fptr3 ; fptr1 = fopen ( file1 , " r " ) ; fptr2 = fopen ( file2 , " r " ) ; fptr3 = fopen ( " merge2.txt " , " w + " ) ; char str1 [ 200 ] ; char ch1 , ch2 ; int n = 0 , w = 0 ; while ( ( ( ch1 = fgetc ( fptr1 ) ) ! = EOF ) & & ( ( ch2 = fgetc ( fptr2 ) ) ! = EOF ) ) { if ( ch1 ! = EOF ) { ungetc ( ch1 , fptr1 ) ; fgets ( str1 , 199 , fptr1 ) ; fputs ( str1 , fptr3 ) ; if ( str1 [ 0 ] ! = 'n' ) n + + ; } if ( ch2 ! = EOF ) { ungetc ( ch2 , fptr2 ) ; fgets ( str1 , 199 , fptr2 ) ; fputs ( str1 , fptr3 ) ; if ( str1 [ 0 ] ! = 'n' ) n + + ; } } rewind ( fptr3 ) ; while ( ( ch1 = fgetc ( fptr3 ) ) ! = EOF ) { ungetc ( ch1 , fptr3 ) ; fscanf ( fptr3 , " %s " , str1 ) ; if ( str1 [ 0 ] ! = ' ' || str1 [ 0 ] ! = 'n' ) w + + ; } fprintf ( fptr3 , " \n \n  number of lines = %d n number of words is = %d\n  " , n , w - 1 ) ; fclose ( fptr1 ) ; fclose ( fptr2 ) ; fclose ( fptr3 ) ; }
#include <stdio.h> void main ( ) { int number [ 30 ] ; int i , j , a , n , counter , average ; printf ( " Enter the value of N\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the numbers \n  " ) ; for ( i = 0 ; i < n ; + + i ) scanf ( " %d " , & number [ i ] ) ; for ( i = 0 ; i < n ; + + i ) { for ( j = i + 1 ; j < n ; + + j ) { if ( number [ i ] < number [ j ] ) { a = number [ i ] ; number [ i ] = number [ j ] ; number [ j ] = a ; } } } printf ( " The numbers arranged in descending order are given below \n  " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d\n  " , number [ i ] ) ; } printf ( " The 2nd largest number is = %d\n  " , number [ 1 ] ) ; printf ( " The 2nd smallest number is = %d\n  " , number [ n - 2 ] ) ; average = ( number [ 1 ] + number [ n - 2 ] ) / 2 ; counter = 0 ; for ( i = 0 ; i < n ; + + i ) { if ( average = = number [ i ] ) { + + counter ; } } if ( counter = = 0 ) printf ( " The average of %d and %d is = %d is not in the array \n  " , number [ 1 ] , number [ n - 2 ] , average ) ; else printf ( " The average of %d and %d in array is %d in numbers \n  " , number [ 1 ] , number [ n - 2 ] , counter ) ; }
#include <dirent.h> #include <stdio.h> int main ( void ) { DIR * d ; struct dirent * dir ; d = opendir ( " . " ) ; if ( d ) { while ( ( dir = readdir ( d ) ) ! = NULL ) { printf ( " %s\n  " , dir-> d_name ) ; } closedir ( d ) ; } return ( 0 ) ; }
#include <stdio.h> void main ( ) { char operator ; float num1 , num2 , result ; printf ( " Simulation of a Simple Calculator\n  " ) ; printf ( " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n  " ) ; printf ( " Enter two numbers \n  " ) ; scanf ( " %f %f " , & num1 , & num2 ) ; fflush ( stdin ) ; printf ( " Enter the operator [ + , - , * , / ] \n  " ) ; scanf ( " %s " , & operator ) ; switch ( operator ) { case ' + ' : result = num1 + num2 ; break ; case '-' : result = num1 - num2 ; break ; case ' * ' : result = num1 * num2 ; break ; case ' / ' : result = num1 / num2 ; break ; default : printf ( " Error in operationn " ) ; break ; } printf ( " \n  %5.2f %c %5.2f = %5.2f\n  " , num1 , operator , num2 , result ) ; }
#include <stdio.h> void main ( ) { int i , n , number [ 30 ] ; printf ( " Enter the value of the n = " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the numbers\n  " ) ; for ( i = 0 ; i < n ; + + i ) { scanf ( " %d " , & number [ i ] ) ; } number [ n ] = number [ 0 ] ; for ( i = 0 ; i < n ; + + i ) { number [ i ] = number [ i + 1 ] ; } printf ( " Cyclically permuted numbers are given below \n  " ) ; for ( i = 0 ; i < n ; + + i ) printf ( " %d\n  " , number [ i ] ) ; }
#include <stdio.h> void main ( ) { int vectorx [ 10 ] ; int i , n , pos , element , found = 0 ; printf ( " Enter how many elements\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the elements\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & vectorx [ i ] ) ; } printf ( " Input array elements are\n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d\n  " , vectorx [ i ] ) ; } printf ( " Enter the element to be deleted\n  " ) ; scanf ( " %d " , & element ) ; for ( i = 0 ; i < n ; i + + ) { if ( vectorx [ i ] = = element ) { found = 1 ; pos = i ; break ; } } if ( found = = 1 ) { for ( i = pos ; i < n - 1 ; i + + ) { vectorx [ i ] = vectorx [ i + 1 ] ; } printf ( " The resultant vector is \n  " ) ; for ( i = 0 ; i < n - 1 ; i + + ) { printf ( " %d\n  " , vectorx [ i ] ) ; } } else printf ( " Element %d is not found in the vector\n  " , element ) ; }
#include <stdio.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n , a = 0 , sum = 0 ; printf ( " Enetr the order of the matix \n  " ) ; scanf ( " %d %d " , & m , & n ) ; if ( m = = n ) { printf ( " Enter the co-efficients of the matrix\n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & array [ i ] [ j ] ) ; } } printf ( " The given matrix is \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } for ( i = 0 ; i < m ; + + i ) { sum = sum + array [ i ] [ i ] ; a = a + array [ i ] [ m - i - 1 ] ; } printf ( " \n The sum of the main diagonal elements is = %d\n  " , sum ) ; printf ( " The sum of the off diagonal elements is = %d\n  " , a ) ; } else printf ( " The given order is not square matrix\n  " ) ; }
#include <stdio.h> void swap34 ( float * ptr1 , float * ptr2 ) ; void main ( ) { float x [ 10 ] ; int i , n ; printf ( " How many Elements...\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter Elements one by one\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %f " , x + i ) ; } swap34 ( x + 2 , x + 3 ) ; printf ( " \n Resultant Array...\n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " X [ %d ] = %f\n  " , i , x [ i ] ) ; } } void swap34 ( float * ptr1 , float * ptr2 ) { float temp ; temp = * ptr1 ; * ptr1 = * ptr2 ; * ptr2 = temp ; }
#include <stdio.h> int main ( void ) { FILE * fileptr1 , * fileptr2 ; char filechar [ 40 ] ; char c ; int delete_line , temp = 1 ; printf ( " Enter file name : " ) ; scanf ( " %s " , filechar ) ; fileptr1 = fopen ( filechar , " r " ) ; c = getc ( fileptr1 ) ;
#include <stdio.h> int gcd ( int , int ) ; int main ( ) { int a , b , result ; printf ( " Enter the two numbers to find their GCD : " ) ; scanf ( " %d %d " , & a , & b ) ; result = gcd ( a , b ) ; printf ( " The GCD of %d and %d is %d.\n  " , a , b , result ) ; } int gcd ( int a , int b ) { while ( a ! = b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; }
#include <stdio.h> double sumseries ( double ) ; main ( ) { double number , sum ; printf ( " \n  Enter the value : " ) ; scanf ( " %lf " , & number ) ; sum = sumseries ( number ) ; printf ( " \n  Sum of the above series = %lf " , sum ) ; } double sumseries ( double m ) { double sum2 = 0 , f = 1 , i ; for ( i = 1 ; i < = m ; i + + ) { f = f * i ; sum2 = sum2 + ( i / f ) ; } return ( sum2 ) ; }
#include <stdio.h> int main ( ) { FILE * fileptr ; int count_lines = 0 ; char filechar [ 40 ] , chr ; printf ( " Enter file name : " ) ; scanf ( " %s " , filechar ) ; fileptr = fopen ( filechar , " r " ) ;
#include <stdio.h> void printodd ( int array [ ] , int size ) { int xor2 = array [ 0 ] ; int set ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i + + ) xor2 = xor2 ^ array [ i ] ; set = xor2 & ~ ( xor2 - 1 ) ; for ( i = 0 ; i < size ; i + + ) { if ( array [ i ] & set ) x = x ^ array [ i ] ; else y = y ^ array [ i ] ; } printf ( " \n  The ODD elements are %d & %d " , x , y ) ; } int main ( ) { int array [ ] = { 10 , 3 , 2 , 10 , 2 , 8 , 8 , 7 } ; int arr_size = sizeof ( array ) / sizeof ( array [ 0 ] ) ; printodd ( array , arr_size ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; void print_reverse_recursive ( struct node * ) ; void print ( struct node * ) ; void create_new_node ( struct node * , int ) ;
#include <stdio.h> int number_between_bit_positions ( int , int , int ) ; int result = 0 ; int main ( ) { int number , start_pos , end_pos ; printf ( " \n Enter the number " ) ; scanf ( " %d " , & number ) ; printf ( " \n Enter the position of a and b " ) ; scanf ( " %d %d " , & start_pos , & end_pos ) ; result = number_between_bit_positions ( number , start_pos , end_pos ) ; printf ( " Byte Equivalent of bits between %d and %d positions %d " , start_pos , end_pos , result ) ; } int number_between_bit_positions ( int number , int start_pos , int end_pos ) { int i , j , shift_num , res_val ; for ( i = start_pos , j = 0 ; i < = end_pos ; i + + , j + + ) { shift_num = number > > i ; res_val = shift_num & 1 ; res_val = res_val < < j ; result + = res_val ; } return result ; }
#include <stdio.h> char * strpbrk ( char * , char * ) ; int main ( ) { char string1 [ 50 ] , string2 [ 50 ] ; char * pos ; printf ( " Enter the String : \n  " ) ; scanf ( " % [ ^\n  ] s " , string1 ) ; printf ( " \n Enter the Character Set : \n  " ) ; scanf ( " % [ ^\n  ] s " , string2 ) ; pos = strpbrk ( string1 , string2 ) ; printf ( " %s " , pos ) ; } char * strpbrk ( char * string1 , char * string2 ) { int i , j , pos , flag = 0 ; for ( i = 0 ; string1 [ i ] ! = '\0' ; i + + ) ; pos = i ; for ( i = 0 ; string2 [ i ] ! = '\0' ; i + + ) { for ( j = 0 ; string1 [ j ] ! = '\0' ; j + + ) { if ( string2 [ i ] = = string1 [ j ] ) { if ( j < = pos ) { pos = j ; flag = 1 ; } } } } if ( flag = = 1 ) { return & string1 [ pos ] ; } else { return NULL ; } }
#include <stdio.h> #include <string.h> #define SIZE 8 int is_palindrome ( unsigned char [ ] ) ; void main ( ) { int num , num1 = 0 , i = 0 , j = SIZE - 1 , res ; unsigned char c [ SIZE ] ; printf ( " Enter a number ( max 255 ) " ) ; scanf ( " %d " , & num ) ; num1 = num ; while ( num ! = 0 ) { c [ j ] = num & 1 ; j-- ; num = num> > 1 ; } printf ( " The number %d in binary is : " , num1 ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d " , c [ i ] ) ; } res = is_palindrome ( c ) ; if ( res = = 0 ) { printf ( " \n NUMBER IS PALINDROME\n  " ) ; } else { printf ( " \n NUMBER IS NOT PALINDROME\n  " ) ; } } int is_palindrome ( unsigned char c [ ] ) { char temp [ SIZE ] ; int i , j , flag = 0 ; for ( i = 0 , j = SIZE - 1 ; i < SIZE , j > = 0 ; i + + , j-- ) { temp [ j ] = c [ i ] ; } for ( i = 0 ; i < SIZE ; i + + ) { if ( temp [ i ] ! = c [ i ] ) { flag = 1 ; } } return flag ; }
#include <stdio.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n ; printf ( " Enter the order of the matrix \n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the coefiicients of the matrix\n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & array [ i ] [ j ] ) ; } } printf ( " The given matrix is \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } printf ( " Transpose of matrix is \n  " ) ; for ( j = 0 ; j < n ; + + j ) { for ( i = 0 ; i < m ; + + i ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n , even = 0 , odd = 0 ; printf ( " Enter the order ofthe matrix \n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the coefficients of matrix \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & array [ i ] [ j ] ) ; if ( ( array [ i ] [ j ] % 2 ) = = 0 ) { + + even ; } else + + odd ; } } printf ( " The given matrix is \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } printf ( " \n  The frequency of occurrence of odd number = %d \n  " , odd ) ; printf ( " The frequency of occurrence of even number = %d\n  " , even ) ; }
#include <stdio.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n , a ; printf ( " Enter the order of the matix \n  " ) ; scanf ( " %d %d " , & m , & n ) ; if ( m = = n ) { printf ( " Enter the co-efficients of the matrix\n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %dx %d " , & array [ i ] [ j ] ) ; } } printf ( " The given matrix is \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } for ( i = 0 ; i < m ; + + i ) { a = array [ i ] [ i ] ; array [ i ] [ i ] = array [ i ] [ m - i - 1 ] ; array [ i ] [ m - i - 1 ] = a ; } printf ( " The matrix after changing the \n  " ) ; printf ( " main diagonal & secondary diagonal\n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } } else printf ( " The given order is not square matrix\n  " ) ; }
#include <stdio.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n , sum = 0 ; printf ( " Enter the order of the matrix\n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the co-efficients of the matrix\n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & array [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { sum = sum + array [ i ] [ j ] ; } printf ( " Sum of the %d row is = %d\n  " , i , sum ) ; sum = 0 ; } sum = 0 ; for ( j = 0 ; j < n ; + + j ) { for ( i = 0 ; i < m ; + + i ) { sum = sum + array [ i ] [ j ] ; } printf ( " Sum of the %d column is = %d\n  " , j , sum ) ; sum = 0 ; } }
#include <stdio.h> #include <math.h> void main ( ) { static int array [ 10 ] [ 10 ] ; int i , j , m , n , sum = 0 , sum1 = 0 , a = 0 , normal ; printf ( " Enter the order of the matrix\n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the n coefficients of the matrix \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & array [ i ] [ j ] ) ; a = array [ i ] [ j ] * array [ i ] [ j ] ; sum1 = sum1 + a ; } } normal = sqrt ( sum1 ) ; printf ( " The normal of the given matrix is = %d\n  " , normal ) ; for ( i = 0 ; i < m ; + + i ) { sum = sum + array [ i ] [ i ] ; } printf ( " Trace of the matrix is = %d\n  " , sum ) ; }
#include <stdio.h> void main ( ) { int i , j , r , c , array [ 10 ] [ 10 ] ; printf ( " Enter the r and c value : " ) ; scanf ( " %d %d " , & r , & c ) ; for ( i = 1 ; i < = r ; i + + ) { for ( j = 1 ; j < = c ; j + + ) { printf ( " array [ %d ] [ %d ] = " , i , j ) ; scanf ( " %d " , & array [ i ] [ j ] ) ; } } printf ( " matrix is " ) ; for ( i = 1 ; i < = r ; i + + ) { for ( j = 1 ; j < = c ; j + + ) { printf ( " %d " , array [ i ] [ j ] ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = r ; i + + ) { printf ( " \n  " ) ; for ( j = 1 ; j < = c ; j + + ) { if ( i > = j ) { printf ( " %d " , array [ i ] [ j ] ) ; } else { printf ( " \t " ) ; } } } printf ( " \n \n  " ) ; for ( i = 1 ; i < = r ; i + + ) { printf ( " \n  " ) ; for ( j = 1 ; j < = c ; j + + ) { if ( j > = i ) { printf ( " %d " , array [ i ] [ j ] ) ; } else {
#include <stdio.h> void main ( ) { int array [ 3 ] [ 3 ] , i , j , flag = 0 ; printf ( " \n \t Enter the value of Matrix : " ) ; for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { scanf ( " %d " , & array [ i ] [ j ] ) ; } } for ( i = 0 ; i < 3 ; i + + ) { for ( j = 0 ; j < 3 ; j + + ) { if ( array [ i ] < array [ j ] & & array [ i ] [ j ] = = 0 ) { flag = flag + 1 ; } } } if ( flag = = 3 ) printf ( " \n \n  Matrix is a Lower triangular matrix " ) ; else printf ( " \n \n  Matrix is not a lower triangular matrix " ) ; }
#include <stdio.h> void main ( ) { int num , x , y , count = 0 ; printf ( " enter the number : " ) ; scanf ( " %d " , & num ) ; x = num < < 1 ; y = x ^ num ; y = y + 1 ; while ( ( y / 2 ) ! = 0 ) { if ( y % 2 ! = 0 ) { count + + ; break ; } else { y = y / 2 ; } } if ( count ) { printf ( " false " ) ; } else { printf ( " true " ) ; } }
#include <stdio.h> #define NUM_BITS_INT 32 int count = 0 ; void main ( ) { int temp , n , bit , i = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( i < NUM_BITS_INT ) { bit = temp & 0x80000000 ; if ( bit = = -0x80000000 ) { bit = 1 ; } printf ( " %d " , bit ) ; temp = temp < < 1 ; i + + ; } }
#include <stdio.h> #define NUM_BITS_INT 32int int_msb_position ( int n ) ; void main ( ) { int n , pos ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; pos = int_msb_position ( n ) ; printf ( " \n Position of MSB bit = %d\n  " , NUM_BITS_INT - ( pos + 1 ) ) ; } int int_msb_position ( int n ) { int i = 0 , bit ; while ( i < NUM_BITS_INT ) { bit = n & 0x80000000 ; if ( bit = = -0x80000000 ) { bit = 1 ; } if ( bit = = 1 ) break ; n = n < < 1 ; i + + ; } return i ; }
#include <stdio.h> void main ( ) { int x = 1 , i , n ; printf ( " enter the number : " ) ; scanf ( " %d " , & n ) ; if ( n > 0 ) { for ( ; x < = n > > 1 ; ) { x = x < < 1 ; } n = x ; } else { n = ~n ; n = n + 1 ; for ( ; x < = n > > 1 ; ) { x = x < < 1 ; } x = x < < 1 ; x = ~x ; x = x + 1 ; n = x ; } printf ( " %d " , n ) ; }
#include <stdio.h> #define SIZE ( x ) sizeof ( x ) * 8 void signed_one ( int ) ; void unsigned_one ( int ) ; void main ( ) { printf ( " \n range of int " ) ; signed_one ( SIZE ( int ) ) ; printf ( " \n range of unsigned int " ) ; unsigned_one ( SIZE ( unsigned int ) ) ; printf ( " \n range of char " ) ; signed_one ( SIZE ( char ) ) ; printf ( " \n range of unsigned char " ) ; unsigned_one ( SIZE ( unsigned char ) ) ; printf ( " \n range of short " ) ; signed_one ( SIZE ( short ) ) ; printf ( " \n range of unsigned short " ) ; unsigned_one ( SIZE ( unsigned short ) ) ; } void signed_one ( int count ) { int min , max , pro ; pro = 1 ; while ( count ! = 1 ) { pro = pro < < 1 ; count-- ; } min = ~pro ; min = min + 1 ; max = pro - 1 ; printf ( " \n  %d to %d " , min , max ) ; } void unsigned_one ( int count ) { unsigned int min , max , pro = 1 ; while ( count ! = 0 ) { pro = pro < < 1 ; count-- ; } min = 0 ; max = pro - 1 ; printf ( " \n  %u to %u " , min , max ) ; }
#include <stdio.h> int all_bits_one ( int ) ; int count = 0 ; void main ( ) { int num ; printf ( " enter the number : " ) ; scanf ( " %d " , & num ) ; num + + ; all_bits_one ( num ) ; if ( count ) { printf ( " false " ) ; } else { printf ( " true " ) ; } } int all_bits_one ( int x ) { if ( x = = 1 ) return 0 ; if ( x % 2 ! = 0 ) { count + + ; } else { x = x / 2 ; all_bits_one ( x ) ; } }
#include <stdio.h> void main ( ) { int j = 31 , i , count = 0 ; unsigned int num ; int b [ 32 ] = { 0 } ; printf ( " enter the number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { if ( num & 1 = = 1 ) { break ; } else { count + + ; num = num > > 1 ; } } printf ( " \n  %d " , count ) ; }
#include <stdio.h> #include <stdlib.h> #define NUM_BITS_INT ( sizeof ( int ) * 8 ) int find ( int ) ; void main ( ) { int n , i , a , count = 0 , flag = 1 , m = 1 , j , cmp ; printf ( " Enter the number\n  " ) ; scanf ( " %d " , & n ) ; a = n > > 31 & 1 ; if ( a = = 0 ) { for ( i = ( NUM_BITS_INT ) -1 ; i > = 0 ; i-- ) { a = ( n > > i ) & 1 ; if ( a = = 0 ) { count + + ; } else { for ( j = n + 1 ; ; j + + ) { cmp = find ( j ) ; if ( cmp = = ( ( ( NUM_BITS_INT ) -1 ) - count ) + 1 ) { printf ( " next higher power -> %d\n  " , j ) ; break ; } } break ; } } } else { for ( i = ( NUM_BITS_INT ) -1 ; i > = 0 ; i-- ) { a = ( n > > i ) & 1 ; if ( a = = 1 ) { count + + ; } else { for ( j = n + 1 ; ; j + + ) { cmp = find ( j ) ; if ( cmp = = ( ( ( NUM_BITS_INT ) - 1 ) - count ) ) { printf ( " next higher power -> %d\n  " , j ) ; break ; } } break ; } } } } int find ( int n ) { int count = 0 , a , flag = 1 , i ; for ( i = 0 ; i < = ( NUM_BITS_INT ) - 1 ; i + + ) { a = ( n > > i ) & 1 ; if ( a = = 1 & & flag = = 1 ) { return count ; } else { count + + ; flag = 1 ; } } }
#include <stdio.h> #define NUM_BITS sizeof ( int ) * 8 int highest_bit_set ( int ) ; void display ( int ) ; int i = NUM_BITS ; void main ( ) { int num , pos ; printf ( " \n enter the number : " ) ; scanf ( " %d " , & num ) ; display ( num ) ; pos = highest_bit_set ( num ) ; printf ( " \n the position of the highest bit set is %d " , pos ) ; } int highest_bit_set ( int num ) { int count = 0 ; while ( num > > 1 ! = 0 ) { count + + ; num = num > > 1 ; } return ( count ) ; } void display ( int num ) { int c ; c = num & 1 ; if ( i > 0 ) { i-- ; display ( num > > 1 ) ; } printf ( " %d " , c ) ; }
#include <stdio.h> #define NUM_BITS_INT ( 8 * sizeof ( int ) ) int count_unset ( int ) ; int main ( ) { int i , num , snum , res , count = 0 ; printf ( " \n Enter the number " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i < = NUM_BITS_INT ; i + + ) { snum = num > > i ; res = snum & 1 ; if ( res = = 0 ) count + + ; } printf ( " %d " , count ) ; }
#include <stdio.h> void replace_bits ( int , int , int , int ) ; int main ( ) { int number_x , number_y , start_pos , end_pos ; printf ( " \n Enter the number x in hexa decimal " ) ; scanf ( " %x " , & number_x ) ; printf ( " \n Enter the number y in hexa decimal " ) ; scanf ( " %x " , & number_y ) ; printf ( " \n Enter value for a " ) ; scanf ( " %d " , & start_pos ) ; printf ( " \n Enter value for b " ) ; scanf ( " %d " , & end_pos ) ; replace_bits ( number_x , number_y , start_pos , end_pos ) ; } void replace_bits ( int number_x , int number_y , int start_pos , int end_pos ) { int i , shift_y , ybit ; long int temp , t ; for ( i = start_pos ; i < = end_pos ; i + + ) { shift_y = number_y > > i ; ybit = shift_y & 1 ; if ( ybit = = 1 ) { temp = 1 < < i ; number_x = number_x | temp ; } if ( ybit = = 0 ) { t = 0XFFFFFFFF ; temp = 1 < < i ; start_pos = t ^ temp ; number_x = number_x & start_pos ; } } printf ( " %x " , number_x ) ; }
#include <stdio.h> void changebits ( int , int , int , int ) ; int main ( ) { int num1 , num2 , pos1 , pos2 ; printf ( " * * Replacing the bits in integer x from bit position a to b from another integer y * * \n  " ) ; printf ( " read number 1\n  " ) ; scanf ( " %x " , & num1 ) ; printf ( " Read number 2 : \n  " ) ; scanf ( " %x " , & num2 ) ; printf ( " Read LSB postion : \n  " ) ; scanf ( " %d " , & pos1 ) ; printf ( " MSB should always be greater than LSB\n  " ) ; printf ( " Read MSB position : \n  " ) ; scanf ( " %d " , & pos2 ) ; changebits ( num1 , num2 , pos1 , pos2 ) ; return 0 ; } void changebits ( int num1 , int num2 , int pos1 , int pos2 ) { int temp1 , temp_1 , buffer2 , bit1 = 0 , bit2 = 0 , counter = 0 , a = 1 ; temp1 = num1 ; temp_1 = num1 ; buffer2 = num2 ; for ( ; pos1 < = pos2 ; pos1 + + ) { a = 1 ; num1 = temp_1 ; num2 = buffer2 ; while ( counter < = pos1 ) { if ( counter = = pos1 ) bit1 = ( num1 & 1 ) ; counter + + ; num1> > = 1 ; } counter = 0 ; while ( counter < = pos1 ) { if ( counter = = pos1 ) bit2 = ( num2 & 1 ) ; counter + + ; num2 > > = 1 ; } counter = 0 ; if ( bit1 = = bit2 ) ; else { while ( counter + + <pos1 ) a = a < < 1 ; temp1 ^ = a ; } counter = 0 ; } printf ( " the number num1 after shifting the bits is 0x %x\n  " , temp1 ) ; }
#include <stdio.h> int swap ( int , int ) ; int number , pos1 , pos2 ; int main ( ) { int result , shift_pos1 , shift_pos2 ; printf ( " \n Enter Number " ) ; scanf ( " %d " , & number ) ; printf ( " \n Enter bit positions to swap " ) ; scanf ( " %d %d " , & pos1 , & pos2 ) ; shift_pos1 = number > > pos1 ; shift_pos2 = number > > pos2 ; result = swap ( shift_pos1 & 1 , shift_pos2 & 1 ) ; printf ( " %d\n  " , result ) ; } int swap ( int pos1_val , int pos2_val ) { int temp1 , temp2 ; long int base , base1 ; if ( pos1_val = = 1 ) { base1 = 1 < < pos2 ; number = number + base1 ; } if ( pos2_val = = 1 ) { base1 = 1 < < pos2 ; number = number + base1 ; } if ( pos1_val = = 0 ) { base = 0XFFFFFFFF ; base1 = 1 < < pos2 ; temp1 = base ^ base1 ; number = number & temp1 ; } if ( pos2_val = = 0 ) { base = 0XFFFFFFFF ; base1 = 1 < < pos1 ; temp2 = base ^ base1 ; number = number & temp2 ; } return number ; }
#include <stdio.h> #define NUM_BITS_INT ( 8 * sizeof ( int ) ) int power_of_2 ( unsigned int ) ; int main ( ) { unsigned int num ; printf ( " \n Enter Number " ) ; scanf ( " %d " , & num ) ; power_of_2 ( num ) ; } int power_of_2 ( unsigned int x ) { int i , count = 0 , result , shift_num ; for ( i = 0 ; i < = NUM_BITS_INT ; i + + ) { shift_num = x > > i ; result = shift_num & 1 ; if ( result = = 1 ) count + + ; } if ( count % 2 = = 1 ) printf ( " YES " ) ; else printf ( " NO " ) ; }
#include <stdio.h> void swap ( int * , int * ) ; void main ( ) { int x , y ; printf ( " Enter 2 nos : \n  " ) ; scanf ( " %d %d " , & x , & y ) ; printf ( " \n You have entered x = %d y = %d \n  " , x , y ) ; swap ( & x , & y ) ; } void swap ( int * a , int * b ) { * a = * a + * b ; * b = * a - * b ; * a = * a - * b ; printf ( " Swapped . . . .\n  " ) ; printf ( " x = %d y = %d\n  " , * a , * b ) ; }
#include <stdio.h> void main ( ) { int n , len , pos = 0 , i = 0 , count = 0 ; printf ( " * * Finding the position of 1-bits in a number for given length * * \n  " ) ; printf ( " enter a number\n  " ) ; scanf ( " %d " , & n ) ; printf ( " enter the length\n  " ) ; scanf ( " %d " , & len ) ; while ( i < = 32 ) { if ( ( n & 1 ) = = 1 ) { count + + ; pos = i ; if ( count = = len ) { break ; } } if ( ( n & 1 ) = = 0 ) { count = 0 ; } n = n> > 1 ; i + + ; } printf ( " the position of 1 in the string : %d\n  " , pos ) ; }
#include <stdio.h> int result , position ; int n_bit_position ( int x , int position ) ; void main ( ) { unsigned int number ; printf ( " Enter the unsigned integer : \n  " ) ; scanf ( " %d " , & number ) ; printf ( " enter position\n  " ) ; scanf ( " %d " , & position ) ; n_bit_position ( number , position ) ; if ( result & 1 ) printf ( " YES\n  " ) ; else printf ( " NO\n  " ) ; } int n_bit_position ( int number , int position ) { result = ( number> > ( position ) ) ; }
#include <stdio.h> void main ( ) { unsigned int number ; int result , position ; printf ( " Enter the unsigned integer : \n  " ) ; scanf ( " %d " , & number ) ; printf ( " enter position to be searched\n  " ) ; scanf ( " %d " , & position ) ; result = ( number > > ( position ) ) ; if ( result & 1 ) printf ( " TRUE\n  " ) ; else printf ( " FALSE\n  " ) ; }
#include <stdio.h> #define NUM_BITS_INT sizeof ( int ) * 8 void main ( ) { unsigned int number ; int i = 0 , hexadecimal , rev = 0 , bit ; printf ( " enter the hexdecimal value\n  " ) ; scanf ( " 0x %number " , & hexadecimal ) ; while ( i + + < NUM_BITS_INT ) { bit = hexadecimal & 1 ; hexadecimal = hexadecimal > > 1 ; rev = rev ^ bit ; if ( i < NUM_BITS_INT ) rev = rev < < 1 ; } printf ( " reverse of hexadecimal value is 0x %number " , rev ) ; }
#include <stdio.h> #include <stdlib.h> #define NUM_BITS_INT ( sizeof ( int ) * 8 ) void main ( ) { int n , m , i , count = 0 , a , b ; printf ( " Enter the number\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter another number\n  " ) ; scanf ( " %d " , & m ) ; for ( i = NUM_BITS_INT-1 ; i > = 0 ; i-- ) { a = ( n > > i ) & 1 ; b = ( m > > i ) & 1 ; if ( a ! = b ) count + + ; } printf ( " flip count = %d\n  " , count ) ; }
#include <stdio.h> int main ( ) { unsigned int number ; int count = 0 ; printf ( " Enter the unsigned integer : \n  " ) ; scanf ( " %d " , & number ) ; while ( number ! = 0 ) { if ( ( number & 1 ) = = 1 ) count + + ; number = number > > 1 ; } printf ( " number of one's are : \n  %d\n  " , count ) ; return 0 ; }
#include <stdio.h> #define MAX 15 int missing_number_array ( int [ ] , int ) ; int main ( ) { int a [ MAX ] , num , i , n ; printf ( " enter the range of array\n  " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " enter a [ %d ] element into the array : " , i ) ; scanf ( " %d " , & a [ i ] ) ; } num = missing_number_array ( a , n ) ; printf ( " The missing number -> %d\n  " , num ) ; } int missing_number_array ( int a [ ] , int n ) { int i ; int s1 = 0 ; int s2 = 0 ; for ( i = 0 ; i < n ; i + + ) s1 = s1 ^ a [ i ] ; for ( i = 1 ; i < = n + 1 ; i + + ) s2 = s2 ^ i ; return ( s1 ^ s2 ) ; }
#include <stdio.h> #include <string.h> void swap ( int * , int * ) ; void main ( ) { int num1 , num2 ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n The numbers before swapping are Number1 = %d Number2 = %d " , num1 , num2 ) ; swap ( & num1 , & num2 ) ; printf ( " \n The numbers after swapping are Number1 = %d Number2 = %d " , num1 , num2 ) ; } void swap ( int * x , int * y ) { * x = * x ^ * y ; * y = * x ^ * y ; * x = * x ^ * y ; }
#include <stdio.h> void towers ( int , char , char , char ) ; int main ( ) { int num ; printf ( " Enter the number of disks : " ) ; scanf ( " %d " , & num ) ; printf ( " The sequence of moves involved in the Tower of Hanoi are : \n  " ) ; towers ( num , 'A' , 'C' , 'B' ) ; return 0 ; } void towers ( int num , char frompeg , char topeg , char auxpeg ) { if ( num = = 1 ) { printf ( " \n  Move disk 1 from peg %c to peg %c " , frompeg , topeg ) ; return ; } towers ( num - 1 , frompeg , auxpeg , topeg ) ; printf ( " \n  Move disk %d from peg %c to peg %c " , num , frompeg , topeg ) ; towers ( num - 1 , auxpeg , topeg , frompeg ) ; }
#include <stdio.h> void magicsq ( int , int [ ] [ 10 ] ) ; int main ( ) { int size ; int a [ 10 ] [ 10 ] ; printf ( " Enter the size : " ) ; scanf ( " %d " , & size ) ; if ( size % 2 = = 0 ) { printf ( " Magic square works for an odd numbered size\n  " ) ; } else { magicsq ( size , a ) ; } return 0 ; } void magicsq ( int size , int a [ ] [ 10 ] ) { int sqr = size * size ; int i = 0 , j = size / 2 , k ; for ( k = 1 ; k < = sqr ; + + k ) { a [ i ] [ j ] = k ; i-- ; j + + ; if ( k % size = = 0 ) { i + = 2 ; --j ; } else { if ( j = = size ) { j - = size ; } else if ( i < 0 ) { i + = size ; } } } for ( i = 0 ; i < size ; i + + ) { for ( j = 0 ; j < size ; j + + ) { printf ( " %d " , a [ i ] [ j ] ) ; } printf ( " \n  " ) ; } printf ( " \n  " ) ; }
#include <stdio.h> #include <stdlib.h> #define INSERT 1 #define QUIT 2 typedef struct NODE { struct NODE * link ; int value ; } Node ; void insert_sll ( Node * * , const int ) ; int main ( void ) { Node * root = 0 ; Node * * p2r = & root ; int value ; int op ; puts ( " \n  * * Let's create a Singly Linked List * * \n  " ) ; printf ( " User , enter 1 for INSERT and 2 for QUIT : " ) ; while ( 1 ) { while ( scanf ( " %d " , & op ) = = 1 & & ( op = = INSERT || op = = QUIT ) ) { if ( op = = INSERT ) { printf ( " User , enter an integer value : " ) ; scanf ( " %d " , & value ) ; insert_sll ( p2r , value ) ; } else if ( op = = QUIT ) { printf ( " Thank You!\n  " ) ; return 0 ; } printf ( " \n Want to insert more integer values , \n enter 1 " " for INSERT , else 2 for QUIT : " ) ; } puts ( " Entered is a WRONG choice , enter 1 " " for INSERT , 2 for QUIT " ) ; } } void insert_sll ( Node * * linkp , const int value ) { Node * current = 0 ; Node * newnode = 0 ; while ( ( current = * linkp ) ! = NULL & & current-> value < value ) linkp = & current-> link ; if ( current ! = NULL & & current-> value = = value ) { printf ( " \n \aValue %d is already in the list.\n  " , value ) ; return ; } newnode = ( Node * ) malloc ( sizeof ( Node ) ) ; if ( newnode = = NULL ) { printf ( " Not sufficient Memory!\n  " ) ; exit ( EXIT_FAILURE ) ; } newnode-> value = value ; newnode-> link = current ; * linkp = newnode ; }
#include <stdio.h> long power ( int , int ) ; int main ( ) { int pow , num ; long result ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter it's power : " ) ; scanf ( " %d " , & pow ) ; result = power ( num , pow ) ; printf ( " %d^ %d is %ld " , num , pow , result ) ; return 0 ; } long power ( int num , int pow ) { if ( pow ) { return ( num * power ( num , pow - 1 ) ) ; } return 1 ; }
#include <stdio.h> #include <malloc.h> void main ( ) { int i , n , sum = 0 ; int * a ; printf ( " Enter the size of array A \n  " ) ; scanf ( " %d " , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; printf ( " Enter Elements of First List \n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , a + i ) ; } < for ( i = 0 ; i < n ; i + + ) { sum = sum + * ( a + i ) ; } printf ( " Sum of all elements in array = %d\n  " , sum ) ; }
#include <stdio.h> void main ( ) { static int array [ 5 ] = { 200 , 400 , 600 , 800 , 1000 } ; int sum ; int addnum ( int * ptr ) ; sum = addnum ( array ) ; printf ( " Sum of all array elements = %5d\n  " , sum ) ; } int addnum ( int * ptr ) { int index , total = 0 ; for ( index = 0 ; index < 5 ; index + + ) { total + = * ( ptr + index ) ; } return ( total ) ; }
#include <stdio.h> #include <malloc.h> #include <stdlib.h> void main ( ) { int i , n ; int * a , * b , * c ; printf ( " How many Elements in each array...\n  " ) ; scanf ( " %d " , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; c = ( int * ) malloc ( n * sizeof ( int ) ) ; printf ( " Enter Elements of First List\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , a + i ) ; } printf ( " Enter Elements of Second List\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , b + i ) ; } for ( i = 0 ; i < n ; i + + ) { * ( c + i ) = * ( a + i ) + * ( b + i ) ; } printf ( " Resultant List is\n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d\n  " , * ( c + i ) ) ; } }
#include <stdio.h> int main ( ) { int array [ 50 ] , size , i , largest ; printf ( " \n  Enter the size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " \n  Enter %d elements of the array : " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & array [ i ] ) ; largest = array [ 0 ] ; for ( i = 1 ; i < size ; i + + ) { if ( largest < array [ i ] ) largest = array [ i ] ; } printf ( " \n  largest element present in the given array is : %d " , largest ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i , j , a , n , number [ 30 ] ; printf ( " Enter the value of N \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the numbers \n  " ) ; for ( i = 0 ; i < n ; + + i ) scanf ( " %d " , & number [ i ] ) ; for ( i = 0 ; i < n ; + + i ) { for ( j = i + 1 ; j < n ; + + j ) { if ( number [ i ] > number [ j ] ) { a = number [ i ] ; number [ i ] = number [ j ] ; number [ j ] = a ; } } } printf ( " The numbers arranged in ascending order are given below \n  " ) ; for ( i = 0 ; i < n ; + + i ) printf ( " %d\n  " , number [ i ] ) ; }
#include <stdio.h> void main ( ) { int number [ 30 ] ; int i , j , a , n ; printf ( " Enter the value of N\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the numbers \n  " ) ; for ( i = 0 ; i < n ; + + i ) scanf ( " %d " , & number [ i ] ) ; for ( i = 0 ; i < n ; + + i ) { for ( j = i + 1 ; j < n ; + + j ) { if ( number [ i ] < number [ j ] ) { a = number [ i ] ; number [ i ] = number [ j ] ; number [ j ] = a ; } } } printf ( " The numbers arranged in descending order are given below\n  " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d\n  " , number [ i ] ) ; } }
#include <stdio.h> void Merge ( int * , int , int , int ) ; void MergeSort ( int * array , int left , int right ) { int middle = ( left + right ) / 2 ; if ( left <right ) { MergeSort ( array , left , middle ) ; MergeSort ( array , middle + 1 , right ) ; Merge ( array , left , middle , right ) ; } } void Merge ( int * array , int left , int middle , int right ) { int tmp [ right - left + 1 ] ; int pos = 0 , leftposition = left , rightposition = middle + 1 ; while ( leftposition < = middle & & rightposition < = right ) { if ( array [ leftposition ] < array [ rightposition ] ) { tmp [ pos + + ] = array [ leftposition + + ] ; } else { tmp [ pos + + ] = array [ rightposition + + ] ; } } while ( leftposition < = middle ) tmp [ pos + + ] = array [ leftposition + + ] ; while ( rightposition < = right ) tmp [ pos + + ] = array [ rightposition + + ] ; int i ; for ( i = 0 ; i < pos ; i + + ) { array [ i + left ] = tmp [ i ] ; } return ; } int main ( ) { int size ; printf ( " \n  enter the size of an array " ) ; scanf ( " %d " , & size ) ; int array [ size ] ; int i , j , k ; printf ( " \n  enter the array elements " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } MergeSort ( array , 0 , size - 1 ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , array [ i ] ) ; } printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> void main ( ) { int array1 [ 50 ] , array2 [ 50 ] , array3 [ 100 ] , m , n , i , j , k = 0 ; printf ( " \n  Enter size of array Array 1 : " ) ; scanf ( " %d " , & m ) ; printf ( " \n  Enter sorted elements of array 1 : \n  " ) ; for ( i = 0 ; i < m ; i + + ) { scanf ( " %d " , & array1 [ i ] ) ; } printf ( " \n  Enter size of array 2 : " ) ; scanf ( " %d " , & n ) ; printf ( " \n  Enter sorted elements of array 2 : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & array2 [ i ] ) ; } i = 0 ; j = 0 ; while ( i < m & & j < n ) { if ( array1 [ i ] < array2 [ j ] ) { array3 [ k ] = array1 [ i ] ; i + + ; } else { array3 [ k ] = array2 [ j ] ; j + + ; } k + + ; } if ( i > = m ) { while ( j < n ) { array3 [ k ] = array2 [ j ] ; j + + ; k + + ; } } if ( j > = n ) { while ( i < m ) { array3 [ k ] = array1 [ i ] ; i + + ; k + + ; } } printf ( " \n  After merging : \n  " ) ; for ( i = 0 ; i < m + n ; i + + ) { printf ( " \n  %d " , array3 [ i ] ) ; } }
#include <stdio.h> void main ( ) { int number [ 30 ] ; int i , n , a , j ; printf ( " Enter the value of n\n  " ) ; scanf ( " %d " , & n ) ; printf ( " enter the numbers\n  " ) ; for ( i = 0 ; i < n ; + + i ) scanf ( " %d " , & number [ i ] ) ; printf ( " Enter the position of the element to split the array \n  " ) ; scanf ( " %d " , & a ) ; for ( i = 0 ; i < a ; + + i ) { number [ n ] = number [ 0 ] ; for ( j = 0 ; j < n ; + + j ) { number [ j ] = number [ j + 1 ] ; } } printf ( " The resultant array is\n  " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d\n  " , number [ i ] ) ; } }
#include <stdio.h> void main ( ) { int array [ 20 ] ; int i , low , mid , high , key , size ; printf ( " Enter the size of an array\n  " ) ; scanf ( " %d " , & size ) ; printf ( " Enter the array elements\n  " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Enter the key\n  " ) ; scanf ( " %d " , & key ) ; low = 0 ; high = ( size - 1 ) ; while ( low < = high ) { mid = ( low + high ) / 2 ; if ( key = = array [ mid ] ) { printf ( " SUCCESSFUL SEARCH\n  " ) ; return ; } if ( key < array [ mid ] ) high = mid - 1 ; else low = mid + 1 ; } printf ( " UNSUCCESSFUL SEARCH\n  " ) ; }
#include <stdio.h> #define MAX 50int queue_array [ MAX ] ; int rear = - 1 ; int front = - 1 ; main ( ) { int choice ; while ( 1 ) { printf ( " 1.Insert element to queue \n  " ) ; printf ( " 2.Delete element from queue \n  " ) ; printf ( " 3.Display all elements of queue \n  " ) ; printf ( " 4.Quit \n  " ) ; printf ( " Enter your choice : " ) ; scanf ( " %d " , & choice ) ; switch ( choice ) { case 1 : insert ( ) ; break ; case 2 : delete ( ) ; break ; case 3 : display ( ) ; break ; case 4 : exit ( 1 ) ; default : printf ( " Wrong choice \n  " ) ; } } } insert ( ) { int add_item ; if ( rear = = MAX - 1 ) printf ( " Queue Overflow \n  " ) ; else { if ( front = = - 1 ) front = 0 ; printf ( " Inset the element in queue : " ) ; scanf ( " %d " , & add_item ) ; rear = rear + 1 ; queue_array [ rear ] = add_item ; } } delete ( ) { if ( front = = - 1 || front > rear ) { printf ( " Queue Underflow \n  " ) ; return ; } else { printf ( " Element deleted from queue is : %d\n  " , queue_array [ front ] ) ; front = front + 1 ; } } display ( ) { int i ; if ( front = = - 1 ) printf ( " Queue is empty \n  " ) ; else { printf ( " Queue is : \n  " ) ; for ( i = front ; i < = rear ; i + + ) printf ( " %d " , queue_array [ i ] ) ; printf ( " \n  " ) ; } }
#include <stdio.h> void main ( ) { int array [ 30 ] , temp [ 30 ] , i , j , k , l , num ;
#include <stdio.h> void main ( ) { int array [ 100 ] , i , num ; printf ( " Enter the size of an array \n  " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the elements of the array \n  " ) ; for ( i = 0 ; i < num ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Even numbers in the array are - " ) ; for ( i = 0 ; i < num ; i + + ) { if ( array [ i ] % 2 = = 0 ) { printf ( " %d \t " , array [ i ] ) ; } } printf ( " \n  Odd numbers in the array are - " ) ; for ( i = 0 ; i < num ; i + + ) { if ( array [ i ] % 2 ! = 0 ) { printf ( " %d \t " , array [ i ] ) ; } } }
#include <stdio.h> #include <malloc.h> void duplicate ( int array [ ] , int num ) { int * count = ( int * ) calloc ( sizeof ( int ) , ( num - 2 ) ) ; int i ; printf ( " duplicate elements present in the given array are " ) ; for ( i = 0 ; i < num ; i + + ) { if ( count [ array [ i ] ] = = 1 ) printf ( " %d " , array [ i ] ) ; else count [ array [ i ] ] + + ; } } int main ( ) { int array [ ] = { 5 , 10 , 10 , 2 , 1 , 4 , 2 } ; int array_freq = sizeof ( array ) / sizeof ( array [ 0 ] ) ; duplicate ( array , array_freq ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int array [ 5 ] , b , c ; for ( b = 0 ; b < 10 & & ( scanf ( " %d " , & c ) ) ; b + + ) array [ b ] = c ; for ( b = 0 ; b < 15 ; b + + ) printf ( " %d " , array [ b ] ) ; return 0 ; }
#include <stdio.h> void main ( ) { int array [ 10 ] ; int i ; printf ( " enter the element of an array \n  " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %d " , & array [ i ] ) ; printf ( " Alternate elements of a given array \n  " ) ; for ( i = 0 ; i < 10 ; i + = 2 ) printf ( " %d\n  " , array [ i ] ) ; }
#include <stdio.h> void main ( ) { int n , i , j , c , t , b ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & n ) ; int array [ n - 1 ] ; printf ( " Enter elements into array : \n  " ) ; for ( i = 0 ; i < n - 1 ; i + + ) scanf ( " %d " , & array [ i ] ) ; b = array [ 0 ] ; for ( i = 1 ; i < n - 1 ; i + + ) b = b ^ array [ i ] ; for ( i = 2 , c = 1 ; i < = n ; i + + ) c = c ^ i ; c = c ^ b ; printf ( " Missing element is : %d \n  " , c ) ; }
#include <stdio.h> void segregate0and1 ( int array [ ] , int size ) { int left = 0 , right = size-1 ; while ( left < right ) { while ( array [ left ] = = 0 & & left < right ) left + + ; while ( array [ right ] = = 1 & & left < right ) right-- ; if ( left < right ) { array [ left ] = 0 ; array [ right ] = 1 ; left + + ; right-- ; } } } int main ( ) { int arr [ ] = { 0 , 1 , 0 , 1 , 1 , 0 } ; int array_size = 6 , i = 0 ; segregate0and1 ( arr , array_size ) ; printf ( " segregated array is " ) ; for ( i = 0 ; i < 6 ; i + + ) printf ( " %d " , arr [ i ] ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> void main ( ) { char string [ 20 ] ; int n , count = 0 ; printf ( " Enter the no of characters present in an array \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the string of %d characters \n  " , n ) ; scanf ( " %s " , string ) ; while ( count < n ) { printf ( " %c = %d\n  " , string [ count ] , string [ count ] ) ; + + count ; } }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 4 void print_square ( int [ ] ) ; void main ( void ) { int i ; int num [ MAX_ROWS ] [ MAX_COLS ] = { { 10 , 20 , 30 , 40 } , { 50 , 60 , 70 , 80 } , { 90 , 100 , 110 , 120 } } ; for ( i = 0 ; i < MAX_ROWS ; i + + ) print_square ( num [ i ] ) ; } void print_square ( int x [ ] ) { int j ; for ( j = 0 ; j < MAX_COLS ; j + + ) printf ( " %d\t " , x [ j ] * x [ j ] ) ; printf ( " \n  " ) ; }
#include <stdio.h> int getMedian ( int array1 [ ] , int array2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = -1 , m2 = -1 ; for ( count = 0 ; count < = n ; count + + ) { if ( i = = n ) { m1 = m2 ; m2 = array2 [ 0 ] ; break ; } else if ( j = = n ) { m1 = m2 ; m2 = array1 [ 0 ] ; break ; } if ( array1 [ i ] < array2 [ j ] ) { m1 = m2 ; m2 = array1 [ i ] ; i + + ; } else { m1 = m2 ; m2 = array2 [ j ] ; j + + ; } } return ( m1 + m2 ) / 2 ; } int main ( ) { int array1 [ ] = { 20 , 25 , 35 , 30 , 38 } ; int array2 [ ] = { 22 , 53 , 65 , 72 , 45 } ; int n1 = sizeof ( array1 ) / sizeof ( array1 [ 0 ] ) ; int n2 = sizeof ( array2 ) / sizeof ( array2 [ 0 ] ) ; if ( n1 = = n2 ) printf ( " Median is %d " , getMedian ( array1 , array2 , n1 ) ) ; else printf ( " not possible to findout " ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x < = arr [ low ] ) return low ; for ( i = low ; i < high ; i + + ) { if ( arr [ i ] = = x ) return i ; if ( arr [ i ] < x & & arr [ i + 1 ] > = x ) return i + 1 ; } return -1 ; } int main ( ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; int index = ceilSearch ( arr , 0 , n-1 , x ) ; if ( index = = -1 ) printf ( " Ceiling of %d doesn't exist in array " , x ) ; else printf ( " ceiling of %d is %d " , x , arr [ index ] ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> void main ( ) { char string [ 25 ] , reverse_string [ 25 ] = { '\0' } ; int i , length = 0 , flag = 0 ; printf ( " Enter a string \n  " ) ; gets ( string ) ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { length + + ; } printf ( " The length of the string ' %s' = %d\n  " , string , length ) ; for ( i = length - 1 ; i > = 0 ; i-- ) { reverse_string [ length - i - 1 ] = string [ i ] ; } for ( flag = 1 , i = 0 ; i < length ; i + + ) { if ( reverse_string [ i ] ! = string [ i ] ) flag = 0 ; } if ( flag = = 1 ) printf ( " %s is a palindrome \n  " , string ) ; else printf ( " %s is not a palindrome \n  " , string ) ; }
#include <stdio.h> #include <string.h> void check ( char [ ] , int ) ; int main ( ) { char word [ 15 ] ; printf ( " Enter a word to check if it is a palindrome\n  " ) ; scanf ( " %s " , word ) ; check ( word , 0 ) ; return 0 ; } void check ( char word [ ] , int index ) { int len = strlen ( word ) - ( index + 1 ) ; if ( word [ index ] = = word [ len ] ) { if ( index + 1 = = len || index = = len ) { printf ( " The entered word is a palindrome\n  " ) ; return ; } check ( word , index + 1 ) ; } else { printf ( " The entered word is not a palindrome\n  " ) ; } }
#include <stdio.h> #include <string.h> #include <ctype.h> int main ( ) { char string [ 100 ] , word [ 20 ] , max [ 20 ] , min [ 20 ] , c ; int i = 0 , j = 0 , flag = 0 ; printf ( " Enter string : " ) ; i = 0 ; do { fflush ( stdin ) ; c = getchar ( ) ; string [ i + + ] = c ; } while ( c ! = '\n ' ) ; string [ i - 1 ] = '\0' ; for ( i = 0 ; i < strlen ( string ) ; i + + ) { while ( i < strlen ( string ) & & !isspace ( string [ i ] ) & & isalnum ( string [ i ] ) ) { word [ j + + ] = string [ i + + ] ; } if ( j ! = 0 ) { word [ j ] = '\0' ; if ( !flag ) { flag = !flag ; strcpy ( max , word ) ; strcpy ( min , word ) ; } if ( strlen ( word ) > strlen ( max ) ) { strcpy ( max , word ) ; } if ( strlen ( word ) < strlen ( min ) ) { strcpy ( min , word ) ; } j = 0 ; } } printf ( " The largest word is ' %s' and smallest word is ' %s' in ' %s'.\n  " , max , min , string ) ; return 0 ; }
#include <stdio.h> #include <string.h> void main ( ) { char string1 [ 20 ] , string2 [ 20 ] ; int i , j , pos ; memset ( string1 , 0 , 20 ) ; memset ( string2 , 0 , 20 ) ; printf ( " Enter the first string : " ) ; scanf ( " %s " , string1 ) ; printf ( " Enter the second string : " ) ; scanf ( " %s " , string2 ) ; printf ( " First string = %s\n  " , string1 ) ; printf ( " Second string = %s\n  " , string2 ) ; for ( i = 0 ; string1 [ i ] ! = '\0' ; i + + ) { ; } pos = i ; for ( j = 0 ; string2 [ j ] ! = '\0' ; i + + ) { string1 [ i ] = string2 [ j + + ] ; } string1 [ i ] = '\0' ; printf ( " Concatenated string = %s\n  " , string1 ) ; }
#include <stdio.h> void main ( ) { int count1 = 0 , count2 = 0 , flag = 0 , i ; char string1 [ 10 ] , string2 [ 10 ] ; printf ( " Enter a string : " ) ; gets ( string1 ) ; printf ( " Enter another string : " ) ; gets ( string2 ) ; while ( string1 [ count1 ] ! = '\0' ) count1 + + ; while ( string2 [ count2 ] ! = '\0' ) count2 + + ; i = 0 ; while ( ( i < count1 ) & & ( i < count2 ) ) { if ( string1 [ i ] = = string2 [ i ] ) { i + + ; continue ; } if ( string1 [ i ] < string2 [ i ] ) { flag = -1 ; break ; } if ( string1 [ i ] > string2 [ i ] ) { flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Both strings are equal \n  " ) ; if ( flag = = 1 ) printf ( " String1 is greater than string2 \n  " , string1 , string2 ) ; if ( flag = = -1 ) printf ( " String1 is less than string2 \n  " , string1 , string2 ) ; }
#include <stdio.h> void main ( ) { char string [ 50 ] ; int i , length = 0 ; printf ( " Enter a string \n  " ) ; gets ( string ) ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { length + + ; } printf ( " The length of a string is the number of characters in it \n  " ) ; printf ( " So , the length of %s = %d\n  " , string , length ) ; }
#include <stdio.h> #include <ctype.h> void main ( ) { char sentence [ 100 ] ; int count , ch , i ; printf ( " Enter a sentence \n  " ) ; for ( i = 0 ; ( sentence [ i ] = getchar ( ) ) ! = '\n ' ; i + + ) { ; } sentence [ i ] = '\0' ; count = i ; printf ( " The given sentence is : %s " , sentence ) ; printf ( " \n  Case changed sentence is : " ) ; for ( i = 0 ; i < count ; i + + ) { ch = islower ( sentence [ i ] ) ? toupper ( sentence [ i ] ) : tolower ( sentence [ i ] ) ; putchar ( ch ) ; } }
#include <stdio.h> #include <string.h> void main ( ) { int i , j = 0 , k = 0 , count = 0 ; char str [ 100 ] , key [ 20 ] ; char str1 [ 10 ] [ 20 ] ; printf ( " enter string : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ' ' ) { str1 [ k ] [ j ] = '\0' ; k + + ; j = 0 ; } else { str1 [ k ] [ j ] = str [ i ] ; j + + ; } } str1 [ k ] [ j ] = '\0' ; printf ( " enter key : " ) ; scanf ( " %s " , key ) ; for ( i = 0 ; i < k + 1 ; i + + ) { if ( strcmp ( str1 [ i ] , key ) = = 0 ) { for ( j = i ; j < k + 1 ; j + + ) strcpy ( str1 [ j ] , str1 [ j + 1 ] ) ; k-- ; } } for ( i = 0 ; i < k + 1 ; i + + ) { printf ( " %s " , str1 [ i ] ) ; } }
#include <stdio.h> #include <string.h> #include <ctype.h> #include <stdlib.h> #define CHAR_SIZE 26 void alphacheck ( char * , int [ ] ) ; void create ( char [ ] , char [ ] , int [ ] ) ; int main ( ) { char str1 [ 50 ] , str2 [ 50 ] ; int a1 [ CHAR_SIZE ] = { 0 } ; char str2_rem [ 50 ] ; printf ( " Enter string1 : " ) ; scanf ( " %s " , str1 ) ; printf ( " Enter string2 : " ) ; scanf ( " %s " , str2 ) ; alphacheck ( str1 , a1 ) ; create ( str2_rem , str2 , a1 ) ; printf ( " On removing characters from second string we get : %s\n  " , str2_rem ) ; return 0 ; } void alphacheck ( char * str , int a [ ] ) { int i , index ; for ( i = 0 ; i < strlen ( str ) ; i + + ) { str [ i ] = tolower ( str [ i ] ) ; index = str [ i ] - 'a' ; if ( !a [ index ] ) { a [ index ] = 1 ; } } printf ( " \n  " ) ; } void create ( char str_rem [ ] , char str [ ] , int list [ ] ) { int i , j = 0 , index ; for ( i = 0 ; i < strlen ( str ) ; i + + ) { index = str [ i ] - 'a' ; if ( !list [ index ] ) { str_rem [ j + + ] = str [ i ] ; } } str_rem [ j ] = '\0' ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to lower case\n  " ) ; gets ( string ) ; printf ( " Input string in lower case : %s\n  " , strlwr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> void reverse ( char [ ] , int , int ) ; int main ( ) { char str1 [ 20 ] ; int size ; printf ( " Enter a string to reverse : " ) ; scanf ( " %s " , str1 ) ; size = strlen ( str1 ) ; reverse ( str1 , 0 , size - 1 ) ; printf ( " The string after reversing is : %s\n  " , str1 ) ; return 0 ; } void reverse ( char str1 [ ] , int index , int size ) { char temp ; temp = str1 [ index ] ; str1 [ index ] = str1 [ size - index ] ; str1 [ size - index ] = temp ; if ( index = = size / 2 ) { return ; } reverse ( str1 , index + 1 , size ) ; }
#include <stdio.h> #include <string.h> void main ( ) { int i , j = 0 , k = 0 , x , len ; char str [ 100 ] , str1 [ 10 ] [ 20 ] , temp ; printf ( " enter the string : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ' ' ) { str1 [ k ] [ j ] = '\0' ; k + + ; j = 0 ; } else { str1 [ k ] [ j ] = str [ i ] ; j + + ; } } str1 [ k ] [ j ] = '\0' ; for ( i = 0 ; i < = k ; i + + ) { len = strlen ( str1 [ i ] ) ; for ( j = 0 , x = len - 1 ; j < x ; j + + , x-- ) { temp = str1 [ i ] [ j ] ; str1 [ i ] [ j ] = str1 [ i ] [ x ] ; str1 [ i ] [ x ] = temp ; } } for ( i = 0 ; i < = k ; i + + ) { printf ( " %s " , str1 [ i ] ) ; } }
#include <stdio.h> void main ( ) { char sentence [ 80 ] ; int i , vowels = 0 , consonants = 0 , special = 0 ; printf ( " Enter a sentence \n  " ) ; gets ( sentence ) ; for ( i = 0 ; sentence [ i ] ! = '\0' ; i + + ) { if ( ( sentence [ i ] = = 'a' || sentence [ i ] = = 'e' || sentence [ i ] = = 'i' || sentence [ i ] = = 'o' || sentence [ i ] = = 'u' ) || ( sentence [ i ] = = 'A' || sentence [ i ] = = 'E' || sentence [ i ] = = 'I' || sentence [ i ] = = 'O' || sentence [ i ] = = 'U' ) ) { vowels = vowels + 1 ; } else { consonants = consonants + 1 ; } if ( sentence [ i ] = = 't' ||sentence [ i ] = = '\0' || sentence [ i ] = = ' ' ) { special = special + 1 ; } } consonants = consonants - special ; printf ( " No. of vowels in %s = %d\n  " , sentence , vowels ) ; printf ( " No. of consonants in %s = %d\n  " , sentence , consonants ) ; }
#include <stdio.h> #include <string.h> void main ( ) { char a [ 100 ] , b [ 20 ] [ 20 ] ; int i , j = 0 , k = 0 , n , m ; printf ( " enter the string\n  " ) ; scanf ( " % [ ^\n  ] s " , a ) ; for ( i = 0 ; a [ i ] ! = '\0' ; i + + ) { if ( a [ i ] = = ' ' ) { b [ k ] [ j ] = '\0' ; k + + ; j = 0 ; } else { b [ k ] [ j ] = a [ i ] ; j + + ; } } b [ k ] [ j ] = '\0' ; for ( i = 0 ; i < = k ; i + + ) { for ( j = i + 1 ; j < = k ; j + + ) { if ( strcmp ( b [ i ] , b [ j ] ) = = 0 ) { for ( m = j ; m < = k ; m + + ) strcpy ( b [ m ] , b [ m + 1 ] ) ; k-- ; } } } for ( n = 0 ; n < = k ; n + + ) { printf ( " %s\n  " , b [ n ] ) ; } }
#include <stdio.h> #include <string.h> void disp_str1_rec ( char * ) ; void main ( ) { char str1 [ 100 ] , * ptr ; int len1 = 0 , i ; char ch ; printf ( " Enter the string : \n  " ) ; scanf ( " % [ ^\n  ] s " , str1 ) ; ptr = str1 ; len1 = strlen ( str1 ) ; printf ( " Using iteration : \n  " ) ; for ( i = len1 - 1 ; i > = 0 ; i-- ) { ch = str1 [ i ] ; printf ( " %c " , ch ) ; } printf ( " Using recurssion : \n  " ) ; disp_str1_rec ( ptr ) ; } void disp_str1_rec ( char * stng ) { char ch ; if ( * stng ! = '\0' ) { ch = * stng ; stng + + ; disp_str1_rec ( stng ) ; printf ( " %c " , ch ) ; } else return ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 200 ] ; int count = 0 , i ; printf ( " enter the string\n  " ) ; scanf ( " % [ ^\n  ] s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; i + + ) { if ( s [ i ] = = ' ' ) count + + ; } printf ( " number of words in given string are : %d\n  " , count + 1 ) ; }
#include <stdio.h> void main ( ) { int count = 0 , i , times = 0 , t , h , e , space ; char string [ 100 ] ; puts ( " Enter a string : " ) ; gets ( string ) ; while ( string [ count ] ! = '\0' ) { count + + ; } for ( i = 0 ; i < = count - 3 ; i + + ) { t = ( string [ i ] = = 't' || string [ i ] = = 'T' ) ; h = ( string [ i + 1 ] = = 'h' || string [ i + 1 ] = = 'H' ) ; e = ( string [ i + 2 ] = = 'e'|| string [ i + 2 ] = = 'E' ) ; space = ( string [ i + 3 ] = = ' ' || string [ i + 3 ] = = '\0' ) ; if ( ( t & & h & & e & & space ) = = 1 ) times + + ; } printf ( " Frequency of the word 'the' is %d\n  " , times ) ; }
#include <stdio.h> #include <string.h> #include <ctype.h> char caps_check ( char * ) ; int main ( ) { char string [ 20 ] , letter ; printf ( " Enter a string to find it's first capital letter : " ) ; scanf ( " %s " , string ) ; letter = caps_check ( string ) ; if ( letter = = 0 ) { printf ( " No capital letter is present in %s.\n  " , string ) ; } else { printf ( " The first capital letter in %s is %c.\n  " , string , letter ) ; } return 0 ; } char caps_check ( char * string ) { int i = 0 ; while ( string [ i ] ! = '\0' ) { if ( isupper ( string [ i ] ) ) { return string [ i ] ; } i + + ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * ) ; int length ( struct node * ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head = NULL ; int count ; generate ( & head ) ; count = length ( head ) ; printf ( " The number of nodes are : %d\n  " , count ) ; delete ( & head ) ; return 0 ; } void generate ( struct node * * head ) { int num = 10 , i ; struct node * temp ; for ( i = 0 ; i < num ; i + + ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = i ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } int length ( struct node * head ) { if ( head-> next = = NULL ) { return 1 ; } return ( 1 + length ( head-> next ) ) ; } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> #include <string.h> void main ( ) { int count = 0 , i , j = 0 , k ; char str [ 100 ] , str1 [ 20 ] ; printf ( " Enter the string\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " Enter the substring to be matched\n  " ) ; scanf ( " % [ ^\n  ] s " , str1 ) ; k = strlen ( str1 ) ; for ( i = 0 ; str [ i ] ! = '\0' ; ) { if ( str [ i ] = = ' ' ) { i + + ; } else { if ( str [ i ] = = str1 [ j ] ) { j + + ; i + + ; } else if ( j = = k ) { j = 0 ; count + + ; i-- ; } else { i + + ; j = 0 ; } } } printf ( " No of matches of substring in main string is %d\n  " , count ) ; }
#include <stdio.h> #include <string.h> char string1 [ 100 ] , visited [ 100 ] ; int count [ 100 ] = { 0 } , flag = 0 ; void main ( ) { int i , j = 0 , k = 0 , l , max , index ; printf ( " Enter a string : " ) ; scanf ( " % [ ^\n  ] s " , string1 ) ; l = strlen ( string1 ) ; for ( i = 0 ; i < l ; i + + ) { if ( i = = 0 ) { visited [ j + + ] = string1 [ i ] ; count [ j - 1 ] + + ; } else { for ( k = 0 ; k < j ; k + + ) { if ( string1 [ i ] = = visited [ k ] ) { count [ k ] + + ; flag = 1 ; } } if ( flag = = 0 ) { visited [ j + + ] = string1 [ i ] ; count [ j - 1 ] + + ; } flag = 0 ; } } for ( i = 0 ; i < j ; i + + ) { if ( ( i = = 0 ) & & ( visited [ i ] ! = ' ' ) ) { max = count [ i ] ; continue ; } if ( ( max < count [ i ] ) & & ( visited [ i ] ! = ' ' ) ) { max = count [ i ] ; index = i ; } } printf ( " \n Max repeated character in the string = %c " , visited [ index ] ) ; printf ( " \n It occurs %d times " , count [ index ] ) ; }
#include <stdio.h> char string [ 50 ] , n ; void subset ( int , int , int ) ; int main ( ) { int i , len ; printf ( " Enter the len of main set : " ) ; scanf ( " %d " , & len ) ; printf ( " Enter the elements of main set : " ) ; scanf ( " %s " , string ) ; n = len ; printf ( " The subsets are : \n  " ) ; for ( i = 1 ; i < = n ; i + + ) subset ( 0 , 0 , i ) ; } void subset ( int start , int index , int num_sub ) { int i , j ; if ( index - start + 1 = = num_sub ) { if ( num_sub = = 1 ) { for ( i = 0 ; i < n ; i + + ) printf ( " %c\n  " , string [ i ] ) ; } else { for ( j = index ; j < n ; j + + ) { for ( i = start ; i < index ; i + + ) printf ( " %c " , string [ i ] ) ; printf ( " %c\n  " , string [ j ] ) ; } if ( start ! = n - num_sub ) subset ( start + 1 , start + 1 , num_sub ) ; } } else { subset ( start , index + 1 , num_sub ) ; } }
#include <stdio.h> int find_anagram ( char [ ] , char [ ] ) ; int main ( ) { char array1 [ 100 ] , array2 [ 100 ] ; int flag ; printf ( " Enter the string\n  " ) ; gets ( array1 ) ; printf ( " Enter another string\n  " ) ; gets ( array2 ) ; flag = find_anagram ( array1 , array2 ) ; if ( flag = = 1 ) printf ( " " %s " and " %s " are anagrams.\n  " , array1 , array2 ) ; else printf ( " " %s " and " %s " are not anagrams.\n  " , array1 , array2 ) ; return 0 ; } int find_anagram ( char array1 [ ] , char array2 [ ] ) { int num1 [ 26 ] = { 0 } , num2 [ 26 ] = { 0 } , i = 0 ; while ( array1 [ i ] ! = '\0' ) { num1 [ array1 [ i ] - 'a' ] + + ; i + + ; } i = 0 ; while ( array2 [ i ] ! = '\0' ) { num2 [ array2 [ i ] -'a' ] + + ; i + + ; } for ( i = 0 ; i < 26 ; i + + ) { if ( num1 [ i ] ! = num2 [ i ] ) return 0 ; } return 1 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int search ( FILE * , char * ) ; void main ( int argc , char * argv [ ] ) { FILE * fp1 ; int p ; fp1 = fopen ( argv [ 1 ] , " r + " ) ; if ( fp1 = = NULL ) { printf ( " cannot open the file " ) ; exit ( 0 ) ; } search ( fp1 , argv [ 2 ] ) ; fclose ( fp1 ) ; } int search ( FILE * fp , char * str ) { FILE * fp1 ; fp1 = fopen ( " fp1 " , " w " ) ; char s [ 10 ] , c ; int len = strlen ( str ) ; int i = 0 ; int d ; int seek = fseek ( fp , 0 , 0 ) ; c = fgetc ( fp ) ; while ( c ! = EOF ) { if ( c = = ' ' || c = = '\n ' ) { s [ i ] = '\0' ; i = 0 ; if ( strcmp ( s , str ) = = 0 ) { while ( c = fgetc ( fp ) ! = '\n ' ) { fseek ( fp , -2L , 1 ) ; d = ftell ( fp ) ; } while ( ( c = fgetc ( fp ) ) ! = '\n ' ) { fputc ( c , fp1 ) ; } } } else { s [ i ] = c ; i + + ; } c = fgetc ( fp ) ; } return 1 ; }
#include <stdio.h> #include <string.h> char str [ 100 ] ; void main ( ) { int i , t , j , len ; printf ( " Enter a string : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; len = strlen ( str ) ; str [ len ] = ' ' ; for ( t = 0 , i = 0 ; i < strlen ( str ) ; i + + ) { if ( ( str [ i ] = = ' ' ) & & ( str [ i - 1 ] = = 's' ) ) { for ( j = t ; j < i ; j + + ) printf ( " %c " , str [ j ] ) ; t = i + 1 ; printf ( " \n  " ) ; } else { if ( str [ i ] = = ' ' ) { t = i + 1 ; } } } }
#include <stdio.h> #include <string.h> void main ( ) { int i , j , count = 0 , pos , flag = 0 ; char s1 [ 100 ] , s2 [ 10 ] , s3 [ 100 ] ; char * ptr1 , * ptr2 , * ptr3 ; printf ( " \n enter the String : " ) ; scanf ( " % [ ^\n  ] s " , s1 ) ; printf ( " \n enter the string to be inserted : " ) ; scanf ( " % [ ^\n  ] s " , s2 ) ; printf ( " \n enter the position you like to insert : " ) ; scanf ( " %d " , & pos ) ; ptr1 = s1 ; ptr3 = s3 ; for ( i = 0 , j = 0 ; * ptr1 ! = '\0' ; ptr1 + + , i + + , j + + , ptr3 + + ) { s3 [ j ] = s1 [ i ] ; if ( * ptr1 = = ' ' & & flag ! = 1 ) + + count ; if ( flag ! = 1 & & count = = pos - 1 ) { flag = 1 ; for ( ptr2 = s2 ; * ptr2 ! = '\0' ; ptr2 + + ) { s3 [ + + j ] = * ptr2 ; ptr3 + + ; } s3 [ + + j ] = ' ' ; ptr3 + + ; } } s3 [ j ] = '\0' ; printf ( " \n the string after modification is\n \n  %s\n  " , s3 ) ; }
#include <stdio.h> #include <string.h> #include <ctype.h> int main ( ) { char string [ 100 ] , matchcase [ 20 ] , c ; int i = 0 , j = 0 , index ; printf ( " Enter string : " ) ; do { fflush ( stdin ) ; c = getchar ( ) ; string [ i + + ] = tolower ( c ) ; } while ( c ! = '\n ' ) ; string [ i - 1 ] = '\0' ; printf ( " Enter substring : " ) ; i = 0 ; do { fflush ( stdin ) ; c = getchar ( ) ; matchcase [ i + + ] = tolower ( c ) ; } while ( c ! = '\n ' ) ; matchcase [ i - 1 ] = '\0' ; for ( i = 0 ; i < strlen ( string ) - strlen ( matchcase ) + 1 ; i + + ) { index = i ; if ( string [ i ] = = matchcase [ j ] ) { do { i + + ; j + + ; } while ( j ! = strlen ( matchcase ) & & string [ i ] = = matchcase [ j ] ) ; if ( j = = strlen ( matchcase ) ) { printf ( " Match found from position %d to %d.\n  " , index + 1 , i ) ; return 0 ; } else { i = index + 1 ; j = 0 ; } } } printf ( " No substring match found in the string.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> void main ( ) { int count = 0 , c = 0 , i , j = 0 , k , l , space = 0 ; char str [ 100 ] , p [ 50 ] [ 100 ] , str1 [ 20 ] , ptr1 [ 50 ] [ 100 ] , cmp [ 50 ] ; printf ( " Enter the string\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; for ( i = 0 ; i < strlen ( str ) ; i + + ) { if ( ( str [ i ] = = ' ' ) || ( str [ i ] = = ' , ' ) || ( str [ i ] = = '.' ) ) { space + + ; } } for ( i = 0 , j = 0 , k = 0 ; j < strlen ( str ) ; j + + ) { if ( ( str [ j ] = = ' ' ) || ( str [ j ] = = 44 ) || ( str [ j ] = = 46 ) ) { p [ i ] [ k ] = '\0' ; i + + ; k = 0 ; } else p [ i ] [ k + + ] = str [ j ] ; } for ( i = 0 ; i < space ; i + + )
#include <stdio.h> #include <string.h> #define SIZE 50 void main ( ) { char string [ SIZE ] , string1 [ SIZE ] , string2 [ SIZE ] ; int i , j = 0 , a = 0 , temp , len = 0 , len1 = 0 , k = 0 ; printf ( " \n Enter a string : " ) ; scanf ( " % [ ^\n  ] s " , string1 ) ; for ( i = 0 ; string1 [ i ] ! = '\0' ; i + + ) { if ( string1 [ i ] = = ' ' ) { continue ; } string [ j + + ] = string1 [ i ] ; } for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { for ( j = i + 1 ; string [ j ] ! = '\0' ; j + + ) { if ( string [ i ] > string [ j ] ) { temp = string [ i ] ; string [ i ] = string [ j ] ; string [ j ] = temp ; } } } string [ i ] = '\0' ; len = strlen ( string ) ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { if ( string [ i ] = = string [ i + 1 ] & & string [ i + 1 ] ! = '\0' ) { k + + ; continue ; } string2 [ a + + ] = string [ i ] ; string [ a ] = '\0' ; } len1 = len - k ; printf ( " The sorted string is : " ) ; for ( temp = 0 ; temp < len1 ; temp + + ) { printf ( " %c " , string2 [ temp ] ) ; } }
#include <stdio.h> #include <string.h> void main ( ) { int i , j = 0 , k = 0 ; char str [ 100 ] , str1 [ 10 ] [ 20 ] , temp , min ; printf ( " enter the string : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ' ' ) { for ( j = i ; str [ j ] ! = '\0' ; j + + ) { str [ j ] = str [ j + 1 ] ; } } } for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { for ( j = i + 1 ; str [ j ] ! = '\0' ; j + + ) { if ( str [ i ] = = str [ j ] ) { for ( k = j ; str [ k ] ! = '\0' ; k + + ) str [ k ] = str [ k + 1 ] ; j-- ; } } } for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { for ( j = 0 ; str [ j ] ! = '\0' ; j + + ) { if ( str [ j ] > str [ i ] ) { temp = str [ i ] ; str [ i ] = str [ j ] ; str [ j ] = temp ; } } } printf ( " %s " , str ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { int i = 0 , e , j , d , k , space = 0 ; char a [ 50 ] , b [ 15 ] [ 20 ] , c [ 15 ] [ 20 ] ; printf ( " Read a string : \n  " ) ; fflush ( stdin ) ; scanf ( " % [ ^\n  ] s " , a ) ; for ( i = 0 ; a [ i ] ! = '\0' ; i + + )
#include <stdio.h> #include <string.h> #include <stdlib.h> char * rep_str ( const char * s , const char * old , const char * new1 ) { char * ret ; int i , count = 0 ; int newlen = strlen ( new1 ) ; int oldlen = strlen ( old ) ; for ( i = 0 ; s [ i ] ! = '\0' ; i + + ) { if ( strstr ( & s [ i ] , old ) = = & s [ i ] ) { count + + ; i + = oldlen - 1 ; } } ret = ( char * ) malloc ( i + count * ( newlen - oldlen ) ) ; if ( ret = = NULL ) exit ( EXIT_FAILURE ) ; i = 0 ; while ( * s ) { if ( strstr ( s , old ) = = s ) { strcpy ( & ret [ i ] , new1 ) ; i + = newlen ; s + = oldlen ; } else ret [ i + + ] = * s + + ; } ret [ i ] = '\0' ; return ret ; } int main ( void ) { char mystr [ 100 ] , c [ 10 ] , d [ 10 ] ; printf ( " Enter a string along with characters to be rep_strd : \n  " ) ; gets ( mystr ) ; printf ( " Enter the character to be rep_strd : \n  " ) ; scanf ( " %s " , c ) ; printf ( " Enter the new character : \n  " ) ; scanf ( " %s " , d ) ; char * newstr = NULL ; puts ( mystr ) ; newstr = rep_str ( mystr , c , d ) ; printf ( " %s\n  " , newstr ) ; free ( newstr ) ; return 0 ; }
#include <stdio.h> #include <string.h> void main ( ) { int i , j , k , count = 0 ; char str [ 50 ] ; printf ( " enter string\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; k = strlen ( str ) ; printf ( " prime characters in a string are\n  " ) ; for ( i = 2 ; i < = k ; i + + ) { count = 0 ; for ( j = 2 ; j < = k ; j + + ) { if ( i % j = = 0 ) { count + + ; } } if ( count = = 1 ) { printf ( " %c\n  " , str [ i - 1 ] ) ; } } }
#include <stdio.h> #include <string.h> void main ( ) { char string [ 100 ] , str [ 10 ] , c [ 10 ] ; int z , occ = 0 , i = 0 , j = 0 , count = 0 , len = 0 ; printf ( " Enter a string : " ) ; scanf ( " % [ ^\n  ] s " , string ) ; printf ( " Enter the word to check its occurence : " ) ; scanf ( " %s " , str ) ; len = strlen ( str ) ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) { count = 0 ; for ( j = 0 , z = i ; j < len ; j + + , z + + ) { c [ j ] = string [ z ] ; if ( c [ j ] = = str [ j ] ) { count + + ; } } if ( count = = len & & string [ z ] = = ' ' ) { occ + + ; } } printf ( " The number of occ is %d\n  " , occ ) ; }
#include <stdio.h> #include <string.h> #include <ctype.h> #include <stdlib.h> #define CHAR_SIZE 26 void alphacheck ( char * , int [ ] ) ; void create ( char * , int [ ] ) ; int main ( ) { char str1 [ 50 ] , str2 [ 50 ] ; int a1 [ CHAR_SIZE ] = { 0 } , a2 [ CHAR_SIZE ] = { 0 } , i ; char str1_alpha [ CHAR_SIZE ] , str2_alpha [ CHAR_SIZE ] ; printf ( " Enter string1 : " ) ; scanf ( " %s " , str1 ) ; printf ( " Enter string2 : " ) ; scanf ( " %s " , str2 ) ; alphacheck ( str1 , a1 ) ; alphacheck ( str2 , a2 ) ; create ( str1_alpha , a1 ) ; create ( str2_alpha , a2 ) ; if ( strcmp ( str1_alpha , str2_alpha ) = = 0 ) { printf ( " All characters match in %s and %s.\n  " , str1 , str2 ) ; printf ( " The characters that match are : " ) ; for ( i = 0 ; i < strlen ( str1_alpha ) ; i + + ) { printf ( " %c , " , str1_alpha [ i ] ) ; } printf ( " \n  " ) ; } else { printf ( " All characters do not match in %s and %s.\n  " , str1 , str2 ) ; } return 0 ; } void alphacheck ( char * str , int a [ ] ) { int i , index ; for ( i = 0 ; i < strlen ( str ) ; i + + ) { str [ i ] = tolower ( str [ i ] ) ; index = str [ i ] - 'a' ; if ( !a [ index ] ) { a [ index ] = 1 ; } } } void create ( char * str , int a [ ] ) { int i , j = 0 ; for ( i = 0 ; i < CHAR_SIZE ; i + + ) { if ( a [ i ] ) { str [ j + + ] = i + 'a' ; } } str [ j ] = '\0' ; }
#include <stdio.h> #include <string.h> int main ( ) { char a , word [ 50 ] ; int i , freq = 0 , flag = 0 ; printf ( " Enter character : " ) ; scanf ( " %c " , & a ) ; printf ( " Now enter the word : " ) ; scanf ( " %s " , word ) ; printf ( " Positions of ' %c' in %s are : " , a , word ) ; for ( i = 0 ; i < strlen ( word ) ; i + + ) { if ( word [ i ] = = a ) { flag = 1 ; printf ( " %d " , i + 1 ) ; freq + + ; } } if ( flag ) { printf ( " \n Character ' %c' occured for %d times.\n  " , a , freq ) ; } else { printf ( " None\n  " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #include <ctype.h> struct detail { char c ; int freq ; } ; int main ( ) { struct detail s [ 26 ] ; char string [ 100 ] , c ; int i = 0 , index ; for ( i = 0 ; i < 26 ; i + + ) { s [ i ] .c = i + 'a' ; s [ i ] .freq = 0 ; } printf ( " Enter string : " ) ; i = 0 ; do { fflush ( stdin ) ; c = getchar ( ) ; string [ i + + ] = c ; if ( c = = '\n ' ) { break ; } c = tolower ( c ) ; index = c - 'a' ; s [ index ] .freq + + ; } while ( 1 ) ; string [ i - 1 ] = '\0' ; printf ( " The string entered is : %s\n  " , string ) ; printf ( " * * * * * * * * * * * * * * * * * * * * * * * * * \n Character\tFrequency\n  * * * * * * * * * * * * * * * * * * * * * * * * * \n  " ) ; for ( i = 0 ; i < 26 ; i + + ) { if ( s [ i ] .freq ) { printf ( " %c\t\t %d\n  " , s [ i ] .c , s [ i ] .freq ) ; } } return 0 ; }
#include <stdio.h> void main ( ) { char s1 [ 50 ] , s2 [ 10 ] ; int i , flag = 0 ; char * ptr1 , * ptr2 ; printf ( " \n enter the string1 : " ) ; scanf ( " % [ ^\n  ] s " , s1 ) ; printf ( " \n enter the string2 : " ) ; scanf ( " % [ ^\n  ] s " , s2 ) ; for ( i = 0 , ptr1 = s1 ; * ptr1 ! = '\0' ; ptr1 + + ) { i + + ; for ( ptr2 = s2 ; * ptr2 ! = '\0' ; ptr2 + + ) { if ( * ptr1 = = * ptr2 ) { flag = 1 ; break ; } } if ( flag = = 1 ) break ; } if ( flag = = 1 ) printf ( " \n first occurance of character of string2 in string1 is at position : %d and character is %c " , i , * ptr2 ) ; else printf ( " \n none of the characters of string1 match with mone of characters of string2 " ) ; }
#include <stdio.h> #include <string.h> void main ( ) { int i , count = 0 , pos1 , pos2 ; char str [ 50 ] , key , a [ 10 ] ; printf ( " enter the string\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " enter character to be searched\n  " ) ; scanf ( " %c " , & key ) ; for ( i = 0 ; i < = strlen ( str ) ; i + + ) { if ( key = = str [ i ] ) { count + + ; if ( count = = 1 ) { pos1 = i ; pos2 = i ; printf ( " %d\n  " , pos1 + 1 ) ; } else { pos2 = i ; } } } printf ( " %d\n  " , pos2 + 1 ) ; }
#include <stdio.h> #include <string.h> char str [ 100 ] , sub [ 100 ] ; int count = 0 , count1 = 0 ; void main ( ) { int i , j , l , l1 , l2 ; printf ( " \n Enter a string : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; l1 = strlen ( str ) ; printf ( " \n Enter a substring : " ) ; scanf ( " % [ ^\n  ] s " , sub ) ; l2 = strlen ( sub ) ; for ( i = 0 ; i < l1 ; ) { j = 0 ; count = 0 ; while ( ( str [ i ] = = sub [ j ] ) ) { count + + ; i + + ; j + + ; } if ( count = = l2 ) { count1 + + ; count = 0 ; } else i + + ; } printf ( " %s occurs %d times in %s " , sub , count1 , str ) ; }
#include <stdio.h> #include <string.h> #include <ctype.h> #include <stdlib.h> #define CHAR_SIZE 26 void alphacheck ( char * , int [ ] ) ; void create ( char [ ] , char [ ] , int [ ] ) ; int main ( ) { char str1 [ 50 ] , str2 [ 50 ] ; int a1 [ CHAR_SIZE ] = { 0 } ; char str2_rem [ 50 ] ; printf ( " Enter string1 : " ) ; scanf ( " %s " , str1 ) ; printf ( " Enter string2 : " ) ; scanf ( " %s " , str2 ) ; alphacheck ( str1 , a1 ) ; create ( str2_rem , str2 , a1 ) ; printf ( " On removing characters from second string we get : %s\n  " , str2_rem ) ; return 0 ; } void alphacheck ( char * str , int a [ ] ) { int i , index ; for ( i = 0 ; i < strlen ( str ) ; i + + ) { str [ i ] = tolower ( str [ i ] ) ; index = str [ i ] - 'a' ; if ( !a [ index ] ) { a [ index ] = 1 ; } } printf ( " \n  " ) ; } void create ( char str_rem [ ] , char str [ ] , int list [ ] ) { int i , j = 0 , index ; for ( i = 0 ; i < strlen ( str ) ; i + + ) { index = str [ i ] - 'a' ; if ( !list [ index ] ) { str_rem [ j + + ] = str [ i ] ; } } str_rem [ j ] = '\0' ; }
#include <stdio.h> #include <string.h> #include <math.h> void tostring ( char [ ] , int ) ; int toint ( char [ ] ) ; int main ( ) { char str [ 10 ] ; int num , result ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; tostring ( str , num ) ; printf ( " Number converted to string : %s\n  " , str ) ; result = toint ( str ) ; printf ( " Number converted back to integer : %d\n  " , result ) ; return 0 ; } void tostring ( char str [ ] , int num ) { int i , rem , len = 0 , n ; n = num ; while ( n ! = 0 ) { len + + ; n / = 10 ; } for ( i = 0 ; i < len ; i + + ) { rem = num % 10 ; num = num / 10 ; str [ len - ( i + 1 ) ] = rem + '0' ; } str [ len ] = '\0' ; } int toint ( char str [ ] ) { int len = strlen ( str ) ; int i , num = 0 ; for ( i = 0 ; i < len ; i + + ) { num = num + ( ( str [ len - ( i + 1 ) ] - '0' ) * pow ( 10 , i ) ) ; } return num ; }
#include <stdio.h> #include <math.h> int evaluate ( int [ ] , int ) ; int find ( int ) ; int main ( ) { int num , result ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; result = find ( num ) ; if ( result ) { printf ( " The number greater than %d and made of same digits is %d.\n  " , num , result ) ; } else { printf ( " No higher value possible. Either all numbers are same or the digits of the numbers entered are in decreasing order.\n  " ) ; } return 0 ; } int find ( int num ) { int digit [ 20 ] ; int i = 0 , len = 0 , n , temp ; n = num ; while ( n ! = 0 ) { digit [ i ] = n % 10 ; n = n / 10 ; i + + ; } len = i ; for ( i = 0 ; i < len - 1 ; i + + ) { if ( digit [ i ] > digit [ i + 1 ] ) { temp = digit [ i ] ; digit [ i ] = digit [ i + 1 ] ; digit [ i + 1 ] = temp ; return ( evaluate ( digit , len ) ) ; } } return 0 ; } int evaluate ( int digit [ ] , int len ) { int i , num = 0 ; for ( i = 0 ; i < len ; i + + ) { num + = digit [ i ] * pow ( 10 , i ) ; } return num ; }
#include <stdio.h> #include <string.h> void main ( ) { int sum = 0 , i , len ; char string1 [ 100 ] ; printf ( " Enter the string : " ) ; scanf ( " % [ ^\n  ] s " , string1 ) ; len = strlen ( string1 ) ; for ( i = 0 ; i < len ; i + + ) { sum = sum + string1 [ i ] ; } printf ( " \n Sum of all characters : %d " , sum ) ; }
#include <stdio.h> #include <malloc.h> #include <stdlib.h> void main ( ) { struct node { int num ; struct node * ptr ; } ; typedef struct node NODE ; NODE * head , * first , * temp = 0 ; int count = 0 ; int choice = 1 ; first = 0 ; while ( choice ) { head = ( NODE * ) malloc ( sizeof ( NODE ) ) ; printf ( " Enter the data item\n  " ) ; scanf ( " %d " , & head-> num ) ; if ( first ! = 0 ) { temp-> ptr = head ; temp = head ; } else { first = temp = head ; } fflush ( stdin ) ; printf ( " Do you want to continue ( Type 0 or 1 ) ?\n  " ) ; scanf ( " %d " , & choice ) ; } temp-> ptr = 0 ; temp = first ; printf ( " \n  status of the linked list is\n  " ) ; while ( temp ! = 0 ) { printf ( " %d = > " , temp-> num ) ; count + + ; temp = temp -> ptr ; } printf ( " NULL\n  " ) ; printf ( " No. of nodes in the list = %d\n  " , count ) ; }
#include <stdio.h> #include <stdlib.h> struct node { int a ; struct node * next ; } ; void generate ( struct node * * , int ) ; void search ( struct node * , int , int ) ; void delete ( struct node * * ) ; int main ( ) { struct node * head ; int key , num ; printf ( " Enter the number of nodes : " ) ; scanf ( " %d " , & num ) ; generate ( & head , num ) ; printf ( " \n Enter key to search : " ) ; scanf ( " %d " , & key ) ; search ( head , key , num ) ; delete ( & head ) ; } void generate ( struct node * * head , int num ) { int i ; struct node * temp ; for ( i = 0 ; i < num ; i + + ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> a = rand ( ) % num ; printf ( " %d " , temp-> a ) ; if ( * head = = NULL ) { * head = temp ; ( * head ) -> next = NULL ; } else { temp-> next = * head ; * head = temp ; } } } void search ( struct node * head , int key , int index ) { if ( head-> a = = key ) { printf ( " Key found at Position : %d\n  " , index ) ; } if ( head-> next = = NULL ) { return ; } search ( head-> next , key , index - 1 ) ; } void delete ( struct node * * head ) { struct node * temp ; while ( * head ! = NULL ) { temp = * head ; * head = ( * head ) -> next ; free ( temp ) ; } }
#include <stdio.h> int occur ( int [ ] , int , int ) ; int main ( ) { int size , key , count ; int list [ 20 ] ; int i ; printf ( " Enter the size of the list : " ) ; scanf ( " %d " , & size ) ; printf ( " Printing the list : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { list [ i ] = rand ( ) % size ; printf ( " %d " , list [ i ] ) ; } printf ( " \n Enter the key to find it's occurence : " ) ; scanf ( " %d " , & key ) ; count = occur ( list , size , key ) ; printf ( " %d occurs for %d times.\n  " , key , count ) ; return 0 ; } int occur ( int list [ ] , int size , int key ) { int i , count = 0 ; for ( i = 0 ; i < size ; i + + ) { if ( list [ i ] = = key ) { count + = 1 ; } } return count ; }
#include <stdio.h> #include <malloc.h> struct node { struct node * left ; char data ; struct node * right ; } ; struct node * constructTree ( int ) ; void inorder ( struct node * ) ; char array [ ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , '\0' , '\0' , 'H' } ; int leftcount [ ] = { 1 , 3 , 5 , -1 , 9 , -1 , -1 , -1 , -1 , -1 } ; int rightcount [ ] = { 2 , 4 , 6 , -1 , -1 , -1 , -1 , -1 , -1 , -1 } ; void main ( ) { struct node * root ; root = constructTree ( 0 ) ; printf ( " In-order Traversal : \n  " ) ; inorder ( root ) ; } struct node * constructTree ( int index ) { struct node * temp = NULL ; if ( index ! = -1 ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> left = constructTree ( leftcount [ index ] ) ; temp-> data = array [ index ] ; temp-> right = constructTree ( rightcount [ index ] ) ; } return temp ; } void inorder ( struct node * root ) { if ( root ! = NULL ) { inorder ( root-> left ) ; printf ( " %c\t " , root-> data ) ; inorder ( root-> right ) ; } }
#include <stdio.h> #include <stdlib.h> struct node { int num ; struct node * next ; } ; void create ( struct node * * ) ; void makecycle ( struct node * * ) ; void release ( struct node * * ) ; int detectcycle ( struct node * ) ; int main ( ) { struct node * p = NULL ; int result ; printf ( " Enter data into the list\n  " ) ; create ( & p ) ; makecycle ( & p ) ;
#include <stdio.h> #include <stdlib.h> struct node { int num ; struct node * next ; struct node * prev ; } ; void create ( struct node * * ) ; int max ( struct node * ) ; void release ( struct node * * ) ; int main ( ) { struct node * p = NULL ; int n ; printf ( " Enter data into the list\n  " ) ; create ( & p ) ; n = max ( p ) ; printf ( " The maximum number entered in the list is %d.\n  " , n ) ; release ( & p ) ; return 0 ; } int max ( struct node * head ) { struct node * max , * q ; q = max = head ; while ( q ! = NULL ) { if ( q-> num > max-> num ) { max = q ; } q = q-> next ; } return ( max-> num ) ; } void create ( struct node * * head ) { int c , ch ; struct node * temp , * rear ; do { printf ( " Enter number : " ) ; scanf ( " %d " , & c ) ; temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> num = c ; temp-> next = NULL ; temp-> prev = NULL ; if ( * head = = NULL ) { * head = temp ; } else { rear-> next = temp ; temp-> prev = rear ; } rear = temp ; printf ( " Do you wish to continue [ 1 / 0 ] : " ) ; scanf ( " %d " , & ch ) ; } while ( ch ! = 0 ) ; printf ( " \n  " ) ; } void release ( struct node * * head ) { struct node * temp = * head ; * head = ( * head ) -> next ; while ( ( * head ) ! = NULL ) { free ( temp ) ; temp = * head ; ( * head ) = ( * head ) -> next ; } }
#include <stdio.h> #include <stdlib.h> struct node { int num ; struct node * next ; } ; void create ( struct node * * ) ; void middlenode ( struct node * ) ; void release ( struct node * * ) ; int main ( ) { struct node * p = NULL ; printf ( " Enter data into the list\n  " ) ; create ( & p ) ; middlenode ( p ) ; release ( & p ) ; return 0 ; } void middlenode ( struct node * head ) { struct node * p , * q ; int flag = 0 ; q = p = head ; while ( q-> next ! = NULL ) { q = q-> next ; if ( flag ) { p = p-> next ; } flag = !flag ; } if ( flag ) { printf ( " List contains even number of nodes\n The middle two node's values are : %d %d\n  " , p-> next-> num , p-> num ) ; } else { printf ( " The middle node of the list is : %d\n  " , p-> num ) ; } } void create ( struct node * * head ) { int c , ch ; struct node * temp ; do { printf ( " Enter number : " ) ; scanf ( " %d " , & c ) ; temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> num = c ; temp-> next = * head ; * head = temp ; printf ( " Do you wish to continue [ 1 / 0 ] : " ) ; scanf ( " %d " , & ch ) ; } while ( ch ! = 0 ) ; printf ( " \n  " ) ; } void release ( struct node * * head ) { struct node * temp = * head ; * head = ( * head ) -> next ; while ( ( * head ) ! = NULL ) { free ( temp ) ; temp = * head ; ( * head ) = ( * head ) -> next ; } }
#include <stdio.h> #include <stdlib.h> #include <ctype.h> struct node { int num ; struct node * next ; } ; int feednumber ( struct node * * ) ; void release ( struct node * * ) ; void display ( struct node * ) ; int main ( ) { struct node * p = NULL ; int pcount = 0 , qcount = 0 ; printf ( " Enter number of any length\n  " ) ; pcount = feednumber ( & p ) ; printf ( " Number of integers entered are : %d\n  " , pcount ) ; printf ( " Displaying the number entered : \n  " ) ; display ( p ) ; release ( & p ) ; return 0 ; } int feednumber ( struct node * * head ) { char ch , dig ; int count = 0 ; struct node * temp , * rear = NULL ; ch = getchar ( ) ; while ( ch ! = '\n ' ) { dig = atoi ( & ch ) ; temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp-> num = dig ; temp-> next = NULL ; count + + ; if ( ( * head ) = = NULL ) { * head = temp ; rear = temp ; } else { rear-> next = temp ; rear = rear-> next ; } ch = getchar ( ) ; } return count ; } void display ( struct node * head ) { while ( head ! = NULL ) { printf ( " %d " , head-> num ) ; head = head-> next ; } printf ( " \n  " ) ; } void release ( struct node * * head ) { struct node * temp = * head ; while ( ( * head ) ! = NULL ) { ( * head ) = ( * head ) -> next ; free ( temp ) ; temp = * head ; } }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define MAX 50 int top = -1 , front = 0 ; int stack [ MAX ] ; void push ( char ) ; void pop ( ) ; void main ( ) { int i , choice ; char s [ MAX ] , b ; while ( 1 ) { printf ( " 1-enter string\n 2-exit\n  " ) ; printf ( " enter your choice\n  " ) ; scanf ( " %d " , & choice ) ; switch ( choice ) { case 1 : printf ( " Enter the String\n  " ) ; scanf ( " %s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; i + + ) { b = s [ i ] ; push ( b ) ; } for ( i = 0 ; i < ( strlen ( s ) / 2 ) ; i + + ) { if ( stack [ top ] = = stack [ front ] ) { pop ( ) ; front + + ; } else { printf ( " %s is not a palindrome\n  " , s ) ; break ; } } if ( ( strlen ( s ) / 2 ) = = front ) printf ( " %s is palindrome\n  " , s ) ; front = 0 ; top = -1 ; break ; case 2 : exit ( 0 ) ; default : printf ( " enter correct choice\n  " ) ; } } } void push ( char a ) { top + + ; stack [ top ] = a ; } void pop ( ) { top-- ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int top = -1 ; char stack [ 100 ] ;
#include <stdio.h> #include <stdlib.h> #include <string.h> #define MAX 50 int top = -1 , front = 0 ; int stack [ MAX ] ; void push ( char ) ; void pop ( ) ; void main ( ) { int i , choice ; char s [ MAX ] , b ; while ( 1 ) { printf ( " 1-enter string\n 2-exit\n  " ) ; printf ( " enter your choice\n  " ) ; scanf ( " %d " , & choice ) ; switch ( choice ) { case 1 : printf ( " Enter the String\n  " ) ; scanf ( " %s " , s ) ; for ( i = 0 ; s [ i ] ! = '\0' ; i + + ) { b = s [ i ] ; push ( b ) ; } for ( i = 0 ; i < ( strlen ( s ) / 2 ) ; i + + ) { if ( stack [ top ] = = stack [ front ] ) { pop ( ) ; front + + ; } else { printf ( " %s is not a palindrome\n  " , s ) ; break ; } } if ( ( strlen ( s ) / 2 ) = = front ) printf ( " %s is palindrome\n  " , s ) ; front = 0 ; top = -1 ; break ; case 2 : exit ( 0 ) ; default : printf ( " enter correct choice\n  " ) ; } } } void push ( char a ) { top + + ; stack [ top ] = a ; } void pop ( ) { top-- ; }
#include <stdio.h> #include <stdlib.h> #define MAX 10 struct node { int data ; struct node * link ; } * front , * rear ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * link ; } * top = NULL ; #define MAX 5
#include <stdio.h> #include <stdlib.h> #define QUEUE_EMPTY_MAGIC 0xdeadbeeftypedef struct _queue_t { int * arr ; int rear , front , count , max ; } queue_t ; queue_t * queue_allocate ( int n ) ; void queue_insert ( queue_t * q , int v ) ; int queue_remove ( queue_t * q ) ; int queue_count ( queue_t * q ) ; int queue_is_empty ( queue_t * q ) ; void stack_push ( queue_t * q , int v ) { queue_insert ( q , v ) ; } int stack_pop ( queue_t * q ) { int i , n = queue_count ( q ) ; int removed_element ; for ( i = 0 ; i < ( n - 1 ) ; i + + ) { removed_element = queue_remove ( q ) ; queue_insert ( q , removed_element ) ;
#include <stdio.h> void selection ( int [ ] , int , int , int , int ) ; int main ( ) { int list [ 30 ] , size , temp , i , j ; printf ( " Enter the size of the list : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter the elements in list : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & list [ i ] ) ; } selection ( list , 0 , 0 , size , 1 ) ; printf ( " The sorted list in ascending order is\n  " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , list [ i ] ) ; } return 0 ; } void selection ( int list [ ] , int i , int j , int size , int flag ) { int temp ; if ( i < size - 1 ) { if ( flag ) { j = i + 1 ; } if ( j < size ) { if ( list [ i ] > list [ j ] ) { temp = list [ i ] ; list [ i ] = list [ j ] ; list [ j ] = temp ; } selection ( list , i , j + 1 , size , 0 ) ; } selection ( list , i + 1 , 0 , size , 1 ) ; } }
#include <stdio.h> int findmax ( int b [ 10 ] , int k ) ; void exchang ( int b [ 10 ] , int k ) ; void main ( ) { int array [ 10 ] ; int i , j , n , temp ; printf ( " Enter the value of n \n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the elements one by one \n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } printf ( " Input array elements \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; } exchang ( array , n ) ; printf ( " Sorted array is...\n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d\n  " , array [ i ] ) ; } } int findmax ( int b [ 10 ] , int k ) { int max = 0 , j ; for ( j = 1 ; j < = k ; j + + ) { if ( b [ j ] > b [ max ] ) { max = j ; } } return ( max ) ; } void exchang ( int b [ 10 ] , int k ) { int temp , big , j ; for ( j = k - 1 ; j > = 1 ; j-- ) { big = findmax ( b , j ) ; temp = b [ big ] ; b [ big ] = b [ j ] ; b [ j ] = temp ; } return ; }
#include <stdio.h> void quicksort ( int [ ] , int , int ) ; int main ( ) { int list [ 50 ] ; int size , i ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter the elements to be sorted : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & list [ i ] ) ; } quicksort ( list , 0 , size - 1 ) ; printf ( " After applying quick sort\n  " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , list [ i ] ) ; } printf ( " \n  " ) ; return 0 ; } void quicksort ( int list [ ] , int low , int high ) { int pivot , i , j , temp ; if ( low < high ) { pivot = low ; i = low ; j = high ; while ( i < j ) { while ( list [ i ] < = list [ pivot ] & & i < = high ) { i + + ; } while ( list [ j ] > list [ pivot ] & & j > = low ) { j-- ; } if ( i < j ) { temp = list [ i ] ; list [ i ] = list [ j ] ; list [ j ] = temp ; } } temp = list [ j ] ; list [ j ] = list [ pivot ] ; list [ pivot ] = temp ; quicksort ( list , low , j - 1 ) ; quicksort ( list , j + 1 , high ) ; } }
#include <stdio.h> void binary_search ( int [ ] , int , int , int ) ; void bubble_sort ( int [ ] , int ) ; int main ( ) { int key , size , i ; int list [ 25 ] ; printf ( " Enter size of a list : " ) ; scanf ( " %d " , & size ) ; printf ( " Generating random numbers\n  " ) ; for ( i = 0 ; i < size ; i + + ) { list [ i ] = rand ( ) % 100 ; printf ( " %d " , list [ i ] ) ; } bubble_sort ( list , size ) ; printf ( " \n \n  " ) ; printf ( " Enter key to search\n  " ) ; scanf ( " %d " , & key ) ; binary_search ( list , 0 , size , key ) ; } void bubble_sort ( int list [ ] , int size ) { int temp , i , j ; for ( i = 0 ; i < size ; i + + ) { for ( j = i ; j < size ; j + + ) { if ( list [ i ] > list [ j ] ) { temp = list [ i ] ; list [ i ] = list [ j ] ; list [ j ] = temp ; } } } } void binary_search ( int list [ ] , int lo , int hi , int key ) { int mid ; if ( lo > hi ) { printf ( " Key not found\n  " ) ; return ; } mid = ( lo + hi ) / 2 ; if ( list [ mid ] = = key ) { printf ( " Key found\n  " ) ; } else if ( list [ mid ] > key ) { binary_search ( list , lo , mid - 1 , key ) ; } else if ( list [ mid ] < key ) { binary_search ( list , mid + 1 , hi , key ) ; } } }
#include <stdio.h> #define MAX 7 void insertion_sort ( int * ) ; void main ( ) { int a [ MAX ] , i ; printf ( " enter elements to be sorted : " ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } insertion_sort ( a ) ; printf ( " sorted elements : \n  " ) ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " %d " , a [ i ] ) ; } } void insertion_sort ( int * x ) { int temp , i , j ; for ( i = 1 ; i < MAX ; i + + ) { temp = x [ i ] ; j = i - 1 ; while ( temp < x [ j ] & & j > = 0 ) { x [ j + 1 ] = x [ j ] ; j = j - 1 ; } x [ j + 1 ] = temp ; } }
#include <stdio.h> int min = 0 , count = 0 , array [ 100 ] = { 0 } , array1 [ 100 ] = { 0 } ; void main ( ) { int k , i , j , temp , t , n ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & count ) ; printf ( " Enter elements into array : " ) ; for ( i = 0 ; i < count ; i + + ) { scanf ( " %d " , & array [ i ] ) ; array1 [ i ] = array [ i ] ; } for ( k = 0 ; k < 3 ; k + + ) { for ( i = 0 ; i < count ; i + + ) { min = array [ i ] % 10 ; t = i ; for ( j = i + 1 ; j < count ; j + + ) { if ( min > ( array [ j ] % 10 ) ) { min = array [ j ] % 10 ; t = j ; } } temp = array1 [ t ] ; array1 [ t ] = array1 [ i ] ; array1 [ i ] = temp ; temp = array [ t ] ; array [ t ] = array [ i ] ; array [ i ] = temp ; } for ( j = 0 ; j < count ; j + + ) array [ j ] = array [ j ] / 10 ; } printf ( " Sorted Array ( lSdradix sort ) : " ) ; for ( i = 0 ; i < count ; i + + ) printf ( " %d " , array1 [ i ] ) ; }
#include <stdio.h> void main ( ) { int i , temp , ar [ 10 ] , n ; printf ( " \n enter the elemts number u would like to enter : " ) ; scanf ( " %d " , & n ) ; printf ( " \n enter the elements to be sorted through gnome sort : \n  " ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & ar [ i ] ) ; i = 0 ; while ( i < n ) { if ( i = = 0 || ar [ i - 1 ] < = ar [ i ] ) i + + ; else { temp = ar [ i-1 ] ; ar [ i - 1 ] = ar [ i ] ; ar [ i ] = temp ; i = i - 1 ; } } for ( i = 0 ; i < n ; i + + ) printf ( " %d\t " , ar [ i ] ) ; }
#include <stdio.h> #include <stdio.h> #include <stdlib.h> #include <string.h> struct s { char empname [ 5 ] ; int empid ; } ; int int_call ( const void * a1 , const void * b1 ) { const int * a = ( const int * ) a1 ; const int * b = ( const int * ) b1 ; if ( * a > * b ) return 1 ; else { if ( * a = = * b ) return 0 ; else return -1 ; } } int string_call ( const void * a1 , const void * b1 ) { const char * a = ( const char * ) a1 ; const char * b = ( const char * ) b1 ; return ( strcmp ( a , b ) ) ; } void main ( ) { int array1 [ 5 ] = { 20 , 30 , 50 , 60 , 10 } ; struct s emprec [ 5 ] ; int i , j ; strcpy ( emprec [ 0 ] .empname , " bbb " ) ; emprec [ 0 ] .empid = 100 ; strcpy ( emprec [ 1 ] .empname , " ccc " ) ; emprec [ 1 ] .empid = 200 ; strcpy ( emprec [ 2 ] .empname , " eee " ) ; emprec [ 2 ] .empid = 300 ; strcpy ( emprec [ 3 ] .empname , " aaa " ) ; emprec [ 3 ] .empid = 400 ; strcpy ( emprec [ 4 ] .empname , " ddd " ) ; emprec [ 4 ] .empid = 500 ; qsort ( array1 , 5 , sizeof ( int ) , int_call ) ; qsort ( emprec , 5 , sizeof ( struct s ) , string_call ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " %d\t " , array1 [ i ] ) ; printf ( " \n Sorting of Structure elements " ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " \n  %s\t %d " , emprec [ i ] .empname , emprec [ i ] .empid ) ; printf ( " \n  " ) ; }
#include <stdio.h> #define MAX 7 void pigeonhole_sort ( int , int , int * ) ; void main ( ) { int a [ MAX ] , i , min , max ; printf ( " enter the values into the matrix : " ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } min = a [ 0 ] ; max = a [ 0 ] ; for ( i = 1 ; i < MAX ; i + + ) { if ( a [ i ] < min ) { min = a [ i ] ; } if ( a [ i ] > max ) { max = a [ i ] ; } } pigeonhole_sort ( min , max , a ) ; printf ( " Sorted order is : \n  " ) ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " %d " , a [ i ] ) ; } } void pigeonhole_sort ( int mi , int ma , int * a ) { int size , count = 0 , i ; int * current ; current = a ; size = ma - mi + 1 ; int holes [ size ] ; for ( i = 0 ; i < size ; i + + ) { holes [ i ] = 0 ; } for ( i = 0 ; i < size ; i + + , current + + ) { holes [ * current-mi ] + = 1 ; } for ( count = 0 , current = & a [ 0 ] ; count < size ; count + + ) { while ( holes [ count ] --> 0 ) { * current + + = count + mi ; } } }
#include <stdio.h> #define MAX 8 void cycle_sort ( int * ) ; void main ( ) { int a [ MAX ] , i ; printf ( " enter the elements into array : " ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } cycle_sort ( a ) ; printf ( " sorted elements are : \n  " ) ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " %d " , a [ i ] ) ; } } void cycle_sort ( int * a ) { int temp , item , pos , i , j , k ; for ( i = 0 ; i < MAX ; i + + ) { item = a [ i ] ; pos = i ; do { k = 0 ; for ( j = 0 ; j < MAX ; j + + ) { if ( pos ! = j & & a [ j ] < item ) { k + + ; } } if ( pos ! = k ) { while ( pos ! = k & & item = = a [ k ] ) { k + + ; } temp = a [ k ] ; a [ k ] = item ; item = temp ; pos = k ; } } while ( pos ! = i ) ; } }
#include <stdio.h> #define MAX 8 int main ( ) { int data [ MAX ] ; int i , j , n , c ; printf ( " \n Enter the data " ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & data [ i ] ) ; } n = MAX ; do { for ( i = 0 ; i < n - 1 ; i + + ) { if ( data [ i ] > data [ i + 1 ] ) { data [ i ] = data [ i ] + data [ i + 1 ] ; data [ i + 1 ] = data [ i ] - data [ i + 1 ] ; data [ i ] = data [ i ] - data [ i + 1 ] ; } } n = n - 1 ; for ( i = MAX - 1 , c = 0 ; i > = c ; i-- ) { if ( data [ i ] < data [ i - 1 ] ) { data [ i ] = data [ i ] + data [ i - 1 ] ; data [ i - 1 ] = data [ i ] - data [ i - 1 ] ; data [ i ] = data [ i ] - data [ i - 1 ] ; } } c = c + 1 ; } while ( n ! = 0 & & c ! = 0 ) ; printf ( " The sorted elements are : " ) ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " %d\t " , data [ i ] ) ; } }
#include <stdio.h> #include <stdlib.h> #define MAX 8#define SWAP ( x , y ) t = x ; x = y ; y = t ; void compare ( ) ; void bitonicmerge ( int , int , int ) ; void recbitonic ( int , int , int ) ; void sort ( ) ; int data [ MAX ] ; int up = 1 ; int down = 0 ; int main ( ) { int i ; printf ( " \n Enter the data " ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & data [ i ] ) ; } sort ( ) ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " %d " , data [ i ] ) ; } } void compare ( int i , int j , int dir ) { int t ; if ( dir = = ( data [ i ] > data [ j ] ) ) { SWAP ( data [ i ] , data [ j ] ) ; } } void bitonicmerge ( int low , int c , int dir ) { int k , i ; if ( c > 1 ) { k = c / 2 ; for ( i = low ; i < low + k ; i + + ) compare ( i , i + k , dir ) ; bitonicmerge ( low , k , dir ) ; bitonicmerge ( low + k , k , dir ) ; } } void recbitonic ( int low , int c , int dir ) { int k ; if ( c > 1 ) { k = c / 2 ; recbitonic ( low , k , up ) ; recbitonic ( low + k , k , down ) ; bitonicmerge ( low , c , dir ) ; } } void sort ( ) { recbitonic ( 0 , MAX , up ) ; }
#include <stdio.h> #include <stdlib.h> int newgap ( int gap ) { gap = ( gap * 10 ) / 13 ; if ( gap = = 9 || gap = = 10 ) gap = 11 ; if ( gap < 1 ) gap = 1 ; return gap ; } void combsort ( int a [ ] , int aSize ) { int gap = aSize ; int temp , i ; for ( ; ; ) { gap = newgap ( gap ) ; int swapped = 0 ; for ( i = 0 ; i < aSize - gap ; i + + ) { int j = i + gap ; if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; swapped = 1 ; } } if ( gap = = 1 & & !swapped ) break ; } } int main ( ) { int n , i ; int * a ; printf ( " Please insert the number of elements to be sorted : " ) ; scanf ( " %d " , & n ) ;
#include <stdio.h> #include <stdlib.h> void do_flip ( int * , int , int ) ; int pancake_sort ( int * list , unsigned int length ) { if ( length < 2 ) return 0 ; int i , a , max_num_pos , moves ; moves = 0 ; for ( i = length ; i > 1 ; i-- ) { max_num_pos = 0 ; for ( a = 0 ; a < i ; a + + ) { if ( list [ a ] > list [ max_num_pos ] ) max_num_pos = a ; } if ( max_num_pos = = i - 1 ) continue ; if ( max_num_pos ) { moves + + ; do_flip ( list , length , max_num_pos + 1 ) ; } do_flip ( list , length , i ) ; } return moves ; } void do_flip ( int * list , int length , int num ) { int swap ; int i = 0 ; for ( i ; i < --num ; i + + ) { swap = list [ i ] ; list [ i ] = list [ num ] ; list [ num ] = swap ; } } void print_array ( int list [ ] , int length ) { int i ; for ( i = 0 ; i < length ; i + + ) { printf ( " %d " , list [ i ] ) ; } } int main ( int argc , char * * argv ) { int list [ 9 ] ; int i ; printf ( " enter the 9 elements of array : \n  " ) ; for ( i = 0 ; i < 9 ; i + + ) scanf ( " %d " , & list [ i ] ) ; printf ( " \n Original : " ) ; print_array ( list , 9 ) ; int moves = pancake_sort ( list , 9 ) ; printf ( " \n Sorted : " ) ; print_array ( list , 9 ) ; printf ( " - with a total of %d moves\n  " , moves ) ; }
#include <stdio.h> #include <stdlib.h> #define size 7 int is_sorted ( int * , int ) ; void shuffle ( int * , int ) ; void bogosort ( int * , int ) ; int main ( ) { int numbers [ size ] ; int i ; printf ( " Enter the elements of array : " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & numbers [ i ] ) ; } bogosort ( numbers , size ) ; printf ( " The array after sorting is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d\n  " , numbers [ i ] ) ; } printf ( " \n  " ) ; } int is_sorted ( int * a , int n ) { while ( --n > = 1 ) { if ( a [ n ] < a [ n - 1 ] ) { return 0 ; } } return 1 ; } void shuffle ( int * a , int n ) { int i , t , temp ; for ( i = 0 ; i < n ; i + + ) { t = a [ i ] ; temp = rand ( ) % n ; a [ i ] = a [ temp ] ; a [ temp ] = t ; } } void bogosort ( int * a , int n ) { while ( !is_sorted ( a , n ) ) { shuffle ( a , n ) ; } }
#include <stdio.h> #define size 7 int shell_sort ( int [ ] ) ; void main ( ) { int arr [ size ] , i ; printf ( " Enter the elements to be sorted : " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } shell_sort ( arr ) ; printf ( " The array after sorting is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " \n  %d " , arr [ i ] ) ; } } int shell_sort ( int array [ ] ) { int i = 0 , j = 0 , k = 0 , mid = 0 ; for ( k = size / 2 ; k > 0 ; k / = 2 ) { for ( j = k ; j < size ; j + + ) { for ( i = j - k ; i > = 0 ; i - = k ) { if ( array [ i + k ] > = array [ i ] ) { break ; } else { mid = array [ i ] ; array [ i ] = array [ i + k ] ; array [ i + k ] = mid ; } } } } return 0 ; }
#include <stdio.h> void Bucket_Sort ( int array [ ] , int n ) { int i , j ; int count [ n ] ; for ( i = 0 ; i < n ; i + + ) count [ i ] = 0 ; for ( i = 0 ; i < n ; i + + ) ( count [ array [ i ] ] ) + + ; for ( i = 0 , j = 0 ; i < n ; i + + ) for ( ; count [ i ] > 0 ; ( count [ i ] ) -- ) array [ j + + ] = i ; } int main ( ) { int array [ 100 ] , i , num ; printf ( " Enter the size of array : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the %d elements to be sorted : \n  " , num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & array [ i ] ) ; printf ( " \n The array of elements before sorting : \n  " ) ; for ( i = 0 ; i < num ; i + + ) printf ( " %d " , array [ i ] ) ; printf ( " \n The array of elements after sorting : \n  " ) ; Bucket_Sort ( array , num ) ; for ( i = 0 ; i < num ; i + + ) printf ( " %d " , array [ i ] ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> void countingsort ( int arr [ ] , int k , int n ) { int i , j ; int B [ 15 ] , C [ 100 ] ; for ( i = 0 ; i < = k ; i + + ) C [ i ] = 0 ; for ( j = 1 ; j < = n ; j + + ) C [ arr [ j ] ] = C [ arr [ j ] ] + 1 ; for ( i = 1 ; i < = k ; i + + ) C [ i ] = C [ i ] + C [ i-1 ] ; for ( j = n ; j > = 1 ; j-- ) { B [ C [ arr [ j ] ] ] = arr [ j ] ; C [ arr [ j ] ] = C [ arr [ j ] ] - 1 ; } printf ( " \n The Sorted array is : \n  " ) ; for ( i = 1 ; i < = n ; i + + ) printf ( " %d " , B [ i ] ) ; } int main ( ) { int n , i , k = 0 , arr [ 15 ] ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter the elements to be sorted : \n  " ) ; for ( i = 1 ; i < = n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; if ( arr [ i ] > k ) { k = arr [ i ] ; } } countingsort ( arr , k , n ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * left , * right ; } ; typedef struct btnode node ; void insert ( node * , node * ) ; void inorder ( node * ) ; void largest ( node * ) ; void main ( ) { node * root = NULL , * new = NULL ; int num = 1 ; printf ( " Enter the elements of the tree ( enter 0 to exit ) \n  " ) ; while ( 1 ) { scanf ( " %d " , & num ) ; if ( num = = 0 ) break ; new = malloc ( sizeof ( node ) ) ; new-> left = new-> right = NULL ; new-> value = num ; if ( root = = NULL ) root = new ; else { insert ( new , root ) ; } } printf ( " elements in a tree in inorder are\n  " ) ; inorder ( root ) ; largest ( root ) ; } void inorder ( node * root ) { if ( root ! = NULL ) { inorder ( root-> left ) ; printf ( " %d -> " , root-> value ) ; inorder ( root-> right ) ; } } void insert ( node * new , node * root ) { if ( new-> value > root-> value ) { if ( root-> right = = NULL ) root-> right = new ; else insert ( new , root-> right ) ; } if ( new-> value < root-> value ) { if ( root-> left = = NULL ) root-> left = new ; else insert ( new , root-> left ) ; } } void largest ( node * root ) { if ( root-> right = = NULL ) { printf ( " largest element is %d " , root-> value ) ; } while ( root ! = NULL & & root-> right ! = NULL ) { root = root-> right ; } printf ( " \n largest value is %d\n  " , root-> value ) ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; typedef struct btnode bt ; bt * root ; bt * new , * list ; bt * create_node ( ) ; void display ( bt * ) ; void construct_tree ( ) ; void dfs ( bt * ) ; void main ( ) { construct_tree ( ) ; display ( root ) ; printf ( " \n  " ) ; printf ( " Depth first traversal\n  " ) ; dfs ( root ) ; } bt * create_node ( ) { new = ( bt * ) malloc ( sizeof ( bt ) ) ; new-> l = NULL ; new-> r = NULL ; } void construct_tree ( ) { root = create_node ( ) ; root-> value = 50 ; root-> l = create_node ( ) ; root-> l-> value = 20 ; root-> r = create_node ( ) ; root-> r-> value = 30 ; root-> l-> l = create_node ( ) ; root-> l-> l-> value = 70 ; root-> l-> r = create_node ( ) ; root-> l-> r-> value = 80 ; root-> l-> r-> r = create_node ( ) ; root-> l-> r-> r-> value = 60 ; root-> l-> l-> l = create_node ( ) ; root-> l-> l-> l-> value = 10 ; root-> l-> l-> r = create_node ( ) ; root-> l-> l-> r-> value = 40 ; } void display ( bt * list ) { if ( list = = NULL ) { return ; } display ( list-> l ) ; printf ( " -> %d " , list-> value ) ; display ( list-> r ) ; } void dfs ( bt * list ) { if ( list = = NULL ) { return ; } dfs ( list-> l ) ; dfs ( list-> r ) ; printf ( " -> %d " , list-> value ) ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; typedef struct btnode N ; N * bst ( int arr [ ] , int first , int last ) ; N * new ( int val ) ; void display ( N * temp ) ; int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 60 , 80 , 90 } ; N * root = ( N * ) malloc ( sizeof ( N ) ) ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) , i ; printf ( " Given sorted array is\n  " ) ; for ( i = 0 ; i < n ; i + + ) printf ( " %d\t " , arr [ i ] ) ; root = bst ( arr , 0 , n - 1 ) ; printf ( " \n  The preorder traversal of binary search tree is as follows\n  " ) ; display ( root ) ; printf ( " \n  " ) ; return 0 ; } N * new ( int val ) { N * node = ( N * ) malloc ( sizeof ( N ) ) ; node-> value = val ; node-> l = NULL ; node-> r = NULL ; return node ; } N * bst ( int arr [ ] , int first , int last ) { int mid ; N * temp = ( N * ) malloc ( sizeof ( N ) ) ; if ( first > last ) return NULL ; mid = ( first + last ) / 2 ; temp = new ( arr [ mid ] ) ; temp-> l = bst ( arr , first , mid - 1 ) ; temp-> r = bst ( arr , mid + 1 , last ) ; return temp ; } void display ( N * temp ) { printf ( " %d-> " , temp-> value ) ; if ( temp-> l ! = NULL ) display ( temp-> l ) ; if ( temp-> r ! = NULL ) display ( temp-> r ) ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; typedef struct btnode bt ; bt * root ; bt * new , * list ; int count = 0 ; bt * create_node ( ) ; void display ( bt * ) ; void construct_tree ( ) ; void count_leaf ( bt * ) ; void main ( ) { construct_tree ( ) ; display ( root ) ; count_leaf ( root ) ; printf ( " \n  leaf nodes are : %d " , count ) ; } bt * create_node ( ) { new = ( bt * ) malloc ( sizeof ( bt ) ) ; new-> l = NULL ; new-> r = NULL ; } void construct_tree ( ) { root = create_node ( ) ; root-> value = 50 ; root-> l = create_node ( ) ; root-> l-> value = 20 ; root-> r = create_node ( ) ; root-> r-> value = 30 ; root-> l-> l = create_node ( ) ; root-> l-> l-> value = 70 ; root-> l-> r = create_node ( ) ; root-> l-> r-> value = 80 ; root-> l-> r-> r = create_node ( ) ; root-> l-> r-> r-> value = 60 ; root-> l-> l-> l = create_node ( ) ; root-> l-> l-> l-> value = 10 ; root-> l-> l-> r = create_node ( ) ; root-> l-> l-> r-> value = 40 ; } void display ( bt * list ) { if ( list = = NULL ) { return ; } display ( list-> l ) ; printf ( " -> %d " , list-> value ) ; display ( list-> r ) ; } void count_leaf ( bt * list ) { if ( list = = NULL ) { return ; } if ( list-> l = = NULL & & list-> r = = NULL ) { count + + ; } count_leaf ( list-> l ) ; count_leaf ( list-> r ) ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; void createbinary ( ) ; void preorder ( node * ) ; int count ( node * ) ; node * add ( int ) ; typedef struct btnode node ; node * ptr , * root = NULL ; int main ( ) { int c ; createbinary ( ) ; preorder ( root ) ; c = count ( root ) ; printf ( " \n Number of nodes in binary tree are : %d\n  " , c ) ; } void createbinary ( ) { root = add ( 50 ) ; root-> l = add ( 20 ) ; root-> r = add ( 30 ) ; root-> l-> l = add ( 70 ) ; root-> l-> r = add ( 80 ) ; root-> l-> l-> l = add ( 10 ) ; root-> l-> l-> r = add ( 40 ) ; root-> l-> r-> r = add ( 60 ) ; } node * add ( int val ) { ptr = ( node * ) malloc ( sizeof ( node ) ) ; if ( ptr = = NULL ) { printf ( " Memory was not allocated " ) ; return ; } ptr-> value = val ; ptr-> l = NULL ; ptr-> r = NULL ; return ptr ; } int count ( node * n ) { int c = 1 ; if ( n = = NULL ) return 0 ; else { c + = count ( n-> l ) ; c + = count ( n-> r ) ; return c ; } } void preorder ( node * t ) { if ( t ! = NULL ) { printf ( " %d-> " , t-> value ) ; preorder ( t-> l ) ; preorder ( t-> r ) ; } }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; struct btnode * root ; typedef struct btnode bt ; bt * new , * ptr , * ptr1 , * ptr2 ; bt * create ( ) { new = ( bt * ) malloc ( sizeof ( bt ) ) ; new-> l = NULL ; new-> r = NULL ; return new ; } void construct_binary_tree ( ) { root = create ( ) ; root-> value = 50 ; ptr = create ( ) ; root-> l = ptr ; ptr-> value = 20 ; ptr1 = create ( ) ; ptr-> l = ptr1 ; ptr1-> value = 70 ; ptr2 = create ( ) ; ptr1-> l = ptr2 ; ptr2-> value = 10 ; ptr2 = create ( ) ; ptr1-> r = ptr2 ; ptr2-> value = 40 ; ptr1 = create ( ) ; ptr-> r = ptr1 ; ptr1-> value = 80 ; ptr2 = create ( ) ; ptr1-> r = ptr2 ; ptr2-> value = 60 ; ptr = create ( ) ; root-> r = ptr ; ptr-> value = 30 ; } void main ( ) { int depth1 = 0 , depth2 = 0 ; construct_binary_tree ( ) ; ptr = root ; while ( ptr-> l ! = NULL || ptr-> r ! = NULL ) { depth1 + + ; if ( ptr-> l = = NULL ) ptr = ptr-> r ; else ptr = ptr-> l ; } ptr = root ; while ( ptr-> l ! = NULL || ptr-> r ! = NULL ) { depth2 + + ; if ( ptr-> r = = NULL ) ptr = ptr-> l ; else ptr = ptr-> r ; } if ( depth1 > depth2 ) printf ( " height of the tree is %d\n depth of the tree is %d " , depth1 , depth1 ) ; else printf ( " height of the tree is %d\n depth of the tree is %d " , depth2 , depth2 ) ; }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL , * ptr , * temp ;
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * left ; struct node * right ; } ; static struct node * prev = NULL ; int is_bst ( struct node * root ) { if ( root ) { if ( !is_bst ( root-> left ) )
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * left ; struct node * right ; } ; void print_paths_recur ( struct node * node , int path [ ] , int path_len ) ; void print_array ( int ints [ ] , int len ) ; void print_paths ( struct node * node ) { int path [ 1000 ] ; print_paths_recur ( node , path , 0 ) ; } void print_paths_recur ( struct node * node , int path [ ] , int path_len ) { if ( node = = NULL ) return ; path [ path_len ] = node-> data ; path_len + + ; if ( node-> left = = NULL & & node-> right = = NULL ) { print_array ( path , path_len ) ; } else { print_paths_recur ( node-> left , path , path_len ) ;
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * left ; struct node * right ; } ; int queue [ 100 ] ; int front = 0 , rear = 0 , val ; void bfs_traverse ( struct node * node ) { val = node-> data ; if ( ( front < = rear ) & & ( node-> data = = queue [ front ] ) ) { if ( node-> left ! = NULL ) queue [ rear + + ] = node-> left-> data ; if ( node-> right ! = NULL ) queue [ rear + + ] = node-> right-> data ; front + + ; } if ( node-> left ! = NULL ) { bfs_traverse ( node-> left ) ; } if ( node-> right ! = NULL ) { bfs_traverse ( node-> right ) ; } } struct node * newnode ( int data ) { struct node * node = ( struct node * ) malloc ( sizeof ( struct node ) ) ; node-> data = data ; node-> left = NULL ; node-> right = NULL ; return ( node ) ; } int main ( ) { int i ; struct node * root = newnode ( 40 ) ; root-> left = newnode ( 20 ) ; root-> right = newnode ( 60 ) ; root-> left-> left = newnode ( 10 ) ; root-> left-> right = newnode ( 30 ) ; root-> right-> right = newnode ( 80 ) ; root-> right-> right-> right = newnode ( 90 ) ; queue [ rear + + ] = root-> left-> data ; bfs_traverse ( root-> left ) ; for ( i = 0 ; i < rear ; i + + ) printf ( " %d-> " , queue [ i ] ) ; return 0 ; }
#include <stdio.h> #include <malloc.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; struct btnode * root = NULL ; int flag ; void in_order_traversal ( struct btnode * ) ; void in_order_search ( struct btnode * , int ) ; struct btnode * newnode ( int ) ; void main ( ) { int search_val ; root = newnode ( 50 ) ; root-> l = newnode ( 20 ) ; root-> r = newnode ( 30 ) ; root-> l-> l = newnode ( 70 ) ; root-> l-> r = newnode ( 80 ) ; root-> l-> l-> l = newnode ( 10 ) ; root-> l-> l-> r = newnode ( 40 ) ; root-> l-> r-> r = newnode ( 60 ) ; printf ( " The elements of Binary tree are : " ) ; in_order_traversal ( root ) ; printf ( " Enter the value to be searched : " ) ; scanf ( " %d " , & search_val ) ; in_order_search ( root , search_val ) ; if ( flag = = 0 )
#include <stdio.h> #include <malloc.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } ; struct btnode * root = NULL ; int sum ; void in_order_traversal ( struct btnode * ) ; void in_order_sum ( struct btnode * ) ; struct btnode * newnode ( int ) ; void main ( ) { root = newnode ( 50 ) ; root-> l = newnode ( 20 ) ; root-> r = newnode ( 30 ) ; root-> l-> l = newnode ( 70 ) ; root-> l-> r = newnode ( 80 ) ; root-> l-> l-> l = newnode ( 10 ) ; root-> l-> l-> r = newnode ( 40 ) ; root-> l-> r-> r = newnode ( 60 ) ; printf ( " The elements of Binary tree are : " ) ; in_order_traversal ( root ) ; in_order_sum ( root ) ; printf ( " \n The sum of all the elements are : %d " , sum ) ; } struct btnode * newnode ( int value ) { struct btnode * temp = ( struct btnode * ) malloc ( sizeof ( struct btnode ) ) ; temp-> value = value ; temp-> l = NULL ; temp-> r = NULL ; return temp ; } void in_order_traversal ( struct btnode * p ) { if ( !p ) { return ; } in_order_traversal ( p-> l ) ; printf ( " %d-> " , p-> value ) ; in_order_traversal ( p-> r ) ; } void in_order_sum ( struct btnode * p ) { if ( !p ) { return ; } in_order_sum ( p-> l ) ; sum = sum + p-> value ; in_order_sum ( p-> r ) ; }
#include <stdio.h> void main ( ) { FILE * fptr ; char name [ 20 ] ; int age ; float salary ; fptr = fopen ( " emp.rec " , " w " ) ; if ( fptr = = NULL ) { printf ( " File does not exists \n  " ) ; return ; } printf ( " Enter the name \n  " ) ; scanf ( " %s " , name ) ; fprintf ( fptr , " Name = %s\n  " , name ) ; printf ( " Enter the age\n  " ) ; scanf ( " %d " , & age ) ; fprintf ( fptr , " Age = %d\n  " , age ) ; printf ( " Enter the salary\n  " ) ; scanf ( " %f " , & salary ) ; fprintf ( fptr , " Salary = %.2f\n  " , salary ) ; fclose ( fptr ) ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { FILE * fptr ; char filename [ 15 ] ; char ch ; printf ( " Enter the filename to be opened \n  " ) ; scanf ( " %s " , filename ) ; fptr = fopen ( filename , " r " ) ; if ( fptr = = NULL ) { printf ( " Cannot open file \n  " ) ; exit ( 0 ) ; } ch = fgetc ( fptr ) ; while ( ch ! = EOF ) { printf ( " %c " , ch ) ; ch = fgetc ( fptr ) ; } fclose ( fptr ) ; }
#include <stdio.h> int count , s = 0 ; void sum ( int * , int * ) ; void main ( int argc , char * argv [ ] ) { int i , ar [ argc ] ; count = argc ; for ( i = 1 ; i < argc ; i + + ) { ar [ i - 1 ] = atoi ( argv [ i ] ) ; } sum ( ar , ar + 1 ) ; printf ( " %d " , s ) ; } void sum ( int * a , int * b ) { if ( count = = 1 ) return ; s = s + * a + * b ; count - = 2 ; sum ( a + 2 , b + 2 ) ; }
#include <stdio.h> void main ( int argc , char * * argv ) { FILE * fp ; char ch ; int size = 0 ; fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) printf ( " \n File unable to open " ) ; else printf ( " \n File opened " ) ; fseek ( fp , 0 , 2 ) ; size = ftell ( fp ) ; printf ( " The size of given file is : %d\n  " , size ) ; fclose ( fp ) ; }
#include <stdio.h> #include <fcntl.h> #include <stdlib.h> int to_initcap_file ( FILE * ) ; void main ( int argc , char * argv [ ] ) { FILE * fp1 ; char fp [ 10 ] ; int p ; fp1 = fopen ( argv [ 1 ] , " r + " ) ; if ( fp1 = = NULL ) { printf ( " cannot open the file " ) ; exit ( 0 ) ; } p = to_initcap_file ( fp1 ) ; if ( p = = 1 ) { printf ( " success " ) ; } else { printf ( " failure " ) ; } fclose ( fp1 ) ; } int to_initcap_file ( FILE * fp ) { char c ; c = fgetc ( fp ) ; if ( c > = 'a' & & c < = 'z' ) { fseek ( fp , -1L , 1 ) ; fputc ( c - 32 , fp ) ; } while ( c ! = EOF ) { if ( c = = ' ' || c = = '\n ' ) { c = fgetc ( fp ) ; if ( c > = 'a' & & c < = 'z' ) { fseek ( fp , -1L , 1 ) ; fputc ( c - 32 , fp ) ; } } else { c = fgetc ( fp ) ; } } return 1 ; }
#include <stdio.h> void main ( int argc , char * argv [ ] , char * envp [ ] ) { int i ; for ( i = 0 ; envp [ i ] ! = NULL ; i + + ) { printf ( " \n  %s " , envp [ i ] ) ; } }
#include <stdio.h> void main ( int argc , char * * argv ) { FILE * fp1 , * fp2 ; char ch ; int pos ; if ( ( fp1 = fopen ( argv [ 1 ] , " r " ) ) = = NULL ) { printf ( " \n File cannot be opened " ) ; return ; } else { printf ( " \n File opened for copy...\n  " ) ; } fp2 = fopen ( argv [ 2 ] , " w " ) ; fseek ( fp1 , 0L , SEEK_END ) ;
#include <stdio.h> #include <stdlib.h> #include <string.h> #define size 200 struct emp { int id ; char * name ; } * emp1 , * emp3 ; void display ( ) ; void create ( ) ; void update ( ) ; FILE * fp , * fp1 ; int count = 0 ; void main ( int argc , char * * argv ) { int i , n , ch ; printf ( " 1 ] Create a Record\n  " ) ; printf ( " 2 ] Display Records\n  " ) ; printf ( " 3 ] Update Records\n  " ) ; printf ( " 4 ] Exit " ) ; while ( 1 ) { printf ( " \n Enter your choice : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : fp = fopen ( argv [ 1 ] , " a " ) ; create ( ) ; break ; case 2 : fp1 = fopen ( argv [ 1 ] , " rb " ) ; display ( ) ; break ; case 3 : fp1 = fopen ( argv [ 1 ] , " r + " ) ; update ( ) ; break ; case 4 : exit ( 0 ) ; } } } void create ( ) { int i ; char * p ; emp1 = ( struct emp * ) malloc ( sizeof ( struct emp ) ) ; emp1-> name = ( char * ) malloc ( ( size ) * ( sizeof ( char ) ) ) ; printf ( " Enter name of employee : " ) ; scanf ( " % [ ^\n  ] s " , emp1-> name ) ; printf ( " Enter emp id : " ) ; scanf ( " %d " , & emp1-> id ) ; fwrite ( & emp1-> id , sizeof ( emp1-> id ) , 1 , fp ) ; fwrite ( emp1-> name , size , 1 , fp ) ; count + + ;
#include <stdio.h> void compare_two_binary_files ( FILE * , FILE * ) ; int main ( int argc , char * argv [ ] ) { FILE * fp1 , * fp2 ; if ( argc < 3 ) { printf ( " \n Insufficient Arguments : \n  " ) ; printf ( " \n Help : . / executable <filename1> <filename2> \n  " ) ; return ; } else { fp1 = fopen ( argv [ 1 ] , " r " ) ; if ( fp1 = = NULL ) { printf ( " \n Error in opening file %s " , argv [ 1 ] ) ; return ; } fp2 = fopen ( argv [ 2 ] , " r " ) ; if ( fp2 = = NULL ) { printf ( " \n Error in opening file %s " , argv [ 2 ] ) ; return ; } if ( ( fp1 ! = NULL ) & & ( fp2 ! = NULL ) ) { compare_two_binary_files ( fp1 , fp2 ) ; } } } void compare_two_binary_files ( FILE * fp1 , FILE * fp2 ) { char ch1 , ch2 ; int flag = 0 ; while ( ( ( ch1 = fgetc ( fp1 ) ) ! = EOF ) & & ( ( ch2 = fgetc ( fp2 ) ) ! = EOF ) ) { if ( ch1 = = ch2 ) { flag = 1 ; continue ; } else { fseek ( fp1 , -1 , SEEK_CUR ) ; flag = 0 ; break ; } } if ( flag = = 0 ) { printf ( " Two files are not equal : byte poistion at which two files differ is %d\n  " , ftell ( fp1 ) + 1 ) ; } else { printf ( " Two files are Equal\n  " , ftell ( fp1 ) + 1 ) ; } }
#include <stdio.h> int to_upper_file ( FILE * ) ; int main ( int argc , char * argv [ ] ) { FILE * fp ; int status ; if ( argc = = 1 ) { printf ( " Insufficient Arguments : " ) ; printf ( " No File name is provided at command line " ) ; return ; } if ( argc > 1 ) { fp = fopen ( argv [ 1 ] , " r + " ) ; status = to_upper_file ( fp ) ; if ( status = = 0 ) { printf ( " \n  The content of \ " %s\ " file was successfully converted to upper case\n  " , argv [ 1 ] ) ; return ; } if ( status = = -1 ) { printf ( " \n  Failed to convert " ) ; return ; } } } int to_upper_file ( FILE * fp ) { char ch ; if ( fp = = NULL ) { perror ( " Unable to open file " ) ; return -1 ; } else { while ( ch ! = EOF ) { ch = fgetc ( fp ) ; if ( ( ch > = 'a' ) & & ( ch < = 'z' ) ) { ch = ch - 32 ; fseek ( fp , -1 , SEEK_CUR ) ; fputc ( ch , fp ) ; } } return 0 ; } }
#include <stdio.h> #include <stdlib.h> void main ( int argc , char * argv [ ] ) { FILE * fp1 ; int return_val ; if ( ( fp1 = fopen ( argv [ 1 ] , " r + " ) ) = = NULL ) { printf ( " file cant be opened " ) ; exit ( 0 ) ; } return_val = init_cap_file ( fp1 ) ; if ( return_val = = 1 ) { printf ( " \n success " ) ; } else { printf ( " \n  failure " ) ; } } int init_cap_file ( FILE * fp1 ) { char ch ; ch = fgetc ( fp1 ) ; if ( ch > = 97 & & ch < = 122 ) { fseek ( fp1 , -1L , 1 ) ; fputc ( ch - 32 , fp1 ) ; } while ( ch ! = EOF ) { if ( ch = = ' '|| ch = = '\n ' ) { ch = fgetc ( fp1 ) ; if ( ch > = 97 & & ch < = 122 ) { fseek ( fp1 , -1L , 1 ) ; fputc ( ch - 32 , fp1 ) ; } } else ch = fgetc ( fp1 ) ; } return 1 ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int line_count = 0 , n_o_c_l = 0 , n_o_n_b_l = 0 , n_o_b_l = 0 , n_e_c = 0 ; FILE * fp1 ; char ch ; fp1 = fopen ( argv [ 1 ] , " r " ) ; while ( ( ch = fgetc ( fp1 ) ) ! = EOF ) { if ( ch = = '\n ' ) { line_count + + ; } if ( ch = = '\n ' ) { if ( ( ch = fgetc ( fp1 ) ) = = '\n ' ) { fseek ( fp1 , -1 , 1 ) ; n_o_b_l + + ; } } if ( ch = = ' ; ' ) { if ( ( ch = fgetc ( fp1 ) ) = = '\n ' ) { fseek ( fp1 , -1 , 1 ) ; n_e_c + + ; } } } fseek ( fp1 , 0 , 0 ) ; while ( ( ch = fgetc ( fp1 ) ) ! = EOF ) { if ( ch = = ' / ' ) { if ( ( ch = fgetc ( fp1 ) ) = = ' / ' ) { n_o_c_l + + ; } } } printf ( " Total no of lines : %d\n  " , line_count ) ; printf ( " Total no of comment line : %d\n  " , n_o_c_l ) ; printf ( " Total no of blank lines : %d\n  " , n_o_b_l ) ; printf ( " Total no of non blank lines : %d\n  " , line_count-n_o_b_l ) ; printf ( " Total no of lines end with semicolon : %d\n  " , n_e_c ) ; }
#include <stdio.h> #include <errno.h> long count_characters ( FILE * ) ; void main ( int argc , char * argv [ ] ) { int i ; long cnt ; char ch , ch1 ; FILE * fp1 , * fp2 ; if ( fp1 = fopen ( argv [ 1 ] , " r " ) ) { printf ( " The FILE has been opened...\n  " ) ; fp2 = fopen ( argv [ 2 ] , " w " ) ; cnt = count_characters ( fp1 ) ;
#include <stdio.h> #include <errno.h> int to_lower_file ( FILE * ) ; void main ( int argc , char * argv [ ] ) { int op = -1 ; char ch ; FILE * fp ; if ( fp = fopen ( argv [ 1 ] , " r + " ) ) { printf ( " FILE has been opened..!!!\n  " ) ; op = to_lower_file ( fp ) ; printf ( " %d \n  " , op ) ; fclose ( fp ) ; } else { perror ( " Error Occured " ) ; printf ( " %d\n  " , op ) ; } } int to_lower_file ( FILE * f ) { int c ; char ch ; while ( ( ch = fgetc ( f ) ) ! = EOF ) { c = ( int ) ch ; if ( c > = 65 & & c < = 90 ) { ch = ch + 32 ; fseek ( f , -1L , 1 ) ; fputc ( ch , f ) ; } } return 0 ; }
#include <stdio.h> #include <stdlib.h> int joinfiles ( FILE * , FILE * , FILE * ) ; char ch ; int flag ; void main ( int argc , char * argv [ ] ) { FILE * file1 , * file2 , * target ; file1 = fopen ( argv [ 1 ] , " r " ) ; if ( file1 = = NULL ) { perror ( " Error Occured! " ) ; } file2 = fopen ( argv [ 2 ] , " r " ) ; if ( file2 = = NULL ) { perror ( " Error Occured! " ) ; } target = fopen ( argv [ 3 ] , " a " ) ; if ( target = = NULL ) { perror ( " Error Occured! " ) ; } joinfiles ( file1 , file2 , target ) ; if ( flag = = 1 ) { printf ( " The files have been successfully concatenated\n  " ) ; } } int joinfiles ( FILE * file1 , FILE * file2 , FILE * target ) { while ( ( fgetc ( file1 ) ! = EOF ) || ( fgetc ( file2 ) ! = EOF ) ) { fseek ( file1 , -1 , 1 ) ; while ( ( ch = fgetc ( file1 ) ) ! = '\n ' ) { if ( ch = = EOF ) { break ; } else { fputc ( ch , target ) ; } } while ( ( ch = fgetc ( file2 ) ) ! = '\n ' ) { if ( ch = = EOF ) { break ; } else { fputc ( ch , target ) ; } } fputc ( '\n ' , target ) ; } fclose ( file1 ) ; fclose ( file2 ) ; fclose ( target ) ; return flag = 1 ; }
#include <stdio.h> #include <stdlib.h> void main ( int argc , char * argv [ ] ) { int ncount = 0 , ccount = 0 , scount = 0 , blank = 0 ; char ch ; FILE * fp ; fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " Error Occured " ) ; } else { while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) { break ; } if ( ch = = 10 ) { ncount + + ; if ( ch = fgetc ( fp ) = = '\n ' ) { fseek ( fp , -1 , 1 ) ; blank + + ; } } else if ( ch = = 59 ) { scount + + ; } else if ( ch = = ' / ' || ch = = ' * ' ) { ccount + + ; } } } printf ( " \n The Total number of lines are %d " , ncount ) ; printf ( " \n The Total number of Commented lines are %d " , ccount ) ; printf ( " \n The Total number of blank lines are %d " , blank ) ; printf ( " \n The total number of lines that end with Semicolon %d " , scount ) ; printf ( " \n The length of Actual code is %d " , ncount-blank-ccount ) ; fclose ( fp ) ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> void main ( ) { float a , b , c , root1 , root2 ; float realp , imagp , disc ; printf ( " Enter the values of a , b and c \n  " ) ; scanf ( " %f %f %f " , & a , & b , & c ) ; if ( a = = 0 || b = = 0 || c = = 0 ) { printf ( " Error : Roots cannot be determined \n  " ) ; exit ( 1 ) ; } else { disc = b * b - 4.0 * a * c ; if ( disc < 0 ) { printf ( " Imaginary Roots\n  " ) ; realp = -b / ( 2.0 * a ) ; imagp = sqrt ( abs ( disc ) ) / ( 2.0 * a ) ; printf ( " Root1 = %f + i %f\n  " , realp , imagp ) ; printf ( " Root2 = %f -i %f\n  " , realp , imagp ) ; } else if ( disc = = 0 ) { printf ( " Roots are real and equal\n  " ) ; root1 = -b / ( 2.0 * a ) ; root2 = root1 ; printf ( " Root1 = %f\n  " , root1 ) ; printf ( " Root2 = %f\n  " , root2 ) ; } else if ( disc > 0 ) { printf ( " Roots are real and distinct \n  " ) ; root1 = ( -b + sqrt ( disc ) ) / ( 2.0 * a ) ; root2 = ( -b - sqrt ( disc ) ) / ( 2.0 * a ) ; printf ( " Root1 = %f \n  " , root1 ) ; printf ( " Root2 = %f \n  " , root2 ) ; } } }
#include <stdio.h> void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( " Enter two numbers\n  " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder ! = 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( " GCD of %d and %d = %d\n  " , num1 , num2 , gcd ) ; printf ( " LCM of %d and %d = %d\n  " , num1 , num2 , lcm ) ; }
#include <stdio.h> int hcf ( int , int ) ; int main ( ) { int a , b , result ; printf ( " Enter the two numbers to find their HCF : " ) ; scanf ( " %d %d " , & a , & b ) ; result = hcf ( a , b ) ; printf ( " The HCF of %d and %d is %d.\n  " , a , b , result ) ; return 0 ; } int hcf ( int a , int b ) { while ( a ! = b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> void main ( ) { int n , x1 ; float accuracy , term , denominator , x , cosx , cosval ; printf ( " Enter the value of x ( in degrees ) \n  " ) ; scanf ( " %f " , & x ) ; x1 = x ; x = x * ( 3.142 / 180.0 ) ; cosval = cos ( x ) ; printf ( " Enter the accuracy for the result \n  " ) ; scanf ( " %f " , & accuracy ) ; term = 1 ; cosx = term ; n = 1 ; do { denominator = 2 * n * ( 2 * n - 1 ) ; term = -term * x * x / denominator ; cosx = cosx + term ; n = n + 1 ; } while ( accuracy < = fabs ( cosval - cosx ) ) ; printf ( " Sum of the cosine series = %f\n  " , cosx ) ; printf ( " Using Library function cos ( %d ) = %f\n  " , x1 , cos ( x ) ) ; }
#include <stdio.h> #include <math.h> void main ( ) { int n , x1 , i , j ; float x , sign , cosx , fact ; printf ( " Enter the number of the terms in a series\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the value of x ( in degrees ) \n  " ) ; scanf ( " %f " , & x ) ; x1 = x ; x = x * ( 3.142 / 180.0 ) ; cosx = 1 ; sign = -1 ; for ( i = 2 ; i < = n ; i = i + 2 ) { fact = 1 ; for ( j = 1 ; j < = i ; j + + ) { fact = fact * j ; } cosx = cosx + ( pow ( x , i ) / fact ) * sign ; sign = sign * ( -1 ) ; } printf ( " Sum of the cosine series = %7.2f\n  " , cosx ) ; printf ( " The value of cos ( %d ) using library function = %f\n  " , x1 , cos ( x ) ) ; }
#include <stdio.h> void main ( ) { int i , num , sum = 0 ; printf ( " Enter an integer number \n  " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { sum = sum + i ; } printf ( " Sum of first %d natural numbers = %d\n  " , num , sum ) ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { int num1 , num2 , i , j , flag , temp , count = 0 ; printf ( " Enter the value of num1 and num2 \n  " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num2 < 2 ) { printf ( " There are no primes upto %d\n  " , num2 ) ; exit ( 0 ) ; } printf ( " Prime numbers are \n  " ) ; temp = num1 ; if ( num1 % 2 = = 0 ) { num1 + + ; } for ( i = num1 ; i < = num2 ; i = i + 2 ) { flag = 0 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( ( i % j ) = = 0 ) { flag = 1 ; break ; } } if ( flag = = 0 ) { printf ( " %d\n  " , i ) ; count + + ; } } printf ( " Number of primes between %d & %d = %d\n  " , temp , num2 , count ) ; }
#include <stdio.h> #include <stdlib.h> #define MAXSIZE 10 void main ( ) { int array [ MAXSIZE ] ; int i , num , power ; float x , polySum ; printf ( " Enter the order of the polynomial \n  " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the value of x \n  " ) ; scanf ( " %f " , & x ) ; printf ( " Enter %d coefficients \n  " , num + 1 ) ; for ( i = 0 ; i < = num ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } polySum = array [ 0 ] ; for ( i = 1 ; i < = num ; i + + ) { polySum = polySum * x + array [ i ] ; } power = num ; printf ( " Given polynomial is : \n  " ) ; for ( i = 0 ; i < = num ; i + + ) { if ( power < 0 ) { break ; } if ( array [ i ] > 0 ) printf ( " + " ) ; else if ( array [ i ] < 0 ) printf ( " - " ) ; else printf ( " " ) ; printf ( " %dx^ %d " , abs ( array [ i ] ) , power-- ) ; } printf ( " \n  Sum of the polynomial = %6.2f \n  " , polySum ) ; }
#include <stdio.h> void main ( ) { int x , y ; printf ( " Enter the values for X and Y\n  " ) ; scanf ( " %d %d " , & x , & y ) ; if ( x > 0 & & y > 0 ) printf ( " point ( %d , %d ) lies in the First quandrant\n  " ) ; else if ( x < 0 & & y > 0 ) printf ( " point ( %d , %d ) lies in the Second quandrant\n  " ) ; else if ( x < 0 & & y < 0 ) printf ( " point ( %d , %d ) lies in the Third quandrant\n  " ) ; else if ( x > 0 & & y < 0 ) printf ( " point ( %d , %d ) lies in the Fourth quandrant\n  " ) ; else if ( x = = 0 & & y = = 0 ) printf ( " point ( %d , %d ) lies at the origin\n  " ) ; }
#include <stdio.h> #include <math.h> long int power ( int x , int n ) ; void main ( ) { long int x , n , xpown ; printf ( " Enter the values of X and N \n  " ) ; scanf ( " %ld %ld " , & x , & n ) ; xpown = power ( x , n ) ; printf ( " X to the power N = %ld\n  " , xpown ) ; } long int power ( int x , int n ) { if ( n = = 1 ) return ( x ) ; else if ( n % 2 = = 0 ) return ( pow ( power ( x , n / 2 ) , 2 ) ) ; else return ( x * power ( x , n - 1 ) ) ; }
#include <stdio.h> int main ( ) { int number , i = 1 ; printf ( " Enter the Number : " ) ; scanf ( " %d " , & number ) ; printf ( " Multiplication table of %d : \n  " , number ) ; printf ( " --------------------------\n  " ) ; while ( i < = 10 ) { printf ( " %d x %d = %d \n  " , number , i , number * i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int number , i ; int sum = 0 ; printf ( " Enter maximum values of series number : " ) ; scanf ( " %d " , & number ) ; sum = ( number * ( number + 1 ) * ( 2 * number + 1 ) ) / 6 ; printf ( " Sum of the above given series : " ) ; for ( i = 1 ; i < = number ; i + + ) { if ( i ! = number ) printf ( " %d^2 + " , i ) ; else printf ( " %d^2 = %d " , i , sum ) ; } return 0 ; }
#include <stdio.h> void main ( ) { double number , sum = 0 , i ; printf ( " \n  enter the number " ) ; scanf ( " %lf " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { sum = sum + ( 1 / i ) ; if ( i = = 1 ) printf ( " \n  1 + " ) ; else if ( i = = number ) printf ( " ( 1 / %lf ) " , i ) ; else printf ( " ( 1 / %lf ) + " , i ) ; } printf ( " \n  The sum of the given series is %.2lf " , sum ) ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , r , i , last_term , sum = 0 ; int n ; printf ( " Enter the first term of the G.P. series : " ) ; scanf ( " %f " , & a ) ; printf ( " Enter the total numbers in the G.P. series : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the common ratio of G.P. series : " ) ; scanf ( " %f " , & r ) ; sum = ( a * ( 1 - pow ( r , n + 1 ) ) ) / ( 1 - r ) ; last_term = a * pow ( r , n - 1 ) ; printf ( " last_term term of G.P. : %f " , last_term ) ; printf ( " \n  Sum of the G.P. : %f " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define PI 3.142 void main ( ) { float radius , area ; printf ( " Enter the radius of a circle \n  " ) ; scanf ( " %f " , & radius ) ; area = PI * pow ( radius , 2 ) ; printf ( " Area of a circle = %5.2f\n  " , area ) ; }
#include <stdio.h> int main ( ) { float height , width ; float area ; printf ( " Enter height and width of the given triangle : \n  " ) ; scanf ( " %f %f " , & height , & width ) ; area = 0.5 * height * width ; printf ( " Area of right angled triangle is : %.3f\n  " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float diagonal1 , diagonal2 ; float area ; printf ( " Enter diagonals of the given rhombus : \n  " ) ; scanf ( " %f %f " , & diagonal1 , & diagonal2 ) ; area = 0.5 * diagonal1 * diagonal2 ; printf ( " Area of rhombus is : %.3f \n  " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> void main ( ) { float side , surfacearea , volume ; printf ( " Enter the length of a side \n  " ) ; scanf ( " %f " , & side ) ; surfacearea = 6.0 * side * side ; volume = pow ( side , 3 ) ; printf ( " Surface area = %6.2f and Volume = %6.2f \n  " , surfacearea , volume ) ; }
#include <stdio.h> #include <math.h> int main ( ) { float width , length , height ; float surfacearea , volume , space_diagonal ; printf ( " Enter value of width , length & height of the cuboids : \n  " ) ; scanf ( " %f %f %f " , & width , & length , & height ) ; surfacearea = 2 * ( width * length + length * height + height * width ) ; volume = width * length * height ; space_diagonal = sqrt ( width * width + length * length + height * height ) ; printf ( " Surface area of cuboids is : %.3f " , surfacearea ) ; printf ( " \n  Volume of cuboids is : %.3f " , volume ) ; printf ( " \n  Space diagonal of cuboids is : %.3f " , space_diagonal ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius , height ; float surface_area , volume ; printf ( " Enter value of radius and height of a cone : \n  " ) ; scanf ( " %f %f " , & radius , & height ) ; surface_area = ( 22 / 7 ) * radius * ( radius + sqrt ( radius * radius + height * height ) ) ; volume = ( 1.0 / 3 ) * ( 22 / 7 ) * radius * radius * height ; printf ( " Surface area of cone is : %.3f " , surface_area ) ; printf ( " \n  Volume of cone is : %.3f " , volume ) ; return 0 ; }
#include <stdio.h> main ( ) { int i , j , k = 1 ; printf ( " floyds triangle is\n  " ) ; for ( i = 1 ; k < = 20 ; + + i ) { for ( j = 1 ; j < = i ; + + j ) printf ( " %d " , k + + ) ; printf ( " \n \n  " ) ; } return 0 ; }
#include <stdio.h> void countdown ( int ) ; int main ( void ) { int num = 100 ; countdown ( num ) ; return 0 ; } void countdown ( int count ) { if ( count > = 1 ) { printf ( " %d\n  " , count ) ; countdown ( count-- ) ; } }
#include <stdio.h> void int2bin ( int ) ; int main ( void ) { int num ; printf ( " Program converts integer to binary...\n  " ) ; printf ( " Enter some positive integer : ( q to quit ) \n  " ) ; while ( scanf ( " %d " , & num ) = = 1 ) { int2bin ( num ) ; printf ( " \n Enter some positive integer : ( q to quit ) \n  " ) ; } printf ( " Thank you!\n  " ) ; return 0 ; } void int2bin ( int n ) { int bit ; if ( n > = 2 ) { bit = n % 2 ; int2bin ( n / 2 ) ; printf ( " %d " , bit ) ; return ; } else { bit = n ; printf ( " %d " , bit ) ; return ; } }
#include <stdio.h> #include <string.h> float solve_for_y ( float a , float b , float c ) { float Y = Y = - ( b + c ) / a ; return Y ; } main ( ) { float a , b , c , Y ; printf ( " \n Enter a linear equation in one variable of the form aY + b + c = 0 " ) ; printf ( " \n Enter the value of a , b , c respectively : " ) ; scanf ( " %f %f %f " , & a , & b , & c ) ; Y = solve_for_y ( a , b , c ) ; printf ( " \n Solution is Y = %f " , Y ) ; }
#include <stdio.h> #include <stdio.h> #include <stdlib.h> int main ( int argc , char * * argv ) { int i , j , k ; printf ( " Enter the dimension of the matrices : " ) ; int n ; scanf ( " %d " , & n ) ; printf ( " Enter the 1st matrix : " ) ; double a [ n ] [ n ] ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) { scanf ( " %f " , & a [ i ] [ j ] ) ; } } printf ( " Enter the 2nd matrix : " ) ; double b [ n ] [ n ] ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) { scanf ( " %f " , & b [ i ] [ j ] ) ; } } printf ( " Enter the result matrix : " ) ; double c [ n ] [ n ] ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) { scanf ( " %f " , & c [ i ] [ j ] ) ; } }
#include <stdio.h> void solution ( int a [ ] [ 20 ] , int var ) ; int main ( ) { int a [ 20 ] [ 20 ] , var , i , j , k , l , n ; printf ( " \n Enter the number of variables : \n  " ) ; scanf ( " %d " , & var ) ; for ( i = 0 ; i < var ; i + + ) { printf ( " \n Enter the equation %d : \n  " , i + 1 ) ; for ( j = 0 ; j < var ; j + + ) { printf ( " Enter the coefficient of x %d : \n  " , j + 1 ) ; scanf ( " %d " , & a [ i ] [ j ] ) ; } printf ( " \n Enter the constant : \n  " ) ; scanf ( " %d " , & a [ i ] [ var ] ) ; } solution ( a , var ) ; return 0 ; } void solution ( int a [ 20 ] [ 20 ] , int var ) { int k , i , l , j ; for ( k = 0 ; k < var ; k + + ) { for ( i = 0 ; i < = var ; i + + ) { l = a [ i ] [ k ] ; for ( j = 0 ; j < = var ; j + + ) { if ( i ! = k ) a [ i ] [ j ] = ( a [ k ] [ k ] * a [ i ] [ j ] ) - ( l * a [ k ] [ j ] ) ; } } } printf ( " \n Solutions : " ) ; for ( i = 0 ; i < var ; i + + ) { printf ( " \n THE VALUE OF x %d IS %f\n  " , i + 1 , ( float ) a [ i ] [ var ] / ( float ) a [ i ] [ i ] ) ; } }
#include <stdio.h> #include <stdlib.h> int main ( void ) { char var [ ] = { 'x' , 'y' , 'z' , 'w' } ; printf ( " Enter the number of variables in the equations : " ) ; int n ; scanf ( " %d " , & n ) ; printf ( " \n Enter the coefficients of each variable for each equations " ) ; printf ( " \n ax + by + cz + ... = d " ) ; int mat [ n ] [ n ] ; int constants [ n ] [ 1 ] ; int i , j ; for ( int i = 0 ; i < n ; i + + ) { for ( int j = 0 ; j < n ; j + + ) { scanf ( " %d " , & mat [ i ] [ j ] ) ; } scanf ( " %d " , & constants [ i ] [ 0 ] ) ; } printf ( " Matrix representation is : " ) ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) { printf ( " %f " , mat [ i ] [ j ] ) ; } printf ( " %f " , var [ i ] ) ; printf ( " = %f " , constants [ i ] [ 0 ] ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <limits.h> int MatrixChainOrder ( int p [ ] , int n ) { int m [ n ] [ n ] ; int s [ n ] [ n ] ; int i , j , k , L , q ;
#include <stdio.h> void main ( ) { int matrix [ 10 ] [ 10 ] ; int i , j , m , n ; int sparse_counter = 0 ; printf ( " Enter the order of the matix \n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the elements of the matix \n  " ) ; for ( i = 0 ; i < m ; + + i ) { for ( j = 0 ; j < n ; + + j ) { scanf ( " %d " , & matrix [ i ] [ j ] ) ; if ( matrix [ i ] [ j ] = = 0 ) { + + sparse_counter ; } } } if ( sparse_counter > ( ( m * n ) / 2 ) ) { printf ( " The given matrix is Sparse Matrix !!! \n  " ) ; } else printf ( " The given matrix is not a Sparse Matrix \n  " ) ; printf ( " There are %d number of Zeros. " , sparse_counter ) ; }
#include <stdio.h> int main ( ) { int a [ 3 ] [ 3 ] , i , j ; long determinant ; printf ( " Enter the 9 elements of matrix : " ) ; for ( i = 0 ; i < 3 ; i + + ) for ( j = 0 ; j < 3 ; j + + ) scanf ( " %d " , & a [ i ] [ j ] ) ; printf ( " \n The matrix is\n  " ) ; for ( i = 0 ; i < 3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 3 ; j + + ) printf ( " %d\t " , a [ i ] [ j ] ) ; } determinant = a [ 0 ] [ 0 ] * ( ( a [ 1 ] [ 1 ] * a [ 2 ] [ 2 ] ) - ( a [ 2 ] [ 1 ] * a [ 1 ] [ 2 ] ) ) - a [ 0 ] [ 1 ] * ( a [ 1 ] [ 0 ] * a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] * a [ 1 ] [ 2 ] ) + a [ 0 ] [ 2 ] * ( a [ 1 ] [ 0 ] * a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] * a [ 1 ] [ 1 ] ) ; if ( determinant ! = 0 ) printf ( " The vectors forms the basis of R %d as the determinant is non-zero " , 3 ) ; else printf ( " The vectors doesn't form the basis of R %d as the determinant is zero " , 3 ) ; return 0 ; }
#include <stdio.h> typedef struct COMPLEX { int a ; int b ; } Complex ; Complex multiply ( Complex , Complex ) ; int main ( ) { int a1 , b1 , a2 , b2 ; Complex x , y , z ; printf ( " Enter first complex number : " ) ; scanf ( " %d + %di " , & a1 , & b1 ) ; printf ( " \n Enter second complex number : " ) ; scanf ( " %d + %di " , & a2 , & b2 ) ; x.a = a1 ; x.b = b1 ; y.a = a2 ; y.b = b2 ; z = multiply ( x , y ) ; printf ( " \n After multiplication : %d + %di " , z.a , z.b ) ; return 0 ; } Complex multiply ( Complex x , Complex y ) { Complex z ; z.a = x.a * y.a - x.b * y.b ; z.b = x.a * y.b + x.b * y.a ; return z ; }
#include <stdio.h> int main ( ) { int m , n ; int p , q ; printf ( " Enter the dimensions of first matrix : " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " \n Enter the dimensions of second matrix : " ) ; scanf ( " %d %d " , & p , & q ) ; if ( n ! = p ) { printf ( " \n Two matrices CANNOT be multiplied !!! " ) ; } else printf ( " \n Two matrices meet the criteria for Multiplication !!! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 3 ] [ 3 ] , i , j ; long determinant ; printf ( " Enter the 9 elements of matrix : " ) ; for ( i = 0 ; i < 3 ; i + + ) for ( j = 0 ; j < 3 ; j + + ) scanf ( " %d " , & a [ i ] [ j ] ) ; printf ( " \n The matrix is\n  " ) ; for ( i = 0 ; i < 3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 3 ; j + + ) printf ( " %d\t " , a [ i ] [ j ] ) ; } determinant = a [ 0 ] [ 0 ] * ( ( a [ 1 ] [ 1 ] * a [ 2 ] [ 2 ] ) - ( a [ 2 ] [ 1 ] * a [ 1 ] [ 2 ] ) ) -a [ 0 ] [ 1 ] * ( a [ 1 ] [ 0 ] * a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] * a [ 1 ] [ 2 ] ) + a [ 0 ] [ 2 ] * ( a [ 1 ] [ 0 ] * a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] * a [ 1 ] [ 1 ] ) ; if ( determinant = = 0 ) printf ( " \n Matrix is NOT invertible " ) ; else printf ( " \n The given matrix has an inverse!!! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 3 ] [ 3 ] , i , j ; long determinant ; printf ( " Enter the 9 elements of matrix : " ) ; for ( i = 0 ; i < 3 ; i + + ) for ( j = 0 ; j < 3 ; j + + ) scanf ( " %d " , & a [ i ] [ j ] ) ; printf ( " \n The matrix is\n  " ) ; for ( i = 0 ; i < 3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j < 3 ; j + + ) printf ( " %d\t " , a [ i ] [ j ] ) ; } determinant = a [ 0 ] [ 0 ] * ( ( a [ 1 ] [ 1 ] * a [ 2 ] [ 2 ] ) - ( a [ 2 ] [ 1 ] * a [ 1 ] [ 2 ] ) ) -a [ 0 ] [ 1 ] * ( a [ 1 ] [ 0 ] * a [ 2 ] [ 2 ] - a [ 2 ] [ 0 ] * a [ 1 ] [ 2 ] ) + a [ 0 ] [ 2 ] * ( a [ 1 ] [ 0 ] * a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] * a [ 1 ] [ 1 ] ) ; printf ( " \n Determinant of 3X3 matrix : %ld " , determinant ) ; return 0 ; }
#include <time.h> #include <stdio.h> #include <stdlib.h> int main ( void ) { int length ; int num ; int temp ; printf ( " Enter the length of the password : " ) ; scanf ( " %d " , & length ) ; printf ( " \n Enter the number of passwords you want : " ) ; scanf ( " %d " , & num ) ; srand ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; while ( num-- ) { temp = length ; printf ( " \n  " ) ; while ( temp-- ) { putchar ( rand ( ) % 56 + 65 ) ; srand ( rand ( ) ) ; } temp = length ; } printf ( " \n  " ) ; return EXIT_SUCCESS ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> const int LOW = 1 ; const int HIGH = 32000 ; int main ( ) { int randomNumber , i ; time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; for ( i = 0 ; i < 10 ; i + + ) { randomNumber = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; printf ( " %d " , randomNumber ) ; } printf ( " ... " ) ; return 0 ; }
#include <time.h> #include <stdio.h> #include <stdlib.h> int main ( void ) { int length ; char str [ ] = " 0123456789ABCDEF " ; srand ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; length = rand ( ) % 15 + 8 ; while ( length-- ) { putchar ( str [ rand ( ) % 16 ] ) ; srand ( rand ( ) ) ; } printf ( " \n  " ) ; return EXIT_SUCCESS ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( int argc , char * * argv ) { printf ( " Enter the number of dice : " ) ; int n , i ; scanf ( " %d " , & n ) ; printf ( " The values on dice are : ( " ) ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , ( rand ( ) % 6 ) + 1 ) ; printf ( " ) " ) ; return 0 ; }
#include <time.h> #include <stdio.h> #include <stdlib.h> int main ( void ) { int num ; srand ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; printf ( " \n Generating a random number using srand and rand function.\n  " ) ; num = rand ( ) ; printf ( " %d\n  " , num ) ; return EXIT_SUCCESS ; }
#include <stdio.h> int rand ( ) ; int rseed = 0 ; inline void srand ( int x ) { rseed = x ; } #ifndef MS_RAND#define RAND_MAX ( ( 1U < < 31 ) - 1 ) inline int rand ( ) { return rseed = ( rseed * 1103515245 + 12345 ) & RAND_MAX ; } #else #define RAND_MAX_32 ( ( 1U < < 31 ) - 1 ) #define RAND_MAX ( ( 1U < < 15 ) - 1 ) inline int rand ( ) { return ( rseed = ( rseed * 214013 + 2531011 ) & RAND_MAX_32 ) > > 16 ; } #endif int main ( ) { int i ; printf ( " rand max is %d\n  " , RAND_MAX ) ; for ( i = 0 ; i < 10 ; i + + ) printf ( " %d\n  " , rand ( ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> unsigned long long int randm ( int n ) ; unsigned long long int von ( unsigned long long int x , int n ) ; int main ( void ) { unsigned long long int x , s ; int n , i , r ; printf ( " Enter the number of digits in the seed value " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter the total number of random numbers to be generated " ) ; scanf ( " %d " , & r ) ; if ( n > = 12 ) { printf ( " TOO LARGE!! " ) ; exit ( 0 ) ; } x = randm ( n ) ; for ( i = 0 ; i < r ; i + + ) { s = von ( x , n ) ; x = s ; printf ( " \n Random Number generated : %lld\n  " , s ) ; } return 0 ; } unsigned long long int randm ( int n ) { double x ; unsigned long long int y ; srand ( getpid ( ) ) ; x = rand ( ) / ( double ) RAND_MAX ; y = ( unsigned long long int ) ( x * pow ( 10.0 , n * 1.0 ) ) ; return y ; } unsigned long long int von ( unsigned long long int x , int n ) { unsigned long long int y ; int k ; k = n / 2 ; y = ( unsigned long long int ) ( ( x / pow ( 10.0 , k * 1.0 ) ) * x ) % ( unsigned long long int ) ( pow ( 10.0 , n * 1.0 ) ) ; return y ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> static unsigned long Q [ 4096 ] , c = 362436 ; unsigned long mwc ( void ) { unsigned long long t , a = 18782LL ; static unsigned long i = 4095 ; unsigned long x , r = 0xfffffffe ; i = ( i + 1 ) & 4095 ; t = a * Q [ i ] + c ; c = ( t > > 32 ) ; x = t + c ; if ( x < c ) { x + + ; c + + ; } return ( Q [ i ] = r - x ) ; } int main ( void ) { printf ( " \n Random Number generated : %lld\n  " , mwc ( ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> static int rand_int ( int n ) { int limit = RAND_MAX - RAND_MAX % n ; int rnd ; do { rnd = rand ( ) ; } while ( rnd > = limit ) ; return rnd % n ; } void shuffle ( int * array , int n ) { int i , j , tmp ; for ( i = n - 1 ; i > 0 ; i-- ) { j = rand_int ( i + 1 ) ; tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; } } int main ( void ) { int i = 0 ; int numbers [ 50 ] ; for ( i = 0 ; i < 50 ; i + + ) numbers [ i ] = i ; shuffle ( numbers , 50 ) ; printf ( " \n Array after shuffling is : \n  " ) ; for ( i = 0 ; i < 50 ; i + + ) printf ( " %d\n  " , numbers [ i ] ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> #include <time.h> #define RNG_M 2147483647L #define RNG_A 16807L#define RNG_Q 127773L #define RNG_R 2836L static long rnd_seed ; void set_rnd_seed ( long seedval ) { rnd_seed = ( seedval % ( RNG_M - 1 ) ) + 1 ; } long rnd ( ) { register long low , high , test ; set_rnd_seed ( ( unsigned int ) time ( 0 ) + getpid ( ) ) ; high = rnd_seed / RNG_Q ; low = rnd_seed % RNG_Q ; test = RNG_A * low - RNG_R * high ; if ( test > 0 ) rnd_seed = test ; else rnd_seed = test + RNG_M ; return rnd_seed ; } int main ( void ) { printf ( " Random number generated is %d\n  " , rnd ( ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <stdlib.h> #include <time.h> int main ( int argc , char * * argv ) { int p = 7 , l = 3 , g = 2 , n = 4 , x , i , j , k ; int mul = 1 ; int a [ ] = { 1 , 2 , 2 , 1 } ; int bin [ 4 ] ; printf ( " The Random numbers are : " ) ; for ( i = 0 ; i < 10 ; i + + ) { x = rand ( ) % 16 ; for ( j = 3 ; j > = 0 ; j-- ) { bin [ j ] = x % 2 ; x / = 2 ; } for ( k = 0 ; k < 4 ; k + + ) mul * = pow ( a [ k ] , bin [ k ] ) ; printf ( " %f " , pow ( g , mul ) ) ; } }
#include <stdio.h> #include <stdlib.h> #define limit 100 int main ( ) { unsigned long long int i , j ; int * primes ; int z = 1 ; primes = malloc ( sizeof ( int ) * limit ) ; for ( i = 2 ; i < limit ; i + + ) primes [ i ] = 1 ; for ( i = 2 ; i < limit ; i + + ) if ( primes [ i ] ) for ( j = i ; i * j < limit ; j + + ) primes [ i * j ] = 0 ; printf ( " \n Prime numbers in range 1 to 100 are : \n  " ) ; for ( i = 2 ; i < limit ; i + + ) if ( primes [ i ] ) printf ( " %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> long long mulmod ( long long a , long long b , long long mod ) { long long x = 0 , y = a % mod ; while ( b > 0 ) { if ( b % 2 = = 1 ) { x = ( x + y ) % mod ; } y = ( y * 2 ) % mod ; b / = 2 ; } return x % mod ; } long long modulo ( long long base , long long exponent , long long mod ) { long long x = 1 ; long long y = base ; while ( exponent > 0 ) { if ( exponent % 2 = = 1 ) x = ( x * y ) % mod ; y = ( y * y ) % mod ; exponent = exponent / 2 ; } return x % mod ; } int Miller ( long long p , int iteration ) { int i ; long long s ; if ( p < 2 ) { return 0 ; } if ( p ! = 2 & & p % 2 = = 0 ) { return 0 ; } s = p - 1 ; while ( s % 2 = = 0 ) { s / = 2 ; } for ( i = 0 ; i < iteration ; i + + ) { long long a = rand ( ) % ( p - 1 ) + 1 , temp = s ; long long mod = modulo ( a , temp , p ) ; while ( temp ! = p - 1 & & mod ! = 1 & & mod ! = p - 1 ) { mod = mulmod ( mod , mod , p ) ; temp * = 2 ; } if ( mod ! = p - 1 & & temp % 2 = = 0 ) { return 0 ; } } return 1 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int gcd ( int x , int y ) { int r = 0 , a , b ; a = ( x > y ) ? x : y ;
#include <stdio.h> void printarray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void partition ( int n ) { int p [ n ] ;
#include <stdio.h> int gcd_algorithm ( int x , int y ) { if ( y = = 0 ) { return x ; } else if ( x > = y & & y > 0 ) { return gcd_algorithm ( y , ( x % y ) ) ; } } int main ( void ) { int num1 , num2 , gcd ; printf ( " \n Enter two numbers to find gcd using Euclidean algorithm : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; gcd = gcd_algorithm ( num1 , num2 ) ; if ( gcd ) printf ( " \n The GCD of %d and %d is %d\n  " , num1 , num2 , gcd ) ; else printf ( " \n Invalid input!!!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arraySize , i , j , x ; int numberPrimes = 0 ; printf ( " Input a positive integer to find all the prime numbers up to and including that number : " ) ; scanf ( " %d " , & arraySize ) ; int n = arraySize / 2 ; int size ; int isPrime [ arraySize + 1 ] ; int TheseArePrime = 0 ; for ( i = 0 ; i < n ; + + i ) { isPrime [ i ] = i ; } for ( i = 1 ; i < n ; i + + ) { for ( j = i ; j < = ( n - i ) / ( 2 * i + 1 ) ; j + + ) { isPrime [ i + j + 2 * i * j ] = 0 ; } } if ( arraySize > 2 ) { isPrime [ TheseArePrime + + ] = 2 ; } for ( i = 1 ; i < n ; i + + ) { if ( isPrime [ i ] ! = 0 ) { isPrime [ TheseArePrime + + ] = i * 2 + 1 ; } } size = sizeof isPrime / sizeof ( int ) ;
#include <stdio.h> #include <stdlib.h> #define ll long long ll modulo ( ll base , ll exponent , ll mod ) { ll x = 1 ; ll y = base ; while ( exponent > 0 ) { if ( exponent % 2 = = 1 ) x = ( x * y ) % mod ; y = ( y * y ) % mod ; exponent = exponent / 2 ; } return x % mod ; } int Fermat ( ll p , int iterations ) { int i ; if ( p = = 1 ) { return 0 ; } for ( i = 0 ; i < iterations ; i + + ) { ll a = rand ( ) % ( p - 1 ) + 1 ; if ( modulo ( a , p - 1 , p ) ! = 1 ) { return 0 ; } } return 1 ; } int main ( ) { int iteration = 50 ; ll num ; printf ( " Enter integer to test primality : " ) ; scanf ( " %lld " , & num ) ; if ( Fermat ( num , iteration ) = = 1 ) printf ( " %lld is prime " , num ) ; else printf ( " %lld is not prime " , num ) ; return 0 ; }
#include <stdio.h> int bitwiseadd ( int x , int y ) { while ( y ! = 0 ) { int carry = x & y ; x = x ^ y ; y = carry < < 1 ; } return x ; } int main ( ) { int num1 , num2 ; printf ( " \n Enter two numbers to perform addition using bitwise operators : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " \n Sum is %d " , bitwiseadd ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int a = 0 , b = 0 , c = 0 , a1 = 0 , b1 = 0 , com [ 5 ] = { 1 , 0 , 0 , 0 , 0 } ; int anum [ 5 ] = { 0 } , anumcp [ 5 ] = { 0 } , bnum [ 5 ] = { 0 } ; int acomp [ 5 ] = { 0 } , bcomp [ 5 ] = { 0 } , pro [ 5 ] = { 0 } , res [ 5 ] = { 0 } ; void binary ( ) { a1 = fabs ( a ) ; b1 = fabs ( b ) ; int r , r2 , i , temp ; for ( i = 0 ; i < 5 ; i + + ) { r = a1 % 2 ; a1 = a1 / 2 ; r2 = b1 % 2 ; b1 = b1 / 2 ; anum [ i ] = r ; anumcp [ i ] = r ; bnum [ i ] = r2 ; if ( r2 = = 0 ) { bcomp [ i ] = 1 ; } if ( r = = 0 ) { acomp [ i ] = 1 ; } }
#include <stdio.h> int n = 5 ; int c [ 10 ] = { 12 , 1 , 2 , 1 , 4 } ; int v [ 10 ] = { 4 , 2 , 2 , 1 , 10 } ; int W = 15 ; void simple_fill ( ) { int cur_w ; float tot_v ; int i , maxi ; int used [ 10 ] ; for ( i = 0 ; i < n ; + + i ) used [ i ] = 0 ; cur_w = W ; while ( cur_w > 0 ) { maxi = -1 ; for ( i = 0 ; i < n ; + + i ) if ( ( used [ i ] = = 0 ) & & ( ( maxi = = -1 ) || ( ( float ) v [ i ] / c [ i ] > ( float ) v [ maxi ] / c [ maxi ] ) ) ) maxi = i ; used [ maxi ] = 1 ; cur_w - = c [ maxi ] ; tot_v + = v [ maxi ] ; if ( cur_w > = 0 ) printf ( " Added object %d ( %d$ , %dKg ) completely in the bag. Space left : %d.\n  " , maxi + 1 , v [ maxi ] , c [ maxi ] , cur_w ) ; else { printf ( " Added %d % % ( %d$ , %dKg ) of object %d in the bag.\n  " , ( int ) ( ( 1 + ( float ) cur_w / c [ maxi ] ) * 100 ) , v [ maxi ] , c [ maxi ] , maxi + 1 ) ; tot_v - = v [ maxi ] ; tot_v + = ( 1 + ( float ) cur_w / c [ maxi ] ) * v [ maxi ] ; } } printf ( " Filled the bag with objects worth %.2f$.\n  " , tot_v ) ; } int main ( int argc , char * argv [ ] ) { simple_fill ( ) ; return 0 ; }
#include <stdio.h> void printarray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void partition ( int n ) { int p [ n ] ;
#include <stdio.h> void binPacking ( int * a , int size , int n ) { int binCount = 1 , i ; int s = size ; for ( i = 0 ; i < n ; i + + ) { if ( s - * ( a + i ) > 0 ) { s - = * ( a + i ) ; continue ; } else { binCount + + ; s = size ; i-- ; } } printf ( " Number of bins required : %d " , binCount ) ; } int main ( int argc , char * * argv ) { printf ( " Enter the number of items in Set : " ) ; int n ; int a [ n ] , i ; int size ; scanf ( " %d " , & n ) ; printf ( " Enter %d items : " , n ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & a [ i ] ) ; printf ( " Enter the bin size : " ) ; scanf ( " %d " , & size ) ; binPacking ( a , size , n ) ; return 0 ; }
#include <stdio.h> int max ( int a , int b ) { return ( a > b ) ? a : b ; }
#include <stdio.h> void selectionSort ( int arr [ ] , int size ) { int i , j ; for ( i = 0 ; i < size ; i + + ) { for ( j = i ; j < size ; j + + ) { if ( arr [ i ] > arr [ j ] ) swap ( & arr [ i ] , & arr [ j ] ) ; } } }
#include <stdio.h> #include <stdlib.h> #define MAX 100void random_shuffle ( int arr [ ] ) { srand ( time ( NULL ) ) ; int i , j , temp ; for ( i = MAX - 1 ; i > 0 ; i-- ) { j = rand ( ) % ( i + 1 ) ; temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } int partion ( int arr [ ] , int p , int r ) { int pivotIndex = p + rand ( ) % ( r - p + 1 ) ;
#include <stdio.h> void shellsort ( int arr [ ] , int num ) { int i , j , k , tmp ; for ( i = num / 2 ; i > 0 ; i = i / 2 ) { for ( j = i ; j < num ; j + + ) { for ( k = j - i ; k > = 0 ; k = k - i ) { if ( arr [ k + i ] > = arr [ k ] ) break ; else { tmp = arr [ k ] ; arr [ k ] = arr [ k + i ] ; arr [ k + i ] = tmp ; } } } } } int main ( ) { int arr [ 30 ] ; int k , num ; printf ( " Enter total no. of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter %d numbers : " , num ) ; for ( k = 0 ; k < num ; k + + ) { scanf ( " %d " , & arr [ k ] ) ; } shellsort ( arr , num ) ; printf ( " \n  Sorted array is : " ) ; for ( k = 0 ; k < num ; k + + ) printf ( " %d " , arr [ k ] ) ; return 0 ; }
#include <stdio.h> void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } void shakersort ( int a [ ] , int n ) { int p , i ; for ( p = 1 ; p < = n / 2 ; p + + ) { for ( i = p - 1 ; i < n - p ; i + + ) if ( a [ i ] > a [ i + 1 ] ) swap ( & a [ i ] , & a [ i + 1 ] ) ; for ( i = n - p - 1 ; i > = p ; i-- ) if ( a [ i ] < a [ i-1 ] ) swap ( & a [ i ] , & a [ i - 1 ] ) ; } } int main ( ) { int arr [ 10 ] = { 43 , 432 , 36 , 5 , 6 , 57 , 94 , 63 , 3 , 44 } ; int i ; shakersort ( arr , 10 ) ; for ( i = 0 ; i < 10 ; i + + ) printf ( " %d " , arr [ i ] ) ; return 0 ; }
#include <stdio.h> void stoogesort ( int [ ] , int , int ) ; void main ( ) { int arr [ 100 ] , i , n ; printf ( " How many elements do you want to sort : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & arr [ i ] ) ; stoogesort ( arr , 0 , n - 1 ) ; printf ( " Sorted array : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d " , arr [ i ] ) ; } printf ( " \n  " ) ; } void stoogesort ( int arr [ ] , int i , int j ) { int temp , k ; if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } if ( ( i + 1 ) > = j ) return ; k = ( int ) ( ( j - i + 1 ) / 3 ) ; stoogesort ( arr , i , j - k ) ; stoogesort ( arr , i + k , j ) ; stoogesort ( arr , i , j - k ) ; }
#include <stdio.h> #define MAX 10int linearsearch ( int numbers [ ] , int key ) { int i ; for ( i = 0 ; i < MAX ; i + + ) { if ( key = = numbers [ i ] ) return i ; } return -1 ; } int binarysearch ( int numbers [ ] , int key ) { int l = 0 , u = MAX - 1 ; int c , mid ; while ( l < = u ) { mid = ( l + u ) / 2 ; if ( key = = numbers [ mid ] ) { return mid ; } else if ( key < numbers [ mid ] ) { u = mid - 1 ; } else l = mid + 1 ; } return -1 ; } int main ( ) { int numbers [ MAX ] ; int i ; int index , key ; printf ( " Enter %d numbers : " , MAX ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & numbers [ i ] ) ; } printf ( " \n Enter a key to find using linear search : " ) ; scanf ( " %d " , & key ) ; index = linearsearch ( numbers , key ) ; if ( index > = 0 ) printf ( " \n  %d found at index %d using linear search. " , key , index ) ; else printf ( " \n Not found!! " ) ; printf ( " \n Enter %d numbers in increasing order : " , MAX ) ; for ( i = 0 ; i < MAX ; i + + ) scanf ( " %d " , & numbers [ i ] ) ; printf ( " \n Enter a key to find using binary search : " ) ; scanf ( " %d " , & key ) ; index = binarysearch ( numbers , key ) ; if ( index > = 0 ) printf ( " Found at index %d " , index ) ; else printf ( " \n Not found!!! " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int interpolationsearch ( int sortedArray [ ] , int toFind , int len ) { int low = 0 ; int high = len - 1 ; int mid ; while ( sortedArray [ low ] < = toFind & & sortedArray [ high ] > = toFind ) { if ( sortedArray [ high ] - sortedArray [ low ] = = 0 ) return ( low + high ) / 2 ; mid = low + ( ( toFind - sortedArray [ low ] ) * ( high - low ) ) / ( sortedArray [ high ] - sortedArray [ low ] ) ; if ( sortedArray [ mid ] < toFind ) low = mid + 1 ; else if ( sortedArray [ mid ] > toFind ) high = mid - 1 ; else return mid ; } if ( sortedArray [ low ] = = toFind ) return low ; else return -1 ; } int main ( ) { int arr [ 200 ] , len , number , i , pos ; printf ( " How many elements you want to enter : " ) ; scanf ( " %d " , & len ) ; printf ( " \n Enter %d elements in increasing order : " , len ) ; for ( i = 0 ; i < len ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Enter an element to search : " ) ; scanf ( " %d " , & number ) ; pos = interpolationsearch ( arr , number , len ) ; if ( pos ! = -1 ) printf ( " \n Element found at postion %d . " , pos ) ; else printf ( " \n Element NOT found!!! " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int partition ( int * a , int low , int high ) { int left = low ; int pivotIdx = low + ( high - low ) / 2 ; int pivot = a [ pivotIdx ] ; a [ pivotIdx ] = a [ high ] ; a [ high ] = pivot ; pivotIdx = high ; int partitionIdx = low ; while ( left < high ) { if ( a [ left ] < pivot ) { int tmp = a [ left ] ; a [ left ] = a [ partitionIdx ] ; a [ partitionIdx ] = tmp ; + + partitionIdx ; } + + left ; } a [ pivotIdx ] = a [ partitionIdx ] ; a [ partitionIdx ] = pivot ; return partitionIdx ; } int quickselect ( int * a , int low , int high , int k ) { if ( low = = high ) return a [ low ] ; int pivotIdx = partition ( a , low , high ) ; int sizeOfLeftSubArray = pivotIdx - low + 1 ; if ( sizeOfLeftSubArray > k ) { return quickselect ( a , low , pivotIdx-1 , k ) ; } else if ( sizeOfLeftSubArray < k ) { return quickselect ( a , pivotIdx + 1 , high , k-sizeOfLeftSubArray ) ; } else { return a [ pivotIdx ] ; } } int main ( ) { int arr [ ] = { 4 , 5 , 22 , 49 , 64 , 43 , 32 , 323 , 78 , 90 } ; int k ; printf ( " \n Enter the number 'k' to find the 'kth' largest element : " ) ; scanf ( " %d " , & k ) ; printf ( " \n Kth largest element is %d " , quickselect ( arr , 0 , 9 , k ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int fibsearch ( int a [ ] , int n , long x ) { int inf = 0 , pos , k ; static int kk = -1 , nn = -1 ; static int fib [ ] = { 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , 233 , 377 , 610 , 98 , 1597 , 2584 , 4181 , 6765 , 10946 , 17711 , 28657 , 46368 , 75025 , 121393 , 196418 , 317811 , 514229 , 832040 , 1346269 , 2178309 , 3524578 , 5702887 , 9227465 , 14930352 , 24157817 , 39088169 , 63245986 , 102334155 , 165580141 } ; if ( nn ! = n ) { k = 0 ; while ( fib [ k ] < n ) k + + ; kk = k ; nn = n ; } else k = kk ; while ( k > 0 ) { pos = inf + fib [ --k ] ; if ( ( pos > = n ) || ( x < a [ pos ] ) ) ; else if ( x > a [ pos ] ) { inf = pos + 1 ; k-- ; } else { return pos ; } } return -1 ; } main ( ) { int arr [ ] = { 2 , 3 , 45 , 56 , 67 , 78 , 89 , 99 , 100 , 101 } ; int num , pos ; printf ( " \n Enter an element to search : " ) ; scanf ( " %d " , & num ) ; pos = fibsearch ( arr , 10 , num ) ; if ( pos > = 0 ) printf ( " \n Element is at index : %d " , fibsearch ( arr , 10 , num ) ) ; else printf ( " \n Element NOT found!! " ) ; }
#include <stdio.h> #define MAX 10int min_linearsearch ( int numbers [ ] ) { int min = numbers [ 0 ] ; int i ; for ( i = 1 ; i < MAX ; i + + ) { if ( min > numbers [ i ] ) min = numbers [ i ] ; } return min ; } int main ( ) { int numbers [ MAX ] ; int i ; int min ; printf ( " Enter %d numbers : " , MAX ) ; for ( i = 0 ; i < MAX ; i + + ) { scanf ( " %d " , & numbers [ i ] ) ; } min = min_linearsearch ( numbers ) ; printf ( " \n Minimum number in the array is : %d\n  " , min ) ; return 0 ; }
#include <stdio.h> void max_heapify ( int * a , int i , int n ) { int j , temp ; temp = a [ i ] ; j = 2 * i ; while ( j < = n ) { if ( j < n & & a [ j + 1 ] > a [ j ] ) j = j + 1 ; if ( temp > a [ j ] ) break ; else if ( temp < = a [ j ] ) { a [ j / 2 ] = a [ j ] ; j = 2 * j ; } } a [ j / 2 ] = temp ; return ; } int binarysearchmax ( int * a , int n ) { int i ; for ( i = n / 2 ; i > = 1 ; i-- ) { max_heapify ( a , i , n ) ; } return a [ 1 ] ; } int main ( ) { int n , i , x , max ; int a [ 20 ] ; printf ( " Enter no of elements of array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter %d elements : " , n ) ; for ( i = 1 ; i < = n ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } max = binarysearchmax ( a , n ) ; printf ( " \n Maximum element is : %d " , max ) ; return 0 ; }
#include <stdio.h> #include <string.h> main ( ) { int smallest , secondsmallest ; int array [ 100 ] , size , i ; printf ( " \n  How many elements do you want to enter : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter %d elements : " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & array [ i ] ) ; if ( array [ 0 ] < array [ 1 ] ) { smallest = array [ 0 ] ; secondsmallest = array [ 1 ] ; } else { smallest = array [ 1 ] ; secondsmallest = array [ 0 ] ; } for ( i = 2 ; i < size ; i + + ) { if ( array [ i ] < smallest ) { secondsmallest = smallest ; smallest = array [ i ] ; } else if ( array [ i ] < secondsmallest ) { secondsmallest = array [ i ] ; } } printf ( " \n Second smallest element is %d " , secondsmallest ) ; }
#include <stdio.h> void print ( const int * v , const int size ) { int i ; if ( v ! = 0 ) { for ( i = 0 ; i < size ; i + + ) { printf ( " %4d " , v [ i ] ) ; } printf ( " \n  " ) ; } } void alexanderbogomolyn ( int * Value , int N , int k ) { static level = -1 ; int i ; level = level + 1 ; Value [ k ] = level ; if ( level = = N ) print ( Value , N ) ; else for ( i = 0 ; i < N ; i + + ) if ( Value [ i ] = = 0 ) alexanderbogomolyn ( Value , N , i ) ; level = level-1 ; Value [ k ] = 0 ; } int main ( ) { int N = 4 ; int i ; int Value [ N ] ; for ( i = 0 ; i < N ; i + + ) { Value [ i ] = 0 ; } printf ( " \n Permutation using Alexander Bogomolyn's algorithm : " ) ; alexanderbogomolyn ( Value , N , 0 ) ; return 0 ; }
#include <stdio.h> #include <string.h> void swap ( char * x , char * y ) { char temp ; temp = * x ; * x = * y ; * y = temp ; } void permute ( char * a , int i , int n ) { int j ; if ( i = = n ) printf ( " %s\n  " , a ) ; else { for ( j = i ; j < = n ; j + + ) { swap ( ( a + i ) , ( a + j ) ) ; permute ( a , i + 1 , n ) ; swap ( ( a + i ) , ( a + j ) ) ;
#include <stdio.h> #include <stdlib.h> int len ; void swap ( int * x , char * y ) { int temp ; temp = * x ; * x = * y ; * y = temp ; } void print ( const int * v ) { int i ; int size = len ; if ( v ! = 0 ) { for ( i = 0 ; i < size ; i + + ) { printf ( " %4d " , v [ i ] ) ; } printf ( " \n  " ) ; } } void heappermute ( int v [ ] , int n ) { int i ; if ( n = = 1 ) { print ( v ) ; } else { for ( i = 0 ; i < n ; i + + ) { heappermute ( v , n-1 ) ; if ( n % 2 = = 1 ) { swap ( & v [ 0 ] , & v [ n-1 ] ) ; } else { swap ( & v [ i ] , & v [ n-1 ] ) ; } } } } int main ( ) { int num [ 11 ] ; int i ; printf ( " How many numbers you want to enter : " , len ) ; scanf ( " %d " , & len ) ; printf ( " \n Enter %d numbers : " ) ; for ( i = 0 ; i < len ; i + + ) scanf ( " %d " , & num [ i ] ) ; heappermute ( num , len ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define N 10 void print ( int * num , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , num [ i ] ) ; printf ( " \n  " ) ; } int main ( ) { int num [ N ] ; int * ptr ; int temp ; int i , n , j ; printf ( " \n How many number you want to enter : " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter a list of numbers to see all combinations : \n  " ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & num [ i ] ) ; for ( j = 1 ; j < = n ; j + + ) { for ( i = 0 ; i < n-1 ; i + + ) { temp = num [ i ] ; num [ i ] = num [ i + 1 ] ; num [ i + 1 ] = temp ; print ( num , n ) ; } } return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct { int first ; int n ; int level ; } Call ; void print ( int n , int * a ) { int i ; for ( i = 0 ; i < = n ; i + + ) { printf ( " %d " , a [ i ] ) ; } printf ( " \n  " ) ; } void integerPartition ( int n , int * a ) { int first ; int i ; int top = 0 ; int level = 0 ; Call * stack = ( Call * ) malloc ( sizeof ( Call ) * 1000 ) ; stack [ 0 ] .first = -1 ; stack [ 0 ] .n = n ; stack [ 0 ] .level = level ; while ( top > = 0 ) { first = stack [ top ] .first ; n = stack [ top ] .n ; level = stack [ top ] .level ; if ( n > = 1 ) { if ( first = = - 1 ) { a [ level ] = n ; print ( level , a ) ; first = ( level = = 0 ) ? 1 : a [ level-1 ] ; i = first ; } else { i = first ; i + + ; } if ( i < = n / 2 ) { a [ level ] = i ; stack [ top ] .first = i ; top + + ; stack [ top ] .first = -1 ; stack [ top ] .n = n - i ; stack [ top ] .level = level + 1 ; } else { top-- ; } } else { top -- ; } } } int main ( ) { int n = 4 ; int * a = ( int * ) malloc ( sizeof ( int ) * n ) ; printf ( " \n The integer partition for %d is : \n  " , n ) ; integerPartition ( n , a ) ; return ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> #define MAX_VERTICES 30#define MAX_EDGES 10 typedef unsigned char vertex ; int main ( ) { srand ( time ( NULL ) ) ; int numberOfVertices = rand ( ) % MAX_VERTICES ; srand ( time ( NULL ) ) ; int maxNumberOfEdges = rand ( ) % MAX_EDGES ; if ( numberOfVertices = = 0 ) numberOfVertices + + ; vertex * * * graph ; printf ( " Total Vertices = %d , Max # of Edges = %d\n  " , numberOfVertices , maxNumberOfEdges ) ; if ( ( graph = ( vertex * * * ) malloc ( sizeof ( vertex * * ) * numberOfVertices ) ) = = NULL ) { printf ( " Could not allocate memory for graph\n  " ) ; exit ( 1 ) ; } int vertexCounter = 0 ; int edgeCounter = 0 ; for ( vertexCounter = 0 ; vertexCounter < numberOfVertices ; vertexCounter + + ) { if ( ( graph [ vertexCounter ] = ( vertex * * ) malloc ( sizeof ( vertex * ) * maxNumberOfEdges ) ) = = NULL ) { printf ( " Could not allocate memory for edges\n  " ) ; exit ( 1 ) ; } for ( edgeCounter = 0 ; edgeCounter < maxNumberOfEdges ; edgeCounter + + ) { if ( ( graph [ vertexCounter ] [ edgeCounter ] = ( vertex * ) malloc ( sizeof ( vertex ) ) ) = = NULL ) { printf ( " Could not allocate memory for vertex\n  " ) ; exit ( 1 ) ; } } } vertexCounter = 0 ; edgeCounter = 0 ; for ( vertexCounter = 0 ; vertexCounter < numberOfVertices ; vertexCounter + + ) { printf ( " %d : \t " , vertexCounter ) ; for ( edgeCounter = 0 ; edgeCounter < maxNumberOfEdges ; edgeCounter + + ) { if ( rand ( ) %2 = = 1 ) { int linkedVertex = rand ( ) % numberOfVertices ; graph [ vertexCounter ] [ edgeCounter ] = graph [ linkedVertex ] ; printf ( " %d , " , linkedVertex ) ; } else { graph [ vertexCounter ] [ edgeCounter ] = NULL ; } } printf ( " \n  " ) ; } return 1 ; }
#include <stdio.h> #include <stdlib.h> #include <conio.h> struct node { int key ; int value ; struct node * next ; } ; struct arrayitem { struct node * head ; struct node * tail ; } ; struct arrayitem * array ; int size = 0 ; int max = 10 ; int hashcode ( int key ) { return ( key % max ) ; } struct node * get_element ( struct node * list , int find_index ) ; void remove_element ( int key ) ; void rehash ( ) ; void init_array ( ) ; void insert ( int key , int value ) { float n = 0.0 ; int index = hashcode ( key ) ; struct node * list = ( struct node * ) array [ index ] .head ; struct node * item = ( struct node * ) malloc ( sizeof ( struct node ) ) ; item-> key = key ; item-> value = value ; item-> next = NULL ; if ( list = = NULL ) { printf ( " Inserting %d ( key ) and %d ( value ) \n  " , key , value ) ; array [ index ] .head = item ; array [ index ] .tail = item ; size + + ; } else { int find_index = find ( list , key ) ; if ( find_index = = -1 ) { array [ index ] .tail-> next = item ; array [ index ] .tail = item ; size + + ; } else { struct node * element = get_element ( list , find_index ) ; element-> value = value ; } }
#include <stdio.h> #include <stdlib.h> struct item { int key ; int value ; } ; struct hashtable_item { int flag ; struct item * data ; } ; struct hashtable_item * array ; int size = 0 ; int max = 10 ; void init_array ( ) { int i ; for ( i = 0 ; i < max ; i + + ) { array [ i ] .flag = 0 ; array [ i ] .data = NULL ; } } int hashcode ( int key ) { return ( key % max ) ; } void insert ( int key , int value ) { int index = hashcode ( key ) ; int i = index ; struct item * new_item = ( struct item * ) malloc ( sizeof ( struct item ) ) ; new_item-> key = key ; new_item-> value = value ; while ( array [ i ] .flag = = 1 ) { if ( array [ i ] .data-> key = = key ) { printf ( " \n  Key already exists , hence updating its value \n  " ) ; array [ i ] .data-> value = value ; return ; } i = ( i + 1 ) % max ; if ( i = = index ) { printf ( " \n  Hash table is full , cannot insert any more item \n  " ) ; return ; } } array [ i ] .flag = 1 ; array [ i ] .data = new_item ; size + + ; printf ( " \n  Key ( %d ) has been inserted \n  " , key ) ; } void remove_element ( int key ) { int index = hashcode ( key ) ; int i = index ; while ( array [ i ] .flag ! = 0 ) { if ( array [ i ] .flag = = 1 & & array [ i ] .data-> key = = key ) {
#include <stdio.h> int main ( ) { printf ( " Hello World! %d \n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int y = 10000 ; int y = 34 ; printf ( " Hello World! %d\n  " , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int main = 3 ; printf ( " %d " , main ) ; return 0 ; }
#include <stdio.h> int main ( ) { int ThisIsVariableName = 12 ; int ThisIsVariablename = 14 ; printf ( " %d " , ThisIsVariablename ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int i ; for ( i = 0 ; i < 5 ; i + + ) if ( ( char ) a [ i ] = = '5' ) printf ( " %d\n  " , a [ i ] ) ; else printf ( " FAIL\n  " ) ; }
#include <stdio.h> int main ( ) { signed char chr ; chr = 128 ; printf ( " %d\n  " , chr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; int i = 0 ; FILE * file ; file = fopen ( " test.txt " , " w + " ) ; fprintf ( file , " %c " , 'a' ) ; fprintf ( file , " %c " , -1 ) ; fprintf ( file , " %c " , 'b' ) ; fclose ( file ) ; file = fopen ( " test.txt " , " r " ) ; while ( ( c = fgetc ( file ) ) ! = -1 ) printf ( " %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f1 = 0.1 ; if ( f1 = = 0.1 ) printf ( " equal\n  " ) ; else printf ( " not equal\n  " ) ; }
#include <stdio.h> int main ( ) { float f1 = 0.1 ; if ( f1 = = 0.1f ) printf ( " equal\n  " ) ; else printf ( " not equal\n  " ) ; }
#include <stdio.h> int main ( ) { int x = 10000 ; double y = 56 ; int * p = & x ; double * q = & y ; printf ( " p and q are %d and %d " , sizeof ( p ) , sizeof ( q ) ) ; return 0 ; }
#include <stdio.h> union Sti { int nu ; char m ; } ; int main ( ) { union Sti s ; printf ( " %d " , sizeof ( s ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 'a' ; printf ( " %f " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { enum { ORANGE = 5 , MANGO , BANANA = 4 , PEACH } ; printf ( " PEACH = %d\n  " , PEACH ) ; }
#include <stdio.h> int main ( ) { printf ( " C programming %s " , " Class by\n  %s Sanfoundry " , " WOW " ) ; }
#include <stdio.h> #define a 10 int main ( ) { const int a = 5 ; printf ( " a = %d\n  " , a ) ; }
#include <stdio.h> int main ( ) { int var = 010 ; printf ( " %d " , var ) ; }
#include <stdio.h> enum birds { SPARROW , PEACOCK , PARROT } ; enum animals { TIGER = 8 , LION , RABBIT , ZEBRA } ; int main ( ) { enum birds m = TIGER ; int k ; k = m ; printf ( " %d\n  " , k ) ; return 0 ; }
#include <stdio.h> #define MAX 2 enum bird { SPARROW = MAX + 1 , PARROT = SPARROW + MAX } ; int main ( ) { enum bird b = PARROT ; printf ( " %d\n  " , b ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " x " ; char c = 'x' ; char ary [ 1 ] ; ary [ 0 ] = c ; printf ( " %d %d " , strlen ( str ) , strlen ( ary ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sanfoundry\rclass\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sanfoundry\r\n class\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int p ; p = 4 ; printf ( " p is %d " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int k = 4 ; int * const p = & k ; int r = 3 ; p = & r ; printf ( " %d " , p ) ; }
#include <stdio.h> void main ( ) { int const k = 5 ; k + + ; printf ( " k is %d " , k ) ; }
#include <stdio.h> int const print ( ) { printf ( " Sanfoundry.com " ) ; return 0 ; } void main ( ) { print ( ) ; }
#include <stdio.h> void main ( ) { int k = 4 ; float k = 4 ; printf ( " %d " , k ) }
#include <stdio.h> int main ( ) { short int i = 20 ; char c = 97 ; printf ( " %d , %d , %d\n  " , sizeof ( i ) , sizeof ( c ) , sizeof ( c + i ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 ; a + = b - = a ; printf ( " %d %d " , a , b ) ; }
#include <stdio.h> int main ( ) { int a = 4 , n , i , result = 0 ; scanf ( " %d " , n ) ; for ( i = 0 ; i < n ; i + + ) result + = a ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( x < 1 ) printf ( " hello " ) ; if ( x = = 5 ) printf ( " hi " ) ; else printf ( " no " ) ; }
#include <stdio.h> int x ; void main ( ) { if ( x ) printf ( " hi " ) ; else printf ( " how are u " ) ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( true ) ; printf ( " hello " ) ; }
#include <stdio.h> void main ( ) { int x = 0 ; if ( x = = 0 ) printf ( " hi " ) ; else printf ( " how are u " ) ; printf ( " hello " ) ; }
#include <stdio.h> void main ( ) { int x = 5 ; if ( x < 1 ) ; printf ( " Hello " ) ; }
#include <stdio.h> void main ( ) { double ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %lf " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1 " ) ; break ; case 2 : printf ( " 2 " ) ; break ; } }
#include <stdio.h> void main ( ) { char * ch ; printf ( " enter a value between 1 to 3 : " ) ; scanf ( " %s " , ch ) ; switch ( ch ) { case " 1 " : printf ( " 1 " ) ; break ; case " 2 " : printf ( " 2 " ) ; break ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1\n  " ) ; default : printf ( " 2\n  " ) ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch ) { case 1 : printf ( " 1\n  " ) ; break ; printf ( " Hi " ) ; default : printf ( " 2\n  " ) ; } }
#include <stdio.h> void main ( ) { int ch ; printf ( " enter a value between 1 to 2 : " ) ; scanf ( " %d " , & ch ) ; switch ( ch , ch + 1 ) { case 1 : printf ( " 1\n  " ) ; break ; case 2 : printf ( " 2 " ) ; break ; } }
#include <stdio.h> int main ( ) { while ( ) printf ( " In while loop " ) ; printf ( " After loop\n  " ) ; }
#include <stdio.h> int main ( ) { do printf ( " In while loop " ) ; while ( 0 ) ; printf ( " After loop\n  " ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { i + + ; printf ( " In while loop\n  " ) ; } while ( i < 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; do { i + + ; printf ( " in while loop\n  " ) ; } while ( i < 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; while ( i < 3 ) i + + ; printf ( " In while loop\n  " ) ; }
#include <stdio.h> void main ( ) { int i = 2 ; do { printf ( " Hi " ) ; } while ( i < 2 ) }
#include <stdio.h> void main ( ) { int i = 0 ; while ( + + i ) { printf ( " H " ) ; } }
#include <stdio.h> void main ( ) { int i = 0 ; do { printf ( " Hello " ) ; } while ( i ! = 0 ) ; }
#include <stdio.h> void main ( ) { int i = 5 , k ; if ( i = = 0 ) goto label ; label : printf ( " %d " , i ) ; printf ( " Hey " ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; goto l1 ; printf ( " %d " , 2 ) ; l1 : goto l2 ; printf ( " %d " , 3 ) ; l2 : printf ( " %d " , 4 ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; l1 : l2 : printf ( " %d " , 2 ) ; printf ( " %d\n  " , 3 ) ; }
#include <stdio.h> int main ( ) { printf ( " %d " , 1 ) ; goto l1 ; printf ( " %d " , 2 ) ; } void foo ( ) { l1 : printf ( " 3 " , 3 ) ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; while ( i < 2 ) { l1 : i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; while ( l1 : i < 2 ) { i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; l1 : while ( i < 2 ) { i + + ; while ( j < 3 ) { printf ( " loop\n  " ) ; goto l1 ; } } }
#include <stdio.h> int i ; int main ( ) { extern int i ; if ( i = = 0 ) printf ( " scope rules\n  " ) ; }
#include <stdio.h> int main ( ) { extern ary1 [ ] ; printf ( " scope rules\n  " ) ; }
#include <stdio.h> int main ( ) { extern ary1 [ ] ; printf ( " %d\n  " , ary1 [ 0 ] ) ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < 5 ; i + + ) int a = i ; printf ( " %d " , a ) ; }
#include <stdio.h> int b ; int main ( ) { int c ; return 0 ; } int a ;
#include <stdio.h> int main ( ) { foo ( ) ; foo ( ) ; } void foo ( ) { int i = 11 ; printf ( " %d " , i ) ; static int j = 12 ; j = j + 1 ; printf ( " %d\n  " , j ) ; }
#include <stdio.h> void func ( ) ; int main ( ) { static int b = 20 ; func ( ) ; } void func ( ) { static int b ; printf ( " %d " , b ) ; }
#include <stdio.h> int main ( ) { int one = 1 , two = 2 ; #ifdef next one = 2 ; two = 1 ; #endif printf ( " %d , %d " , one , two ) ; }
#include <stdio.h> #include " test.h " #include " test.h " int main ( ) {
#include <stdio.h> #define foo ( m , n ) m ## n void myfunc ( ) ; int main ( ) { myfunc ( ) ; } void myfunc ( ) { printf ( " %d\n  " , foo ( 2 , 3 ) ) ; }
#include <stdio.h> void main ( ) { #define max 37 ; printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define max 37 printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define const int const max = 32 ; printf ( " %d " , max ) ; }
#include <stdio.h> void main ( ) { #define max 45 max = 32 ; printf ( " %d " , max ) ; }
#include <stdio.h> # define max void m ( ) { printf ( " hi " ) ; } void main ( ) { max ; m ( ) ; }
#include <stdio.h> #define A 1 + 2 #define B 3 + 4 int main ( ) { int var = A * B ; printf ( " %d\n  " , var ) ; }
#include <stdio.h> #define var 20 ) ; int main ( ) { printf ( " %d\n  " , var }
#include <stdio.h> void main ( ) { char * s = " hello " ; char * p = s * 3 ; printf ( " %c\t %c " , * p , s [ 1 ] ) ; }
#include <stdio.h> void main ( ) { char * s = " hello " ; char * p = s + 2 ; printf ( " %c\t %c " , * p , s [ 1 ] ) ; }
#include <stdio.h> int main ( ) { void * p ; int a [ 4 ] = { 1 , 2 , 3 , 8 } ; p = & a [ 3 ] ; int * ptr = & a [ 2 ] ; int n = p - ptr ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { void * p ; int a [ 4 ] = { 1 , 2 , 3 , 4 } ; p = & a [ 3 ] ; int * ptr = & a [ 2 ] ; int n = ( int * ) p - ptr ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int b [ 4 ] = { 1 , 2 , 3 , 4 } ; int n = & b [ 3 ] - & a [ 2 ] ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int * p = & a [ 1 ] ; int * ptr = & a [ 2 ] ; ptr = ptr * 1 ; printf ( " %d\n  " , * ptr ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; int * ptr = & a [ 2 ] ; float n = 1 ; ptr = ptr + n ; printf ( " %d\n  " , * ptr ) ; }
#include <stdio.h> int main ( ) { int a [ 4 ] = { 1 , 2 , 3 , 4 } ; void * p = & a [ 1 ] ; void * ptr = & a [ 2 ] ; int n = 1 ; n = ptr - p ; printf ( " %d\n  " , n ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * m ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * p ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; * * m = 6 ; printf ( " %d\n  " , k ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * r = & p ; printf ( " %d " , ( * * r ) ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * * r = & p ; printf ( " %p %p " , * r , a ) ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 , c = 3 ; int * ptr1 = & a , * ptr2 = & b , * ptr3 = & c ; int * * sptr = & ptr1 ;
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * * r = & p ; printf ( " %p %p " , * r , a ) ; }
#include <stdio.h> int main ( ) { int a = 1 , b = 2 , c = 3 ; int * ptr1 = & a ; int * * sptr = & ptr1 ;
#include <stdio.h> int main ( ) { int a = 10 ; int * * c - = & & a ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * m ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; printf ( " %d %d %d\n  " , k , * p , * * p ) ; }
#include <stdio.h> void main ( ) { int k = 5 ; int * p = & k ; int * * m = & p ; * * m = 6 ; printf ( " %d\n  " , k ) ; }
#include <stdio.h> void main ( ) { int a [ 3 ] = { 1 , 2 , 3 } ; int * p = a ; int * r = & p ; printf ( " %d " , ( * * r ) ) ; }
#include <stdio.h> int main ( ) { char * a [ 2 ] = { " hello " , " hi " } ; printf ( " %d " , sizeof ( a ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 2 ] [ 6 ] = { " hello " , " hi " } ; printf ( " %d " , sizeof ( a ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 2 ] [ 6 ] = { " hello " , " hi " } ; printf ( " %s " , * a + 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * a [ 2 ] = { " hello " , " hi " } ; printf ( " %s " , * ( a + 1 ) ) ; return 0 ; }
#include <stdio.h> int mul ( int a , int b , int c ) { return a * b * c ; } void main ( ) { int * function_pointer ; function_pointer = mul ; printf ( " The product of three numbers is : %d " , function_pointer ( 2 , 3 , 4 ) ) ; }
#include <stdio.h> int sub ( int a , int b , int c ) { return a - b - c ; } void main ( ) { int ( * function_pointer ) ( int , int , int ) ; function_pointer = & sub ; printf ( " The difference of three numbers is : %d " , ( * function_pointer ) ( 2 , 3 , 4 ) ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( ) = f ; int main ( int argc , char * argv [ ] ) { foo ( 10 ) ; return 0 ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( void ) = f ; int main ( int argc , char * argv [ ] ) { foo ( 10 ) ; return 0 ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ) ; void ( * foo ) ( float ) = f ; int main ( ) { foo ( 10 ) ; } void f ( int i ) { printf ( " %d\n  " , i ) ; }
#include <stdio.h> void f ( int ( * x ) ( int ) ) ; int myfoo ( int i ) ; int ( * foo ) ( int ) = myfoo ; int main ( ) { f ( foo ( 10 ) ) ; } void f ( int ( * i ) ( int ) ) { i ( 11 ) ; } int myfoo ( int i ) { printf ( " %d\n  " , i ) ; return i ; }
#include <stdio.h> void f ( int ( * x ) ( int ) ) ; int myfoo ( int ) ; int ( * foo ) ( ) = myfoo ; int main ( ) { f ( foo ) ; } void f ( int ( * i ) ( int ) ) { i ( 11 ) ; } int myfoo ( int i ) { printf ( " %d\n  " , i ) ; return i ; }
#include <stdio.h> struct student { char * name ; } ; struct student s ; struct student fun ( void ) { s.name = " newton " ; printf ( " %s\n  " , s.name ) ; s.name = " alan " ; return s ; } void main ( ) { struct student m = fun ( ) ; printf ( " %s\n  " , m.name ) ; m.name = " turing " ; printf ( " %s\n  " , s.name ) ; }
#include <stdio.h> struct student { char * name ; } ; void main ( ) { struct student s , m ; s.name = " st " ; m = s ; printf ( " %s %s " , s.name , m.name ) ; }
#include <stdio.h> struct temp { int a ; } s ; void func ( struct temp s ) { s.a = 10 ; printf ( " %d\t " , s.a ) ; } main ( ) { func ( s ) ; printf ( " %d\t " , s.a ) ; }
#include <stdio.h> struct student { char * name ; } ; struct student fun ( void ) { struct student s ; s.name = " alan " ; return s ; } void main ( ) { struct student m = fun ( ) ; s.name = " turing " ; printf ( " %s " , m.name ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; s-> c = " hello " ; printf ( " %s " , s-> c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student * s ; s-> c = " hello " ; printf ( " %s " , s-> c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; s-> c = " hello " ; printf ( " %s " , m.c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student m ; struct student * s = & m ; ( * s ) .c = " hello " ; printf ( " %s " , m.c ) ; }
#include <stdio.h> struct student { char * c ; } ; void main ( ) { struct student n ; struct student * s = & n ; ( * s ) .c = " hello " ; printf ( " %p\n  %p\n  " , s , & n ) ; }
#include <stdio.h> struct p { int x [ 2 ] ; } ; struct q { int * x ; } ; int main ( ) { struct p p1 = { 1 , 2 } ; struct q * ptr1 ; ptr1-> x = ( struct q * ) & p1.x ; printf ( " %d\n  " , ptr1-> x [ 1 ] ) ; }
#include <stdio.h> struct p { int x [ 2 ] ; } ; struct q { int * x ; } ; int main ( ) { struct p p1 = { 1 , 2 } ; struct q * ptr1 = ( struct q * ) & p1 ; ptr1-> x = ( struct q * ) & p1.x ; printf ( " %d\n  " , ptr1-> x [ 0 ] ) ; }
#include <stdio.h> struct p { int x ; int y ; } ; int main ( ) { struct p p1 [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; struct p * ptr1 = p1 ; printf ( " %d %d\n  " , ptr1-> x , ( ptr1 + 2 ) -> x ) ; }
#include <stdio.h> struct p { int x ; char y ; } ; int main ( ) { struct p p1 [ ] = { 1 , 92 , 3 , 94 , 5 , 96 } ; struct p * ptr1 = p1 ; int x = ( sizeof ( p1 ) / sizeof ( struct p ) ) ; printf ( " %d %d\n  " , ptr1-> x , ( ptr1 + x - 1 ) -> x ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student m ; s.c = m.c = " hi " ; m.point = & s ; ( m.point ) -> c = " hey " ; printf ( " %s\t %s\t " , s.c , m.c ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student m ; m.point = s ; ( m.point ) -> c = " hey " ; printf ( " %s " , s.c ) ; }
#include <stdio.h> struct student { char * c ; struct student point ; } ; void main ( ) { struct student s ; s.c = " hello " ; printf ( " %s " , s.c ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; printf ( " %d " , sizeof ( s ) ) ; }
#include <stdio.h> struct student { char * c ; struct student * point ; } ; void main ( ) { struct student s ; struct student * m = & s ; printf ( " %d " , sizeof ( student ) ) ; }
#include <stdio.h> struct p { int x ; char y ; struct p * ptr ; } ; int main ( ) { struct p p = { 1 , 2 , & p } ; printf ( " %d\n  " , p.ptr-> x ) ; return 0 ; }
#include <stdio.h> typedef struct p * q ; struct p { int x ; char y ; q ptr ; } ; typedef struct p * q ; int main ( ) { struct p p = { 1 , 2 , & p } ; printf ( " %d\n  " , p.ptr-> x ) ; return 0 ; }
#include <stdio.h> typedef struct student { char * a ; } stu ; void main ( ) { struct stu s ; s.a = " hi " ; printf ( " %s " , s.a ) ; }
#include <stdio.h> typedef struct student { char * a ; } stu ; void main ( ) { struct student s ; s.a = " hey " ; printf ( " %s " , s.a ) ; }
#include <stdio.h> typedef int integer ; int main ( ) { int i = 10 , * ptr ; float f = 20 ; integer j = i ; ptr = & j ; printf ( " %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int ( * ( x ( ) ) ) [ 2 ] ; typedef int ( * ( * ptr ) ( ) ) [ 2 ] ptrfoo ; int main ( ) { ptrfoo ptr1 ; ptr1 = x ; ptr1 ( ) ; return 0 ; } int ( * ( x ( ) ) ) [ 2 ] { int ( * ary ) [ 2 ] = malloc ( sizeof * ary ) ; return & ary ; }
#include <stdio.h> int * ( * ( x ( ) ) ) [ 2 ] ; typedef int * * ( * ptrfoo ) ( ) ) [ 2 ] ; int main ( ) { ptrfoo ptr1 ; ptr1 = x ; ptr1 ( ) ; return 0 ; } int * ( * ( x ( ) ) ) [ 2 ] { int ( * ary ) [ 2 ] = malloc ( sizeof * ary ) ; return & ary ; }
#include <stdio.h> typedef struct p { int x , y ; } ; int main ( ) { p k1 = { 1 , 2 } ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> typedef struct p { int x , y ; } k = { 1 , 2 } ; int main ( ) { p k1 = k ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> typedef struct p { int x , y ; } k ; int main ( ) { struct p p = { 1 , 2 } ; k k1 = p ; printf ( " %d\n  " , k1.x ) ; }
#include <stdio.h> struct p { char x : 2 ; int y : 2 ; } ; int main ( ) { struct p p ; p.x = 2 ; p.y = 1 ; p.x = p.x & p.y ; printf ( " %d\n  " , p.x ) ; }
#include <stdio.h> union u { struct p { unsigned char x : 2 ; unsigned int y : 2 ; } ; int x ; } ; int main ( ) { union u u ; u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u ; u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u.p.x = 2 ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u = { 2 } ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> union u { struct { unsigned char x : 2 ; unsigned int y : 2 ; } p ; int x ; } ; int main ( ) { union u u.p = { 2 } ; printf ( " %d\n  " , u.p.x ) ; }
#include <stdio.h> struct p { unsigned int x : 2 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 3 ; p.y = 1 ; printf ( " %d\n  " , sizeof ( p ) ) ; }
#include <stdio.h> struct p { unsigned int x : 2 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 3 ; p.y = 4 ; printf ( " %d\n  " , p.y ) ; }
#include <stdio.h> struct p { unsigned int x : 7 ; unsigned int y : 2 ; } ; int main ( ) { struct p p ; p.x = 110 ; p.y = 2 ; printf ( " %d\n  " , p.x ) ; }
#include <stdio.h> struct p { unsigned int x : 1 ; unsigned int y : 1 ; } ; int main ( ) { struct p p ; p.x = 1 ; p.y = 2 ; printf ( " %d\n  " , p.y ) ; }
#include <stdio.h> #include <stdarg.h> void func ( int , ... ) ; int main ( ) { func ( 2 , 3 , 5 , 7 , 11 , 13 ) ; return 0 ; } void func ( int n , ... ) { int number , i = 0 ; va_list start ; va_start ( start , n ) ; while ( i ! = 3 ) { number = va_arg ( start , int ) ; i + + ; } printf ( " %d " , number ) ; }
#include <stdio.h> int main ( ) { FILE * fp = stdin ; int n ; fprintf ( fp , " %d " , 45 ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d\n  " , 45 ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = stdout ; int n ; fprintf ( fp , " %d " , 45 ) ; fflush ( stdout ) ; fprintf ( stderr , " %d " , 65 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * str = " hello , world " ; char * str1 = " hello , world " ; if ( strcmp ( str , str1 ) ) printf ( " equal " ) ; else printf ( " unequal " ) ; }
#include <stdio.h> int main ( ) { char * str = " hello , world " ; char str1 [ 15 ] = " hello wo 9 " ; strcpy ( str , str1 ) ; printf ( " %s " , str1 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " hello , world " ; char str1 [ 9 ] ; strncpy ( str1 , str , 9 ) ; printf ( " %s %d " , str1 , strlen ( str1 ) ) ; }
#include <stdio.h> int main ( ) { char * str = " hello , world\n  " ; printf ( " %d " , strlen ( str ) ) ; }
#include <stdio.h> int main ( ) { char str [ 11 ] = " hello " ; char * str1 = " world " ; strcat ( str , str1 ) ; printf ( " %s %d " , str , str [ 10 ] ) ; }
#include <stdio.h> int main ( ) { char str [ 10 ] = " hello " ; char * str1 = " world " ; strncat ( str , str1 , 9 ) ; printf ( " %s " , str ) ; }
#include <stdio.h> int main ( ) { int n ; scanf ( " %d " , & n ) ; ungetc ( n , stdin ) ; scanf ( " %d " , & n ) ; printf ( " %d\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 20 ] ; fgets ( n , 19 , stdin ) ; ungetc ( n [ 0 ] , stdin ) ; scanf ( " %s " , n ) ; printf ( " %s\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 20 ] ; fgets ( n , 19 , stdin ) ; ungetc ( n [ 0 ] , stdin ) ; printf ( " %s\n  " , n ) ; return 0 ; }
#include <stdio.h> void main ( ) { char * p = calloc ( 100 , 1 ) ; p = " welcome " ; printf ( " %s\n  " , p ) ; }
#include <stdio.h> printf ( " %.0f " , 2.89 ) ;
#include <stdio.h> int main ( ) { float a = 2.455555555555 ; printf ( " %f " , a ) ; }
#include <stdio.h> printf ( " %d " , sizeof ( 'a' ) ) ;
#include <stdio.h> union temp { char a ; char b ; int c ; } t ; int main ( ) { printf ( " %d " , sizeof ( t ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int number , i ; int sum = 0 ; printf ( " Enter the maximum values of series n : " ) ; scanf ( " %d " , & number ) ; sum = pow ( ( ( number * ( number + 1 ) ) / 2 ) , 2 ) ; printf ( " Sum of the series : " ) ; for ( i = 1 ; i < = number ; i + + ) { if ( i ! = number ) printf ( " %d^3 + " , i ) ; else printf ( " %d^3 = %d " , i , sum ) ; } return 0 ; }
#include <stdio.h> void main ( int argc , char * argv [ ] ) { int n , last = 0 , prev = 1 , curr , cnt ; n = atoi ( argv [ 1 ] ) ; printf ( " Printing first %d fibonacci nos. -> " , n ) ; printf ( " %d " , last ) ; printf ( " %d " , prev ) ; cnt = 2 ; while ( cnt < = n-1 ) { curr = last + prev ; last = prev ; prev = curr ; cnt + + ; printf ( " %d " , curr ) ; } printf ( " \n  " ) ; }
#include <stdio.h> #define R2Y 1.64 #define Y2R 0.6093 int main ( void ) { int choice ; float yens , rupees ; printf ( " user , wanna to convert Yen to Rupee , enter 1 or\n if you " " wanna to convert Rupee to Yen , enter 2\n or enter q to " " quit\n  " ) ; while ( scanf ( " %d " , & choice ) = = 1 ) { if ( choice = = 1 ) { printf ( " user , enter what many YENs u wanna to convert to " " Rupees...\n  " ) ; scanf ( " %f " , & yens ) ; printf ( " %.2f YENs equal %.6f Rupees!\n \n  " , yens , yens * Y2R ) ; } else if ( choice = = 2 ) { printf ( " user , enter what many RUPEEs u wanna to convert to " " YENs...\n  " ) ; scanf ( " %f " , & rupees ) ; printf ( " %.2f RUPEEs equal %.6f YENs!\n \n  " , rupees , rupees * R2Y ) ; } printf ( " user , wanna to convert Yen to Rupee , enter 1 or \n if " " you wanna to convert Rupee to Yen , enter 2\n or enter q " " to quit\n  " ) ; } printf ( " Thank You!\n  " ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( void ) { int index , sum ; int boys [ SIZE ] ; printf ( " user enter no of boys in 10 classes...\n  " ) ; for ( index = 0 ; index < SIZE ; index + + ) scanf ( " %d " , & boys [ index ] ) ; printf ( " No. of boys you entered for 10 classes are as : \n  " ) ; for ( index = 0 ; index < SIZE ; index + + ) printf ( " %d\t " , boys [ index ] ) ; printf ( " \n  " ) ; printf ( " Summing up & Displaying boys in all classes...\n  " ) ; for ( index = 0 ; index < SIZE ; index + + ) { sum + = boys [ index ] ; ; } printf ( " Total boys in %d classes is %d\n  " , SIZE , sum ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num1 , num2 ; int sum ; num1 = num2 = 10 ; sum = num1 + num2 ; * Result is assigned to sum by the assignment operator. * / -num1 ; --num1 ; return 0 ; }
#include <stdio.h> int main ( void ) { char ch ; int i ; float fl ; fl = i = ch = 'C' ; printf ( " ch = %c , i = %d , fl = %2.2f\n  " , ch , i , fl ) ; ch = ch + 1 ; i = fl + 2 * ch ; fl = 2.0 * ch + i ; printf ( " ch = %c , i = %d , fl = %2.2f\n  " , ch , i , fl ) ; ch = 5212205.17 ; printf ( " Now ch = %c\n  " , ch ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int one , two , three ; one = two = three = 68 ; printf ( " one two three " ) ; printf ( " First round score %4d %8d %8d\n  " , one , two , three ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num = 1 ; while ( num < = 25 ) { printf ( " %4d %6d\n  " , num , num * num ) ; num = num + 1 ; } return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " integer division : 10 / 4 is %d \n  " , 10 / 4 ) ; printf ( " integer division : 12 / 3 is %d \n  " , 12 / 3 ) ; printf ( " integer division : 9 / 4 is %d \n  " , 9 / 4 ) ; printf ( " floating division : 9. / 4. is %1.2f \n  " , 9. / 4. ) ; printf ( " mixed division : 9. / 4 is %1.2f \n  " , 9. / 4 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { unsigned int b = 16 , result ; printf ( " value of exp. result = b > > 3 is %d\n  " , result = b > > 3 ) ; printf ( " value of b after right shift by 3 bits , is %d\n  " , b ) ; printf ( " value of exp. result = b < < 3 is %d\n  " , result = b < < 3 ) ; printf ( " value of b after left shift by 3 bits , is %d\n  " , b ) ; return 0 ; }
#include <stdio.h> int main ( void ) { unsigned int b = 16 ; printf ( " value of exp. b > > = 3 is %d\n  " , b > > = 3 ) ; printf ( " value of b after right shift by 3 bits , is %d\n  " , b ) ; printf ( " value of exp. b < < = 3 is %d\n  " , b < < = 3 ) ; printf ( " value of b after left shift by 3 bits , is %d\n  " , b ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int hall = -16 ; printf ( " value of exp. hall > > = 3 is %d\n  " , hall > > = 3 ) ; printf ( " value of hall , -ve value , after right shift by 3 bits , " " is %d\n  " , hall ) ; return 0 ; }
#include <stdio.h> void count1bits ( int ) ; int main ( void ) { int num ; printf ( " enter some unsigned integer number\n  " ) ; scanf ( " %d " , & num ) ; count1bits ( num ) ; return 0 ; } void count1bits ( int num1 ) { int ones = 0 ; while ( num1 ! = 0 ) { if ( num1 % 2 ! = 0 ) ones + + ; num1 > > = 1 ; } printf ( " the number of Ones in the Value is %d\n  " , ones ) ; }
#include <math.h> #include <stdio.h> int main ( void ) { const double ANSWER = 3.14159 ; double response ; printf ( " What is the value of pi?\n  " ) ; scanf ( " %lf " , & response ) ; while ( fabs ( response - ANSWER ) > 0.0001 ) { printf ( " Try again!\n  " ) ; scanf ( " %lf " , & response ) ; } printf ( " Close enough!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int true , false ; true = ( 10 > 5 ) ; false = ( 10 = = 5 ) ; printf ( " true = %d ; false = %d \n  " , true , false ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 5 ; while ( n ) printf ( " %2d is true\n  " , n-- ) ; printf ( " %2d is false\n  " , n ) ; n = -5 ; while ( n ) printf ( " %2d is true\n  " , n + + ) ; printf ( " %2d is false\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( void ) { long num ; long sum = 0L ; int status ; printf ( " Please enter an integer to be summed " ) ; printf ( " ( q to quit ) : " ) ; status = scanf ( " %ld " , & num ) ; while ( status = 1 ) { sum = sum + num ; printf ( " Please enter next integer ( q to quit ) : " ) ; status = scanf ( " %ld " , & num ) ; } printf ( " Those integers sum to %ld.\n  " , sum ) ; return 0 ; }
#include <stdio.h> #define PERIOD '.' int main ( void ) { int ch ; int charcount = 0 ; while ( ( ch = getchar ( ) ) ! = PERIOD ) { if ( ch ! = ' " ' & & ch ! = '\'' ) charcount + + ; } printf ( " There are %d non-quote characters.\n  " , charcount ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int num1 = 0 , num2 = 0 ; while ( num1 < 5 ) { num1 + + ; + + num2 ; printf ( " num1 %d , num2 = %d \n  " , num1 , num2 ) } return 0 ; }
#include <stdio.h> int main ( void ) { int x , y , z ; int a = 10 , b = 20 , c = 30 ; printf ( " The value of entire expression a + b , b + c , c + a " " is %d\n  " , ( a + b , b + c , c + a ) ) ; printf ( " Value of the entire exp. a , a + + , a + + ; is %d\n  " , ( a , a + + , a + + ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int x , y , z ; for ( x = getval ( ) , y = x + 1 ; y > = 0 ; x + + , y = x + 1 ) { ... x = getval ( ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a ; a = getval ( ) ; count ( a ) ; while ( a > 0 ) { ... a = getval ( ) ; count ( a ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a ; while ( a = getval ( ) , count ( a ) , a > 0 ) { ... } return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( void ) { int flag ; printf ( " User , type in some intger value...\n  " ) ; scanf ( " %d " , & flag ) ; if ( flag = = FALSE ) ( !flag ) ; if ( flag = = TRUE ) ( flag ) ; return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 _Bool new_count ( ) ; int main ( void ) { _Bool okey ; int count = 0 ; while ( ( okey = new_count ( ) ) = = TRUE ) { printf ( " No of Iteration Count is %d\n  " , + + count ) ; } printf ( " Bye!\n  " ) ; return 0 ; } _Bool new_count ( ) { _Bool new ; int a , b ; printf ( " user , enter two intgers...\n  " ) ; scanf ( " %d %d " , & a , & b ) ; if ( a = = b ) return new = 1 ; else return new = 0 ; }
#include <stdio.h> int main ( void ) { int n = 0 ; size_t intsize ; intsize = sizeof ( int ) ; printf ( " n = %d , n has %zd bytes ; all ints have %zd bytes.\n  " , + + n , sizeof + + n , intsize ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( int argc , char * * argv ) { char buffer [ 10 ] ; strncpy ( buffer , argv [ 1 ] , sizeof buffer - sizeof buffer [ 0 ] ) ; buffer [ sizeof buffer - 1 ] = '\0' ; return 0 ; }
#include <stdio.h> struct flexarray { char val ; int array [ ] ; } ; int main ( int argc , char * * argv ) { printf ( " sizeof ( struct flexarray ) = %zu bytes\n  " , sizeof ( struct flexarray ) ) ; return 0 ; }
#include <stddef.h> #include <stdio.h> size_t flexsize ( int n ) { char b [ n + 3 ] ; return sizeof b ; } int main ( void ) { size_t size = flexsize ( 10 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 1 ; int arr [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; printf ( " size of int a and value of a in sizeof ( a = 5 ) is %d bytes " " %d\n  " , sizeof ( a = 5 ) , a ) ; printf ( " size of int a and value of a in sizeof ( a + + ) is %d bytes %d\n  " , sizeof a + + , a ) ; printf ( " size of arr and value of int arr [ 5 ] in sizeof ( arr ) is %d bytes " " %d\n  " , sizeof ( arr ) , arr [ 5 ] ) ; printf ( " size of arr and value of int arr [ 0 ] in sizeof ( arr [ 0 ] = 10 ) is " " %d bytes %d\n  " , sizeof ( arr [ 0 ] = 10 ) , arr [ 0 ] ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 1 , b = 2 ; float val = 3 , z = 4 , x ; char new = 'A' , old = 'B' , ch ; x = a * b + val * new * old ; printf ( " The result of the exp. " x = a * b + val * new * old is %f\n  " , x = a * b + val * new * old ) ; ch = a * b + val * new * old ; printf ( " The result of the exp. " ch = a * b + val * new * old is %c\n  " , ch = a * b + val * new * old ) ; return 0 ; }
#include <stdio.h> char * itobstr ( int , char * ) ; void show_bstr ( const char * ) ; int invert_nbits ( int num , int no_bits ) ; int main ( void ) { int num , no_bits ; char str [ 8 * sizeof ( int ) + 1 ] ; puts ( " Enter some integer number... " ) ; puts ( " Non numeric number terminates the program! " ) ; while ( scanf ( " %d " , & num ) = = 1 ) { itobstr ( num , str ) ; printf ( " Number you entered is %d\n  " , num ) ; show_bstr ( str ) ; printf ( " Enter no of bits u wanna to invert in the binary string... " " \n  " ) ; scanf ( " %d " , & no_bits ) ; num = invert_nbits ( num , no_bits ) ; show_bstr ( itobstr ( num , str ) ) ; } printf ( " Thank you!\n  " ) ; return 0 ; } char * itobstr ( int n , char * bs ) { int i ; static int size = 8 * sizeof n ; for ( i = size - 1 ; i > = 0 ; i-- , n > > = 1 ) bs [ i ] = ( 00000001 & n ) + '0' ; bs [ size ] = '\0' ; return bs ; } void show_bstr ( const char * bs ) { int i = 0 ; while ( bs [ i ] ) { printf ( " %c " , bs [ i ] ) ; if ( + + i % 4 = = 0 & & bs [ i ] ) putchar ( ' ' ) ; } putchar ( '\n ' ) ; } int invert_nbits ( int num , int no_bits ) { int mask = 0 ; int bitval = 1 ; while ( no_bits-- > 0 ) { mask | = bitval ; bitval < < = 1 ; } return mask ^ num ; }
#include <stdio.h> int main ( void ) { int num ; _Bool truth_val ; printf ( " Program inverts the truth value of the integer value\n \n  " ) ; printf ( " user , enter some integer...\n non-integer value terminates " " the program...\n  " ) ; while ( scanf ( " %d " , & num ) = = 1 ) { truth_val = !num ; printf ( " Entered number is %d and its Inverted Truth Value is %d\n  " , num , truth_val ) ; printf ( " enter another number or terminate the program by typing " " in non integer val...\n  " ) ; } printf ( " Goodbye!\n  " ) ; return 0 ; }
#include <stdio.h> void mikado ( int ) ; int main ( void ) { int pooh = 2 , bah = 5 ; printf ( " In main ( ) , pooh = %d and & pooh = %p\n  " , pooh , & pooh ) ; printf ( " In main ( ) , bah = %d and & bah = %p\n  " , bah , & bah ) ; mikado ( pooh ) ; return 0 ; } void mikado ( int bah ) { int pooh = 10 ; printf ( " In mikado ( ) , pooh = %d and & pooh = %p\n  " , pooh , & pooh ) ; printf ( " In mikado ( ) , bah = %d and & bah = %p\n  " , bah , & bah ) ; }
#include <stdio.h> int main ( void ) { int ultra = 0 , super = 0 ; while ( super < 5 ) { super + + ; + + ultra ; printf ( " super = %d , ultra = %d \n  " , super , ultra ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { int a = 1 , b = 1 ; int aplus , plusb ; aplus = a + + ; plusb = + + b ; printf ( " a aplus b plusb \n  " ) ; printf ( " %1d %5d %5d %5d\n  " , a , aplus , b , plusb ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 0 ; size_t intsize ; intsize = sizeof ( int ) ; printf ( " n = %d , n has %zd bytes ; all ints have %zd bytes.\n  " , + + n , sizeof + + n , intsize ) ; printf ( " now n has become %d\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int x = 10 , y = 20 ; float marks = 60.75 , u = 33.89 , v ; v = marks + u * x + y ; printf ( " Value of the exp. v = marks + u * x + y is %f\n  " , v ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 , j = 20 , k = 50 ; float cm = 10.5 , mm = 20.9 , inch = 12 ; 5 = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { char name = 'A' ; 'A' = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { int x = -1000 , y , nbits ; printf ( " By what no of bits u wanna right shift on signed integer , " " enter no of bits...\n  " ) ; puts ( " Non integer value terminates the program. " ) ; while ( scanf ( " %d " , & nbits ) = = 1 ) { y = x > > nbits ; printf ( " The value of x in y = x > > %d is %d and y is %d\n  " , nbits , x , y ) ; } printf ( " Program Terminated! Good Bye!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int int_size ; printf ( " Size of all integers is %d bytes\n  " , sizeof ( int ) ) ; printf ( " Size of integer variable int_size is %d bytes\n  " , sizeof int_size ) ; return 0 ; }
#include <stdio.h> #define PRICE 50 int main ( void ) { char ch = 'A' ; int ival = 100 , count ; float fval = 3.3 ; double dval = 5.6 ; char * cp = & ch ; char * * dcp = & cp ; int * ip = & ival , * ip1 ; float * fp = & fval ; double * dp = & dval ; 50.23456 ; printf ( " \n Values of Ordinary Variables : \n \tcharacter ch is %10c , " " \n \tinteger ival is %10d , \n \tfloat fval is\t %10f , " " \n \tdouble dval is\t %10lf\n  " , ch , ival , fval , dval ) ; printf ( " \n Values of Pointer Variables : \n \tcharacter pointer cp is %p , " " \n \tinteger pointer ip is %p , \n \tfloat pointer fp is %15p , " " \n \tdouble pointer dp is %p , \n \tpointer to pointer dcp is %p\n  " , cp , ip , fp , dp , dcp ) ; printf ( " \n Garbage Values of Uninitialized : \n \tinteger \ " count\ " is %10d " " \n \tpointer to int \ " ip1\ " is %10p\n \n  " , count , ip1 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * cp , ch = 'A' ; int * ip , i = 23 ; float * fp , fl = 23.00 ; double * dp , dbl = 23.00 ; printf ( " \n Size of variable : \n \tcharacter ch is %d bytes\n \tinteger i is " " %d bytes\n \tfloat fl is %d bytes\n \tdouble dbl is %d bytes\n  " , sizeof ( ch ) , sizeof ( i ) , sizeof ( fl ) , sizeof ( dbl ) ) ; printf ( " \n Size of All : \n \tCharacters is %d bytes\n \tIntegers is %d " " bytes\n \tFloats or Reals are %d bytes\n \tDoubles are %d bytes " " \n  " , sizeof ( char ) , sizeof ( int ) , sizeof ( float ) , sizeof ( double ) ) ; printf ( " \n Size of A / An : \n \tCharacter Pointer is %d bytes\n \tInteger " " Pointer is %d bytes\n \tFloat Pointer is %d bytes\n \tDouble " " Pointer is %d bytes\n  " , sizeof cp , sizeof ip , sizeof fp , sizeof dp ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * ip , * ip1 ; int boys = 100 ; ip = & boys ; printf ( " \n Address of pointer to integer \ " ip\ " in exp. \ " ip = & boys\ " " " is %p\n and its contents , an address is %p\n and value it points " " to is %d\n  " , & ip , ip , * ip ) ; printf ( " \n pointer to integer \ " ip1\ " is declared but not initialized... " " \n  " ) ; printf ( " Its Address in memory %p\n its contents , garbage address %p\n  " , & ip1 , ip1 ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int den = 11 ; int * ip = & den ; printf ( " In exp. \'ip = & den\' , \n Address of den is %p and\n contents of " " ip is %p\n  " , & den , ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int den = 11 ; int * ip = & den ; printf ( " In exp. \'ip = & den\' , \n Address of den is %p and\n Contents of " " ip is %p\n  " , & den , ip ) ; printf ( " Value of den is %d\n And by performing indirection on pointer ip " " is %d\n  " , den , * ip ) ; return 0 ; }
#include <stdio.h> int shots ( ) ; int winner ( int ) ; void display_winner_loser ( int ) ; int main ( void ) { int x ; char y ; shots ( ) ; winner ( some_val ) ; display_winner_loser ( some_val ) ; return 0 ; } int shots ( ) { --- --- return win_shots ; } int winner ( int ) { --- --- return no_winner ; } void display_winner_loser ( int ) { --- --- }
#include <stdio.h> void write_table ( int ) ; int main ( void ) { int num ; printf ( " Wanna create Table of some number , enter number : " ) ; scanf ( " %d " , & num ) ; write_table ( num ) ; return 0 ; } void write_table ( int copy ) { int i ; printf ( " \tTable of %d\n  " , copy ) ; for ( i = 1 ; i < = 10 ; i + + ) printf ( " %5d * %5d = %5d\n  " , copy , i , copy * i ) ; printf ( " \n  " ) ; }
#include <stdio.h> void find_char ( char * , char ) ; int main ( void ) { char ch ; char str [ ] = " Hello , What are you doing these days? " ; printf ( " User , which character u wanna find in string , enter character : " " " ) ; ch = getchar ( ) ; find_char ( str , ch ) ; return 0 ; } void find_char ( char * sp , char ch_cpy ) { char ch ; while ( ( ch = * sp + + ) ! = '\0' & & ch ! = ch_cpy ) ; if ( ch_cpy = = ch ) printf ( " Character \ " %c\ " is found!\n  " , ch_cpy ) ; else printf ( " Character \ " %c\ " isn't found!\n  " , ch_cpy ) ; }
#include <stdio.h> int main ( void ) { int balls = 100 ; int * ip = & balls ; printf ( " Address of balls in exp. \ " balls = 100\ " is %p\n and Value of ip " " in exp. \ " * ip = & balls\ " is %p\n  " , & balls , ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int balls = 100 ; int * ip = & balls ; printf ( " \n Address of balls in exp. \ " balls = 100\ " is %p\n and Value of " " ip in exp. \ " * ip = & balls\ " is %p\n \n  " , & balls , ip ) ; printf ( " Value of integer balls in exp. \ " balls = 100\ " is %d\n  " , balls ) ; printf ( " \n Accessing the value of balls indirectly using\n integer " " pointer ip in the exp. \ " * ip = & balls\ " is %d\n \n  " , * ip ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int some = 20 ; int * iptr = & some ; printf ( " \n Address of integer \'some\' in exp. \'int some = 20\' is %p\n  " " and where \'iptr\' is pointing to , in exp. 'int * iptr = & some' , " " is\n  %p\n  " , & some , iptr ) ; printf ( " \n Let's see what happens when we access initialized pointer " " \'ptr\' in exp.\n \'int * iptr = & some\'\n  " ) ; printf ( " This gives Value %d of variable \'some\'\n \n  " , * iptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * ip1 ; int * ip2 ; char * cp ; float * fp ; printf ( " Default Address \'ip1\' holds as %p\n  " , ip1 ) ; printf ( " Default Address \'ip2\' holds as %p\n  " , ip2 ) ; printf ( " Default Address \'cp\' holds as %p\n  " , cp ) ; printf ( " Default Address \'fp\' holds as %p\n  " , fp ) ; printf ( " \n Now , see , what happens when we access uninitialized pointers " " ...\n  " ) ; printf ( " %d %d %c %f\n  " , * ip1 , * ip2 , * cp , * fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; printf ( " Address of a is %p and value of a is %3d\n  " , & a , a ) ; & a = 100 ; printf ( " After & a = 100 ; Address of a is %p and value of a is %3d\n  " , & a , a ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; printf ( " \t\tAddress of a is %p and value of a is %3d\n  " , & a , a ) ; * ( & a ) = 100 ; printf ( " After * ( & a ) = 100 ; Address of a is %p and value of a is %3d\n  " , & a , a ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Program shows accessing the location by its address...\n  " ) ; * ( int * ) 10000 = 100 ; printf ( " After * ( int * ) 10000 = 1000 ; value at address ( int * ) 10000 is " " %d\n  " , * ( int * ) 10000 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int n = 5 ; long double x ; int * pi = & n ; long double * pld = & x ; x = n ; pld = pi ; return 0 ; }
#include <stdio.h> int main ( void ) { const int gz = 122 ; gz = 111 ; return 0 ; }
#include <stdio.h> #define MONTHS 12 int main ( void ) { double rainfall [ MONTHS ] = { 2.12 , 3.1 , 0.34 , 4.00 , 1.1 , 1.23 , 2.345 , 3.121 , 3.232 , 0.023 , 1.023 , 2.234 } ; const double * dp = rainfall ; * dp = 3.12 ; rainfall [ 0 ] = 3.12 ; rainfall [ 2 ] = 2.22 ; return 0 ; }
#include <stdio.h> void show ( const double * ) ; int main ( void ) { ---- ---- show ( rainfall ) ; return 0 ; } void show ( const double * srf ) { double rfd ; while ( ( rfd = * srf + + ) ! = 0 ) printf ( " %lf\t " , rfd ) ; printf ( " \n  " ) ; }
#include <stdio.h> int main ( void ) { float pass_per = 60.9 ; const float fare = 31.35 ; float * fp = & pass_per ; printf ( " \n In the exp. \ " float * fp = & pass_per\ " : \n  " ) ; printf ( " fp is a regular pointer to float pass_per , value of " " pass_per is %f\n  " , * fp ) ; printf ( " Now , we try modify pass_per using regular pointer fp...\n  " ) ; * fp = 70.9 ; printf ( " O key , now , in exp. \ " * fp = 70.9\ " , pass_per is %f\n  " , * fp ) ; printf ( " \n Now , let's see what happens when fp is assigned address of " " some \ " constant data\ " \n  " ) ; fp = & fare ; printf ( " \n In the exp. \ " fp = & fare\ " : \n  " ) ; printf ( " fp is a regular pointer to constant float \ " fare\ " , value of " " fare is %f\n  " , * fp ) ; printf ( " Now , we try to modify constant fare using fp...\n  " ) ; * fp = 62.70 ; printf ( " O key , now , in the exp. \ " * fp = 62.70\ " , value of constant " " data fare is %f\n \n  " , * fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int holidays = 69 ; const int teachers = 98 ; const int * cip = & holidays ; printf ( " \n For Non-Constant Integer \ " holidays\ " : \n  " ) ; printf ( " In exp. \ " const int * cip = & holidays\ " , no of holidays in 2014 " " %d\n  " , * cip ) ; printf ( " \n O key , now we try to modify non- constant integer " " \ " holidays\ " \n using pointer to constant integer \ " cip\ " \n  " ) ; * cip = 100 ; printf ( " In exp. \ " * cip = 100\ " , we tried to modify no of holidays in " " 2014 from 69 to %d\n  " , * cip ) ; cip = & teachers ; printf ( " \n For Constant Integer \ " teachers\ " : \n  " ) ; printf ( " In exp. \ " cip = & teachers\ " , there are %d teachers in a school. " " \n  " , * cip ) ; printf ( " \n O key , now we try to modify constant integer \ " teachers\ " \n  " " using pointer-to-constant-integer \ " cip\ " \n  " ) ; * cip = 100 ; printf ( " In exp. \ " * cip = 100\ " , we tried to modify no of teachers in a " " school from 98 to %d\n  " , * cip ) ; return 0 ; }
#include <stdio.h> #define FAM_MEM 5 #define SUB 5 void modify_const_data ( const float * , int ) ; int main ( void ) { const float expenses [ FAM_MEM ] = { 360.00 , 437.12 , 45.65 , 338.34 , 98.987 } ; float marks [ SUB ] = { 34.03 , 56.98 , 66.78 , 68.0 , 80.0 } ; modify_const_data ( marks , SUB ) ; modify_const_data ( expenses , FAM_MEM ) ; return 0 ; } void modify_const_data ( const float * base , int val ) { int i , FLAG = 1 ; const float * copy ; for ( i = 0 ; i < val ; i + + ) { copy = base + + ; if ( FLAG ) { printf ( " Now , we try to modify elements of array...\n  " ) ; FLAG = 0 ; } * copy + = 10.0 ; } }
#include <stdio.h> int main ( void ) { int me = 1 ; register int you = 2 ; printf ( " Address of me in exp. \ " int me = 1\ " is \t\t %p\n Address of you " " in exp. \ " register int you = 2\ " is %p\n  " , & me , & you ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * iptr ; int * ip ; char * cp ; float * fp ; printf ( " Default Address \ " iptr\ " holds as %p\n  " , iptr ) ; printf ( " Default Address \ " ip\ " holds as %p\n  " , ip ) ; printf ( " Default Address \ " cp\ " holds as %p\n  " , cp ) ; printf ( " Default Address \ " fp\ " holds as %p\n  " , fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * nptr = 0 ; char * cp = 0 ; float * fp = 0 ; printf ( " In exp. / " int * nptr = 0 / " \n  " ) ; if ( !nptr ) printf ( " nptr is a NULL pointer!\n \n  " ) ; else printf ( " \n nptr is not a NULL pointer!\n \n  " ) ; printf ( " In exp. / " char * cp = 0 / " \n  " ) ; if ( !cp ) printf ( " cp is a NULL pointer!\n \n  " ) ; else printf ( " cp is not a NULL pointer!\n \n  " ) ; printf ( " In exp. / " float * fp = 0 / " \n  " ) ; if ( !fp ) printf ( " fp is a NULL pointer!\n \n  " ) ; else printf ( " fp is not a NULL pointer!\n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * nptr = 0 ; printf ( " In exp. \ " int * nptr = 0\ " \n  " ) ; if ( !nptr ) printf ( " nptr is a NULL pointer!\n  " ) ; else printf ( " nptr is not a NULL pointer!\n  " ) ; printf ( " \n Now we try Indirection ' * ' on NULL Pointer \'nptr\' to see " " what happens...\n  " ) ; printf ( " The Value at location pointed to by \'nptr\' is %d\n  " , * nptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * nptr = 0 ; printf ( " In exp. \'int * nptr = 0\'\n  " ) ; if ( !nptr ) { printf ( " \'nptr\' is a NULL pointer!\n  " ) ; printf ( " BEWARE! DON'T PERFORM INDIRECTION UPON IT!\n  " ) ; } else { printf ( " \'nptr\' is not a NULL pointer!\n  " ) ; printf ( " \n Now we try Indirection ' * ' on NULL Pointer \'nptr\' " " and see what happens...\n  " ) ; printf ( " The Value at location pointed to by 'nptr' is %d\n  " , * nptr ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { 500 ; 45.06 ; 'A' ; printf ( " Address of integer '500' is %p\n  " , & ( 500 ) ) ; printf ( " Address of float '45.06' is %p\n  " , & ( 45.06 ) ) ; printf ( " Address of character \'A\' is %p\n  " , & ( 'A' ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int NH_India = 228 ; int * ip = & NH_India ; int new ; printf ( " When \ " new\ " not initialized it is %d and NH_India is %d\n  " , new , NH_India ) ; new = + + * ip ; printf ( " After \ " new = + + * ip\ " , new is %d and NH_India is %d\n  " , new , NH_India ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int NH_India = 228 ; int * ip = & NH_India ; int new = 100 ; printf ( " When \ " new\ " initialized it is %d and NH_India is %d\n  " , new , NH_India ) ; + + * ip = new ; printf ( " After \ " + + * ip = new\ " , + + * ip is %d and NH_India is %d\n  " , new , NH_India ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int NH_India = 228 ; int * ip = & NH_India ; int new = 100 ; printf ( " When \ " new\ " initialized it is %d and value of * ip is %p\n  " , new , ip ) ; new = * ip + + ; printf ( " After \ " new = * ip + + \ " , new is %d and \ " new value\ " of * ip is " . " %p\n  " , new , ip ) ; .return 0 ; }
#include <stdio.h> #define FAMILIES 10 int main ( void ) { int fam_mem [ FAMILIES ] ; int * ip1 , * ip2 ; printf ( " Read in from user , family members for %d families...\n  " , FAMILIES ) ; for ( ip1 = & fam_mem [ 0 ] , ip2 = & fam_mem [ FAMILIES ] ; ip1 < ip2 ; ip1 + + ) scanf ( " %d " , ip1 ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int a = 50 ; int * b = & a ; int * * c = & b ; printf ( " \n Value of integer a in exp. \ " a = 50\ " is %d\n  " , a ) ; printf ( " O key! After exp. \ " int * b = & a\ " , value of a using pointer " " * b is %d\n  " , * b ) ; printf ( " \n Now , we use double pointer * * c in exp. \ " int * * c = & b\ " " " to find\n value of a as %d\n  " , * * c ) ; printf ( " \n O key! We now try to modify integer a using double pointer " " * * c.\n  " ) ; * * c = 2 * a ; printf ( " After \ " * * c = 2 * a\ " , value of a %d\n  " , * * c ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> void display_static_var ( void ) ; int main ( void ) { int FLAG = 1 ; while ( FLAG ) { display_static_var ( ) ; printf ( " User , want to continue , enter 1 else 0 , \n  " ) ; scanf ( " %d " , & FLAG ) ; } printf ( " Thank you!\n  " ) ; return 0 ; } void display_static_var ( void ) { static int count = 1 ; printf ( " static integer variable \ " count\ " is %d\n  " , count + + ) ; }
#include <stdio.h> void sum_ints ( static int , static int ) ; int main ( void ) { static int x , y ; int n ; printf ( " user , type in two integers...for their sum ; ( q to quit ) \n  " ) ; while ( n = scanf ( " %d %d " , & x , & y ) = = 2 ) { sum_ints ( x , y ) ; printf ( " user , type in other two integers...for their sum ; " " ( q to quit ) \n  " ) ; } printf ( " Thank you!\n  " ) ; return 0 ; } void sum_ints ( static int u , static int v ) { printf ( " Sum of two static integers %d and %d is %d\n  " , u , v , u + v ) ; }
#include <stdio.h> long int compute_prod_recur ( int ) ; int main ( void ) { int num ; long int product ; printf ( " user , enter the natural number for which product successively " " from 1 , 2 , 3 , ...till the num is to be computed\n  " ) ; scanf ( " %d " , & num ) ; product = compute_prod_recur ( num ) ; printf ( " Product through Recursion for the number is %ld\n  " , product ) ; return 0 ; } long int compute_prod_recur ( int number ) { if ( number = = 1 ) return 1 ; else return number * compute_prod_recur ( --number ) ; }
#include <stdio.h> void display ( void ) ; int main ( void ) { printf ( " main : going to call display...\n  " ) ; display ( ) ; return 0 ; } void display ( void ) { printf ( " i am display ( ) : I display massage!\n  " ) ; return ; }
#include <stdio.h> int sum2ints ( int , int ) ; int main ( void ) { int u = 5 , v = 10 ; printf ( " sum of %d and %d is %d\n  " , u , v , sum2ints ( u , v ) ) ; return 0 ; } int sum2ints ( int x , int y ) { return x + y ; }
#include <stdio.h> void hahaha ( void ) ; int main ( void ) { hahaha ( ) ; return 0 ; } void hahaha ( void ) { printf ( " ha ha ha!\n  " ) ; }
#include <stdio.h> double mul_floats ( float , float ) ; int main ( void ) { float x = 4.67 , y = 3.55 ; double result ; result = mul_floats ( x , y ) ; printf ( " multiplication of %f and %f is %lf\n  " , x , y , result ) ; return 0 ; } double mul_floats ( float u , float v ) { return u * v ; }
#include <stdio.h> void even_odd ( int ) ; int main ( void ) { int num , what ; printf ( " \n Program determines a given integer is EVEN or ODD\n \n  " ) ; printf ( " Enter an integer number : ( q to quit ) \n  " ) ; while ( what = scanf ( " %d " , & num ) = = 1 ) { even_odd ( num ) ; printf ( " Enter another integer : ( q to quit ) \n  " ) ; } printf ( " Thank you!\n  " ) ; return 0 ; } void even_odd ( int num ) { if ( num % 2 = = 0 ) printf ( " %d is EVEN Number!\n  " , num ) ; else printf ( " %d is ODD Number!\n  " , num ) ; return ; }
#include <stdio.h> int main ( void ) { int num1 = 10 , num2 = 20 ; printf ( " \n We are familiar with printf ( ) and scanf ( ) functions which\n  " " accept variable number of arguments!\n \n  " ) ; printf ( " First argument is String.\n  " ) ; printf ( " Successive arguments are comma separated list and type " " specifiers\n for each in Format String.\n \n  " ) ; printf ( " Sum of %d and %d is %d\n  " , num1 , num2 , num1 + num2 ) ; printf ( " Numbers %d , %d , %d , %d , %d , %d are all Prime Numbers!\n  " , 2 , 3 , 5 , 7 , 11 , 13 ) ; printf ( " \n  " ) ; return 0 ; } Output produced when we compiled and run the above program as , <pre lang = " C " cssfile = " hk1_style " > We are familiar with printf ( ) and scanf ( ) functions which accept variable number of arguments! First argument is String. Successive arguments are comma separated list and type specifiers for each in Format String. Sum of 10 and 20 is 30 Numbers 2 , 3 , 5 , 7 , 11 , 13 are all Prime Numbers!
#include <stdio.h> #include <stdarg.h> double average ( int n_values , ... ) ; int main ( void ) { double av ; av = average ( 5 , 1 , 2 , 3 , 4 , 5 ) ; printf ( " average of 1 , 2 , 3 , 4 , 5 is %lf\n \n  " , av ) ; return 0 ; } double average ( int num_values , ... ) { va_list varg ; int count , sum = 0 ; va_start ( varg , num_values ) ; printf ( " \n  " ) ; for ( count = 0 ; count < num_values ; count + + ) { sum + = va_arg ( varg , int ) ; printf ( " sum is %d\n  " , sum ) ; } printf ( " \n  " ) ; return ( double ) sum / num_values ; }
#include <stdio.h> int largerof2ints ( int , int ) ; int main ( void ) { int num1 , num2 , larger ; printf ( " \n Program displays larger of two integers.\n  " ) ; printf ( " User , enter two integers... , ( q to quit ) \n  " ) ; while ( scanf ( " %d %d " , & num1 , & num2 ) = = 2 ) { larger = largerof2ints ( num1 , num2 ) ; printf ( " larger of two integers %d and %d is %d\n  " , num1 , num2 , larger ) ; printf ( " User wanna continue , enter two integers... , ( q to quit ) \n  " ) ; } return 0 ; } int largerof2ints ( int n , int m ) { return if ( n > m ) ? n : m ; }
#include " fun_header.h " int main ( void ) { int num1 , num2 , larger ; printf ( " \n Program displays larger of two integers.\n  " ) ; printf ( " User , enter two integers... , ( q to quit ) \n  " ) ; while ( scanf ( " %d %d " , & num1 , & num2 ) = = 2 ) { larger = largerof2ints ( num1 , num2 ) ; printf ( " larger of two integers %d and %d is %d\n  " , num1 , num2 , larger ) ; printf ( " User wanna continue , enter two integers... , ( q to quit ) \n  " ) ; } return 0 ; } int largerof2ints ( int n , int m ) { return if ( n > m ) ? n : m ; } #include <stdio.h> int largerof2ints ( int , int ) ;
#include <stdio.h> void countdown ( int ) ; int main ( void ) { int num = 100 ; countdown ( num ) ; return 0 ; } void countdown ( int count ) { if ( count > = 1 ) { printf ( " %d\n  " , count ) ; countdown ( count-- ) ; } }
#include <stdio.h> int main ( void ) { int num = 100 ; for ( ; num > = 1 ; num-- ) { printf ( " %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( void ) { static int i ; printf ( " Default Value of \ " static variable i\ " is %d\n  " , i ) ; return 0 ; }
#include <stdio.h> void count ( int ) ; int main ( void ) { int i ; for ( i = 1 ; i < = 5 ; i + + ) count ( i ) ; return 0 ; } void count ( int iteration ) { static int i ; printf ( " Value of \ " static int i\ " in count ( %d ) is %d\n  " , iteration , + + i ) ; }
#include <stdio.h> void update ( int ) ; int main ( void ) { update ( 1 ) ; update ( 0 ) ; return 0 ; } void update ( int FLAG ) { static int count [ 10 ] = { 12 , 34 , 45 , 123 , 1 , 3 , 56 , 90 , 88 , 100 } ; int i ; if ( FLAG ) { for ( i = 0 ; i < 10 ; i + + ) count [ i ] + = 5 ; printf ( " Updated data!\n  " ) ; } else { printf ( " No need!\n  " ) ; } }
#include <stdio.h> int main ( void ) { int i ; int jams [ 5 ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; for ( i = 0 ; i < 6 ; i + + ) printf ( " jams [ %d ] is %d\n  " , i , jams [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i ; int hats [ 5 ] = { 1 , 2 , 3 , 4 } ; for ( i = 0 ; i < 5 ; i + + ) printf ( " hats [ %d ] is %d\n  " , i , hats [ i ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char name [ ] = " christopher " ; char * name2 = " christopher " ; printf ( " name \ " %s\ " is an array and name2 \ " %s\ " is a string literal.\n  " , name , name2 ) ; return 0 ; }
#include <stdio.h> void access_multidimarr ( int ( * ) [ 5 ] , int ) ; int main ( void ) { int hawks [ 4 ] [ 5 ] = { { 1 , 2 , 3 , 4 , 5 } , { 6 , 7 , 8 , 9 , 10 } , { 11 , 12 , 13 , 14 , 15 } , { 16 , 17 , 18 , 19 , 20 } , } ; printf ( " Now we access \'hawks [ 4 ] [ 5 ] \'...\n  " ) ; access_multidimarr ( hawks , 4 ) ; return 0 ; } void access_multidimarr ( int ( * ptr ) [ 5 ] , int num ) { int i , j ; printf ( " In function : accessing \'hawks\' using pointer to array.\n  " ) ; for ( i = 0 ; i < num ; i + + ) { for ( j = 0 ; j < 5 ; j + + ) { printf ( " hawks [ %d ] [ %d ] is %d\n  " , i , j , * ( * ptr + j ) ) ; } ptr + + ; } }
#include <stdio.h> #include <string.h> void match_str ( char const * const , char const * const [ ] , int const ) ; int main ( void ) { char const * car_make [ 9 ] = { " Suzuki " , " Toyota " , " Nissan " , " Tata " , " BMW " , " Audi " , " Chevrolet " , " Honda " , " Mahindra " } ; char to_search [ 15 ] ; printf ( " Give choice of \'car make\' u want to search for...\n  " ) ; gets ( to_search ) ; match_str ( to_search , car_make , 9 ) ; return 0 ; } void match_str ( char const * const to_match , char const * const arr_str [ ] , int const size ) { char const * * check_make ; for ( check_make = arr_str ; check_make < arr_str + size ; check_make + + ) if ( strcmp ( to_match , * check_make ) = = 0 ) { printf ( " Matched at location %d in car_make.\n  " , check_make - arr_str ) ; return ; } printf ( " Not matched!\n  " ) ; return ; }
#include <stdio.h> #include <string.h> int main ( void ) { char msg [ ] = { 'c' , 'h' , 'r' , 'i' , 's' , 't' , 'o' , 'p' , 'h' , 'e' , 'r' } ; char name1 [ ] = " christopher " ; char * name2 = " christopher " ; printf ( " sizeof : size of char array msg [ ] \ " %s\ " is %d bytes!\n  " , msg , sizeof ( msg ) ) ; printf ( " strlen : size of char array msg [ ] \ " %s\ " is %d bytes!\n  " , msg , strlen ( msg ) ) ; printf ( " sizeof : size of char array name1 [ ] \ " %s\ " is %d bytes!\n  " , name1 , sizeof ( name1 ) ) ; printf ( " strlen : size of char array name1 [ ] \ " %s\ " is %d bytes!\n  " , name1 , strlen ( name1 ) ) ; printf ( " sizeof : size of string \ " %s\ " is %d bytes!\n  " , name2 , sizeof ( name2 ) ) ; printf ( " strlen : size of string \ " %s\ " is %d bytes!\n  " , name2 , strlen ( name2 ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int byte_count ; printf ( " \n  * * * * * Program shows type of size_t * * * * * \n \n  " ) ; printf ( " \ " sizeof ( size_t ) \ " returns %d bytes.\n  " , sizeof ( size_t ) ) ; if ( sizeof ( size_t ) = = sizeof ( unsigned long ) ) printf ( " \n Type of \ " size_t\ " is \ " unsigned long\ " .\n \n  " ) ; # if __WORDSIZE = = 64 # define ULONG_MAX 18446744073709551615UL # else # define ULONG_MAX 4294967295UL # endif return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char initial = 'A' ; char str [ ] = " hello , where are you these days? " ; char empty_str [ ] = " " ; char * str_lit = " this is a string literal " ; char msg [ 11 ] = " hello dear " ; puts ( " \n  * * * * * Program differentiates character and string * * * * * \n  " ) ; printf ( " Size of character \' %c\' is %d byte\n  " , initial , sizeof ( initial ) ) ; printf ( " Size of string \ " %s\ " is %d bytes\n  " , str , strlen ( str ) ) ; printf ( " Size of empty string \ " %s\ " is %d bytes\n  " , empty_str , strlen ( empty_str ) ) ; printf ( " Size of string literal \ " %s\ " is %d bytes\n  " , str_lit , strlen ( str_lit ) ) ; printf ( " Size of msg \ " %s\ " is %d bytes\n  " , msg , strlen ( msg ) ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> #define STR_LIT " I'm string literal declared using #define " int main ( void ) { char * str_lit = " I'm string literal declared through pointer-to-char " ; char char_arr [ 5 ] = { 'a' , 'b' , 'c' , 'd' , 'e' } ; puts ( " \n  * * * * * Program differentiates character array and " " string literal * * * * * \n  " ) ; puts ( STR_LIT ) ; puts ( str_lit ) ; puts ( " \n  " ) ; puts ( " Let's , now , try to access character array as character string... " " \n  " ) ; puts ( char_arr ) ; puts ( " \n  " ) ; return 0 ; }
#include <string.h> #include <stdio.h> int main ( void ) { char * src = " Hello , strcpy. " ; char dst [ 5 ] ; char * copied ; copied = strcpy ( dst , src ) ; printf ( " strcpy ( ) returns \ " %s\ " \n  " , copied ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define SIZE 25 int main ( void ) { char src [ SIZE ] ; char quit [ ] = " quit " ; char dst [ SIZE ] = " " ; char * cptr2dst ; puts ( " \n  * * * * Program appends source string to destination array * * * * \n  " ) ; printf ( " User , type in a character string , this time not more than %d " " characters long... , \n or \ " quit\ " to quit the program.\n  " , SIZE ) ; gets ( src ) ; while ( strncmp ( " quit " , src , 4 ) ) { cptr2dst = strcat ( dst , src ) ; printf ( " \n \n Destination string becomes \ " %s\ " \n  " , cptr2dst ) ; printf ( " And size , in bytes , of destination string is %d and %d " " bytes remaining.\n \n  " , strlen ( dst ) , SIZE - strlen ( dst ) ) ; if ( strlen ( dst ) > SIZE ) puts ( " \a\ " DST OVERFLOWN!\ " \a " ) ; puts ( " \t\t\t * * * * * * * * * * * * * * * \t\t\t\n  " ) ; printf ( " Want to append destination further , type in a new string " not more than %d characters\n Or enter \ " quit\ " to terminate. " " \n \n  " , SIZE - strlen ( dst ) ) ; gets ( src ) ; } puts ( " Bye! It's Interesting!\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define SIZE 5 int main ( void ) { char str1 [ SIZE ] ; char str2 [ SIZE ] ; int ret ; puts ( " \n  * * * * * Program compares two strings in full lengths * * * * * \n  " ) ; printf ( " Enter first string not more than %d characters or \ " quit\ " to " " Quit.\n  " , SIZE ) ; gets ( str1 ) ; while ( strncmp ( " quit " , str1 , 4 ) ) { printf ( " \n Enter second string not more than %d characters\n  " , SIZE ) ; gets ( str2 ) ; if ( ( ret = strcmp ( str1 , str2 ) ) = = 0 ) puts ( " \n Two strings are SAME. " ) ; else if ( ( ret = strcmp ( str1 , str2 ) ) < 0 ) puts ( " \n String first is Lower than second. " ) ; else puts ( " \n Second string is Lower than first. " ) ; puts ( " \t\t\t * * * * * * * * * * * * * * * * * \t\t\t " ) ; printf ( " Want to continue...\n Enter first string not more than %d " " characters or \ " quit\ " to Quit.\n  " , SIZE ) ; gets ( str1 ) ; } printf ( " \n Bye!\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char * str = " how's your C programming project? " ; char * gstr = " interesting " ; char * loc ; loc = strpbrk ( str , gstr ) ; printf ( " \n ptr-to-char \ " loc\ " points to first occurrence of character " " \' %c\'\n at %d location in the string \ " %s\ " \n \n  " , * loc , loc - str , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char str [ 100 ] ; char substr [ 50 ] ; char * loc ; puts ( " * * * * * Program returns location of leftmost occurrence of " " sub-string in the given string else returns NULL * * * * * " ) ; puts ( " " ) ; puts ( " User , type in a string... " ) ; gets ( str ) ; puts ( " " ) ; puts ( " now , type in a sub-string... " ) ; gets ( substr ) ; puts ( " " ) ; loc = strstr ( str , substr ) ; if ( loc ! = NULL ) printf ( " leftmost occurrence of sub-string in a given string is at " " location %d.\n \n  " , ( loc - str ) + 1 ) ; else printf ( " sub-string not found.\n \n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char str [ 100 ] ; char group [ 100 ] ; size_t char_count ; puts ( " * * * * Program returns no. of characters at the beginning of string " " that match\n \tany of characters in group string. * * * * " ) ; puts ( " " ) ; puts ( " User , type in a string... " ) ; gets ( str ) ; puts ( " " ) ; puts ( " now , type in group string... " ) ; gets ( group ) ; puts ( " " ) ; char_count = strspn ( str , group ) ; printf ( " %d characters at the beginning of string matched.\n  " , char_count ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char str [ 100 ] ; char gstr [ 100 ] ; size_t len_ini_seg ; puts ( " \n  * * * * * Program returns max initial segment of string without any " " characters from group string * * * * * " ) ; puts ( " " ) ; puts ( " User , type in a string... " ) ; gets ( str ) ; puts ( " " ) ; puts ( " now , type in group string... " ) ; gets ( gstr ) ; puts ( " " ) ; len_ini_seg = strcspn ( str , gstr ) ; printf ( " %d characters at the beginning of string NOT matched any of " " characters in group string.\n  " , len_ini_seg ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char str [ 100 ] ; char delimiters [ ] = " \t\n \v\f\r " ; char * token ; puts ( " \n  * * Program extracts Tokens and displays them One per Line. * * \n  " ) ; puts ( " User , enter a string... " ) ; gets ( str ) ; for ( token = strtok ( str , delimiters ) ; token ! = NULL ; token = strtok ( NULL , delimiters ) ) puts ( token ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { int errno = 0 ; puts ( " Let's " ) ; puts ( " check " ) ; puts ( " the " ) ; puts ( " behaviour " ) ; puts ( " of " ) ; puts ( " strerr ( ) " ) ; puts ( " function. " ) ; fprintf ( stderr , " \n puts STATUS : %s\n  " , strerror ( errno ) ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( int argc , char * argv [ ] ) { int i ; char * str ; puts ( " \n  * * Program transforms character strings on cmd-line * * \n  " ) ; for ( i = 0 ; i < argc ; i + + ) { str = argv [ i ] ; if ( i % 2 = = 0 ) { while ( * str ) putchar ( toupper ( * str + + ) ) ; puts ( " " ) ; } else if ( i % 2 = = 1 ) { while ( * str ) putchar ( tolower ( * str + + ) ) ; puts ( " " ) } } return 0 ; }
#include <stdio.h> #include <string.h> void show_val ( const int [ ] , int ) ; int main ( void ) { int val [ SIZE ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int target [ SIZE ] ; double dval [ SIZE / 2 ] = { 1.0 , 2.0 , 3.0 , 4.0 , 5.0 } ; int i ; printf ( " Original Array \'val\' of integers is : " ) ; show_val ( val , SIZE ) ; puts ( " \n  " ) ; puts ( " memcpy ( ) : copying array of ints \'val\' to array of ints " " \'target\' " ) ; memcpy ( target , val , SIZE * sizeof ( val [ 0 ] ) ) ; printf ( " target becomes : " ) ; show_val ( target , SIZE ) ; puts ( " \n  " ) ; puts ( " memmove ( ) : copying range 0-5 of \'val\' to 2-7 of \'target\' " ) ; memmove ( target + 2 , val , 5 * sizeof ( val [ 0 ] ) ) ; printf ( " target becomes : " ) ; show_val ( target , SIZE ) ; puts ( " \n  " ) ; puts ( " memcpy ( ) : copying array of 5 doubles to array of 10 ints " ) ; memcpy ( val , dval , ( SIZE / 2 ) * sizeof ( dval [ 0 ] ) ) ; puts ( " Array of ints \'val\' becomes : " ) ; show_val ( val , SIZE ) ; puts ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define SIZE 10 void show_val ( int [ ] , int ) ; int main ( void ) { char dear [ ] = " u want to learn C programming. " ; char sure [ ] = " u want to learn , sure! " ; int val [ SIZE ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int target [ SIZE ] = { 1 , 2 , 3 , 4 , 5 } ; puts ( " character strings \'dear\' and \'sure\' are as : " ) ; puts ( dear ) ; puts ( sure ) ; puts ( " " ) ; puts ( " Let's compare \'dear\' and \'sure\' " ) ; if ( memcmp ( sure , dear , 15 ) = = 0 ) puts ( " First 15 bytes of \'sure\' and \'dear\' Matched.\n  " ) ; puts ( " Arrays of ints \'val\' and \'target\' are as : " ) ; printf ( " val : " ) ; show_val ( val , SIZE ) ; printf ( " target : " ) ; show_val ( target , SIZE ) ; puts ( " " ) ; puts ( " Let's compare \'val\' and \'target' ) ; if ( memcmp ( target , val , 5 * sizeof ( int ) ) = = 0 ) puts ( " First 5 integers in \'val\' and \'target\' Matched.\n  " ) ; return 0 ; } void show_val ( int copy [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %2d " , copy [ i ] ) ; puts ( " " ) ; }
#include <stdio.h> void disp ( const int * , const int ) ; int main ( void ) { int balloons [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; disp ( balloons , 5 ) ; return 0 ; } void disp ( const int * sb , const int count ) { int i = 0 ; while ( i < count ) printf ( " balloons [ %d ] has %d balloons.\n  " , i + + , * ( sb + i ) ) ; }
#include <stdio.h> typedef struct NODE { struct NODE * link ; int value ; char add [ 50 ] ; } Node ; void disp ( Node * ) ; int main ( void ) { Node current ; Node next = { & current , 100 , " Building No. 100 , xyz Lane , Bangalore " } ; disp ( & next ) ; return 0 ; } void disp ( Node * new ) { printf ( " \'link\' points at address : %p\n  " , new-> link ) ; printf ( " \'value\' of 'next' is : %d\n  " , new-> value ) ; printf ( " \'add\' field of 'next' is : \ " %s\ " \n  " , new-> add ) ; }
#include <stdio.h> struct A ; struct B { int roll_no ; float marks ; struct A * p2A ; } ; struct A { float rain [ 5 ] ; struct B * p2B ; char initial ; } ; int main ( void ) { int i = 0 ; struct B u ; struct A a = { { 1.1 , 2.43 , 2.01 , 3.34 , 2.213 } , & u , 'A' } ; struct B b = { 44 , 58.0 , & a } ; puts ( " Lets access members of structure \'a\' using pointer member " " \'p2A\' , pointer to structure \'a\' and also a member of " " structure \'b\'\n  " ) ; printf ( " First member of \'a\' is array \'rain of 5 floats\' : " ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " %.2f " , ( b.p2A ) -> rain [ i ] ) ; puts ( " \n  " ) ; printf ( " Second member of structure \'a\' is a pointer to structure " " \'u\' of type struct B , \n  " ) ; printf ( " Let us see the address of structure \'u\' : " ) ; printf ( " %p " , ( b.p2A ) -> p2B ) ; puts ( " \n  " ) ; printf ( " Final member of structure \'a\' is a character : " ) ; printf ( " %c " , ( b.p2A ) -> initial ) ; puts ( " \n  " ) ; return 0 ; }
#include <stdio.h> typedef struct A { char surname [ 15 ] ; int roll_no ; char initial [ 5 ] ; float marks ; } New ; int main ( void ) { New x = { " smith " , 34 , " J " , 67.38 } ; New y [ 10 ] ; New * pstruct = & x ; return 0 ; }
#include <stdio.h> typedef struct A { int a ; float b ; } New_a ; typedef struct B { int c ; float d ; struct A e ; } New_b ; int main ( void ) { New_a bread ; New_b butter ; bread.a = 10 ; bread.b = 25.50 ; butter.c = 10 ; butter.d = 50.00 ; butter.e.a = 20 ; butter.e.b = 20.00 ; printf ( " butter.e.a is %4d\n  " , butter.e.a ) ; printf ( " butter.e.b is %.2f\n  " , butter.e.b ) ; return 0 ; }
#include <stdio.h> typedef struct student { char srollno [ 10 ] ; char sclass [ 10 ] ; char name [ 25 ] ; char fname [ 25 ] ; char mname [ 25 ] ; char add [ 200 ] ; } Student ; void dot_access ( Student const ) ; int main ( void ) { Student a = { " 35M2K14 " , " cs " , " Christine " , " James " , " Hayek " , " Post Box 1234 , Park Avenue , UK " } ; printf ( " Student a Information : \n  " ) ; dot_access ( a ) ; return 0 ; } void dot_access ( Student const stu ) { print ( " roll no. : %s\n  " , stu.srollno ) ; printf ( " class : %s\n  " , stu.sclass ) ; printf ( " name : %s\n  " , stu.name ) ; printf ( " father's name : %s\n  " , stu.fname ) ; printf ( " mother's name : %s\n  " , stu.mname ) ; printf ( " And address : %s\n  " , stu.add ) ; }
#include <stdio.h> typedef struct student { char srollno [ 10 ] ; char sclass [ 10 ] ; char name [ 25 ] ; char fname [ 25 ] ; char mname [ 25 ] ; char add [ 200 ] ; } Student ; void arrow_access ( Student const * ) ; int main ( void ) { Student a = { " 35M2K14 " , " cs " , " Christine " , " James " , " Hayek " , " Post Box 1234 , Park Avenue , UK " } ; printf ( " Student a Information : \n  " ) ; arrow_access ( & a ) ; return 0 ; } void arrow_access ( Student const * stu ) { printf ( " roll no. : %s\n  " , stu-> srollno ) ; printf ( " class : %s\n  " , stu-> sclass ) ; printf ( " name : %s\n  " , stu-> name ) ; printf ( " father's name : %s\n  " , stu-> fname ) ; printf ( " mother's name : %s\n  " , stu-> mname ) ; printf ( " And address : %s\n  " , stu-> add ) ; }
#include <stdio.h> #include <stddef.h> typedef struct ALIGN1 { char a ; int b ; char c ; } New1 ; typedef struct ALIGN2 { int b ; char a ; char c ; } New2 ; int main ( void ) { unsigned add_x , add_y ; size_t sb ; New1 x = { 'a' , 10 , 'b' } ; New2 y = { 20 , 'c' , 'd' } ; puts ( " \n  * * Concept of Boundary Alignment * * \n  " ) ; printf ( " size , in bytes , of New1 structure \'x\' and " " New2 structure \'y\' : %d , %d\n  " , sizeof ( x ) , sizeof ( y ) ) ; puts ( " " ) ; printf ( " Address where \'x\' begins : %u , and \'y\' begins : %u\n  " , & x , & y ) ; puts ( " " ) ; printf ( " Let us access respective positions , from start , of each " " member in \'x\' and \'y\'...\n  " ) ; puts ( " Positions in \'x\' : \n  " ) ; sb = offsetof ( New1 , a ) ; printf ( " member \'x.a\' begins at : %d\n  " , sb ) ; sb = offsetof ( New1 , b ) ; printf ( " member \'x.b\' begins at : %d\n  " , sb ) ; sb = offsetof ( New1 , c ) ; printf ( " member \'x.c\' begins at : %d\n  " , sb ) ; puts ( " " ) ; puts ( " Positions in \'y\' : \n  " ) ; sb = offsetof ( New2 , b ) ; printf ( " member \'y.b\' begins at : %d\n  " , sb ) ; sb = offsetof ( New2 , a ) ; printf ( " member \'y.a\' begins at : %d\n  " , sb ) ; sb = offsetof ( New2 , c ) ; printf ( " member \'y.c\' begins at : %d\n  " , sb ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> struct A { int a ; char b [ 10 ] ; } ; struct A copys ( struct A ) ; int main ( void ) { struct A x = { 10 , " hello " } ; struct A y ; puts ( " Accessing y's members before calling to copys ( ) " ) ; printf ( " y.a is an integer : %d\n  " , y.a ) ; printf ( " y.b is a string : %s\n  " , y.b ) ; puts ( " " ) ; y = copys ( x ) ; puts ( " Accessing y's members after calling copys ( ) " ) ; printf ( " y.a is an integer : %d\n  " , y.a ) ; printf ( " y.b is a string : %s\n  " , y.b ) ; puts ( " " ) ; return 0 ; } struct A copys ( struct A temp ) { return temp ; }
#include <stdio.h> typedef union { float marks ; char str [ 20 ] ; int count ; } Record ; int main ( void ) { Record new ; puts ( " * * Program computes size allocated to \'new\' * * " ) ; printf ( " %d bytes allocated to \'new\' Record.\n  " , sizeof ( new ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float marks [ 10 ] ; int i ; puts ( " user , enter marks of 10 students... " ) ; for ( i = 0 ; i < 10 ; i + + ) scanf ( " %f " , & marks [ i ] ) ; puts ( " Marks of 10 students are : " ) ; for ( i = 0 ; i < 10 ; i + + ) printf ( " %.2f " , marks [ i ] ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , i ; float marks [ n ] ; printf ( " How many marks to process? Enter a positive integer...\n  " ) ; scanf ( " %d " , & n ) ; printf ( " now enter marks of students...\n  " ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %f " , & marks [ i ] ) ; printf ( " Processing %d Marks.\n  " , n ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * pi , i , nbytes = 0 ; void * p2v ; puts ( " \n Let's try to get memory chunk , specify number of bytes " " u want...\n  " ) ; scanf ( " %d " , & nbytes ) ; pi = malloc ( nbytes ) ; printf ( " Now , we verify if required %d bytes allocated " " successfully.\n  " , nbytes ) ; if ( pi = = NULL ) { puts ( " Error : Pool short of memory! " ) ; exit ( 1 ) ; } else { puts ( " Yes Succeeded!\n  " ) ; } puts ( " Good! Now , let's use dynamic memory...\n  " ) ; printf ( " User type in %d integers one by one...\n  " , nbytes / sizeof ( int ) ) ; for ( i = 0 ; i < nbytes / sizeof ( int ) ; i + + ) scanf ( " %d " , ( pi + i ) ) ; puts ( " " ) ; printf ( " User , let's see what had u typed...\n  " ) ; for ( i = 0 ; i < nbytes / sizeof ( int ) ; i + + ) printf ( " %d " , * ( pi + i ) ) ; puts ( " " ) ; puts ( " Let's return allocated memory to system for reuse. " ) ; free ( pi ) ; puts ( " Thank you!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { char * pc , chars , i ; puts ( " * * Program displays malloc ( ) returns uninitialized block * * " ) ; printf ( " Specify no. of characters to which memory to allocate , \n  " ) ; scanf ( " %d " , & chars ) ; pc = ( char * ) malloc ( chars * sizeof ( char ) ) ; if ( pc = = NULL ) { puts ( " Error : Allocation Failed! " ) ; exit ( EXIT_FAILURE ) ; } i = 0 ; printf ( " Allocated block , an array of %d chars , contains values : " , chars ) ; while ( i < chars ) { printf ( " %2c " , * ( pc + i ) ) ; i + + ; } free ( pc ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * pi , ints , i ; puts ( " * * Program displays calloc ( ) initializes memory " " It allocates * * " ) ; printf ( " Specify no. of integers to which memory to allocate , \n  " ) ; scanf ( " %d " , & ints ) ; pi = ( int * ) calloc ( ints , sizeof ( int ) ) ; if ( pi = = NULL ) { puts ( " Error : Allocation Failed! " ) ; exit ( EXIT_FAILURE ) ; } i = 0 ; printf ( " Allocated block , an array of %d ints , is initialized with : " , ints ) ; while ( i < ints ) { printf ( " %2d " , * ( pi + i ) ) ; i + + ; } free ( pi ) ; puts ( " " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * pi ; int num ; puts ( " * * Let's unravel memory leak! * * " ) ; printf ( " User , read in size of block , an integer value , u want to allocate " " memory : " ) ; scanf ( " %d " , & num ) ; pi = ( int * ) malloc ( num * sizeof ( int ) ) ; if ( pi = = NULL ) { puts ( " System sort of memory! " ) ; exit ( 1 ) ; } pi = ( int * ) malloc ( num * sizeof ( int ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define INSERT 1 #define QUIT 2 typedef struct NODE { struct NODE * link ; int value ; } Node ; void insert_sll ( Node * * , const int ) ; int main ( void ) { Node * root = 0 ; Node * * p2r = & root ; int value ; int op ; puts ( " \n  * * Let's create a Singly Linked List * * \n  " ) ; printf ( " User , enter 1 for INSERT and 2 for QUIT : " ) ; while ( 1 ) { while ( scanf ( " %d " , & op ) = = 1 & & ( op = = INSERT || op = = QUIT ) ) { if ( op = = INSERT ) { printf ( " User , enter an integer value : " ) ; scanf ( " %d " , & value ) ; insert_sll ( p2r , value ) ; } else if ( op = = QUIT ) { printf ( " Thank You!\n  " ) ; return 0 ; } printf ( " \n Want to insert more integer values , \n enter 1 " " for INSERT , else 2 for QUIT : " ) ; } puts ( " Entered is a WRONG choice , enter 1 for " " INSERT , 2 for QUIT " ) ; } } void insert_sll ( Node * * linkp , const int value ) { Node * current = 0 ; Node * newnode = 0 ; while ( ( current = * linkp ) ! = NULL & & current-> value < value ) linkp = & current-> link ; if ( current ! = NULL & & current-> value = = value ) { printf ( " \n \aValue %d is already in the list.\n  " , value ) ; return ; } newnode = ( Node * ) malloc ( sizeof ( Node ) ) ; if ( newnode = = NULL ) { printf ( " Not sufficient Memory!\n  " ) ; exit ( EXIT_FAILURE ) ; } newnode-> value = value ; newnode-> link = current ; * linkp = newnode ; }
#include <stdio.h> int main ( void ) { int * x = 10 , y ; return 0 ; }
#include <stdio.h> int sum ( int const , int const ) ; int main ( void ) { int add_val ; int ( * p2f ) ( int const , int const ) = & sum ; printf ( " sum of 5 and 5 is %d\n  " , sum ( 5 , 5 ) ) ; printf ( " sum of 5 and 5 is %d\n  " , ( * p2f ) ( 5 , 5 ) ) ; printf ( " sum of 5 and 5 is %d\n  " , p2f ( 5 , 5 ) ) ; return 0 ; } int sum ( int const x , int const y ) { return x + y ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> typedef struct NODE { struct NODE * link ; int data ; } Node ; Node * * create_sll ( const int ) ; void insert_data ( Node * * ) ; void show_list ( Node * * ) ; void sort_list ( Node * * ) ; #include " sll_op.c "
#include <stdio.h> #define ADD 0 #define SUB 1 #define MUL 2 #define DIV 3 int add ( int , int ) ; int sub ( int , int ) ; int mul ( int , int ) ; int divide ( int , int ) ; int main ( void ) { int op1 , op2 ; int result ; char operator ; int ( * diff_oper [ ] ) ( int , int ) = { add , sub , mul , divide } ; puts ( " * * Calculator Application * * " ) ; result = diff_oper [ ( ADD ) ] ( 50 , 20 ) ; printf ( " ADD of %d and %d is : %d\n  " , 50 , 20 , result ) ; result = diff_oper [ ( SUB ) ] ( 50 , 20 ) ; printf ( " SUB of %d and %d is : %d\n  " , 50 , 20 , result ) ; result = diff_oper [ ( MUL ) ] ( 50 , 20 ) ; printf ( " MUL of %d and %d is : %d\n  " , 50 , 20 , result ) ; result = diff_oper [ ( DIV ) ] ( 50 , 20 ) ; printf ( " DIV of %d and %d is : %d\n  " , 50 , 20 , result ) ; return 0 ; } int add ( int a , int b ) { return a + b ; } int sub ( int a , int b ) { return a - b ; } int mul ( int a , int b ) { return a * b ; } int divide ( int a , int b ) { return a / b ; }
#include <stdio.h> void process_cmd_args ( char * * ) ; int main ( int argc , char * argv [ ] ) { puts ( " * * Program processes Command Line Arguments * * " ) ; process_cmd_args ( argv ) ; return 0 ; } void process_cmd_args ( char * * string ) { char opt ; while ( * + + string ! = NULL & & * * string = = '-' ) { while ( ( opt = * + + * string ) ! = '\0' ) { switch ( opt ) { case 'a' : puts ( " a " ) ; break ; case 'b' : puts ( " b " ) ; break ; case 'c' : puts ( " c " ) ; break ; default : puts ( " option not known " ) ; break ; } } } if ( * string = = NULL ) puts ( " process_standard_input ( ) " ) ; else { do { puts ( " Processing File Argument. " ) ; } while ( * + + string ! = NULL ) ; } }
#include <stdio.h> #define NAME " What is your name? " int main ( void ) { char name [ 25 ] = " xyz " ; char * const p2name = " abc " ; " abc " + = 1 ; " abc " + 1 ; " abc " [ 0 ] ; " abc " [ 1 ] ; " abc " [ 10 ] ; * ( " abc " + 2 ) ; * " abc " ; return 0 ; }
#include <stdio.h> #define NAME " What is your name? " int main ( void ) { char name [ 25 ] = " xyz " ; char * const p2name = " abc " ; printf ( " Result of \ " abc\ " + 1 is %c\n  " , " abc " + 1 ) ; printf ( " Result of * ( \ " abc\ " + 1 ) is %c\n  " , * ( " abc " + 1 ) ) ; printf ( " Result of \ " abc\ " [ 0 ] is %c\n  " , " abc " [ 0 ] ) ; printf ( " Result of \ " abc\ " [ 1 ] is %c\n  " , " abc " [ 1 ] ) ; printf ( " Result of \ " abc\ " [ 10 ] is %c\n  " , " abc " [ 10 ] ) ; printf ( " Result of * ( \ " abc\ " + 2 ) is %c\n  " , * ( " abc " + 2 ) ) ; printf ( " Result of * \ " abc\ " is %c\n  " , * " abc " ) ; return 0 ; } Output of the above program is as follows , <pre lang = " C " cssfile = " hk1_style " > Result of " abc " + 1 is Result of * ( " abc " + 1 ) is b Result of " abc " [ 0 ] is a Result of " abc " [ 1 ] is b Result of " abc " [ 10 ] is Result of * ( " abc " + 2 ) is c Result of * " abc " is a
#include <stdio.h> #define MINUS1 4294967295 void uint_to_hex ( unsigned ) ; int main ( void ) { unsigned value ; puts ( " \n  * * Program converts Unsigned int to Hexadecimal No. * * \n  " ) ; printf ( " User , enter an unsigned integer value or -1 to quit : " ) ; while ( scanf ( " %u " , & value ) = = 1 & & value ! = MINUS1 ) { uint_to_hex ( value ) ; puts ( " " ) ; printf ( " more conversions , enter unsigned integer or -1 to quit : " ) ; } puts ( " Thank You! " ) ; return 0 ; } void uint_to_hex ( unsigned value ) { unsigned quotient ; quotient = value / 16 ; if ( quotient ! = 0 ) uint_to_hex ( quotient ) ; putchar ( " 0123456789ABCDEF " [ value % 16 ] ) ; }
#include <stdio.h> int main ( ) { printf ( " Hello World!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define TRUE 1 #define FALSE 0 #if ( TRUE ) #include <string.h> #elif ( !FALSE ) #include <ctype.h> #else #include <math.h> #endif #define MAX ( a , b ) ( ( a ) > ( b ) ? ( a ) : ( b ) ) int main ( void ) { int x = 10 , y = 20 ; float u = 12.34 , v = -0.98 ; double s = 113.563 , t = 34.65 ; printf ( " The greater of %d and %d is : %d \n  " , x , y , MAX ( x , y ) ) ; printf ( " The greater of %f and %f is : %.2f\n  " , u , v , MAX ( u , v ) ) ; printf ( " The greater of %lf and %lf is : %.6lf\n  " , s , t , MAX ( s , t ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Hello World!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define TRUE 1 #define FALSE 0 #define SIZE 512 #define MAX ( a , b ) ( ( a ) > ( b ) ? ( a ) : ( b ) )
#include <stdio.h> #define TRUE 1 #define PRINT printf ( " values of x = %d and y = %d.\n  " , x , y ) ; int main ( void ) { if ( TRUE ) PRINT ; else printf ( " Bye!\n  " ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 void disp ( char [ ] ) ; int main ( ) { char name [ SIZE ] = { 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' } ; disp ( name ) ; return 0 ; } void disp ( char name [ ] ) { int i ; printf ( " name is : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %c " , name [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> #define MAX ( a , b ) ( ( a ) > ( b ) ? ( a ) : ( b ) ) int main ( void ) { int x = 10 , y = 15 ; float u = 2.0 , v = 3.0 ; double s = 5 , t = 5 ; printf ( " Max of two integers %d and %d is : %d\n  " , x , y , MAX ( x , y ) ) ; printf ( " Max of two floats %.2f and %.2f is : %.2f\n  " , u , v , MAX ( u , v ) ) ; printf ( " Max of two doubles %.2lf and %.2lfis : %lf\n  " , s , t , MAX ( s , t ) ) ; return 0 ; }
#include <stdio.h> void sum2ints ( const int , const int ) ; void sum2floats ( const float , const float ) ; void sum2doubles ( const double , const double ) ; int main ( void ) { int x = 10 , y = 10 ; sum2ints ( x , y ) ; sum2floats ( 3.4 , 5.6 ) ; sum2doubles ( 15 , 4 ) ; return 0 ; } void sum2ints ( const int a , const int b ) { printf ( " sum of two integers %d and %d is %d\n  " , a + b ) ; } <pre lang = " C " cssfile = " hk1_style " > void sum2floats ( const float a , const float b ) { printf ( " sum of two floats %.2f and %.2f is %.2f\n  " , a + b ) ; } void sum2doubles ( const double , const double ) { printf ( " sum of two doubles %.2lf and %.2lf is %.2lf\n  " , a + b ) ; }
#include <stdio.h> #define X 10 #define Y 0 #define Z 100 int main ( void ) { int x = 10 , y = 0 , z = 100 ; #if X printf ( " x is %d\n  " , X ) ; #elif Y printf ( " y is %d\n  " , Y ) ; #else printf ( " z is %d\n  " , Z ) ; #endif return 0 ; }
#include <stdio.h> #define DEBUG printf ( " value of x = %d and y = %d.\n  " , x , y ) void increase ( int , int ) ; int main ( void ) { int x = 5 , y = 6 ; x + + ; y + + ; DEBUG ; increase ( + + x , y + + ) ; DEBUG ; + + x ; + + y ; DEBUG ; } void increase ( int x , int y ) { DEBUG ; x + + ; y + + ; DEBUG ; }
#include <stdio.h> #define YES #define NO #undef YES #undef NO int main ( void ) { #ifdef YES #ifdef NO puts ( " Both YES and NO defined! " ) ; #else puts ( " YES defined! " ) ; #endif #elif NO puts ( " NO defined! " ) ; #else #error None of YES and NO defined! #endif return 0 ; }
#include <stdio.h> int main ( void ) { #if defined ( OS_LINUX ) #ifdef OPTION1 os_linux_version_option1 ( ) ; #endif #ifdef OPTION2 os_linux_version_option2 ( ) ; #endif #elif defined ( MS_DOS ) #ifdef OPTION2 os_ms_dos_version_option2 ( ) ; #endif #endif return 0 ; }
#include <stdio.h> #include <stdlib.h> #define T 1 #define I 2 #define S 3 #define D 4 #define Q 5 #define TRAVERSE " enter 1 to TRAVERSE the list... " #define INSERT " enter 2 to INSERT new value in the list... " #define SEARCH " enter 3 to SEARCH a value in the list... " #define DELETE " enter 4 to DELETE a value from the list... " #define QUIT " enter 5 to QUIT the program... " typedef struct NODE { struct NODE * link ; int value ; } Node ; int traverse ( Node * * ) ; void insert ( Node * * , const int ) ; int search ( Node * * , const int ) ; int delete ( Node * * , const int ) ;
#include <stdio.h> #include <stdlib.h> #define BUFFSIZE 512 void sum2ints ( const int , const int ) ; void sum2floats ( const float , const float ) ;
#include <stdio.h> #define YES #define NO int main ( void ) { #ifdef YES #ifdef NO puts ( " Both YES and NO defined! " ) ; #else puts ( " YES defined! " ) ; #endif #elif NO puts ( " NO defined! " ) ; #else #error None of YES and NO defined! #endif return 0 ; }
#include <stdio.h> #define VAL ( n ) val ## n #define PRINTSUM ( n , m ) \ printf ( " sum of val " #n " = %d and val " #m " = %d is %d\n  " , \ val ## n , val ## m , val ## n + val ## m ) int main ( void ) { int VAL ( 1 ) = 10 ; int VAL ( 2 ) = 20 ; PRINTSUM ( 1 , 2 ) ; return 0 ; }
#include <stdio.h> #include <error.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; if ( argc = = 1 ) { puts ( " File Argument Missing " ) ; exit ( EXIT_FAILURE ) ; } fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; if ( argc = = 2 ) { fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } else { printf ( " File : \ " %s\ " opened successfully!\n  " , argv [ 1 ] ) ; } } else { puts ( " Error File Argument " ) ; exit ( EXIT_FAILURE ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #define DEBUG fprintf ( fp , " values : a = %d and b = %d\n  " , a , b ) #define BSIZE 50 #define SUM ( a , b ) ( ( a ) + ( b ) ) int main ( void ) { int a = 10 , b = 20 ; int * pa = & a , * pb = & b ; int * pi = ( int * ) 1000 ; FILE * fp ; fp = fopen ( " fflush_out.txt " , " w + " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } DEBUG ; fflush ( fp ) ; fprintf ( fp , " Sum of %d and %d is %d\n  " , a , b , SUM ( a , b ) ) ; fflush ( fp ) ; fflush ( stdin ) ; fflush ( NULL ) ; fprintf ( fp , " What value pointer * pi is pointing at , %d\n  " , * pi ) ; fflush ( fp ) ; printf ( " Add. of a and b is %p and %p\n  " , pa , pb ) ; DEBUG ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; int ch ; if ( argc ! = 2 ) { perror ( " File Argument " ) ; exit ( EXIT_FAILURE ) ; } fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( fp ) ) ! = EOF ) putchar ( ch ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * str ; printf ( " how are you , dear xyz?\n  " ) ; gets ( str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { int exit_status = EXIT_SUCCESS ; FILE * fp ; int ch ; printf ( " * * Program reads in file names as command-line arguments , \n  " " attempts to open stream associated with each file in read " " mode\n then reads from each file one-by-one , before closing " " each. * * \n  " ) ; while ( * + + argv ! = NULL ) { fp = fopen ( * argv , " r " ) ; if ( fp = = NULL ) { printf ( " No such %s file " , * argv ) ; exit_status = EXIT_FAILURE ; continue ; } while ( ( ch = fgetc ( fp ) ) ! = EOF ) { putchar ( ch ) ; } putchar ( '\n ' ) ; if ( fclose ( fp ) ! = 0 ) { perror ( " fclose ( ) : * argv " ) ; exit ( EXIT_FAILURE ) ; } } }
#include <stdio.h> #include <stdlib.h> #define BSIZE 100 void linebyline ( FILE * ) ; int main ( void ) { printf ( " * * This program reads set of 4 integers in each input and " " process them. * * \n  " ) ; linebyline ( stdin ) ; return 0 ; } void linebyline ( FILE * input ) { char buffer [ BSIZE ] ; int a , b , c , d , e ; printf ( " To terminate program , hit ENTER key on the blank line.\n  " ) ; while ( fgets ( buffer , BSIZE , input ) ! = NULL & & buffer [ 0 ] ! = '\n ' ) { if ( sscanf ( buffer , " %d %d %d %d %d " , & a , & b , & c , & d , & e ) ! = 4 ) { fprintf ( stderr , " Bad input skipped : %s " , buffer ) ; continue ; } a + = 1 ; b + = 1 ; c + = 1 ; d + = 1 ; printf ( " values become : a = %d , b = %d , c = %d , d = %d\n  " , a , b , c , d ) ; printf ( " To terminate program , hit ENTER key on the blank line.\n  " ) ; } printf ( " Thank you!\n  " ) ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { int exit_status = EXIT_SUCCESS ; FILE * fp ; int ch ; printf ( " * * Program reads in filenames as command-line arguments , \n  " " attempts to open stream associated with each file in read " " mode then\n reads from each file one-by-one , before closing " " each. * * \n  " ) ; while ( * + + argv ! = NULL ) { fp = fopen ( * argv , " r " ) ; if ( fp = = NULL ) { printf ( " No such %s file " , * argv ) ; exit_status = EXIT_FAILURE ; continue ; } while ( ( ch = fgetc ( fp ) ) ! = EOF ) { putchar ( ch ) ; } putchar ( '\n ' ) ; if ( fclose ( fp ) ! = 0 ) { perror ( " fclose ( ) : * argv " ) ; exit ( EXIT_FAILURE ) ; } } }
#include <stdio.h> int main ( void ) { int ch ; while ( ( ch = getchar ( ) ) ! = '1' ) putchar ( ch ) ; ungetc ( ch , stdin ) ; ch = getchar ( ) ; putchar ( ch ) ; puts ( " " ) ; printf ( " Thank you!\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define BUFSIZE 101 int main ( int argc , char * argv [ ] ) { FILE * input ; FILE * output ; char buffer [ BUFSIZE ] ; if ( argc ! = 3 ) { perror ( " File arguments on command-line " ) ; exit ( EXIT_FAILURE ) ; } input = fopen ( argv [ 1 ] , " r " ) ; if ( input = = NULL ) { perror ( " File open " ) ; exit ( EXIT_FAILURE ) ; } output = fopen ( argv [ 2 ] , " a " ) ; if ( output = = NULL ) { perror ( " File open " ) ; exit ( EXIT_FAILURE ) ; } while ( fgets ( buffer , BUFSIZE , input ) ! = NULL ) { fputs ( buffer , output ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #define BSIZE 100 void processlines ( FILE * ) ; int main ( void ) { printf ( " * * This program reads set of 4 integers in each " " input and process them. * * \n  " ) ; processlines ( stdin ) ; } void processlines ( FILE * input ) { int TRUE = 1 char buffer [ BSIZE ] ; int a , b , c , d ; while ( TRUE ) { printf ( " user , enter four integers...\n  " ) ; if ( fscanf ( input , " %d %d %d %d " , & a , & b , & c , & d ) = = 4 ) { a + = 1 ; b + = 1 ; c + = 1 ; d + = 1 ; printf ( " Processed values become : a = %d , b = %d , c = %d , " " d = %d\n  " , a , b , c , d ) ; } while ( getchar ( ) ! = '\n ' ) ; printf ( " want to stop now , enter zero '0' else enter 1 : " ) ; scanf ( " %d " , & TRUE ) ; } }
#include <stdio.h> #include <stdlib.h> #define BSIZE 100 #define TRUE 1 void linebyline ( FILE * ) ; int main ( void ) { printf ( " * * This program reads set of 4 integers in each " " input and process them. * * \n  " ) ; linebyline ( stdin ) ; return 0 ; } void linebyline ( FILE * input ) { char buffer [ BSIZE ] ; int a , b , c , d , e ; printf ( " To terminate program , hit ENTER key on the blank line.\n  " ) ; while ( fgets ( buffer , BSIZE , input ) ! = NULL & & buffer [ 0 ] ! = '\n ' ) { if ( sscanf ( buffer , " %d %d %d %d %d " , & a , & b , & c , & d , & e ) ! = 4 ) { fprintf ( stderr , " Bad input skipped : %s " , buffer ) ; continue ; } a + = 1 ; b + = 1 ; c + = 1 ; d + = 1 ; printf ( " Processed values become : a = %d , b = %d , c = %d , " " d = %d\n  " , a , b , c , d ) ; printf ( " To terminate program , hit ENTER key on the blank " " line.\n  " ) ; } printf ( " Thank you!\n  " ) ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 10 int main ( void ) { FILE * stream ; char buffer [ SIZE ] ; stream = fopen ( " hello.txt " , " r " ) ; if ( stream = = NULL ) { perror ( " File Open " ) ; exit ( EXIT_FAILURE ) ; } fgets ( buffer , SIZE , stream ) ; if ( ferror ( stream ) ) printf ( " Read / Write Error.\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define NAME_SIZE L_tmpnam #define BUF_SIZE 1000 int main ( void ) { long cp ; FILE * tfile ; char tf_name [ NAME_SIZE ] ; char buffer [ BUF_SIZE ] ; tfile = tmpfile ( ) ; if ( tfile = = NULL ) { perror ( " temporary File Created : " ) ; exit ( 1 ) ; } close ( tfile ) ; tmpnam ( tf_name ) ; printf ( " Temporary File Name Constructed : %s\n  " , tf_name ) ; tfile = fopen ( " tf_name " , " wb + " ) ; if ( tfile = = NULL ) { perror ( " Temporary File Open : " ) ; exit ( 2 ) ; } fprintf ( tfile , " %s " , " temporary file : are you there? " ) ; fflush ( tfile ) ; cp = ftell ( tfile ) ; printf ( " Current Position in Temporary File : %ld\n  " , cp ) ; rewind ( tfile ) ; cp = ftell ( tfile ) ; printf ( " Changed Position in Temporary File : %ld\n  " , cp ) ; fgets ( buffer , BUF_SIZE , tfile ) ; printf ( " Read from temporary file : \ " %s\ " \n  " , buffer ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define MY_RANGE 20 int main ( void ) { int i ; srand ( time ( 0 ) ) ; printf ( " Sequence of Pseudo-Random Numbers : \n  " ) ; for ( i = MY_RANGE ; i > = 0 ; i-- ) printf ( " %d " , rand ( ) % MY_RANGE ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 100 int main ( void ) { char * * p2unused ; char input [ SIZE ] ; unsigned long ulong_val ; printf ( " User , type in character string with valid integer value...\n  " ) ; gets ( input ) ; ulong_val = strtoul ( input , p2unused , 12 ) ; printf ( " String \ " %s\ " converted to value : %ld\n  " , input , ulong_val ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double angle , sine ; printf ( " User , write in angle , in radians , whose sine to be " " computed...\n  " ) ; scanf ( " %lf " , & angle ) ; sine = sin ( angle ) ; printf ( " angle : %lf , in radians , converted to : %lf sine\n  " , angle , sine ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double angle , result ; printf ( " User , write in angle , in radians , whose hyperbolic sine " " to be computed...\n  " ) ; scanf ( " %lf " , & angle ) ; result = sinh ( angle ) ; printf ( " hyperbolic sine of \ " angle : %lf\ " is : %lf\n  " , angle , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter + ve value to compute its natural " " logarithm to base \ " e\ " ...\n  " ) ; printf ( " Logarithm for -ve values \ " NOT DEFINED\ " !\n  " ) ; scanf ( " %lf " , & value ) ; result = log ( value ) ; printf ( " Logarithm of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double to_what_power , result ; printf ( " User , enter value for which you wish to compute " " expression \ " e^value\ " ...\n  " ) ; scanf ( " %lf " , & to_what_power ) ; result = exp ( to_what_power ) ; printf ( " Exponent of exp. \ " e^ %lf\ " : %lf\n  " , to_what_power , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double x , y , result ; printf ( " User , enter + ve value for 'x' and Integral Value for 'y' " " to evaluate \ " x^y\ " ...\n  " ) ; printf ( " Power \ " x^y\ " with -ve 'x' and Non-Integral 'y' " " causes DOMAIN ERROR!\n  " ) ; scanf ( " %lf %lf " , & x , & y ) ; result = pow ( x , y ) ; printf ( " Pow \ " %lf^ %lf\ " : %lf\n  " , x , y , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double sqrt_of , result ; printf ( " User , enter + ve value of which you seek Square-Root of...\n  " ) ; printf ( " Square-Root of Negative Values causes DOMAIN ERROR!\n  " ) ; scanf ( " %lf " , & sqrt_of ) ; result = sqrt ( sqrt_of ) ; printf ( " Square-Root of \ " %lf\ " : %lf\n  " , sqrt_of , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter value for 'floor' evaluation...\n  " ) ; scanf ( " %lf " , & value ) ; result = floor ( value ) ; printf ( " 'floor' of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( void ) { double value , result ; printf ( " User , enter value for 'ceiling' evaluation...\n  " ) ; scanf ( " %lf " , & value ) ; result = ceil ( value ) ; printf ( " 'ceil' of \ " %lf\ " : %lf\n  " , value , result ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> #define COUNT 1000000000 int main ( void ) { clock_t tm1 , tm2 ; long i ; tm1 = clock ( ) ; for ( i = 1 ; i < COUNT ; i + + ) ; tm2 = clock ( ) ; printf ( " amount of processor time : %d ticks and %d seconds\n  " , ( tm2 - tm1 ) , ( tm2 - tm1 ) / CLOCKS_PER_SEC ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( void ) { time_t * returned_value , tm1 ; time_t * p2tm = & tm1 ; char * str ; tm1 = time ( NULL ) ; str = ctime ( p2tm ) ; str = ctime ( p2tm ) ; printf ( " current date and time of the day : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_DFL ) ; while ( 1 ) return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_IGN ) ; while ( 1 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <signal.h> #include <stdio.h> void handler ( int signal ) { if ( signal = = SIGINT ) } int main ( void ) { signal ( SIGINT , handler ) ; return 0 ; }
#include <signal.h> #include <stdio.h> void handler ( int signal ) { if ( signal = = SIGBUS ) if ( signal = = SIGILL ) if ( signal = = SIGSEGV ) } int main ( void ) { signal ( SIGBUS , handler ) ; signal ( SIGILL , handler ) ; signal ( SIGSEGV , handler ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { abort ( ) ; printf ( " \ " abort ( ) called prior to printf ( ) \ " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void goodbye ( void ) ; void okey ( void ) ; int main ( void ) { int ret ; ret = atexit ( goodbye ) ; if ( ret = = 0 ) puts ( " atexit ( ) succeeds! " ) ; ret = atexit ( okey ) ; if ( ret = = 0 ) puts ( " atexit ( ) succeeds! " ) ; exit ( 0 ) ; } void goodbye ( void ) { puts ( " goodbye! " ) ; } void okey ( void ) { puts ( " okey , bye! " ) ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { printf ( " %d\n  " , abs ( 92.09998 ) ) ; printf ( " %ld\n  " , labs ( 123.88L ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define NUM 23 #define DEN 87 int main ( void ) { div_t res ; res = div ( NUM , DEN ) ; printf ( " \ " div ( %d , %d ) \ " gives quotient : %d and remainder : %d\n  " , NUM , DEN , res.quot , res.rem ) ; }
#include <stdio.h> #include <stdlib.h> #define MYRANGE 11 int main ( void ) { int i ; printf ( " On Linux system \ " RAND_MAX\ " is %ld\n  " , RAND_MAX ) ; printf ( " Generate numbers in RANGE ZERO through TEN...\n  " ) ; for ( i = MAXSIZE ; i > = 1 ; i-- ) { printf ( " %3d " , rand ( ) % MAXSIZE ) ; } puts ( " " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 100 int main ( void ) { char string [ SIZE ] ; double ret ; char * * p2unused ; printf ( " User , type in some string with legal numeric value " " within it...\n  " ) ; gets ( string ) ; ret = atof ( string ) ; printf ( " String \ " %s\ " converted to : %lf\n  " , string , ret ) ; ret = strtod ( string , p2unused ) ; printf ( " String \ " %s\ " converted to : %lf\n  " , string , ret ) ; printf ( " Part of \ " %s\ " not converted : \ " %s\ " \n  " , string , * p2unused ) ; return 0 ; }
#include <stdio.h> 1503 <div style = " text-align : justify " > #include <stdlib.h> #include <assert.h> int main ( void ) { FILE * fp ; fp = fopen ( " hello.txt " , " r " ) ; assert ( fp ! = NULL ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <assert.h> int main ( void ) { char * str ; assert ( ( str = getenv ( " HOME " ) ) ! = NULL ) ; printf ( " Value of \ " HOME Environmemt Variable\ " : %s\n  " , str ) ; assert ( ( str = getenv ( " PATH " ) ) ! = NULL ) ; printf ( " Value of \ " PATH Environmemt Variable\ " : %s\n  " , str ) ; assert ( ( str = getenv ( " LOGNAME " ) ) ! = NULL ) ; printf ( " Value of \ " LOGNAME Environmemt Variable\ " : %s\n  " , str ) ; assert ( ( str = getenv ( " MELLO " ) ) ! = NULL ) ; printf ( " Value of \ " MELLO Environmemt Variable\ " : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <assert.h> int main ( void ) { int status ; assert ( ( system ( NULL ) ) ! = 0 ) ; system ( " ls -l " ) ; exit ( 0 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define NOSTRINGS 5 #define SIZE 26 int string_compare ( void const * , void const * ) ; int main ( void ) { int i ; char strings [ NOSTRINGS ] [ SIZE ] ; printf ( " User , write in %d character strings...\n  " , NOSTRINGS ) ; for ( i = 0 ; i < NOSTRINGS ; i + + ) fgets ( strings [ i ] , SIZE , stdin ) ; printf ( " Before Sorting : \n  " ) ; for ( i = 0 ; i < NOSTRINGS ; i + + ) fputs ( strv style = " text-align : justify " > ings [ i ] , stdout ) ; qsort ( strings , NOSTRINGS , SIZE , string_compare ) ; printf ( " \n  " ) ; printf ( " After Sorting : \n  " ) ; for ( i = 0 ; i < NOSTRINGS ; i + + ) printf ( strings [ i ] , stdout ) ; return 0 ; } int string_compare ( void const * str1 , void const * str2 ) { return strcmp ( ( char * ) str1 , ( char * ) str2 ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #include <assert.h> #define NOSTRINGS 5 #define SIZE 26 int string_compare ( void const * , void const * ) ; int main ( void ) { int i ; char strings [ NOSTRINGS ] [ SIZE ] ; char search_str [ SIZE ] ; char * status ; printf ( " User , write in %d character strings...\n  " , NOSTRINGS ) ; for ( i = 0 ; i < NOSTRINGS ; i + + ) fgets ( strings [ i ] , SIZE , stdin ) ; printf ( " \n \n  " ) ; printf ( " Before Sorting : \n  " ) ; for ( i = 0 ; i < NOSTRINGS ; i + + ) fputs ( strings [ i ] , stdout ) ; qsort ( strings , NOSTRINGS , SIZE , string_compare ) ; printf ( " \n  " ) ; printf ( " After Sorting : \n  " ) ; for ( i = 0 ; i < NOSTRINGS ; i + + ) printf ( strings [ i ] , stdout ) ; printf ( " \n \n  " ) ; printf ( " User , write in string you wish to search for...\n  " ) ; fgets ( search_str , SIZE , stdin ) ; printf ( " \n  " ) ; status = bsearch ( search_str , strings , NOSTRINGS , SIZE , string_compare ) ; assert ( status ! = NULL ) ; printf ( " desired string is found!\n  " ) ; return 0 ; } int string_compare ( void const * str1 , void const * str2 ) { return strcmp ( ( char * ) str1 , ( char * ) str2 ) ; }
#include <stdio.h> #include <stdlib.h> #include <locale.h> int main ( void ) { char * curr_locale ; curr_locale = setlocale ( LC_ALL , NULL ) ; printf ( " Current Locale is \ " %s\ " \n  " , curr_locale ) ; curr_locale = setlocale ( LC_COLLATE , NULL ) ; printf ( " Current Locale is \ " %s\ " \n  " , curr_locale ) ; curr_locale = setlocale ( LC_CTYPE , NULL ) ; printf ( " Current Locale is \ " %s\ " \n  " , curr_locale ) ; curr_locale = setlocale ( LC_MONETARY , NULL ) ; printf ( " Current Locale is \ " %s\ " \n  " , curr_locale ) ; curr_locale = setlocale ( LC_NUMERIC , NULL ) ; printf ( " Current Locale is \ " %s\ " \n  " , curr_locale ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i , j = 0 ; for ( i = 0 ; i < 10 ; i + + ) j = j + 1 ; return 0 ; }
#include <stdio.h> int power_of_2 ( unsigned int ) ; int b [ 32 ] = { 0 } , j = 0 , n , i , count = 0 ; void main ( ) { unsigned int num ; printf ( " enter value\n  " ) ; scanf ( " %d " , & num ) ; power_of_2 ( num ) ; if ( count = = 1 ) printf ( " YES\n  " ) ; else printf ( " NO\n  " ) ; } int power_of_2 ( unsigned int num ) { while ( num ! = 0 ) { n = num % 2 ; if ( n = = 1 ) count + + ; num = num / 2 ; } }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_DFL ) ; while ( 1 ) return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> int main ( void ) { signal ( SIGINT , SIG_IGN ) ; while ( 1 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <signal.h> void handler ( int signal ) { if ( signal = = SIGINT ) printf ( " : got ctrl-C signal handled!\n  " ) ; } int main ( void ) { signal ( SIGINT , handler ) ; while ( 1 ) { } return 0 ; }
#include <stdio.h> int main ( ) { int arr [ 100 ] , len , i , j , temp , n ; printf ( " Enter the size of array " ) ; scanf ( " %d " , & len ) ; printf ( " \n  Enter the array elements " ) ; for ( i = 0 ; i < len ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n  Enter Which kth Number You want " ) ; scanf ( " %d " , & n ) ; printf ( " \n  The %d th kth number is : %d " , n , arr [ n - 1 ] ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int i = 0 ; if ( argc = = 1 ) { printf ( " \n  No sentence given on command line " ) ; return ; } else { printf ( " \n The words in the sentence are : " ) ; for ( i = 1 ; i < argc ; i + + ) { printf ( " \n  %s " , argv [ i ] ) ; } printf ( " \n \n Total number of words : " ) ; printf ( " %d " , argc-1 ) ; } }
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * l ; struct btnode * r ; } * root = NULL ;
#include <stdio.h> #include <stdlib.h> struct btnode { int value ; struct btnode * left , * right ; } ; typedef struct btnode node ; node * root = NULL , * temp , * list ; void insert ( node * , node * ) ; void inorder ( node * ) ; void mirror ( node * ) ; void main ( ) { node * new = NULL ; int num = 1 ; printf ( " Enter the elements of the tree ( enter 0 to exit ) \n  " ) ; while ( 1 ) { scanf ( " %d " , & num ) ; if ( num = = 0 ) break ; new = malloc ( sizeof ( node ) ) ; new-> left = new-> right = NULL ; new-> value = num ; if ( root = = NULL ) root = new ; else { insert ( new , root ) ; } } printf ( " elements in a tree in inorder are\n  " ) ; inorder ( root ) ; temp = root ; printf ( " \n mirror image of the elements are\n  " ) ; mirror ( temp ) ; inorder ( temp ) ; printf ( " \n  " ) ; } void inorder ( node * list ) { if ( list ! = NULL ) { inorder ( list-> left ) ; printf ( " %d\t " , list-> value ) ; inorder ( list-> right ) ; } } void insert ( node * new , node * root ) { if ( new-> value> root-> value ) { if ( root-> right = = NULL ) root-> right = new ; else insert ( new , root-> right ) ; } if ( new-> value < root-> value ) { if ( root-> left = = NULL ) root-> left = new ; else insert ( new , root-> left ) ; } } void mirror ( node * temp ) { node * temp1 ; if ( temp = = NULL ) return ; temp1 = temp-> left ; temp-> left = temp-> right ; temp-> right = temp1 ; mirror ( temp-> left ) ; mirror ( temp-> right ) ; }
#include <stdio.h> #include <string.h> char a [ 20 ] ; int n , len , j ; void main ( ) { int i , index = 0 , start = 0 ; printf ( " Enter the string\n  " ) ; scanf ( " %s " , a ) ; n = strlen ( a ) ; printf ( " enter input length\n  " ) ; scanf ( " %d " , & len ) ; printf ( " The subsets are\n  " ) ; for ( i = 1 ; i < = n ; i + + ) { if ( index - start + 1 = = i ) { if ( i = = len ) { for ( j = index ; j < n ; j + + ) { for ( i = start ; i < index ; i + + ) printf ( " %c " , a [ i ] ) ; printf ( " %c\n  " , a [ j ] ) ; } if ( start ! = i ) { start + + ; index = start ; } } else { index + + ; } } } }
#include <stdio.h> #include <string.h> #include <ctype.h> int main ( ) { char string [ 100 ] , word [ 20 ] , unit [ 20 ] , c ; int i = 0 , j = 0 , count = 0 ; printf ( " Enter string : " ) ; i = 0 ; do { fflush ( stdin ) ; c = getchar ( ) ; string [ i + + ] = c ; } while ( c ! = '\n ' ) ; string [ i - 1 ] = '\0' ; printf ( " Enter the word you want to find : " ) ; scanf ( " %s " , word ) ; for ( i = 0 ; i < strlen ( string ) ; i + + ) { while ( i < strlen ( string ) & & !isspace ( string [ i ] ) & & isalnum ( string [ i ] ) ) { unit [ j + + ] = string [ i + + ] ; } if ( j ! = 0 ) { unit [ j ] = '\0' ; if ( strcmp ( unit , word ) = = 0 ) { count + + ; } j = 0 ; } } printf ( " The number of times the word ' %s' found in ' %s' is ' %d'.\n  " , word , string , count ) ; }
#include <stdio.h> #include <string.h> #include <ctype.h> int sumascii ( char [ ] , int ) ; int main ( ) { char str1 [ 30 ] ; int sum ; printf ( " Enter a string : " ) ; scanf ( " %s " , str1 ) ; sum = sumascii ( str1 , 0 ) ; printf ( " The sum of all ascii values in ' %s' is %d.\n  " , str1 , sum ) ; return 0 ; } int sumascii ( char str [ ] , int num ) { if ( num < strlen ( str ) ) { return ( str [ num ] + sumascii ( str , num + 1 ) ) ; } return 0 ; }
#include <stdio.h> #include <malloc.h> struct node { int n ; int degree ; struct node * parent ; struct node * child ; struct node * sibling ; } ; struct node * MAKE_bin_HEAP ( ) ; int bin_LINK ( struct node * , struct node * ) ; struct node * CREATE_NODE ( int ) ; struct node * bin_HEAP_UNION ( struct node * , struct node * ) ; struct node * bin_HEAP_INSERT ( struct node * , struct node * ) ; struct node * bin_HEAP_MERGE ( struct node * , struct node * ) ; struct node * bin_HEAP_EXTRACT_MIN ( struct node * ) ; int REVERT_LIST ( struct node * ) ; int DISPLAY ( struct node * ) ; struct node * FIND_NODE ( struct node * , int ) ; int bin_HEAP_DECREASE_KEY ( struct node * , int , int ) ; int bin_HEAP_DELETE ( struct node * , int ) ; int count = 1 ; struct node * MAKE_bin_HEAP ( ) { struct node * np ; np = NULL ; return np ; } struct node * H = NULL ; struct node * Hr = NULL ; int bin_LINK ( struct node * y , struct node * z ) { y-> parent = z ; y-> sibling = z-> child ; z-> child = y ; z-> degree = z-> degree + 1 ; } struct node * CREATE_NODE ( int k ) { struct node * p ;
#include <stdio.h> #include <stdlib.h> #define MAX 20void maxheapify ( int * , int , int ) ; int * buildmaxheap ( int * , int ) ; void main ( ) { int i , t , n ; int * a = calloc ( MAX , sizeof ( int ) ) ; int * m = calloc ( MAX , sizeof ( int ) ) ; printf ( " Enter no of elements in the array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the array\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } m = buildmaxheap ( a , n ) ; printf ( " The heap is\n  " ) ; for ( t = 0 ; t < n ; t + + ) { printf ( " %d\n  " , m [ t ] ) ; } } int * buildmaxheap ( int a [ ] , int n ) { int heapsize = n ; int j ; for ( j = n / 2 ; j > = 0 ; j-- ) { maxheapify ( a , j , heapsize ) ; } return a ; } void maxheapify ( int a [ ] , int i , int heapsize ) { int temp , largest , left , right , k ; left = ( 2 * i + 1 ) ; right = ( ( 2 * i ) + 2 ) ; if ( left > = heapsize ) return ; else { if ( left < ( heapsize ) & & a [ left ] > a [ i ] ) largest = left ; else largest = i ; if ( right < ( heapsize ) & & a [ right ] > a [ largest ] ) largest = right ; if ( largest ! = i ) { temp = a [ i ] ; a [ i ] = a [ largest ] ; a [ largest ] = temp ; maxheapify ( a , largest , heapsize ) ; } } }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; int pop ( struct node * * top ) { int h ; struct node * res = top ; if ( * top = = NULL ) { printf ( " underflow\n  " ) ; return ; } h = ( * top ) -> data ; * top = ( * top ) -> next ; free ( res ) ; return h ; } struct node * create ( int x ) { struct node * newptr = ( struct node * ) malloc ( sizeof ( struct node ) ) ; newptr-> data = x ; newptr-> next = NULL ; return newptr ; } void push ( struct node * * top , int x ) { struct node * newptr = create ( x ) ; if ( * top = = NULL ) * top = newptr ; else { newptr-> next = ( * top ) ; ( * top ) = newptr ; } } void main ( ) { struct node * top = NULL ; push ( & top , 1 ) ; push ( & top , 2 ) ; push ( & top , 3 ) ; push ( & top , 4 ) ; push ( & top , 5 ) ; printf ( " %d\n  " , pop ( & top ) ) ; printf ( " %d\n  " , pop ( & top ) ) ; }
#include <stdio.h> #include <stdlib.h> #define MAX 10void random_shuffle ( int arr [ ] ) { srand ( time ( NULL ) ) ; int i , j , temp ; for ( i = MAX - 1 ; i > 0 ; i-- ) { j = rand ( ) % ( i + 1 ) ; temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } int partion ( int arr [ ] , int p , int r ) { int pivotIndex = p + rand ( ) % ( r - p + 1 ) ;
#include <stdio.h> int main ( ) { int i , j , a [ 20 ] = { 0 } , sum = 0 , n , t , b [ 20 ] = { 0 } , k = 0 , c = 1 , max = 0 , mode ; float x = 0.0 , y = 0.0 ; printf ( " \n Enter the limit\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the set of numbers\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i + + ) { mode = 0 ; for ( j = i + 1 ; j < n ; j + + ) { if ( a [ i ] = = a [ j ] ) { mode + + ; } } if ( ( mode > max ) & & ( mode ! = 0 ) ) { k = 0 ; max = mode ; b [ k ] = a [ i ] ; k + + ; } else if ( mode = = max ) { b [ k ] = a [ i ] ; k + + ; } } for ( i = 0 ; i < n ; i + + ) { if ( a [ i ] = = b [ i ] ) c + + ; } if ( c = = n ) printf ( " \n There is no mode " ) ; else { printf ( " \n Mode\t = " ) ; for ( i = 0 ; i < k ; i + + ) printf ( " %d " , b [ i ] ) ; } printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <time.h> #include <stdlib.h> int N = 20 ; int sequence [ 20 ] ; int mode ( ) { int maxValue = 0 , maxCount = 0 , i , j ; for ( i = 0 ; i < N ; + + i ) { int count = 0 ; for ( j = 0 ; j < N ; + + j ) { if ( sequence [ j ] = = sequence [ i ] ) + + count ; } if ( count > maxCount ) { maxCount = count ; maxValue = sequence [ i ] ; } } return maxValue ; } int main ( int argc , char * * argv ) { int i ; time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; for ( i = 0 ; i < N ; i + + ) sequence [ i ] = rand ( ) % ( 100 - 1 + 1 ) + 1 ; printf ( " The set of numbers are : " ) ; for ( i = 0 ; i < N ; i + + ) printf ( " %d " , sequence [ i ] ) ; printf ( " \n The mode of the set is : %d " , mode ( ) ) ; }
#include <stdio.h> #include <math.h> #define PI 3.14159265 struct DFT_Coefficient { double real , img ; } dft_val ; int main ( int argc , char * * argv ) { int N = 10 ; float a , b , c ; int i ; double function [ N ] ; int k ; double cosine [ N ] ; double sine [ N ] ; printf ( " Calculation DFT Coefficients\n  " ) ; printf ( " Enter the coefficient of simple linear function : \n  " ) ; printf ( " ax + by = c\n  " ) ; scanf ( " %f " , & a ) ; scanf ( " %f " , & b ) ; scanf ( " %f " , & c ) ; for ( i = 0 ; i < N ; i + + ) { function [ i ] = ( ( ( a * ( double ) i ) + ( b * ( double ) i ) ) - c ) ;
#include <stdio.h> #include <math.h> #define PI 3.14159265int k = 20 ; struct DFT_Coefficient { double real , img ; } ; int main ( int argc , char * * argv ) { int N = 10 ; float a , b , c ; int i , j ; struct DFT_Coefficient dft_val [ k ] ; double cosine [ N ] ; double sine [ N ] ; printf ( " Discrete Fourier Transform using naive method\n  " ) ; printf ( " Enter the coefficient of simple linear function : \n  " ) ; printf ( " ax + by = c\n  " ) ; scanf ( " %f " , & a ) ; scanf ( " %f " , & b ) ; scanf ( " %f " , & c ) ; double function [ N ] ; for ( i = 0 ; i < N ; i + + ) { function [ i ] = ( ( ( a * ( double ) i ) + ( b * ( double ) i ) ) - c ) ;
#include <stdio.h> void shellsort ( int arr [ ] , int num ) { int i , j , k , tmp ; for ( i = num / 2 ; i > 0 ; i = i / 2 ) { for ( j = i ; j < num ; j + + ) { for ( k = j - i ; k > = 0 ; k = k - i ) { if ( arr [ k + i ] > = arr [ k ] ) break ; else { tmp = arr [ k ] ; arr [ k ] = arr [ k + i ] ; arr [ k + i ] = tmp ; } } } } } int main ( ) { int arr [ 30 ] ; int k , num ; printf ( " Enter total no. of elements : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Enter %d numbers : " , num ) ; for ( k = 0 ; k < num ; k + + ) { scanf ( " %d " , & arr [ k ] ) ; } shellsort ( arr , num ) ; printf ( " \n  Sorted array is : " ) ; for ( k = 0 ; k < num ; k + + ) printf ( " %d " , arr [ k ] ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define MAX 100void random_shuffle ( int arr [ ] ) { srand ( time ( NULL ) ) ; int i , j , temp ; for ( i = MAX - 1 ; i > 0 ; i-- ) { j = rand ( ) % ( i + 1 ) ; temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } int partion ( int arr [ ] , int p , int r ) { int pivot = arr [ r ] ; int i = p - 1 ; int j ; for ( j = p ; j < r ; j + + ) { if ( arr [ j ] < pivot ) { i + + ; swap ( & arr [ i ] , & arr [ j ] ) ; } } swap ( & arr [ i + 1 ] , & arr [ r ] ) ; return i + 1 ; } void quick_sort ( int arr [ ] , int p , int q ) { int j ; if ( p < q ) { j = partion ( arr , p , q ) ; quick_sort ( arr , p , j - 1 ) ; quick_sort ( arr , j + 1 , q ) ; } } int main ( ) { int i ; int arr [ MAX ] ; for ( i = 0 ; i < MAX ; i + + ) arr [ i ] = i + 99999 ; random_shuffle ( arr ) ;
#include <stdio.h> #include <string.h> int fibsearch ( int a [ ] , int n , long x ) { int inf = 0 , pos , k ; static int kk = -1 , nn = -1 ; static int fib [ ] = { 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , 233 , 377 , 610 , 98 , 1597 , 2584 , 4181 , 6765 , 10946 , 17711 , 28657 , 46368 , 75025 , 121393 , 196418 , 317811 , 514229 , 832040 , 1346269 , 2178309 , 3524578 , 5702887 , 9227465 , 14930352 , 24157817 , 39088169 , 63245986 , 102334155 , 165580141 } ; if ( nn ! = n ) { k = 0 ; while ( fib [ k ] < n ) k + + ; kk = k ; nn = n ; } else k = kk ; while ( k > 0 ) { pos = inf + fib [ --k ] ; if ( ( pos > = n ) || ( x < a [ pos ] ) ) ; else if ( x > a [ pos ] ) { inf = pos + 1 ; k-- ; } else { return pos ; } } return -1 ; } main ( ) { int arr [ ] = { 2 , 3 , 45 , 56 , 67 , 78 , 89 , 99 , 100 , 101 } ; int num , pos ; printf ( " \n Enter an element to search : " ) ; scanf ( " %d " , & num ) ; pos = fibsearch ( arr , 10 , num ) ; if ( pos > = 0 ) printf ( " \n Element is at index : %d " , fibsearch ( arr , 10 , num ) ) ; else printf ( " \n Element NOT found!! " ) ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { int option ; do { printf ( " \n  A Program to represent a Graph by using an " ) ; printf ( " Adjacency Matrix method \n  " ) ; printf ( " \n  1. Directed Graph " ) ; printf ( " \n  2. Un-Directed Graph " ) ; printf ( " \n  3. Exit " ) ; printf ( " \n \n  Select a proper option : " ) ; scanf ( " %d " , & option ) ; switch ( option ) { case 1 : dir_graph ( ) ; break ; case 2 : undir_graph ( ) ; break ; case 3 : exit ( 0 ) ; }
#include <stdio.h> void stoogesort ( int [ ] , int , int ) ; void main ( ) { int arr [ 100 ] , i , n ; printf ( " How many elements do you want to sort : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & arr [ i ] ) ; stoogesort ( arr , 0 , n - 1 ) ; printf ( " Sorted array : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d " , arr [ i ] ) ; } printf ( " \n  " ) ; } void stoogesort ( int arr [ ] , int i , int j ) { int temp , k ; if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } if ( ( i + 1 ) > = j ) return ; k = ( int ) ( ( j - i + 1 ) / 3 ) ; stoogesort ( arr , i , j - k ) ; stoogesort ( arr , i + k , j ) ; stoogesort ( arr , i , j - k ) ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct queue { struct node * front ; struct node * rear ; } ; struct node * createnode ( int data ) ; struct queue * createqueue ( ) ; void enqueue ( struct queue * q , int value ) ; struct node * dequeue ( struct queue * q ) ; void main ( ) { struct node * q = createqueue ( ) ; enqueue ( q , 2 ) ; enqueue ( q , 3 ) ; enqueue ( q , 4 ) ; enqueue ( q , 5 ) ; enqueue ( q , 6 ) ; struct node * d1 = dequeue ( q ) ; printf ( " dequeued element = %d\n  " , d1-> data ) ; struct node * d2 = dequeue ( q ) ; printf ( " dequeued element = %d\n  " , d2-> data ) ; } struct node * createnode ( int data ) { struct node * newptr = ( struct node * ) malloc ( sizeof ( struct node ) ) ; newptr-> data = data ; newptr-> next = NULL ; return newptr ; } struct queue * createqueue ( ) { struct queue * q = ( struct queue * ) malloc ( sizeof ( struct queue ) ) ; q-> front = NULL ; q-> rear = NULL ; return q ; } void enqueue ( struct queue * q , int value ) { struct node * newnode = createnode ( value ) ; if ( q-> front = = NULL ) { q-> front = q-> rear = newnode ; } else { q-> rear-> next = newnode ; q-> rear = newnode ; } } struct node * dequeue ( struct queue * q ) { if ( q-> front = = NULL ) { printf ( " queue is empty\n  " ) ; return ; } struct node * ptr = q-> front ; q-> front = q-> front-> next ; if ( q-> front = = NULL ) q-> rear = NULL ; return ptr ; }
#include <stdio.h> #include <malloc.h> struct node { int n ; int degree ; struct node * parent ; struct node * child ; struct node * sibling ; } ; struct node * MAKE_bin_HEAP ( ) ; int bin_LINK ( struct node * , struct node * ) ; struct node * CREATE_NODE ( int ) ; struct node * bin_HEAP_UNION ( struct node * , struct node * ) ; struct node * bin_HEAP_INSERT ( struct node * , struct node * ) ; struct node * bin_HEAP_MERGE ( struct node * , struct node * ) ; struct node * bin_HEAP_EXTRACT_MIN ( struct node * ) ; int REVERT_LIST ( struct node * ) ; int DISPLAY ( struct node * ) ; struct node * FIND_NODE ( struct node * , int ) ; int bin_HEAP_DECREASE_KEY ( struct node * , int , int ) ; int bin_HEAP_DELETE ( struct node * , int ) ; int count = 1 ; struct node * MAKE_bin_HEAP ( ) { struct node * np ; np = NULL ; return np ; } struct node * H = NULL ; struct node * Hr = NULL ; int bin_LINK ( struct node * y , struct node * z ) { y-> parent = z ; y-> sibling = z-> child ; z-> child = y ; z-> degree = z-> degree + 1 ; } struct node * CREATE_NODE ( int k ) { struct node * p ;
#include <string.h> #include <stdio.h> #include <stdlib.h> const int LOW = 0 ; const int HIGH = 10 ; int main ( int argc , char * * argv ) { time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; int x1 , x2 , y1 , y2 ; x1 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; x2 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; y1 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; y2 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; printf ( " The Equation of the line is : ( %d ) x + ( %d ) y + ( %d ) = 0\n  " , ( y2 - y1 ) , ( x1 - x2 ) , ( x2 * y1 - x1 * y2 ) ) ; int x , y ; printf ( " \n Enter the point : " ) ; scanf ( " %d " , & x ) ; scanf ( " %d " , & y ) ; int s = ( y2 - y1 ) * x + ( x1 - x2 ) * y + ( x2 * y1 - x1 * y2 ) ; if ( s < 0 ) printf ( " The point lies below the line or left side of the line " ) ; else if ( s > 0 ) printf ( " The point lies above the line or right side of the line " ) ; else printf ( " The point lies on the line " ) ; return 0 ; }
#include <stdio.h> void bubblesort ( int arr [ ] , int size ) { int i , j ; for ( i = 0 ; i < size ; i + + ) { for ( j = 0 ; j < size - i ; j + + ) { if ( arr [ j ] > arr [ j + 1 ] ) swap ( & arr [ j ] , & arr [ j + 1 ] ) ; } } } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int array [ 100 ] , i , size ; printf ( " How many numbers you want to sort : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter %d numbers : " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & array [ i ] ) ; bubblesort ( array , size ) ; printf ( " \n Sorted array is " ) ; for ( i = 0 ; i < size ; i + + ) printf ( " %d " , array [ i ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <ctype.h> struct detail { char c ; int ascii ; } ; int update ( struct detail [ ] , const char [ ] , int ) ; int main ( ) { struct detail s [ 26 ] ; char string [ 100 ] , c ; int i = 0 , index ; for ( i = 0 ; i < 26 ; i + + ) { s [ i ] .c = i + 'a' ; s [ i ] .ascii = 0 ; } printf ( " Enter string : " ) ; i = 0 ; do { fflush ( stdin ) ; c = getchar ( ) ; string [ i + + ] = c ; if ( c = = '\n ' ) { break ; } index = c - 'a' ; s [ index ] .ascii = c ; } while ( 1 ) ; string [ i - 1 ] = '\0' ; printf ( " The string entered is : %s\n  " , string ) ; printf ( " * * * * * * * * * * * * * * * * * * * * * * * * * \n Character\tASCII\n  * * * * * * * * * * * * * * * * * * * * * * * * * \n  " ) ; for ( i = 0 ; i < 26 ; i + + ) { if ( s [ i ] .ascii ) { printf ( " %c\t\t %d\n  " , s [ i ] .c , s [ i ] .ascii ) ; } } return 0 ; }
#include <stdio.h> #include <limits.h> int heap [ 1000000 ] , heapSize ; void Init ( ) { heapSize = 0 ; heap [ 0 ] = -INT_MAX ; } void Insert ( int element ) { heapSize + + ; heap [ heapSize ] = element ; int now = heapSize ; while ( heap [ now / 2 ] > element ) { heap [ now ] = heap [ now / 2 ] ; now / = 2 ; } heap [ now ] = element ; } int DeleteMin ( ) { int minElement , lastElement , child , now ; minElement = heap [ 1 ] ; lastElement = heap [ heapSize-- ] ; for ( now = 1 ; now * 2 < = heapSize ; now = child ) { child = now * 2 ; if ( child ! = heapSize & & heap [ child + 1 ] < heap [ child ] ) { child + + ; } if ( lastElement > heap [ child ] ) { heap [ now ] = heap [ child ] ; } else { break ; } } heap [ now ] = lastElement ; return minElement ; } int main ( ) { int number_of_elements ; printf ( " Program to demonstrate Heap : \n Enter the number of elements : " ) ; scanf ( " %d " , & number_of_elements ) ; int iter , element ; Init ( ) ; printf ( " Enter the elements : " ) ; for ( iter = 0 ; iter < number_of_elements ; iter + + ) { scanf ( " %d " , & element ) ; Insert ( element ) ; } for ( iter = 0 ; iter < number_of_elements ; iter + + ) { printf ( " %d " , DeleteMin ( ) ) ; } printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #define SIZE ( 58 ) #define ARRAY_SIZE ( x ) ( x / 8 + ( !! ( x %8 ) ) ) char get_bit ( char * array , int index ) ; void toggle_bit ( char * array , int index ) ; void toggle_bit ( char * array , int index ) { array [ index / 8 ] ^ = 1 < < ( index % 8 ) ; } char get_bit ( char * array , int index ) { return 1 & ( array [ index / 8 ] > > ( index % 8 ) ) ; } int main ( void ) { char x [ ARRAY_SIZE ( SIZE ) ] = { 0 } ; int i ; for ( i = 0 ; i < SIZE ; i + = 2 ) toggle_bit ( x , i ) ; toggle_bit ( x , 56 ) ; for ( i = 0 ; i < SIZE ; i + + ) printf ( " %d : %d\n  " , i , get_bit ( x , i ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <time.h> #include <stdlib.h> void printArray ( int p [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i + + ) printf ( " %d " , p [ i ] ) ; printf ( " \n  " ) ; } void printAllUniqueParts ( int n ) { int p [ n ] ;
#include <stdio.h> #include <math.h> int i , j ; int sequence [ ] = { 2 , 3 , 5 , 6 , 7 } ; void lexicographicOrder ( int N ) { int binary [ ( int ) pow ( 2 , N ) ] ; for ( i = 0 ; i < pow ( 2 , N ) ; i + + ) { int b = 1 ; binary [ i ] = 0 ; int num = i ; while ( num > 0 ) { binary [ i ] + = ( num % 2 ) * b ; num / = 2 ; b = b * 10 ; } } printf ( " \n The permutations are : " ) ; for ( i = 0 ; i < pow ( 2 , N ) ; i + + ) { printf ( " { " ) ; for ( j = 0 ; j < N ; j + + ) { if ( binary [ i ] % 10 = = 1 ) printf ( " %d " , sequence [ j ] ) ; binary [ i ] / = 10 ; } printf ( " } \n  " ) ; } } int main ( int argc , char * * argv ) { printf ( " The elements in the set : " ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " %d " , sequence [ i ] ) ; for ( i = 1 ; i < 5 ; i + + ) { int j = i ; int temp = sequence [ i ] ; while ( j > 0 & & temp < sequence [ j - 1 ] ) { sequence [ j ] = sequence [ j - 1 ] ; j = j - 1 ; } sequence [ j ] = temp ; } lexicographicOrder ( 5 ) ; }
#include <stdio.h> #include <string.h> void swap ( char * x , char * y ) { char temp ; temp = * x ; * x = * y ; * y = temp ; } void permute ( char * a , int i , int n ) { int j ; if ( i = = n ) printf ( " %s\n  " , a ) ; else { for ( j = i ; j < = n ; j + + ) { swap ( ( a + i ) , ( a + j ) ) ; permute ( a , i + 1 , n ) ; swap ( ( a + i ) , ( a + j ) ) ;
#include <stdio.h> #include <math.h> #include <time.h> #include <stdlib.h> int main ( int argc , char * * argv ) { int i , j ; time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; printf ( " Enter the number of elements in the set : " ) ; int N ; scanf ( " %d " , & N ) ; int sequence [ N ] ; for ( i = 0 ; i < N ; i + + ) sequence [ i ] = rand ( ) % ( 50 - 1 + 1 ) + 1 ; printf ( " The elements in the set : " ) ; for ( i = 0 ; i < N ; i + + ) printf ( " %d " , sequence [ i ] ) ; printf ( " Enter the number of elements in the subset : " ) ; int n ; scanf ( " %d " , & n ) ; int binary [ ( int ) pow ( 2 , N ) ] ; for ( i = 0 ; i < pow ( 2 , N ) ; i + + ) { int b = 1 ; binary [ i ] = 0 ; int num = i , count = 0 ; while ( num > 0 ) { if ( num % 2 = = 1 ) count + + ; binary [ i ] + = ( num % 2 ) * b ; num / = 2 ; b = b * 10 ; } if ( count = = n ) { printf ( " { " ) ; for ( j = 0 ; j < N ; j + + ) { if ( binary [ i ] % 10 = = 1 ) printf ( " %d " , sequence [ j ] ) ; binary [ i ] / = 10 ; } printf ( " } \n  " ) ; } } return 0 ; }
#include <stdio.h> void countingsort ( int arr [ ] , int k , int n ) { int i , j ; int B [ 15 ] , C [ 100 ] ; for ( i = 0 ; i < = k ; i + + ) C [ i ] = 0 ; for ( j = 1 ; j < = n ; j + + ) C [ arr [ j ] ] = C [ arr [ j ] ] + 1 ; for ( i = 1 ; i < = k ; i + + ) C [ i ] = C [ i ] + C [ i-1 ] ; for ( j = n ; j > = 1 ; j-- ) { B [ C [ arr [ j ] ] ] = arr [ j ] ; C [ arr [ j ] ] = C [ arr [ j ] ] - 1 ; } printf ( " \n The Sorted array is : \n  " ) ; for ( i = 1 ; i < = n ; i + + ) printf ( " %d " , B [ i ] ) ; } int main ( ) { int n , i , k = 0 , arr [ 15 ] ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter the elements to be sorted : \n  " ) ; for ( i = 1 ; i < = n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; if ( arr [ i ] > k ) { k = arr [ i ] ; } } countingsort ( arr , k , n ) ; return 0 ; }
#include <stdio.h> void bubblesort ( int arr [ ] , int size ) { int i , j ; for ( i = 0 ; i < size ; i + + ) { for ( j = 0 ; j < size - i ; j + + ) { if ( arr [ j ] > arr [ j + 1 ] ) swap ( & arr [ j ] , & arr [ j + 1 ] ) ; } } } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int array [ 100 ] , i , size ; printf ( " How many numbers you want to sort : " ) ; scanf ( " %d " , & size ) ; printf ( " \n Enter %d numbers : " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & array [ i ] ) ; bubblesort ( array , size ) ; printf ( " \n Sorted array is " ) ; for ( i = 0 ; i < size ; i + + ) printf ( " %d " , array [ i ] ) ; return 0 ; }
#include <stdio.h> void subset ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ; if ( index = = r ) { for ( j = 0 ; j < r ; j + + ) printf ( " %d " , data [ j ] ) ; printf ( " \n  " ) ; return ; } for ( i = start ; i < = end & & end - i + 1 > = r - index ; i + + ) { data [ index ] = arr [ i ] ; subset ( arr , data , i + 1 , end , index + 1 , r ) ; } } void printsubset ( int arr [ ] , int n , int r ) { int data [ r ] ; subset ( arr , data , 0 , n - 1 , 0 , r ) ; } int main ( ) { int arr [ 20 ] , k , n , i ; printf ( " Enter the number of input : " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter the integers : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter value of k : " ) ; scanf ( " %d " , & k ) ; printsubset ( arr , n , k ) ; return 0 ; }
#include <stdio.h> #include <math.h> int i , j ; int sequence [ ] = { 2 , 3 , 5 , 6 , 7 } ; void grayCode ( int N ) { int grayCode [ ( int ) pow ( 2 , N ) ] ; int binary [ ( int ) pow ( 2 , N ) ] ; for ( i = 0 ; i < pow ( 2 , N ) ; i + + ) grayCode [ i ] = ( i > > 1 ) ^ i ; for ( i = 0 ; i < pow ( 2 , N ) ; i + + ) { int b = 1 ; binary [ i ] = 0 ; while ( grayCode [ i ] > 0 ) { binary [ i ] + = ( grayCode [ i ] % 2 ) * b ; grayCode [ i ] / = 2 ; b = b * 10 ; } } printf ( " \n The permutations are : " ) ; for ( i = 0 ; i < pow ( 2 , N ) ; i + + ) { printf ( " { " ) ; for ( j = 0 ; j < N ; j + + ) { if ( binary [ i ] % 10 = = 1 ) printf ( " %d " , sequence [ j ] ) ; binary [ i ] / = 10 ; } printf ( " } \n  " ) ; } } int main ( int argc , char * * argv ) { printf ( " The elements in the set : " ) ; for ( i = 0 ; i < 5 ; i + + ) printf ( " %d " , sequence [ i ] ) ; int mask [ ( int ) pow ( 2 , 5 ) ] ; grayCode ( 5 ) ; return 0 ; }
#include <stdio.h> int getMax ( int arr [ ] , int n ) { int mx = arr [ 0 ] ; int i ; for ( i = 1 ; i < n ; i + + ) if ( arr [ i ] > mx ) mx = arr [ i ] ; return mx ; } void countSort ( int arr [ ] , int n , int exp ) { int output [ n ] ;
#include <stdio.h> #include <math.h> #include <time.h> #include <stdlib.h> int coinFlip ( ) { time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; return rand ( ) % 2 ; } int main ( int argc , char * * argv ) { int i ; time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; printf ( " Enter the number of elements in the set : " ) ; int N ; scanf ( " %d " , & N ) ; int sequence [ N ] ; for ( i = 0 ; i < N ; i + + ) sequence [ i ] = rand ( ) % ( 50 - 1 + 1 ) + 1 ; printf ( " The elements in the set : " ) ; for ( i = 0 ; i < N ; i + + ) printf ( " %d " , sequence [ i ] ) ; printf ( " \n The random subset is : \n  { " ) ; for ( i = 0 ; i < N ; i + + ) if ( coinFlip ( ) = = 1 ) printf ( " %d " , sequence [ i ] ) ; printf ( " } " ) ; return 0 ; }
#include <stdio.h> void Bucket_Sort ( int array [ ] , int n ) { int i , j ; int count [ n ] ; for ( i = 0 ; i < n ; i + + ) count [ i ] = 0 ; for ( i = 0 ; i < n ; i + + ) ( count [ array [ i ] ] ) + + ; for ( i = 0 , j = 0 ; i < n ; i + + ) for ( ; count [ i ] > 0 ; ( count [ i ] ) -- ) array [ j + + ] = i ; } int main ( ) { int array [ 100 ] , i , num ; printf ( " Enter the size of array : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the %d elements to be sorted : \n  " , num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & array [ i ] ) ; printf ( " \n The array of elements before sorting : \n  " ) ; for ( i = 0 ; i < num ; i + + ) printf ( " %d " , array [ i ] ) ; printf ( " \n The array of elements after sorting : \n  " ) ; Bucket_Sort ( array , num ) ; for ( i = 0 ; i < num ; i + + ) printf ( " %d " , array [ i ] ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> void combinationUtil ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ;
#include <stdio.h> void print ( const int * v , const int size ) { int i ; if ( v ! = 0 ) { for ( i = 0 ; i < size ; i + + ) { printf ( " %4d " , v [ i ] ) ; } printf ( " \n  " ) ; } } void visit ( int * Value , int N , int k ) { static level = -1 ; int i ; level = level + 1 ; Value [ k ] = level ; if ( level = = N ) print ( Value , N ) ; else for ( i = 0 ; i < N ; i + + ) if ( Value [ i ] = = 0 ) visit ( Value , N , i ) ; level = level-1 ; Value [ k ] = 0 ; } int main ( ) { int Value [ 20 ] , i , N ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; for ( i = 0 ; i < N ; i + + ) { Value [ i ] = 0 ; } visit ( Value , N , 0 ) ; }
#include <stdio.h> #include <string.h> void swap ( char * x , char * y ) { char temp ; temp = * x ; * x = * y ; * y = temp ; } void permute ( char * a , int i , int n ) { int j ; if ( i = = n ) printf ( " %s\n  " , a ) ; else { for ( j = i ; j < = n ; j + + ) { swap ( ( a + i ) , ( a + j ) ) ; permute ( a , i + 1 , n ) ; swap ( ( a + i ) , ( a + j ) ) ;
#include <string.h> #include <stdio.h> #include <stdlib.h> const int LOW = 0 ; const int HIGH = 10 ; int main ( int argc , char * * argv ) { time_t seconds ; time ( & seconds ) ; srand ( ( unsigned int ) seconds ) ; int u1 , u2 , u3 , v1 , v2 , v3 ; u1 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; u2 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; u3 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; v1 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; v2 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; v3 = rand ( ) % ( HIGH - LOW + 1 ) + LOW ; int uvi , uvj , uvk ; uvi = u2 * v3 - v2 * u3 ; uvj = v1 * u3 - u1 * v3 ; uvk = u1 * v2 - v1 * u2 ; printf ( " The cross product of the 2 vectors \n  u = %di + %dj + %dk and \n  v = %di + %dj + %dk\n  " , u1 , u2 , u3 , v1 , v2 , v3 ) ; printf ( " u X v : %di + %dj + %dk " , uvi , uvj , uvk ) ; return 0 ; }
#include <stdio.h> void combinationUtil ( int arr [ ] , int data [ ] , int start , int end , int index , int r ) { int j , i ;
#include <stdio.h> int main ( ) { int i , j , a [ 20 ] = { 0 } , sum = 0 , n , t , b [ 20 ] = { 0 } , k = 0 , c = 1 , max = 0 , mode ; float x = 0.0 , y = 0.0 ; printf ( " \n Enter the limit\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the set of numbers\n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i + + ) { mode = 0 ; for ( j = i + 1 ; j < n ; j + + ) { if ( a [ i ] = = a [ j ] ) { mode + + ; } } if ( ( mode > max ) & & ( mode ! = 0 ) ) { k = 0 ; max = mode ; b [ k ] = a [ i ] ; k + + ; } else if ( mode = = max ) { b [ k ] = a [ i ] ; k + + ; } } for ( i = 0 ; i < n ; i + + ) { if ( a [ i ] = = b [ i ] ) c + + ; } if ( c = = n ) printf ( " \n There is no mode " ) ; else { printf ( " \n Mode\t = " ) ; for ( i = 0 ; i < k ; i + + ) printf ( " %d " , b [ i ] ) ; } printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct btreenode { struct btreenode * leftchild ; int data ; struct btreenode * rightchild ; } ; void insert ( struct btreenode * * , int ) ; void inorder ( struct btreenode * ) ; main ( ) { struct btreenode * bt ; int arr [ 100 ] , size ; int i ; bt = NULL ; printf ( " Enter the Number of elements : " ) ; scanf ( " %d " , & size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & arr [ i ] ) ; printf ( " Binary tree sort.\n  " ) ; for ( i = 0 ; i < = 9 ; i + + ) insert ( & bt , arr [ i ] ) ; printf ( " \n In-order traversal of binary tree : \n  " ) ; inorder ( bt ) ; printf ( " \n  " ) ; return 0 ; } void insert ( struct btreenode * * sr , int num ) { if ( * sr = = NULL ) { * sr = malloc ( sizeof ( struct btreenode ) ) ; ( * sr ) -> leftchild = NULL ; ( * sr ) -> data = num ; ( * sr ) -> rightchild = NULL ; } else { if ( num < ( * sr ) -> data ) insert ( & ( ( * sr ) -> leftchild ) , num ) ; else insert ( & ( ( * sr ) -> rightchild ) , num ) ; } } void inorder ( struct btreenode * sr ) { if ( sr ! = NULL ) { inorder ( sr-> leftchild ) ; printf ( " %d " , sr-> data ) ; inorder ( sr-> rightchild ) ; } }
#include <stdio.h> #define MAX 200 int interpolation_search ( int a [ ] , int bottom , int top , int item ) { int mid ; while ( bottom < = top ) { mid = bottom + ( top - bottom ) * ( ( item - a [ bottom ] ) / ( a [ top ] - a [ bottom ] ) ) ; if ( item = = a [ mid ] ) return mid + 1 ; if ( item < a [ mid ] ) top = mid - 1 ; else bottom = mid + 1 ; } return -1 ; } int main ( ) { int arr [ MAX ] ; int i , num ; int item , pos ; printf ( " \n Enter total elements ( num < %d ) : " , MAX ) ; scanf ( " %d " , & num ) ; printf ( " Enter %d Elements in ascending order : " , num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & arr [ i ] ) ; printf ( " \n Search For : " ) ; scanf ( " %d " , & item ) ; pos = interpolation_search ( & arr [ 0 ] , 0 , num - 1 , item ) ; if ( pos = = -1 ) printf ( " \n Element %d not found\n  " , item ) ; else printf ( " \n Element %d found at position %d\n  " , item , pos ) ; return 0 ; }
#include <stdio.h> void binary_search ( int array [ ] , int first , int last , int n ) { int i , middle ; middle = ( first + last ) / 2 ; while ( first < = last ) { if ( array [ middle ] < n ) first = middle + 1 ; else if ( array [ middle ] = = n ) { printf ( " %d found at location %d.\n  " , n , middle + 1 ) ; break ; } else last = middle - 1 ; middle = ( first + last ) / 2 ; } if ( first > last ) printf ( " Not found! %d is not present in the list.\n  " , n ) ; } search ( int arr [ ] , int size , int data ) { int p = ( size - 1 ) / 2 , low , high , a1 = 0 , a2 = 1 , i = 1 ; low = p + a1 ; high = p + a2 ; while ( i ) { if ( data > = arr [ low ] & & data < = arr [ high ] ) { binary_search ( arr , low , high , data ) ; break ; } else if ( data < arr [ low ] ) { binary_search ( arr , 0 , low , data ) ; break ; } else { a2 = a2 * 2 ; low = high ; high = p + a2 ; } } } int main ( ) { int a [ 200 ] , i , j , n , size ; printf ( " Enter the size of the list : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d Integers in ascending order\n  " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & a [ i ] ) ; printf ( " Enter value to find\n  " ) ; scanf ( " %d " , & n ) ; search ( a , size , n ) ; return 0 ; }
#include <stdio.h> void counting_sort ( int A [ ] , int k , int n ) { int i , j ; int B [ 15 ] , C [ 100 ] ; for ( i = 0 ; i < = k ; i + + ) C [ i ] = 0 ; for ( j = 1 ; j < = n ; j + + ) C [ A [ j ] ] = C [ A [ j ] ] + 1 ; for ( i = 1 ; i < = k ; i + + ) C [ i ] = C [ i ] + C [ i-1 ] ; for ( j = n ; j > = 1 ; j-- ) { B [ C [ A [ j ] ] ] = A [ j ] ; C [ A [ j ] ] = C [ A [ j ] ] - 1 ; } printf ( " The Sorted array is : " ) ; for ( i = 1 ; i < = n ; i + + ) printf ( " %d " , B [ i ] ) ; } int main ( ) { int n , k = 0 , A [ 15 ] , i ; printf ( " Enter the number of input : " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter the elements to be sorted : \n  " ) ; for ( i = 1 ; i < = n ; i + + ) { scanf ( " %d " , & A [ i ] ) ; if ( A [ i ] > k ) { k = A [ i ] ; } } counting_sort ( A , k , n ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> void sequential_search ( int array [ ] , int size , int n ) { int i ; for ( i = 0 ; i < size ; i + + ) { if ( array [ i ] = = n ) { printf ( " %d found at location %d.\n  " , n , i + 1 ) ; break ; } } if ( i = = size ) printf ( " Not found! %d is not present in the list.\n  " , n ) ; } void binary_search ( int array [ ] , int size , int n ) { int i , first , last , middle ; first = 0 ; last = size - 1 ; middle = ( first + last ) / 2 ; while ( first < = last ) { if ( array [ middle ] < n ) first = middle + 1 ; else if ( array [ middle ] = = n ) { printf ( " %d found at location %d.\n  " , n , middle + 1 ) ; break ; } else last = middle - 1 ; middle = ( first + last ) / 2 ; } if ( first > last ) printf ( " Not found! %d is not present in the list.\n  " , n ) ; } int main ( ) { int a [ 200 ] , i , j , n , size ; printf ( " Enter the size of the list : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d Integers in ascending order\n  " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & a [ i ] ) ; printf ( " Enter value to find\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Sequential search\n  " ) ; sequential_search ( a , size , n ) ; printf ( " Binary search\n  " ) ; binary_search ( a , size , n ) ; return 0 ; }
#include <stdio.h> void Bucket_Sort ( int array [ ] , int n ) { int i , j ; int count [ n ] ; for ( i = 0 ; i < n ; i + + ) count [ i ] = 0 ; for ( i = 0 ; i < n ; i + + ) ( count [ array [ i ] ] ) + + ; for ( i = 0 , j = 0 ; i < n ; i + + ) for ( ; count [ i ] > 0 ; ( count [ i ] ) -- ) array [ j + + ] = i ; } int main ( ) { int array [ 100 ] , i , num ; printf ( " Enter the size of array : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the %d elements to be sorted : \n  " , num ) ; for ( i = 0 ; i < num ; i + + ) scanf ( " %d " , & array [ i ] ) ; printf ( " \n The array of elements before sorting : \n  " ) ; for ( i = 0 ; i < num ; i + + ) printf ( " %d " , array [ i ] ) ; printf ( " \n The array of elements after sorting : \n  " ) ; Bucket_Sort ( array , num ) ; for ( i = 0 ; i < num ; i + + ) printf ( " %d " , array [ i ] ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> int total = 0 ; int sum ( int , int ) ; int main ( ) { printf ( " This is a C basic program \n  " ) ; total = sum ( 1 , 1 ) ; printf ( " Sum of two numbers : %d \n  " , total ) ; return 0 ; } int sum ( int a , int b ) { return a + b ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; char str [ 20 ] = " fresh2refresh.com " ; float flt = 10.234 ; int no = 150 ; double dbl = 20.123456 ; printf ( " Character is %c \n  " , ch ) ; printf ( " String is %s \n  " , str ) ; printf ( " Float value is %f \n  " , flt ) ; printf ( " Integer value is %d\n  " , no ) ; printf ( " Double value is %lf \n  " , dbl ) ; printf ( " Octal value is %o \n  " , no ) ; printf ( " Hexadecimal value is %x \n  " , no ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; char str [ 100 ] ; printf ( " Enter any character \n  " ) ; scanf ( " %c " , & ch ) ; printf ( " Entered character is %c \n  " , ch ) ; printf ( " Enter any string ( upto 100 character ) \n  " ) ; scanf ( " %s " , & str ) ; printf ( " Entered string is %s \n  " , str ) ; }
#include <stdio.h> #include <limits.h> int main ( ) { int a ; char b ; float c ; double d ; printf ( " Storage size for int data type : %d \n  " , sizeof ( a ) ) ; printf ( " Storage size for char data type : %d \n  " , sizeof ( b ) ) ; printf ( " Storage size for float data type : %d \n  " , sizeof ( c ) ) ; printf ( " Storage size for double data type : %d\n  " , sizeof ( d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { enum MONTH { Jan = 0 , Feb , Mar } ; enum MONTH month = Mar ; if ( month = = 0 ) printf ( " Value of Jan " ) ; else if ( month = = 1 ) printf ( " Month is Feb " ) ; if ( month = = 2 ) printf ( " Month is Mar " ) ; }
#include <stdio.h> void main ( ) { const int height = 100 ; const float number = 3.14 ; const char letter = 'A' ; const char letter_sequence [ 10 ] = " ABC " ; const char backslash_char = '\?' ; printf ( " value of height : %d \n  " , height ) ; printf ( " value of number : %f \n  " , number ) ; printf ( " value of letter : %c \n  " , letter ) ; printf ( " value of letter_sequence : %s \n  " , letter_sequence ) ; printf ( " value of backslash_char : %c \n  " , backslash_char ) ; }
#include <stdio.h> #define height 100 #define number 3.14 #define letter 'A' #define letter_sequence " ABC " #define backslash_char '\?' void main ( ) { printf ( " value of height : %d \n  " , height ) ; printf ( " value of number : %f \n  " , number ) ; printf ( " value of letter : %c \n  " , letter ) ; printf ( " value of letter_sequence : %s \n  " , letter_sequence ) ; printf ( " value of backslash_char : %c \n  " , backslash_char ) ; }
#include <stdio.h> void test ( ) ; int main ( ) { int m = 22 , n = 44 ; printf ( " \n values : m = %d and n = %d " , m , n ) ; test ( ) ; } void test ( ) { int a = 50 , b = 80 ; printf ( " \n values : a = %d and b = %d " , a , b ) ; }
#include <stdio.h> void test ( ) ; int m = 22 , n = 44 ; int a = 50 , b = 80 ; int main ( ) { printf ( " All variables are accessed from main function " ) ; printf ( " \n values : m = %d : n = %d : a = %d : b = %d " , m , n , a , b ) ; test ( ) ; } void test ( ) { printf ( " \n \n All variables are accessed from " \ " test function " ) ; printf ( " \n values : m = %d : n = %d : a = %d : b = %d " , m , n , a , b ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Directory = %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " FILE " , " / usr / bin / example.c " , 50 ) ; printf ( " File = %s\n  " , getenv ( " FILE " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " DIR " , " / usr / bin / example / " , 50 ) ; printf ( " Directory name before modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; putenv ( " DIR = / usr / home / " ) ; printf ( " Directory name after modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int m = 40 , n = 20 ; if ( m = = n ) { printf ( " m and n are equal " ) ; } else { printf ( " m and n are not equal " ) ; } }
#include <stdio.h> int main ( ) { int m = 40 , n = 20 ; if ( m> n ) { printf ( " m is greater than n " ) ; } else if ( m <n ) { printf ( " m is less than n " ) ; } else { printf ( " m is equal to n " ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i = 3 ; while ( i <10 ) { printf ( " %d\n  " , i ) ; i + + ; } }
#include <stdio.h> int main ( ) { int i = 1 ; do { printf ( " Value of i is %d\n  " , i ) ; i + + ; } while ( i < = 4 & & i> = 2 ) ; }
#include <stdio.h> int main ( ) { int value = 3 ; switch ( value ) { case 1 : printf ( “Value is 1 \n ” ) ; break ; case 2 : printf ( “Value is 2 \n ” ) ; break ; case 3 : printf ( “Value is 3 \n ” ) ; break ; case 4 : printf ( “Value is 4 \n ” ) ; break ; default : printf ( “Value is other than 1 , 2 , 3 , 4 \n ” ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 ) { printf ( " \n Coming out of for loop when i = 5 " ) ; break ; } printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 || i = = 6 ) { printf ( " \n Skipping %d from display using " \ " continue statement \n  " , i ) ; continue ; } printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { if ( i = = 5 ) { printf ( " \n We are using goto statement when i = 5 " ) ; goto HAI ; } printf ( " %d " , i ) ; } HAI : printf ( " \n Now , we are inside label name \ " hai\ " \n  " ) ; }
#include <stdio.h> void increment ( void ) ; int main ( ) { increment ( ) ; increment ( ) ; increment ( ) ; increment ( ) ; return 0 ; } void increment ( void ) { auto int i = 0 ; printf ( " %d " , i ) ; i + + ; }
#include <stdio.h> void increment ( void ) ; int main ( ) { increment ( ) ; increment ( ) ; increment ( ) ; increment ( ) ; return 0 ; } void increment ( void ) { static int i = 0 ; printf ( " %d " , i ) ; i + + ; }
#include <stdio.h> int x = 10 ; int main ( ) { extern int y ; printf ( " The value of x is %d \n  " , x ) ; printf ( " The value of y is %d " , y ) ; return 0 ; } int y = 50 ;
#include <stdio.h> int main ( ) { register int i ; int arr [ 5 ] ; arr [ 0 ] = 10 ; arr [ 1 ] = 20 ; arr [ 2 ] = 30 ; arr [ 3 ] = 40 ; arr [ 4 ] = 50 ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d \n  " , i , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; int arr [ 5 ] = { 10 , 20 , 30 , 40 , 50 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d \n  " , i , arr [ i ] ) ; } }
#include <stdio.h> int main ( ) { int i , j ; int arr [ 2 ] [ 2 ] = { 10 , 20 , 30 , 40 } ; for ( i = 0 ; i <2 ; i + + ) { for ( j = 0 ; j <2 ; j + + ) { printf ( " value of arr [ %d ] [ %d ] : %d\n  " , i , j , arr [ i ] [ j ] ) ; } } }
#include <stdio.h> int main ( ) { char string [ 20 ] = " fresh2refresh.com " ; printf ( " The string is : %s \n  " , string ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptr , q ; q = 50 ; ptr = & q ; printf ( " %d " , * ptr ) ; return 0 ; }
#include <stdio.h> float square ( float x ) ; int main ( ) { float m , n ; printf ( " \n Enter some number for finding square \n  " ) ; scanf ( " %f " , & m ) ; n = square ( m ) ; printf ( " \n Square of the given number %f is %f " , m , n ) ; } float square ( float x ) { float p ; p = x * x ; return ( p ) ; }
#include <stdio.h> void swap ( int a , int b ) ; int main ( ) { int m = 22 , n = 44 ; printf ( " values before swap m = %d \n and n = %d " , m , n ) ; swap ( m , n ) ; } void swap ( int a , int b ) { int tmp ; tmp = a ; a = b ; b = tmp ; printf ( " \n values after swap m = %d\n  and n = %d " , a , b ) ; }
#include <stdio.h> void swap ( int * a , int * b ) ; int main ( ) { int m = 22 , n = 44 ; printf ( " values before swap m = %d \n  and n = %d " , m , n ) ; swap ( & m , & n ) ; } void swap ( int * a , int * b ) { int tmp ; tmp = * a ; * a = * b ; * b = tmp ; printf ( " \n  values after swap a = %d \n and b = %d " , * a , * b ) ; }
#include <stdio.h> #include <string.h> int function ( int , int [ ] , char [ ] ) ; int main ( ) { int i , a = 20 ; int arr [ 5 ] = { 10 , 20 , 30 , 40 , 50 } ; char str [ 30 ] = " \ " fresh2refresh\ " " ; printf ( " * * * values before modification * * * \n  " ) ; printf ( " value of a is %d\n  " , a ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d\n  " , i , arr [ i ] ) ; } printf ( " value of str is %s\n  " , str ) ; printf ( " \n  * * * values after modification * * * \n  " ) ; a = function ( a , & arr [ 0 ] , & str [ 0 ] ) ; printf ( " value of a is %d\n  " , a ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d\n  " , i , arr [ i ] ) ; } printf ( " value of str is %s\n  " , str ) ; return 0 ; } int function ( int a , int * arr , char * str ) { int i ; a = a + 20 ; arr [ 0 ] = arr [ 0 ] + 50 ; arr [ 1 ] = arr [ 1 ] + 50 ; arr [ 2 ] = arr [ 2 ] + 50 ; arr [ 3 ] = arr [ 3 ] + 50 ; arr [ 4 ] = arr [ 4 ] + 50 ; strcpy ( str , " \ " modified string\ " " ) ; return a ; }
#include <stdio.h> void function ( int , int [ ] , char [ ] ) ; int main ( ) { int a = 20 ; int arr [ 5 ] = { 10 , 20 , 30 , 40 , 50 } ; char str [ 30 ] = " \ " fresh2refresh\ " " ; function ( a , & arr [ 0 ] , & str [ 0 ] ) ; return 0 ; } void function ( int a , int * arr , char * str ) { int i ; printf ( " value of a is %d\n \n  " , a ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " value of arr [ %d ] is %d\n  " , i , arr [ i ] ) ; } printf ( " \n value of str is %s\n  " , str ) ; }
#include <stdio.h> void test ( ) ; int main ( ) { test ( ) ; return 0 ; } void test ( ) { int a = 50 , b = 80 ; printf ( " \n values : a = %d and b = %d " , a , b ) ; }
#include <stdio.h> int sum ( ) ; int main ( ) { int addition ; addition = sum ( ) ; printf ( " \n Sum of two given values = %d " , addition ) ; return 0 ; } int sum ( ) { int a = 50 , b = 80 , sum ; sum = a + b ; return sum ; }
#include <stdio.h> #include <stdlib.h> int main ( int argc , char * argv [ ] ) { if ( argc! = 5 ) { printf ( " Arguments passed through command line " \ " not equal to 5 " ) ; return 1 ; } printf ( " \n  Program name : %s \n  " , argv [ 0 ] ) ; printf ( " 1st arg : %s \n  " , argv [ 1 ] ) ; printf ( " 2nd arg : %s \n  " , argv [ 2 ] ) ; printf ( " 3rd arg : %s \n  " , argv [ 3 ] ) ; printf ( " 4th arg : %s \n  " , argv [ 4 ] ) ; printf ( " 5th arg : %s \n  " , argv [ 5 ] ) ; return 0 ; }
#include <stdio.h> #include <stdarg.h> int add ( int num , ... ) ; int main ( ) { printf ( " The value from first function call = " \ " %d\n  " , add ( 2 , 2 , 3 ) ) ; printf ( " The value from second function call = " \ " %d \n  " , add ( 4 , 2 , 3 , 4 , 5 ) ) ; return 0 ; } int add ( int num , ... ) { va_list valist ; int sum = 0 ; int i ; va_start ( valist , num ) ; for ( i = 0 ; i < num ; i + + ) { sum + = va_arg ( valist , int ) ; } va_end ( valist ) ; return sum ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { int i ; char * a = ( char * ) malloc ( 5 * sizeof ( char ) ) ; printf ( " Values before memset\n  " ) ; for ( i = 0 ; i < 5 ; + + i ) printf ( " a [ %d ] = %d , " , i , a [ i ] ) ; memset ( a , 3 , 5 * sizeof ( char ) ) ; printf ( " \n Values after memset\n  " ) ; for ( i = 0 ; i < 5 ; + + i ) printf ( " a [ %d ] = %d , " , i , a [ i ] ) ; free ( a ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] ; if ( memcpy ( str2 , str1 , strlen ( str1 ) ) ) { printf ( " Elements in str1 are copied to str2 .\n  " ) ; printf ( " str1 = %s\n  str2 = %s \n  " , str1 , str2 ) ; } else printf ( " Error while coping str1 into str2.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; printf ( " str1 before memmove\n  " ) ; printf ( " str1 = %s\n  " , str1 ) ; if ( memmove ( str1 + 2 , str1 , strlen ( str1 ) ) ) { printf ( " Elements in str1 are moved / overlapped on str1.\n  " ) ; printf ( " str1 = %s \n  " , str1 ) ; } else printf ( " Error while coping str1 into str2.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] = " refresh " ; if ( !memcmp ( str1 , str2 , 5 * sizeof ( char ) ) ) printf ( " Elements in str1 and str2 are same.\n  " ) ; else printf ( " Elements in str1 and str2 are not same.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " fresh " ; char str2 [ 10 ] = " FRESH " ; if ( !memicmp ( str1 , str2 , 5 * sizeof ( char ) ) ) printf ( " Elements in str1 and str2 are same.\n  " ) ; else printf ( " Elements in str1 and str2 are not same.\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * ptr ; char string [ ] = " fresh2refresh " ; ptr = ( char * ) memchr ( string , 'h' , strlen ( string ) ) ; if ( ptr ! = NULL ) printf ( " character 'h' is found at " \ " position %d.\n  " , ptr-string + 1 ) ; else printf ( " character 'h' is not found.\n  " ) ; return 0 ; }
#include <stdio.h> #include <dos.h> #include <conio.h> int main ( ) { struct date dt ; printf ( " Enter new date in the format ( day month year ) " ) ; scanf ( " %d %d %d " , & dt.da_day , & dt.da_mon , & dt.da_year ) ; setdate ( & dt ) ; printf ( " Now , current system date is %d- %d- %d\n  " , dt.da_day , dt.da_mon , dt.da_year ) ; return 0 ; }
#include <stdio.h> #include <dos.h> int main ( ) { struct date dt ; getdate ( & dt ) ; printf ( " Operating system's current date is %d- %d- %d\n  " , dt.da_day , dt.da_mon , dt.da_year ) ; return 0 ; }
#include <stdio.h> #include <time.h> #include <math.h> int main ( ) { int i ; clock_t CPU_time_1 = clock ( ) ; printf ( " CPU start time is : %d \n  " , CPU_time_1 ) ; for ( i = 0 ; i < 150000000 ; i + + ) ; clock_t CPU_time_2 = clock ( ) ; printf ( " CPU end time is : %d " , CPU_time_2 ) ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; seconds = time ( NULL ) ; printf ( " Number of hours since 1970 Jan 1st " \ " is %ld \n  " , seconds / 3600 ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t begin , end ; long i ; begin = time ( NULL ) ; for ( i = 0 ; i < 150000000 ; i + + ) ; end = time ( NULL ) ; printf ( " for loop used %f seconds to complete the " \ " execution\n  " , difftime ( end , begin ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> #define LEN 150 int main ( ) { char buf [ LEN ] ; time_t curtime ; struct tm * loc_time ; curtime = time ( NULL ) ; loc_time = localtime ( & curtime ) ; printf ( " %s " , asctime ( loc_time ) ) ; strftime ( buf , LEN , " Today is %A , %b %d.\n  " , loc_time ) ; fputs ( buf , stdout ) ; strftime ( buf , LEN , " Time is %I : %M %p.\n  " , loc_time ) ; fputs ( buf , stdout ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { struct tm strtime ; time_t timeoftheday ; strtime.tm_year = 2008-1900 ; strtime.tm_mon = 1 ; strtime.tm_mday = 4 ; strtime.tm_hour = 02 ; strtime.tm_min = 30 ; strtime.tm_sec = 38 ; strtime.tm_isdst = 0 ; timeoftheday = mktime ( & strtime ) ; printf ( ctime ( & timeoftheday ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t orig_format ; time ( & orig_format ) ; printf ( " Universal Time is %s " , asctime ( gmtime ( & orig_format ) ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * mem_allocation ; mem_allocation = malloc ( 20 * sizeof ( char ) ) ; if ( mem_allocation = = NULL ) { printf ( " Couldn't able to allocate requested memory\n  " ) ; } else { strcpy ( mem_allocation , " fresh2refresh.com " ) ; } printf ( " Dynamically allocated memory content : " \ " %s\n  " , mem_allocation ) ; free ( mem_allocation ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * mem_allocation ; mem_allocation = calloc ( 20 , sizeof ( char ) ) ; if ( mem_allocation = = NULL ) { printf ( " Couldn't able to allocate requested memory\n  " ) ; } else { strcpy ( mem_allocation , " fresh2refresh.com " ) ; } printf ( " Dynamically allocated memory content : " \ " %s\n  " , mem_allocation ) ; free ( mem_allocation ) ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> int main ( ) { char * mem_allocation ; mem_allocation = malloc ( 20 * sizeof ( char ) ) ; if ( mem_allocation = = NULL ) { printf ( " Couldn't able to allocate requested memory\n  " ) ; } else { strcpy ( mem_allocation , " fresh2refresh.com " ) ; } printf ( " Dynamically allocated memory content : " \ " %s\n  " , mem_allocation ) ; mem_allocation = realloc ( mem_allocation , 100 * sizeof ( char ) ) ; if ( mem_allocation = = NULL ) { printf ( " Couldn't able to allocate requested memory\n  " ) ; } else { strcpy ( mem_allocation , " space is extended upto " \ " 100 characters " ) ; } printf ( " Resized memory : %s\n  " , mem_allocation ) ; free ( mem_allocation ) ; }
#include <stdio.h> int main ( ) { float x ; x = ( float ) 7 / 5 ; printf ( " %f " , x ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Directory = %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " FILE " , " / usr / bin / example.c " , 50 ) ; printf ( " File = %s\n  " , getenv ( " FILE " ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { setenv ( " DIR " , " / usr / bin / example / " , 50 ) ; printf ( " Directory name before modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; putenv ( " DIR = / usr / home / " ) ; printf ( " Directory name after modifying = " \ " %s\n  " , getenv ( " DIR " ) ) ; return 0 ; }
#include <stdio.h> #include <errno.h> #include <stdlib.h> int main ( ) { FILE * fp ; char filename [ 40 ] = " test.txt " ; fp = f open ( filename , " r " ) ; if ( fp = = NULL ) { perror ( " File not found " ) ; printf ( " errno : %d.\n  " , errno ) ; return 1 ; } printf ( " File is found and opened for reading " ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> int main ( ) { printf ( " 1st random number : %d\n  " , rand ( ) % 100 ) ; printf ( " 2nd random number : %d\n  " , rand ( ) % 100 ) ; printf ( " 3rd random number : %d\n  " , rand ( ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { printf ( " Suspends the execution of the program " \ " for particular time " ) ; delay ( 5000 ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; int main ( ) { struct student record = { 0 } ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } record ; int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include " structure.h " int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 30 ] ; float percentage ; } ; int main ( ) { int i ; struct student record [ 2 ] ; record [ 0 ] .id = 1 ; strcpy ( record [ 0 ] .name , " Raju " ) ; record [ 0 ] .percentage = 86.5 ; record [ 1 ] .id = 2 ; strcpy ( record [ 1 ] .name , " Surendren " ) ; record [ 1 ] .percentage = 90.5 ; record [ 2 ] .id = 3 ; strcpy ( record [ 2 ] .name , " Thiyagu " ) ; record [ 2 ] .percentage = 81.5 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " Records of STUDENT : %d \n  " , i + 1 ) ; printf ( " Id is : %d \n  " , record [ i ] .id ) ; printf ( " Name is : %s \n  " , record [ i ] .name ) ; printf ( " Percentage is : %f\n \n  " , record [ i ] .percentage ) ; } return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 30 ] ; float percentage ; } ; int main ( ) { int i ; struct student record1 = { 1 , " Raju " , 90.5 } ; struct student record2 = { 2 , " Mani " , 93.5 } ; printf ( " Records of STUDENT1 : \n  " ) ; printf ( " Id is : %d \n  " , record1.id ) ; printf ( " Name is : %s \n  " , record1.name ) ; printf ( " Percentage is : %f \n \n  " , record1.percentage ) ; printf ( " Records of STUDENT2 : \n  " ) ; printf ( " Id is : %d \n  " , record2.id ) ; printf ( " Name is : %s \n  " , record2.name ) ; printf ( " Percentage is : %f \n \n  " , record2.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; void func ( struct student record ) ; int main ( ) { struct student record ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; func ( record ) ; return 0 ; } void func ( struct student record ) { printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; void func ( struct student * record ) ; int main ( ) { struct student record ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; func ( & record ) ; return 0 ; } void func ( struct student * record ) { printf ( " Id is : %d \n  " , record-> id ) ; printf ( " Name is : %s \n  " , record-> name ) ; printf ( " Percentage is : %f \n  " , record-> percentage ) ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 20 ] ; float percentage ; } ; struct student record ; void structure_demo ( ) ; int main ( ) { record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; structure_demo ( ) ; return 0 ; } void structure_demo ( ) { printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 30 ] ; float percentage ; } ; int main ( ) { int i ; struct student record1 = { 1 , " Raju " , 90.5 } ; struct student * ptr ; ptr = & record1 ; printf ( " Records of STUDENT1 : \n  " ) ; printf ( " Id is : %d \n  " , ptr-> id ) ; printf ( " Name is : %s \n  " , ptr-> name ) ; printf ( " Percentage is : %f \n \n  " , ptr-> percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id ; char name [ 30 ] ; float percentage ; } ; int main ( ) { int i ; struct student record1 = { 1 , " Raju " , 90.5 } ; struct student record2 , * record3 , * ptr1 , record4 ; printf ( " Records of STUDENT1 - record1 structure \n  " ) ; printf ( " Id : %d \n  Name : %s\n  Percentage : %f\n  " , record1.id , record1.name , record1.percentage ) ; record2 = record1 ; printf ( " \n Records of STUDENT1 - Direct copy from " \ " record1 \n  " ) ; printf ( " Id : %d \n  Name : %s\n  Percentage : %f\n  " , record2.id , record2.name , record2.percentage ) ; ptr1 = & record1 ; memcpy ( record3 , ptr1 , sizeof ( record1 ) ) ; printf ( " \n Records of STUDENT1 - copied from record1 " \ " using memcpy \n  " ) ; printf ( " Id : %d \n  Name : %s\n  Percentage : %f\n  " , record3-> id , record3-> name , record3-> percentage ) ; printf ( " \n Records of STUDENT1 - Copied individual " \ " members from record1 \n  " ) ; record4.id = record1.id ; strcpy ( record4.name , record1.name ) ; record4.percentage = record1.percentage ; printf ( " Id : %d \n  Name : %s\n  Percentage : %f\n  " , record4.id , record4.name , record4.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student_college_detail { int college_id ; char college_name [ 50 ] ; } ; struct student_detail { int id ; char name [ 20 ] ; float percentage ; struct student_college_detail clg_data ; } stu_data ; int main ( ) { struct student_detail stu_data = { 1 , " Raju " , 90.5 , 71145 , " Anna University " } ; printf ( " Id is : %d \n  " , stu_data.id ) ; printf ( " Name is : %s \n  " , stu_data.name ) ; printf ( " Percentage is : %f \n \n  " , stu_data.percentage ) ; printf ( " College Id is : %d \n  " , stu_data.clg_data.college_id ) ; printf ( " College Name is : %s \n  " , stu_data.clg_data.college_name ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student_college_detail { int college_id ; char college_name [ 50 ] ; } ; struct student_detail { int id ; char name [ 20 ] ; float percentage ; struct student_college_detail clg_data ; } stu_data , * stu_data_ptr ; int main ( ) { struct student_detail stu_data = { 1 , " Raju " , 90.5 , 71145 , " Anna University " } ; stu_data_ptr = & stu_data ; printf ( " Id is : %d \n  " , stu_data_ptr-> id ) ; printf ( " Name is : %s \n  " , stu_data_ptr-> name ) ; printf ( " Percentage is : %f \n \n  " , stu_data_ptr-> percentage ) ; printf ( " College Id is : %d \n  " , stu_data_ptr-> clg_data.college_id ) ; printf ( " College Name is : %s \n  " , stu_data_ptr-> clg_data.college_name ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct student { int id1 ; int id2 ; char a ; char b ; float percentage ; } ; int main ( ) { int i ; struct student record1 = { 1 , 2 , 'A' , 'B' , 90.5 } ; printf ( " size of structure in bytes : %d\n  " , sizeof ( record1 ) ) ; printf ( " \n Address of id1 = %u " , & record1.id1 ) ; printf ( " \n Address of id2 = %u " , & record1.id2 ) ; printf ( " \n Address of a = %u " , & record1.a ) ; printf ( " \n Address of b = %u " , & record1.b ) ; printf ( " \n Address of percentage = %u " , & record1.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct structure1 { int id1 ; int id2 ; char name ; char c ; float percentage ; } ; struct structure2 { int id1 ; char name ; int id2 ; char c ; float percentage ; } ; int main ( ) { struct structure1 a ; struct structure2 b ; printf ( " size of structure1 in bytes : %d\n  " , sizeof ( a ) ) ; printf ( " \n  Address of id1 = %u " , & a.id1 ) ; printf ( " \n  Address of id2 = %u " , & a.id2 ) ; printf ( " \n  Address of name = %u " , & a.name ) ; printf ( " \n  Address of c = %u " , & a.c ) ; printf ( " \n  Address of percentage = %u " , & a.percentage ) ; printf ( " \n \n size of structure2 in bytes : %d\n  " , sizeof ( b ) ) ; printf ( " \n  Address of id1 = %u " , & b.id1 ) ; printf ( " \n  Address of name = %u " , & b.name ) ; printf ( " \n  Address of id2 = %u " , & b.id2 ) ; printf ( " \n  Address of c = %u " , & b.c ) ; printf ( " \n  Address of percentage = %u " , & b.percentage ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> #pragma pack ( 1 ) struct structure1 { int id1 ; int id2 ; char name ; char c ; float percentage ; } ; struct structure2 { int id1 ; char name ; int id2 ; char c ; float percentage ; } ; int main ( ) { struct structure1 a ; struct structure2 b ; printf ( " size of structure1 in bytes : %d\n  " , sizeof ( a ) ) ; printf ( " \n  Address of id1 = %u " , & a.id1 ) ; printf ( " \n  Address of id2 = %u " , & a.id2 ) ; printf ( " \n  Address of name = %u " , & a.name ) ; printf ( " \n  Address of c = %u " , & a.c ) ; printf ( " \n  Address of percentage = %u " , & a.percentage ) ; printf ( " \n \n size of structure2 in bytes : %d\n  " , sizeof ( b ) ) ; printf ( " \n  Address of id1 = %u " , & b.id1 ) ; printf ( " \n  Address of name = %u " , & b.name ) ; printf ( " \n  Address of id2 = %u " , & b.id2 ) ; printf ( " \n  Address of c = %u " , & b.c ) ; printf ( " \n  Address of percentage = %u " , & b.percentage ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> typedef struct student { int id ; char name [ 20 ] ; float percentage ; } status ; int main ( ) { status record ; record.id = 1 ; strcpy ( record.name , " Raju " ) ; record.percentage = 86.5 ; printf ( " Id is : %d \n  " , record.id ) ; printf ( " Name is : %s \n  " , record.name ) ; printf ( " Percentage is : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { typedef long long int LLI ; printf ( " Storage size for long long int data " \ " type : %ld \n  " , sizeof ( LLI ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> union student { char name [ 20 ] ; char subject [ 20 ] ; float percentage ; } ; int main ( ) { union student record1 ; union student record2 ; strcpy ( record1.name , " Raju " ) ; strcpy ( record1.subject , " Maths " ) ; record1.percentage = 86.50 ; printf ( " Union record1 values example\n  " ) ; printf ( " Name : %s \n  " , record1.name ) ; printf ( " Subject : %s \n  " , record1.subject ) ; printf ( " Percentage : %f \n \n  " , record1.percentage ) ; printf ( " Union record2 values example\n  " ) ; strcpy ( record2.name , " Mani " ) ; printf ( " Name : %s \n  " , record2.name ) ; strcpy ( record2.subject , " Physics " ) ; printf ( " Subject : %s \n  " , record2.subject ) ; record2.percentage = 99.50 ; printf ( " Percentage : %f \n  " , record2.percentage ) ; return 0 ; }
#include <stdio.h> #include <string.h> union student { char name [ 20 ] ; char subject [ 20 ] ; float percentage ; } record ; int main ( ) { strcpy ( record.name , " Raju " ) ; strcpy ( record.subject , " Maths " ) ; record.percentage = 86.50 ; printf ( " Name : %s \n  " , record.name ) ; printf ( " Subject : %s \n  " , record.subject ) ; printf ( " Percentage : %f \n  " , record.percentage ) ; return 0 ; }
#include <stdio.h> #define height 100 #define number 3.14 #define letter 'A' #define letter_sequence " ABC " #define backslash_char '\?' void main ( ) { printf ( " value of height : %d \n  " , height ) ; printf ( " value of number : %f \n  " , number ) ; printf ( " value of letter : %c \n  " , letter ) ; printf ( " value of letter_sequence : %s \n  " , letter_sequence ) ; printf ( " value of backslash_char : %c \n  " , backslash_char ) ; }
#include <stdio.h> #define RAJU 100 int main ( ) { #ifdef RAJU printf ( " RAJU is defined. So , this line will be added in " \ " this C file\n  " ) ; #else printf ( " RAJU is not defined\n  " ) ; #endif return 0 ; }
#include <stdio.h> #define RAJU 100 int main ( ) { #ifndef SELVA { printf ( " SELVA is not defined. So , now we are going to " \ " define here\n  " ) ; #define SELVA 300 } #else printf ( " SELVA is already defined in the program” ) ; #endif return 0 ; }
#include <stdio.h> #define a 100 int main ( ) { #if ( a = = 100 ) printf ( " This line will be added in this C file since " \ " a \ = 100\n  " ) ; #else printf ( " This line will be added in this C file since " \ " a is not equal to 100\n  " ) ; #endif return 0 ; }
#include <stdio.h> #define height 100 void main ( ) { printf ( " First defined value for height : %d\n  " , height ) ; #undef height #define height 600 printf ( " value of height after undef \ & redefine : %d " , height ) ; }
#include <stdio.h> void function1 ( ) ; void function2 ( ) ; #pragma startup function1 #pragma exit function2 int main ( ) { printf ( " \n  Now we are in main function " ) ; return 0 ; } void function1 ( ) { printf ( " \n Function1 is called before main function call " ) ; } void function2 ( ) { printf ( " \n Function2 is called just before end of " \ " main function " ) ; " }
#include <stdio.h> #include <stdlib.h> int main ( ) { int a = 10 , b = 20 , c = 30 , d = 40 , X ; X = a / b + c * d-c ; printf ( " Value of X = %d\n  " , X ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void Exit1 ( void ) { printf ( " Exit1 function is called\n  " ) ; } void Exit2 ( void ) { printf ( " Exit2 function is called \n  " ) ; } int main ( void ) { atexit ( Exit1 ) ; atexit ( Exit2 ) ; printf ( " This is the end of this program.\n  " ) ; return 0 ; }
#include <stdio.h> #define concatination ( a , b ) a ## b int main ( ) { int ab = 1000 ; printf ( " The concatenated value is : %d \n  " , concatination ( a , b ) ) ; return 0 ; }
#include <stdio.h> void function1 ( ) ; void function2 ( ) ; #pragma startup function1 #pragma exit function2 int main ( ) { printf ( " \n  Now we are in main function " ) ; return 0 ; } void function1 ( ) { printf ( " \n Function1 is called before main function call " ) ; } void function2 ( ) { printf ( " \n Function2 is called just before end of " \ " main function " ) ; " }
#include <stdio.h> #define max 100 int main ( ) { printf ( " max is %d " , max ) ; return 0 ; }
#include <stdio.h> #define INCREMENT ( x ) + + x int main ( ) { char * ptr = " GeeksQuiz " ; int x = 10 ; printf ( " %s " , INCREMENT ( ptr ) ) ; printf ( " %d " , INCREMENT ( x ) ) ; return 0 ; }
#include <stdio.h> #define MULTIPLY ( a , b ) a * b int main ( ) { printf ( " %d " , MULTIPLY ( 2 + 3 , 3 + 5 ) ) ; return 0 ; }
#include <stdio.h> #define MULTIPLY ( a , b ) ( a ) * ( b ) int main ( ) { printf ( " %d " , MULTIPLY ( 2 + 3 , 3 + 5 ) ) ; return 0 ; }
#include <stdio.h> #define merge ( a , b ) a##b int main ( ) { printf ( " %d " , merge ( 12 , 34 ) ) ; }
#include <stdio.h> #define get ( a ) #a int main ( ) { printf ( " %s " , get ( GeeksQuiz ) ) ; }
#include <stdio.h> #define PRINT ( i , limit ) while ( i < limit ) \ { \ printf ( " GeeksQuiz " ) ; \ i + + ; \ } int main ( ) { int i = 0 ; PRINT ( i , 3 ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Current File : %s\n  " , __FILE__ ) ; printf ( " Current Date : %s\n  " , __DATE__ ) ; printf ( " Current Time : %s\n  " , __TIME__ ) ; printf ( " Line Number : %d\n  " , __LINE__ ) ; return 0 ; }
#include <stdio.h> #define LIMIT 100 int main ( ) { printf ( " %d " , LIMIT ) ; #undef LIMIT printf ( " %d " , LIMIT ) ; return 0 ; }
#include <stdio.h> #define LIMIT 1000 int main ( ) { printf ( " %d " , LIMIT ) ; #undef LIMIT int LIMIT = 1001 ; printf ( " \n  %d " , LIMIT ) ; return 0 ; }
#include <stdio.h> float div ( float , float ) ; #define div ( x , y ) x / y int main ( ) { printf ( " %0.2f " , div ( 10.0 , 5.0 ) ) ; #undef div printf ( " \n  %0.2f " , div ( 10.0 , 5.0 ) ) ; return 0 ; } float div ( float x , float y ) { return y / x ; }
#include <stdio.h> int main ( void ) { printf ( " My mobile number " " is 7\a8\a7\a3\a9\a2\a3\a4\a0\a8\a " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello Geeks\b\b\b\bF " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello\n  " ) ; printf ( " GeeksforGeeks " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello \t GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello friends " ) ; printf ( " \v Welcome to GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello fri \r ends " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " Hello\\GFG " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( void ) { printf ( " \' Hello Geeks\n  " ) ; printf ( " \ " Hello Geeks " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " \?\?!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * s = " A\0725 " ; printf ( " %s " , s ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char * s = " B\x4a " ; printf ( " %s " , s ) ; return 0 ; }
#include <stdio.h> static int animals = 8 ; const int i = 5 ; int call_me ( void ) { printf ( " %d %d " , i , animals ) ; }
#include <stdio.h> int main ( ) { call_me ( ) ; animals = 2 ; printf ( " %d " , animals ) ; return 0 ; }
#include <stdio.h> #include " animal.cpp " int main ( ) { call_me ( ) ; printf ( " \n  having fun washing! " ) ; animals = 10 ; printf ( " %d\n  " , animals ) ; return 0 ; }
#include <stdio.h> void foo ( ) { int a ; extern int b ; } void bar ( ) { int c ; c = b ; } int main ( ) { foo ( ) ; bar ( ) ; }
#include <stdio.h> int x = 10 ; int z = 5 ; int main ( ) { extern int y ; extern int z ; printf ( " %d %d %d " , x , y , z ) ; } int y = 2 ;
#include <stdio.h> int main ( ) { const int num = 1 ; num = 5 ; return 0 ; }
#include <iostream> int main ( ) { int var = 5 ; constexpr int k = var ; std : : cout < < k ; return 0 ; }
#include <stdio.h> #define var 5 int main ( ) { printf ( " %d " , var ) ; #ifdef var #undef var #define var 10 #endif printf ( " %d " , var ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { static int * p = ( int * ) malloc ( sizeof ( p ) ) ; * p = 10 ; printf ( " %d " , * p ) ; }
#include <stdio.h> #include <stdlib.h> int * p = ( int * ) malloc ( sizeof ( p ) ) ; int main ( void ) { * p = 10 ; printf ( " %d " , * p ) ; }
#include <stdio.h> int fun ( int x ) { return ( x + 5 ) ; } int y = fun ( 20 ) ; int main ( ) { printf ( " %d " , y ) ; }
#include <stdio.h> int main ( ) { char a = 30 , b = 40 , c = 10 ; char d = ( a * b ) / c ; printf ( " %d " , d ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = 0xfb ; unsigned char b = 0xfb ; printf ( " a = %c " , a ) ; printf ( " \n b = %c " , b ) ; if ( a = = b ) printf ( " \n Same " ) ; else printf ( " \n Not Same " ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 0.1 ; if ( x = = 0.1 ) printf ( " IF " ) ; else if ( x = = 0.1f ) printf ( " ELSE IF " ) ; else printf ( " ELSE " ) ; }
#include <stdio.h> int main ( ) { float x = 0.1 ; printf ( " %d %d %d " , sizeof ( x ) , sizeof ( 0.1 ) , sizeof ( 0.1f ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float x = 0.5 ; if ( x = = 0.5 ) printf ( " IF " ) ; else if ( x = = 0.5f ) printf ( " ELSE IF " ) ; else printf ( " ELSE " ) ; }
#include <stdio.h> int main ( ) { char ch1 = 125 , ch2 = 10 ; ch1 = ch1 + ch2 ; printf ( " %d\n  " , ch1 ) ; printf ( " %c\n  " , ch1 - ch2 - 4 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char ch = 65 ; cout < < ch < < endl ; cout < < ch + 0 < < endl ; cout < < char ( ch + 32 ) < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; printf ( " x = %d , z = %f " , x , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; printf ( " sum = %d " , sum ) ; return 0 ; }
#include " somefile.h " extern int var ; int main ( void ) { var = 10 ; return 0 ; }
#include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { const volatile int local = 10 ; int * ptr = ( int * ) & local ; printf ( " Initial value of local : %d \n  " , local ) ; * ptr = 100 ; printf ( " Modified value of local : %d \n  " , local ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; int * ptr = & i ; printf ( " * ptr : %d\n  " , * ptr ) ; ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; * ptr = 100 ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; const int * ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; ptr = & j ; printf ( " ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int const i = 10 ; int j = 20 ; int const * ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; ptr = & j ; printf ( " ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int const j = 20 ; int * ptr = & i ; printf ( " * ptr : %d\n  " , * ptr ) ; ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; int * const ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; * ptr = 100 ; printf ( " ptr : %d\n  " , * ptr ) ; ptr = & j ; return 0 ; }
#include <stdio.h> int main ( void ) { int i = 10 ; int j = 20 ; const int * const ptr = & i ; printf ( " ptr : %d\n  " , * ptr ) ; ptr = & j ; * ptr = 100 ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string : " ) ; scanf ( " % [ A-Z ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string : " ) ; scanf ( " % [ ^o ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char str [ 128 ] ; printf ( " Enter a string with spaces : " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " You entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char str [ 20 ] ; int i ; for ( i = 0 ; i <2 ; i + + ) { scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s\n  " , str ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char str [ 20 ] ; int i ; for ( i = 0 ; i <2 ; i + + ) { scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s\n  " , str ) ; fflush ( stdin ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( void ) { char ch = 'a' ; if ( isprint ( ch ) ) { printf ( " %c is printable character\n  " , ch ) ; } else { printf ( " %c is not printable character\n  " , ch ) ; } if ( iscntrl ( ch ) ) { printf ( " %c is control character\n  " , ch ) ; } else { printf ( " %c is not control character " , ch ) ; } return ( 0 ) ; }
#include <stdio.h> int main ( ) { unsigned char a = 5 , b = 9 ; printf ( " a = %d , b = %d\n  " , a , b ) ; printf ( " a & b ; = %d\n  " , a & b ; ) ; printf ( " a|b = %d\n  " , a|b ) ; printf ( " a^b = %d\n  " , a^b ) ; printf ( " ~a = %d\n  " , a = ~a ) ; printf ( " b < <1 = %d\n  " , b < <1 ) ; printf ( " b> > 1 = %d\n  " , b> > 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; int y = 15 ; printf ( " %d " , ( x , y ) ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; int y = ( x + + , + + x ) ; printf ( " %d " , y ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y ; y = ( x + + , printf ( " x = %d\n  " , x ) , + + x , printf ( " x = %d\n  " , x ) , x + + ) ; printf ( " y = %d\n  " , y ) ; printf ( " x = %d\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 10 ; printf ( " %d \n  " , sizeof ( x = = y ) ) ; printf ( " %d \n  " , sizeof ( x < y ) ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , y = 10 ; cout < < sizeof ( x = = y ) < < endl ; cout < < sizeof ( x < y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = sizeof ( printf ( " hey " ) ) ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 5 ; int b = sizeof ( a = 6 ) ; printf ( " a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #define mkstr ( s ) #s int main ( void ) { printf ( mkstr ( geeksforgeeks ) ) ; return 0 ; }
#include <iostream> using namespace std ; #define a 8.3297 int main ( ) { cout < < " Value of a is " < < a < < endl ; return 0 ; }
#include <iostream> using namespace std ; #define MAX ( i , j ) ( ( ( i ) > ( j ) ) ? i : j ) int main ( ) { int a , b ; a = 250 ; b = 25 ; cout < < " The maximum is " < < MAX ( a , b ) < < endl ; return 0 ; }
#include <stdio.h> #define concat ( a , b ) a##b int main ( void ) { int xy = 30 ; printf ( " %d " , concat ( x , y ) ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ } int main ( void ) { int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ; ) ; if ( num & 1 ) MACRO ( num , " Odd " ) ; else MACRO ( num , " Even " ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) do { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ } while ( 0 ) int main ( void ) { int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ; ) ; if ( num & 1 ) MACRO ( num , " Odd " ) ; else MACRO ( num , " Even " ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) ( { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ } ) int main ( void ) { int num ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ; ) ; if ( num & 1 ) MACRO ( num , " Odd " ) ; else MACRO ( num , " Even " ) ; return 0 ; }
#include <stdio.h> #define val 10 #define floatVal 4.5 #define charVal 'G' int main ( ) { printf ( " Integer Constant : %d\n  " , val ) ; printf ( " Floating point Constant : %f\n  " , floatVal ) ; printf ( " Character Constant : %c\n  " , charVal ) ; return 0 ; }
#include <stdio.h> int main ( ) { const int intVal = 10 ; const float floatVal = 4.14 ; const char charVal = 'A' ; const char stringVal [ 10 ] = " ABC " ; printf ( " Integer constant : %d \n  " , intVal ) ; printf ( " Floating point constant : %f \n  " , floatVal ) ; printf ( " Character constant : %c \n  " , charVal ) ; printf ( " String constant : %s \n  " , stringVal ) ; return 0 ; }
#include <stdio.h> #define MACRO ( num , str ) { \ printf ( " %d " , num ) ; \ printf ( " is " ) ; \ printf ( " %s number " , str ) ; \ printf ( " \n  " ) ; \ }
#include <stdio.h> #include " myhead.h " int main ( ) { add ( 4 , 6 ) ; multiply ( 5 , 5 ) ; printf ( " BYE!See you Soon " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { char generate [ L_tmpnam + 1 ] ; tmpnam ( generate ) ; puts ( generate ) ; return 0 ; }
#include <stdio.h> #define INC ( P ) + + P int main ( ) { char * p = " Geeks " ; int x = 10 ; printf ( " %s " , INC ( p ) ) ; printf ( " %d " , INC ( x ) ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " %d\n  " , _Generic ( 1.0L , float : 1 , double : 2 , long double : 3 , default : 0 ) ) ; printf ( " %d\n  " , _Generic ( 1L , float : 1 , double : 2 , long double : 3 , default : 0 ) ) ; printf ( " %d\n  " , _Generic ( 1.0L , float : 1 , double : 2 , long double : 3 ) ) ; return 0 ; }
#include <stdio.h> #define geeks ( T ) _Generic ( ( T ) , char : 1 , int : 2 , long : 3 , default : 0 ) int main ( void ) { printf ( " %d\n  " , geeks ( 'A' ) ) ; printf ( " %d " , geeks ( " A " ) ) ; return 0 ; }
#include <stdio.h> typedef unsigned char BYTE ; int main ( ) { BYTE b1 , b2 ; b1 = 'c' ; printf ( " %c " , b1 ) ; return 0 ; }
#include <stdio.h> #define HYD " Hyderabad " int main ( ) { printf ( " %s " , HYD ) ; return 0 ; }
#include <stdio.h> typedef char * ptr ; #define PTR char * int main ( ) { ptr a , b , c ; PTR x , y , z ; printf ( " sizeof a : %u\n  " , sizeof ( a ) ) ; printf ( " sizeof b : %u\n  " , sizeof ( b ) ) ; printf ( " sizeof c : %u\n  " , sizeof ( c ) ) ; printf ( " sizeof x : %u\n  " , sizeof ( x ) ) ; printf ( " sizeof y : %u\n  " , sizeof ( y ) ) ; printf ( " sizeof z : %u\n  " , sizeof ( z ) ) ; return 0 ; }
#include <stdlib.h> #include <stdio.h> #include <time.h> #define Size 50 int main ( ) { time_t t ; struct tm * tmp ; char MY_TIME [ Size ] ; time ( & t ; ) ; tmp = localtime ( & t ; ) ; strftime ( MY_TIME , sizeof ( MY_TIME ) , " %x - %I : %M %p " , tmp ) ; printf ( " Formatted date & time : %s\n  " , MY_TIME ) ; return ( 0 ) ; }
#include <stdio.h> #include <unistd.h> int main ( ) { int i ; printf ( " I am EXEC.c called by execvp ( ) " ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { char * args [ ] = { " . / EXEC " , NULL } ; execvp ( args [ 0 ] , args ) ; printf ( " Ending----- " ) ; return 0 ; }
#include <stdio.h> #include <unistd.h> int main ( ) { int i ; printf ( " I am EXEC.c called by execv ( ) " ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( ) { char * args [ ] = { " . / EXEC " , NULL } ; execv ( args [ 0 ] , args ) ; printf ( " Ending----- " ) ; return 0 ; }
#include <stdio.h> void swap ( char * str1 , char * str2 ) { char * temp = str1 ; str1 = str2 ; str2 = temp ; } int main ( ) { char * str1 = " geeks " ; char * str2 = " forgeeks " ; swap ( str1 , str2 ) ; printf ( " str1 is %s , str2 is %s " , str1 , str2 ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> void swap1 ( char * * str1_ptr , char * * str2_ptr ) { char * temp = * str1_ptr ; * str1_ptr = * str2_ptr ; * str2_ptr = temp ; } int main ( ) { char * str1 = " geeks " ; char * str2 = " forgeeks " ; swap1 ( & str1 ; , & str2 ; ) ; printf ( " str1 is %s , str2 is %s " , str1 , str2 ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> void swap2 ( char * str1 , char * str2 ) { char * temp = ( char * ) malloc ( ( strlen ( str1 ) + 1 ) * sizeof ( char ) ) ; strcpy ( temp , str1 ) ; strcpy ( str1 , str2 ) ; strcpy ( str2 , temp ) ; free ( temp ) ; } int main ( ) { char str1 [ 10 ] = " geeks " ; char str2 [ 10 ] = " forgeeks " ; swap2 ( str1 , str2 ) ; printf ( " str1 is %s , str2 is %s " , str1 , str2 ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " Size of arr [ ] %d\n  " , sizeof ( arr ) ) ; printf ( " Size of ptr %d " , sizeof ( ptr ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 } , x = 10 ; int * ptr = & x ; arr = & x ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " Value of first element is %d " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int * ptr = arr ; printf ( " arr [ 2 ] = %d\n  " , arr [ 2 ] ) ; printf ( " * ( arr + 2 ) = %d\n  " , * ( arr + 2 ) ) ; printf ( " ptr [ 2 ] = %d\n  " , ptr [ 2 ] ) ; printf ( " * ( ptr + 2 ) = %d\n  " , * ( ptr + 2 ) ) ; return 0 ; }
#include <stdio.h> int fun ( int ptr [ ] ) { int x = 10 ; printf ( " sizeof ( ptr ) = %d\n  " , sizeof ( ptr ) ) ; ptr = & x ; printf ( " * ptr = %d " , * ptr ) ; return 0 ; } int main ( ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; fun ( arr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int r = 3 , c = 4 ; int * arr = ( int * ) malloc ( r * c * sizeof ( int ) ) ; int i , j , count = 0 ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) * ( arr + i * c + j ) = + + count ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) printf ( " %d " , * ( arr + i * c + j ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int r = 3 , c = 4 , i , j , count ; int * arr [ r ] ; for ( i = 0 ; i <r ; i + + ) arr [ i ] = ( int * ) malloc ( c * sizeof ( int ) ) ; count = 0 ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) arr [ i ] [ j ] = + + count ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) printf ( " %d " , arr [ i ] [ j ] ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int r = 3 , c = 4 , i , j , count ; int * * arr = ( int * * ) malloc ( r * sizeof ( int * ) ) ; for ( i = 0 ; i <r ; i + + ) arr [ i ] = ( int * ) malloc ( c * sizeof ( int ) ) ; count = 0 ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) arr [ i ] [ j ] = + + count ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) printf ( " %d " , arr [ i ] [ j ] ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int r = 3 , c = 4 , len = 0 ; int * ptr , * * arr ; int count = 0 , i , j ; len = sizeof ( int * ) * r + sizeof ( int ) * c * r ; arr = ( int * * ) malloc ( len ) ; ptr = arr + r ; for ( i = 0 ; i < r ; i + + ) arr [ i ] = ( ptr + c * i ) ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) arr [ i ] [ j ] = + + count ; for ( i = 0 ; i < r ; i + + ) for ( j = 0 ; j < c ; j + + ) printf ( " %d " , arr [ i ] [ j ] ) ; return 0 ; }
#include <stdio.h> const int M = 3 ; const int N = 3 ; void print ( int arr [ M ] [ N ] ) { int i , j ; for ( i = 0 ; i < M ; i + + ) for ( j = 0 ; j < N ; j + + ) printf ( " %d " , arr [ i ] [ j ] ) ; } int main ( ) { int arr [ ] [ 3 ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; print ( arr ) ; return 0 ; }
#include <stdio.h> const int N = 3 ; void print ( int arr [ ] [ N ] , int m ) { int i , j ; for ( i = 0 ; i < m ; i + + ) for ( j = 0 ; j < N ; j + + ) printf ( " %d " , arr [ i ] [ j ] ) ; } int main ( ) { int arr [ ] [ 3 ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; print ( arr , 3 ) ; return 0 ; }
#include <stdio.h> void print ( int m , int n , int arr [ ] [ n ] ) { int i , j ; for ( i = 0 ; i < m ; i + + ) for ( j = 0 ; j < n ; j + + ) printf ( " %d " , arr [ i ] [ j ] ) ; } int main ( ) { int arr [ ] [ 3 ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int m = 3 , n = 3 ; print ( m , n , arr ) ; return 0 ; }
#include <stdio.h> void print ( int * arr , int m , int n ) { int i , j ; for ( i = 0 ; i < m ; i + + ) for ( j = 0 ; j < n ; j + + ) printf ( " %d " , * ( ( arr + i * n ) + j ) ) ; } int main ( ) { int arr [ ] [ 3 ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int m = 3 , n = 3 ; print ( ( int * ) arr , m , n ) ; return 0 ; }
#include <string.h> #include <stdio.h> #include <stdlib.h> struct student { int stud_id ; int name_len ; int struct_size ; char stud_name [ 0 ] ; } ; struct student * createStudent ( struct student * s , int id , char a [ ] ) { s = malloc ( sizeof ( * s ) + sizeof ( char ) * strlen ( a ) ) ; s-> stud_id = id ; s-> name_len = strlen ( a ) ; strcpy ( s-> stud_name , a ) ; s-> struct_size = ( sizeof ( * s ) + sizeof ( char ) * strlen ( s-> stud_name ) ) ; return s ; } void printStudent ( struct student * s ) { printf ( " Student_id : %d\n  " " Stud_Name : %s\n  " " Name_Length : %d\n  " " Allocated_Struct_size : %d\n \n  " , s-> stud_id , s-> stud_name , s-> name_len , s-> struct_size ) ; } int main ( ) { struct student * s1 , * s2 ; s1 = createStudent ( s1 , 523 , " Sanjayulsha " ) ; s2 = createStudent ( s2 , 535 , " Cherry " ) ; printStudent ( s1 ) ; printStudent ( s2 ) ; printf ( " Size of Struct student : %lu\n  " , sizeof ( struct student ) ) ; printf ( " Size of Struct pointer : %lu " , sizeof ( s1 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ ] = " GeeksForGeeks " ; char * target = strdup ( source ) ; printf ( " %s " , source ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ ] = " GeeksForGeeks " ; char * target = strndup ( source , 5 ) ; printf ( " %s " , target ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> # define SIZE 5 struct ArrayWrapper { int arr [ SIZE ] ; } ; void modify ( struct ArrayWrapper temp ) { int * ptr = temp.arr ; int i ; printf ( " In 'modify ( ) ' , before modification\n  " ) ; for ( i = 0 ; i < SIZE ; + + i ) printf ( " %d " , ptr [ i ] ) ; printf ( " \n  " ) ; for ( i = 0 ; i < SIZE ; + + i ) ptr [ i ] = 100 ; printf ( " \n In 'modify ( ) ' , after modification\n  " ) ; for ( i = 0 ; i < SIZE ; + + i ) printf ( " %d " , ptr [ i ] ) ; } int main ( ) { int i ; struct ArrayWrapper obj ; for ( i = 0 ; i <SIZE ; i + + ) obj.arr [ i ] = 10 ; modify ( obj ) ; printf ( " \n \n In 'Main' , after calling modify ( ) \n  " ) ; for ( i = 0 ; i < SIZE ; + + i ) printf ( " %d " , obj.arr [ i ] ) ; printf ( " \n  " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void reverseStr ( string & str ) { int n = str.length ( ) ; for ( int i = 0 ; i < n / 2 ; i + + ) swap ( str [ i ] , str [ n - i - 1 ] ) ; } int main ( ) { string str = " geeksforgeeks " ; reverseStr ( str ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string str = " geeksforgeeks " ; reverse ( str.begin ( ) , str.end ( ) ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void reverse ( string str ) { for ( int i = str.length ( ) -1 ; i> = 0 ; i-- ) cout < < str [ i ] ; } int main ( void ) { string s = " GeeksforGeeks " ; reverse ( s ) ; return ( 0 ) ; }
#include <bits / stdc + + .h> using namespace std ; char * reverseConstString ( char const * str ) { int n = strlen ( str ) ; char * rev = new char [ n + 1 ] ; strcpy ( rev , str ) ; for ( int i = 0 , j = n-1 ; i <j ; i + + , j-- ) swap ( rev [ i ] , rev [ j ] ) ; return rev ; } int main ( void ) { const char * s = " GeeksforGeeks " ; printf ( " %s " , reverseConstString ( s ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ ] = " geeksforgeeks " ; char s2 [ ] = " app " ; char s3 [ ] = " kite " ; char * r , * t ; r = strpbrk ( s1 , s2 ) ; if ( r ! = 0 ) printf ( " First matching character : %c\n  " , * r ) ; else printf ( " Character not found " ) ; t = strpbrk ( s1 , s3 ) ; if ( t ! = 0 ) printf ( " \n First matching character : %c\n  " , * t ) ; else printf ( " Character not found " ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ ] = " victory " ; char s2 [ ] = " a23 " ; char s3 [ ] = " i22 " ; char * r , * t ; r = strpbrk ( s1 , s2 ) ; t = strpbrk ( s1 , s3 ) ; if ( r ! = 0 ) printf ( " Congrats u have won " ) ; else printf ( " Better luck next time " ) ; if ( t ! = 0 ) printf ( " \n Congrats u have won " ) ; else printf ( " Better luck next time " ) ; return ( 0 ) ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char str [ ] = " welcome! to GeeksForGeeks , " ; int i = 0 , count = 0 ; while ( str [ i ] ) { if ( ispunct ( str [ i ] ) ) count + + ; i + + ; } printf ( " Sentence contains %d punctuation " " characters.\n  " , count ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { int i ; printf ( " All punctuation characters in C " " programming are : \n  " ) ; for ( i = 0 ; i < = 255 ; + + i ) if ( ispunct ( i ) ! = 0 ) printf ( " %c " , i ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int len = strspn ( " geeks for geeks " , " geek " ) ; printf ( " Length of initial segment matching : %d\n  " , len ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> int main ( ) { int len = strspn ( " i am " , " xyz " ) ; printf ( " Length of initial segment matching : %d\n  " , len ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; case 3 : printf ( " Choice is 3 " ) ; break ; default : printf ( " Choice other than 1 , 2 and 3 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { float x = 1.1 ; switch ( x ) { case 1.1 : printf ( " Choice is 1 " ) ; break ; default : printf ( " Choice other than 1 , 2 and 3 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1\n  " ) ; case 2 : printf ( " Choice is 2\n  " ) ; case 3 : printf ( " Choice is 3\n  " ) ; default : printf ( " Choice other than 1 , 2 and 3\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; switch ( x ) { case 1 : printf ( " Choice is 1\n  " ) ; case 2 : printf ( " Choice is 2\n  " ) ; case 3 : printf ( " Choice is 3\n  " ) ; case 4 : printf ( " Choice is 4\n  " ) ; break ; default : printf ( " Choice other than 1 , 2 , 3 and 4\n  " ) ; break ; } printf ( " After Switch " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 4 ; switch ( x ) { default : printf ( " Choice other than 1 and 2 " ) ; break ; case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 2 ; int arr [ ] = { 1 , 2 , 3 } ; switch ( x ) { case arr [ 0 ] : printf ( " Choice 1\n  " ) ; case arr [ 1 ] : printf ( " Choice 2\n  " ) ; case arr [ 2 ] : printf ( " Choice 3\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 1 ; switch ( x ) { x = x + 1 ; case 1 : printf ( " Choice is 1 " ) ; break ; case 2 : printf ( " Choice is 2 " ) ; break ; default : printf ( " Choice other than 1 and 2 " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 1 ; switch ( x ) { case 2 : printf ( " Choice is 1 " ) ; break ; case 1 + 1 : printf ( " Choice is 2 " ) ; break ; } return 0 ; }
#include <errno.h> #include <stdio.h> int main ( int argc , char * argv [ ] ) { FILE * fp ; fp = fopen ( argv [ 1 ] , " r " ) ; if ( fp = = NULL ) { fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; return errno ; } printf ( " file exist\n  " ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int * p = malloc ( sizeof ( int ) ) ; if ( p = = NULL ) { perror ( " malloc ( ) " ) ; return -1 ; } * p = 10 ; free ( p ) ; return 0 ; }
#include <stdio.h> void myStartupFun ( void ) __attribute__ ( ( constructor ) ) ; void myCleanupFun ( void ) __attribute__ ( ( destructor ) ) ; void myStartupFun ( void ) { printf ( " startup code before main ( ) \n  " ) ; } void myCleanupFun ( void ) { printf ( " cleanup code after main ( ) \n  " ) ; } int main ( void ) { printf ( " hello\n  " ) ; return 0 ; }
#include <stdarg.h> #include <stdio.h> int min ( int arg_count , ... ) { int i ; int min , a ; va_list ap ; va_start ( ap , arg_count ) ; min = va_arg ( ap , int ) ; for ( i = 2 ; i < = arg_count ; i + + ) { if ( ( a = va_arg ( ap , int ) ) < min ) min = a ; } va_end ( ap ) ; return min ; } int main ( ) { int count = 5 ; printf ( " Minimum value is %d " , min ( count , 12 , 67 , 6 , 7 , 100 ) ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> _Noreturn void view ( ) { return 10 ; } int main ( void ) { printf ( " Ready to begin...\n  " ) ; view ( ) ; printf ( " NOT over till now\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> _Noreturn void show ( ) { printf ( " BYE BYE " ) ; } int main ( void ) { printf ( " Ready to begin...\n  " ) ; show ( ) ; printf ( " NOT over till now\n  " ) ; return 0 ; }
#include “studio.h” int main ( ) { printf ( “ %s” , __func__ ) ; return 0 ; }
#include “stdio.h” void foo ( void ) { printf ( “ %s” , __func__ ) ; } void bar ( void ) { printf ( “ %s” , __func__ ) ; } int main ( ) { foo ( ) ; bar ( ) ; return 0 ; }
#include “stdio.h” int __func__ = 10 ; int main ( ) { printf ( “ %d” , __func__ ) ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " In file : %s , function : %s ( ) and line : %d " , __FILE__ , __func__ , __LINE__ ) ; return 0 ; }
#include <stdio.h> void A ( ) { printf ( " I am function A\n  " ) ; } void B ( void ( * ptr ) ( ) ) { ( * ptr ) ( ) ; } int main ( ) { void ( * ptr ) ( ) = & A ; B ( ptr ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Main " ) ; int fun ( ) { printf ( " fun " ) ; int view ( ) { printf ( " view " ) ; } return 1 ; } view ( ) ; }
#include <stdio.h> int main ( void ) { auto int view ( ) ; view ( ) ; printf ( " Main\n  " ) ; int view ( ) { printf ( " View\n  " ) ; return 1 ; } printf ( " GEEKS " ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char ch = 'G' ; printf ( " %c in lowercase is represented as = %c " , ch , tolower ( ch ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int j = 0 ; char str [ ] = " GEEKSFORGEEKS\n  " ; char ch = 'G' ; char ch ; while ( str [ j ] ) { ch = str [ j ] ; putchar ( tolower ( ch ) ) ; j + + ; } return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; seconds = time ( NULL ) ; printf ( " Seconds since January 1 , 1970 = %ld\n  " , seconds ) ; return ( 0 ) ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t seconds ; time ( & seconds ; ) ; printf ( " Seconds since January 1 , 1970 = %ld\n  " , seconds ) ; return 0 ; }
#include <stdio.h> void fun ( int a ) { printf ( " Value of a is %d\n  " , a ) ; } int main ( ) { void ( * fun_ptr ) ( int ) = & fun ; ( * fun_ptr ) ( 10 ) ; return 0 ; }
#include <stdio.h> void fun ( int a ) { printf ( " Value of a is %d\n  " , a ) ; } int main ( ) { void ( * fun_ptr ) ( int ) = fun ; fun_ptr ( 10 ) ; return 0 ; }
#include <stdio.h> void add ( int a , int b ) { printf ( " Addition is %d\n  " , a + b ) ; } void subtract ( int a , int b ) { printf ( " Subtraction is %d\n  " , a-b ) ; } void multiply ( int a , int b ) { printf ( " Multiplication is %d\n  " , a * b ) ; } int main ( ) { void ( * fun_ptr_arr [ ] ) ( int , int ) = { add , subtract , multiply } ; unsigned int ch , a = 15 , b = 10 ; printf ( " Enter Choice : 0 for add , 1 for subtract and 2 " " for multiply\n  " ) ; scanf ( " %d " , & ch ; ) ; if ( ch > 2 ) return 0 ; ( * fun_ptr_arr [ ch ] ) ( a , b ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { printf ( " Fun1\n  " ) ; } void fun2 ( ) { printf ( " Fun2\n  " ) ; } void wrapper ( void ( * fun ) ( ) ) { fun ( ) ; } int main ( ) { wrapper ( fun1 ) ; wrapper ( fun2 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int compare ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int arr [ ] = { 10 , 5 , 15 , 12 , 90 , 80 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) , i ; qsort ( arr , n , sizeof ( int ) , compare ) ; for ( i = 0 ; i <n ; i + + ) printf ( " %d " , arr [ i ] ) ; return 0 ; }
#include <stdio.h> #include <stdbool.h> bool compare ( const void * a , const void * b ) { return ( * ( int * ) a = = * ( int * ) b ) ; } int search ( void * arr , int arr_size , int ele_size , void * x , bool compare ( const void * , const void * ) ) { char * ptr = ( char * ) arr ; int i ; for ( i = 0 ; i <arr_size ; i + + ) if ( compare ( ptr + i * ele_size , x ) ) return i ; return -1 ; } int main ( ) { int arr [ ] = { 2 , 5 , 7 , 90 , 70 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 7 ; printf ( " Returned index is %d " , search ( arr , n , sizeof ( int ) , & x ; , compare ) ) ; return 0 ; }
#include <stdio.h> void use ( int * a , int * b , int * restrict c ) { * a + = * c ; * b + = * c ; } int main ( void ) { int a = 50 , b = 60 , c = 70 ; use ( & a ; , & b ; , & c ; ) ; printf ( " %d %d %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> struct date { unsigned int d ; unsigned int m ; unsigned int y ; } ; int main ( ) { printf ( " Size of date is %d bytes\n  " , sizeof ( struct date ) ) ; struct date dt = { 31 , 12 , 2014 } ; printf ( " Date is %d / %d / %d " , dt.d , dt.m , dt.y ) ; }
#include <stdio.h> struct date { unsigned int d : 5 ; unsigned int m : 4 ; unsigned int y ; } ; int main ( ) { printf ( " Size of date is %d bytes\n  " , sizeof ( struct date ) ) ; struct date dt = { 31 , 12 , 2014 } ; printf ( " Date is %d / %d / %d " , dt.d , dt.m , dt.y ) ; return 0 ; }
#include <stdio.h> struct test1 { unsigned int x : 5 ; unsigned int y : 8 ; } ; struct test2 { unsigned int x : 5 ; unsigned int : 0 ; unsigned int y : 8 ; } ; int main ( ) { printf ( " Size of test1 is %d bytes\n  " , sizeof ( struct test1 ) ) ; printf ( " Size of test2 is %d bytes\n  " , sizeof ( struct test2 ) ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x : 5 ; unsigned int y : 5 ; unsigned int z ; } ; int main ( ) { struct test t ; printf ( " Address of t.x is %p " , & t.x ; ) ; printf ( " Address of t.z is %p " , & t.z ; ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x : 2 ; unsigned int y : 2 ; unsigned int z : 2 ; } ; int main ( ) { struct test t ; t.x = 5 ; printf ( " %d " , t.x ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x ; unsigned int y : 33 ; unsigned int z ; } ; int main ( ) { printf ( " %d " , sizeof ( struct test ) ) ; return 0 ; }
#include <stdio.h> struct test { unsigned int x ; long int y : 33 ; unsigned int z ; } ; int main ( ) { struct test t ; unsigned int * ptr1 = & t.x ; unsigned int * ptr2 = & t.z ; printf ( " %d " , ptr2 - ptr1 ) ; return 0 ; }
#include <string.h> #include <stdio.h> #include <stdlib.h> struct student { int stud_id ; int name_len ; int struct_size ; char stud_name [ ] ; } ; struct student * createStudent ( struct student * s , int id , char a [ ] ) { s = malloc ( sizeof ( * s ) + sizeof ( char ) * strlen ( a ) ) ; s-> stud_id = id ; s-> name_len = strlen ( a ) ; strcpy ( s-> stud_name , a ) ; s-> struct_size = ( sizeof ( * s ) + sizeof ( char ) * strlen ( s-> stud_name ) ) ; return s ; } void printStudent ( struct student * s ) { printf ( " Student_id : %d\n  " " Stud_Name : %s\n  " " Name_Length : %d\n  " " Allocated_Struct_size : %d\n \n  " , s-> stud_id , s-> stud_name , s-> name_len , s-> struct_size ) ; } int main ( ) { struct student * s1 = createStudent ( s1 , 523 , " Cherry " ) ; struct student * s2 = createStudent ( s2 , 535 , " Sanjayulsha " ) ; printStudent ( s1 ) ; printStudent ( s2 ) ; printf ( " Size of Struct student : %lu\n  " , sizeof ( struct student ) ) ; printf ( " Size of Struct pointer : %lu " , sizeof ( s1 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * p = ( int [ ] ) { 2 , 4 , 6 } ; printf ( " %d %d %d " , p [ 0 ] , p [ 1 ] , p [ 2 ] ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; void printPoint ( struct Point p ) { printf ( " %d , %d " , p.x , p.y ) ; } int main ( ) { printPoint ( ( struct Point ) { 2 , 3 } ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * ptr = ( int * ) malloc ( 10 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( void ) { int * ptr = ( int * ) malloc ( 10 ) ; realloc ( ptr , 0 ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp = fopen ( " test.txt " , " r " ) ; int ch = getc ( fp ) ; while ( ch ! = EOF ) { putchar ( ch ) ; ch = getc ( fp ) ; } if ( feof ( fp ) ) printf ( " \n  End of file reached. " ) ; else printf ( " \n  Something went wrong. " ) ; fclose ( fp ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> struct person { int id ; char fname [ 20 ] ; char lname [ 20 ] ; } ; int main ( ) { FILE * outfile ; outfile = fopen ( " person.dat " , " w " ) ; if ( outfile = = NULL ) { fprintf ( stderr , " \n Error opend file\n  " ) ; exit ( 1 ) ; } struct person input1 = { 1 , " rohan " , " sharma " } ; struct person input2 = { 2 , " mahendra " , " dhoni " } ; fwrite ( & input1 ; , sizeof ( struct person ) , 1 , outfile ) ; fwrite ( & input2 ; , sizeof ( struct person ) , 1 , outfile ) ; if ( fwrite ! = 0 ) printf ( " contents to file written successfully !\n  " ) ; else printf ( " error writing file !\n  " ) ; fclose ( outfile ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct person { int id ; char fname [ 20 ] ; char lname [ 20 ] ; } ; int main ( ) { FILE * infile ; struct person input ; infile = fopen ( " person.dat " , " r " ) ; if ( infile = = NULL ) { fprintf ( stderr , " \n Error opening file\n  " ) ; exit ( 1 ) ; } while ( fread ( & input ; , sizeof ( struct person ) , 1 , infile ) ) printf ( " id = %d name = %s %s\n  " , input.id , input.fname , input.lname ) ; fclose ( infile ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp ; fpos_t position ; fp = fopen ( " myfile.txt " , " w + " ) ; fgetpos ( fp , & position ; ) ; fputs ( " HelloWorld! " , fp ) ; fsetpos ( fp , & position ; ) ; fputs ( " geeksforgeeks " , fp ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char str [ ] = " Hello GeeksforGeeks " ; int i = 0 ; FILE * tmp = tmpfile ( ) ; if ( tmp = = NULL ) { puts ( " Unable to create temp file " ) ; return 0 ; } puts ( " Temporary file is created\n  " ) ; while ( str [ i ] ! = '\0' ) { fputc ( str [ i ] , tmp ) ; i + + ; } rewind ( tmp ) ; while ( !feof ( tmp ) ) putchar ( fgetc ( tmp ) ) ; }
#include <stdio.h> int main ( ) { FILE * fp = fopen ( " test.txt " , " r " ) ; if ( fp = = NULL ) return 0 ; do { char c = fgetc ( fp ) ; if ( feof ( fp ) ) break ; printf ( " %c " , c ) ; } while ( 1 ) ; fclose ( fp ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int i = 0 ; FILE * fp = fopen ( " output.txt " , " w " ) ; if ( fp = = NULL ) return 0 ; char string [ ] = " good bye " , received_string [ 20 ] ; for ( i = 0 ; string [ i ] ! = '\0' ; i + + ) fputc ( string [ i ] , fp ) ; fclose ( fp ) ; fp = fopen ( " output.txt " , " r " ) ; fgets ( received_string , 20 , fp ) ; printf ( " %s " , received_string ) ; fclose ( fp ) ; return 0 ; }
#include <stdio.h> #include <time.h> void fun ( ) { printf ( " fun ( ) starts \n  " ) ; printf ( " Press enter to stop fun \n  " ) ; while ( 1 ) { if ( getchar ( ) ) break ; } printf ( " fun ( ) ends \n  " ) ; } int main ( ) { clock_t t ; t = clock ( ) ; fun ( ) ; t = clock ( ) - t ; double time_taken = ( ( double ) t ) / CLOCKS_PER_SEC ; printf ( " fun ( ) took %f seconds to execute \n  " , time_taken ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int comparator ( const void * p , const void * q ) { int l = * ( const int * ) p ; int r = * ( const int * ) q ; if ( ( l & 1 ) & & ( r & 1 ) ) return ( r-l ) ; if ( ! ( l & 1 ) & & ! ( r & 1 ) ) return ( l-r ) ; if ( ! ( l & 1 ) ) return 1 ; return -1 ; } void printArr ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; + + i ) printf ( " %d " , arr [ i ] ) ; } int main ( ) { int arr [ ] = { 1 , 6 , 5 , 2 , 3 , 9 , 4 , 7 , 8 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; qsort ( ( void * ) arr , size , sizeof ( arr [ 0 ] ) , comparator ) ; printf ( " Output array is\n  " ) ; printArr ( arr , size ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { printf ( " Smallest positive floating point number : %e\n  " , nextafter ( 0.0 , 1.0 ) ) ; printf ( " Largest negative floating point number : %e\n  " , nextafter ( 0.0 , -1.0 ) ) ; printf ( " Largest positive floating point number smaller than 0.5 : %e\n  " , nextafter ( 0.5 , 0.0 ) ) ; printf ( " Smallest positive floating point number : %e\n  " , nexttoward ( 0.0 , 1.0 ) ) ; printf ( " Largest negative floating point number : %e\n  " , nexttoward ( 0.0 , -1.0 ) ) ; printf ( " Largest positive floating point number smaller than 0.5 : %e\n  " , nexttoward ( 0.5 , 0.0 ) ) ; return ( 0 ) ; }
#include <stdio.h> #include <string.h> #define IS_STR_EMPTY ( str ) \ do { \ __label__ empty , not_empty , exit ; \ if ( strlen ( str ) ) \ goto not_empty ; \ else \ goto empty ; \ \ not_empty : \ printf ( " string = %s\n  " , str ) ; \ goto exit ; \ empty : \ printf ( " string is empty\n  " ) ; \ exit : ; \ } while ( 0 ) ; \ int main ( ) { char string [ 20 ] = { '\0' } ; IS_STR_EMPTY ( string ) ; strcpy ( string , " geeksForgeeks " ) ; IS_STR_EMPTY ( string ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <pthread.h> int main ( ) { size_t stksize ; pthread_attr_t atr ; pthread_attr_getstacksize ( & atr ; , & stksize ; ) ; printf ( " Current stack size - > %d\n  " , stksize ) ; pthread_attr_setstacksize ( & atr ; , 320000034 ) ; pthread_attr_getstacksize ( & atr ; , & stksize ; ) ; printf ( " New stack size-> %d\n  " , stksize ) ; return 0 ; }
#include <netdb.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <sys / socket.h> #define MAX 80 #define PORT 8080 #define SA struct sockaddr void func ( int sockfd ) { char buff [ MAX ] ; int n ; for ( ; ; ) { bzero ( buff , sizeof ( buff ) ) ; printf ( " Enter the string : " ) ; n = 0 ; while ( ( buff [ n + + ] = getchar ( ) ) ! = '\n ' ) ; write ( sockfd , buff , sizeof ( buff ) ) ; bzero ( buff , sizeof ( buff ) ) ; read ( sockfd , buff , sizeof ( buff ) ) ; printf ( " From Server : %s " , buff ) ; if ( ( strncmp ( buff , " exit " , 4 ) ) = = 0 ) { printf ( " Client Exit...\n  " ) ; break ; } } } int main ( ) { int sockfd , connfd ; struct sockaddr_in servaddr , cli ; sockfd = socket ( AF_INET , SOCK_STREAM , 0 ) ; if ( sockfd = = -1 ) { printf ( " socket creation failed...\n  " ) ; exit ( 0 ) ; } else printf ( " Socket successfully created..\n  " ) ; bzero ( & servaddr ; , sizeof ( servaddr ) ) ; servaddr.sin_family = AF_INET ; servaddr.sin_addr.s_addr = inet_addr ( " 127.0.0.1 " ) ; servaddr.sin_port = htons ( PORT ) ; if ( connect ( sockfd , ( SA * ) & servaddr ; , sizeof ( servaddr ) ) ! = 0 ) { printf ( " connection with the server failed...\n  " ) ; exit ( 0 ) ; } else printf ( " connected to the server..\n  " ) ; func ( sockfd ) ; close ( sockfd ) ; }
#include <stdio.h> int main ( void ) { printf ( " Welcome to GeeksforGeeks " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Welcome to GeeksforGeeks " ) ; return 0 ; }
#include <iostream> using namespace std ; int global_Var = 42 ; void changePointerValue ( int * pp ) { pp = & global ; _Var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Passing Pointer to function : " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; changePointerValue ( ptr_to_var ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; int global_var = 42 ; void changePointerValue ( int * * ptr_ptr ) { * ptr_ptr = & global ; _var ; } int main ( ) { int var = 23 ; int * pointer_to_var = & var ; cout < < " Passing a pointer to a pointer to function " < < endl ; cout < < " Before : " < < * pointer_to_var < < endl ; changePointerValue ( & pointer ; _to_var ) ; cout < < " After : " < < * pointer_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; void fun ( int & x ; ) { x = 20 ; } int main ( ) { int x = 10 ; fun ( x ) ; cout < < " New value of x is " < <x ; return 0 ; }
#include <iostream> using namespace std ; int gobal_var = 42 ; void changeReferenceValue ( int * & pp ) { pp = & gobal ; _var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Passing a Reference to a pointer to function " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; changeReferenceValue ( ptr_to_var ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; int global_var = 42 ; int * returnPointerValue ( ) { return & global ; _var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Return a pointer from a function " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; ptr_to_var = returnPointerValue ( ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <iostream> using namespace std ; int global_var = 42 ; int & ReturnReference ( ) { return global_var ; } int main ( ) { int var = 23 ; int * ptr_to_var = & var ; cout < < " Returing a Reference " < < endl ; cout < < " Before : " < < * ptr_to_var < < endl ; ptr_to_var = & ReturnReference ; ( ) ; cout < < " After : " < < * ptr_to_var < < endl ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 50 ] = " geeksforgeeks " ; printf ( " The given string is = %s\n  " , str ) ; printf ( " After reversing string is = %s " , strrev ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ 50 ] = " 123456789 " ; printf ( " The given string is = %s\n  " , str ) ; printf ( " After reversing string is = %s " , strrev ( str ) ) ; return 0 ; }
#include <stdio.h> struct s { int i ; char ch ; double d ; } ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> #pragma pack ( 1 ) struct s { int i ; char ch ; double d ; } ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> struct s { int i ; char ch ; double d ; } __attribute__ ( ( packed ) ) ; int main ( ) { struct s A ; printf ( " Size of A is : %ld " , sizeof ( A ) ) ; }
#include <stdio.h> void func1 ( ) ; void func2 ( ) ; #pragma startup func1 #pragma exit func2 void func1 ( ) { printf ( " Inside func1 ( ) \n  " ) ; } void func2 ( ) { printf ( " Inside func2 ( ) \n  " ) ; } int main ( ) { printf ( " Inside main ( ) \n  " ) ; return 0 ; }
#include <stdio.h> void func1 ( ) ; void func2 ( ) ; void __attribute__ ( ( constructor ) ) func1 ( ) ; void __attribute__ ( ( destructor ) ) func2 ( ) ; void func1 ( ) { printf ( " Inside func1 ( ) \n  " ) ; } void func2 ( ) { printf ( " Inside func2 ( ) \n  " ) ; } int main ( ) { printf ( " Inside main ( ) \n  " ) ; return 0 ; }
#include <stdio.h> #pragma warn -rvl #pragma warn -par #pragma warn -rch int show ( int x ) { printf ( " GEEKSFORGEEKS " ) ; } int main ( ) { show ( 10 ) ; return 0 ; }
#include <stdio.h> #pragma GCC poison printf int main ( ) { int a = 10 ; if ( a = = 10 ) { printf ( " GEEKSFORGEEKS " ) ; } else printf ( " bye " ) ; return 0 ; }
#include <stdio.h> inline int foo ( ) { return 2 ; } int main ( ) { int ret ; ret = foo ( ) ; printf ( " Output is : %d\n  " , ret ) ; return 0 ; }
#include <stdio.h> static inline int foo ( ) { return 2 ; } int main ( ) { int ret ; ret = foo ( ) ; printf ( " Output is : %d\n  " , ret ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float a ; clock_t time_req ; time_req = clock ( ) ; for ( int i = 0 ; i <200000 ; i + + ) { a = log ( i * i * i * i ) ; } time_req = clock ( ) - time_req ; cout < < " Processor time taken for multiplication : " < < ( float ) time_req / CLOCKS_PER_SEC < < " seconds " < < endl ; time_req = clock ( ) ; for ( int i = 0 ; i <200000 ; i + + ) { a = log ( pow ( i , 4 ) ) ; } time_req = clock ( ) - time_req ; cout < < " Processor time taken in pow function : " < < ( float ) time_req / CLOCKS_PER_SEC < < " seconds " < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { const int var = 10 ; var = 15 ; printf ( " var = %d\n  " , var ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { const int var = 10 ; int * ptr = & var ; * ptr = 12 ; printf ( " var = %d\n  " , var ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { time_t start , end ; time ( & start ; ) ; ios_base : : sync_with_stdio ( false ) ; fun ( ) ; time ( & end ; ) ; double time_taken = double ( end - start ) ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 5 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { clock_t start , end ; start = clock ( ) ; fun ( ) ; end = clock ( ) ; double time_taken = double ( end - start ) / double ( CLOCKS_PER_SEC ) ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 5 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <bits / stdc + + .h> #include <sys / time.h> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { struct timeval start , end ; gettimeofday ( & start ; , NULL ) ; ios_base : : sync_with_stdio ( false ) ; fun ( ) ; gettimeofday ( & end ; , NULL ) ; double time_taken ; time_taken = ( end.tv_sec - start.tv_sec ) * 1e6 ; time_taken = ( time_taken + ( end.tv_usec - start.tv_usec ) ) * 1e-6 ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 6 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <bits / stdc + + .h> #include <sys / time.h> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { struct timespec start , end ; clock_gettime ( CLOCK_MONOTONIC , & start ; ) ; ios_base : : sync_with_stdio ( false ) ; fun ( ) ; clock_gettime ( CLOCK_MONOTONIC , & end ; ) ; double time_taken ; time_taken = ( end.tv_sec - start.tv_sec ) * 1e9 ; time_taken = ( time_taken + ( end.tv_nsec - start.tv_nsec ) ) * 1e-9 ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 9 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <bits / stdc + + .h> #include <chrono> using namespace std ; void fun ( ) { for ( int i = 0 ; i <10 ; i + + ) { } } int main ( ) { auto start = chrono : : high_resolution_clock : : now ( ) ; ios_base : : sync_with_stdio ( false ) ; fun ( ) ; auto end = chrono : : high_resolution_clock : : now ( ) ; double time_taken = chrono : : duration_cast <chrono : : nanoseconds> ( end - start ) .count ( ) ; time_taken * = 1e-9 ; cout < < " Time taken by program is : " < < fixed < < time_taken < < setprecision ( 9 ) ; cout < < " sec " < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " enter something\n  " ) ; scanf ( " %s " , str ) ; printf ( " you entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " enter something\n  " ) ; gets ( str ) ; printf ( " you entered : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; printf ( " Enter something\n  " ) ; scanf ( " % [ ^\n  ] s " , str ) ; printf ( " %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char ch [ ] = { 'g' , 'e' , 'e' , 'k' , 's' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " geeks " ; printf ( " Length of string is : %d " , strlen ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char * str = " geeks " ; printf ( " Length of string is : %d " , strlen ( str ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( x + + ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( int [ x + + ] ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 3 ; printf ( " %d\n  " , sizeof ( int [ + + x ] ) ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> #define x1 1 #define x2 x1 , x1 #define x4 x2 , x2 #define x8 x4 , x4 #define x16 x8 , x8 #define x32 x16 , x16 int main ( void ) { int num [ ] = { x32 , x8 , x4 , x1 } ; int size = sizeof ( num ) / sizeof ( int ) ; printf ( " The size of the array is %d\n  " , size ) ; printf ( " The value of element in the array at index 5 is %d " , num [ 4 ] ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int size = 6 ; int val = 1 ; int arr [ size ] ; int i ; for ( i = 0 ; i < size ; i + + ) { arr [ i ] = val ; } printf ( " The array is : " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { char ch ; ch = 'g' ; printf ( " %c in uppercase is represented as %c " , ch , toupper ( ch ) ) ; return 0 ; }
#include <ctype.h> #include <stdio.h> int main ( ) { int j = 0 ; char str [ ] = " geekforgeeks\n  " ; char ch ; while ( str [ j ] ) { ch = str [ j ] ; putchar ( toupper ( ch ) ) ; j + + ; } return 0 ; }
#include <iostream> void init ( int a = 1 , int b = 2 , int c = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a = 1 , int b = 2 , int c = 3 ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> void init ( int a = 1 , int b = 2 , int c = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a , int b , int c ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> void init ( int = 1 , int = 2 , int = 3 ) ; int main ( ) { init ( ) ; return 0 ; } void init ( int a , int b , int c ) { std : : cout < < a < < ' ' < < b < < ' ' < < c ; }
#include <iostream> using namespace std ; int main ( ) { float var = 37.66666 ; printf ( " %.2f " , var ) ; return 0 ; }
#include <iostream> using namespace std ; float round ( float var ) { float value = ( int ) ( var * 100 + .5 ) ; return ( float ) value / 100 ; } int main ( ) { float var = 37.66666 ; cout < < round ( var ) ; return 0 ; }
#include <iostream> using namespace std ; float round ( float var ) { char str [ 40 ] ; sprintf ( str , " %.2f " , var ) ; sscanf ( str , " %f " , & var ; ) ; return var ; } int main ( ) { float var = 37.66666 ; cout < < round ( var ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 012 ; printf ( " %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " 31\01267 " ; printf ( " %s " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " 31\12367 " ; printf ( " %s " , str ) ; printf ( " \n  " ) ; char str2 [ ] = " 11\77967 " ; printf ( " %s " , str2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 1 ; char b = 'G' ; double c = 3.14 ; printf ( " Hello World!\n  " ) ; printf ( " Hello! I am a character. My value is %c and " " my size is %lu byte.\n  " , b , sizeof ( char ) ) ; printf ( " Hello! I am an integer. My value is %d and " " my size is %lu bytes.\n  " , a , sizeof ( int ) ) ; printf ( " Hello! I am a double floating point variable. " " My value is %lf and my size is %lu bytes.\n  " , c , sizeof ( double ) ) ; printf ( " Bye! See you soon. : ) \n  " ) ; return 0 ; }
#include <stdbool.h> int main ( ) { bool arr [ 2 ] = { true , false } ; return 0 ; }
#include <stdio.h> int fun ( ) { static int count = 0 ; count + + ; return count ; } int main ( ) { printf ( " %d " , fun ( ) ) ; printf ( " %d " , fun ( ) ) ; return 0 ; }
#include <stdio.h> int fun ( ) { int count = 0 ; count + + ; return count ; } int main ( ) { printf ( " %d " , fun ( ) ) ; printf ( " %d " , fun ( ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { static int x ; int y ; printf ( " %d \n  %d " , x , y ) ; }
#include <stdio.h> int initializer ( void ) { return 50 ; } int main ( ) { static int i = initializer ( ) ; printf ( " value of i = %d " , i ) ; getchar ( ) ; return 0 ; }
#include <stdio.h> #define getName ( var ) #var int main ( ) { int myVar ; printf ( " %s " , getName ( myVar ) ) ; return 0 ; }
#include <stdarg.h> #include <stdio.h> int min ( int arg_count , ... ) { int i ; int min , a ; va_list ap ; va_start ( ap , arg_count ) ; min = va_arg ( ap , int ) ; for ( i = 2 ; i < = arg_count ; i + + ) if ( ( a = va_arg ( ap , int ) ) < min ) min = a ; va_end ( ap ) ; return min ; } int main ( ) { int count = 5 ; printf ( " Minimum value is %d " , min ( count , 12 , 67 , 6 , 7 , 100 ) ) ; return 0 ; }
#include <stdarg.h> #include <stdio.h> int average ( int num , ... ) { va_list valist ; int sum = 0 , i ; va_start ( valist , num ) ; for ( i = 0 ; i < num ; i + + ) sum + = va_arg ( valist , int ) ; va_end ( valist ) ; return sum / num ; } int main ( ) { printf ( " Average of { 2 , 3 , 4 } = %d\n  " , average ( 2 , 3 , 4 ) ) ; printf ( " Average of { 3 , 5 , 10 , 15 } = %d\n  " , average ( 3 , 5 , 10 , 15 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { char buffer [ 50 ] ; int a = 10 , b = 20 , c ; c = a + b ; sprintf ( buffer , " Sum of %d and %d is %d " , a , b , c ) ; printf ( " %s " , buffer ) ; return 0 ; }
#include <stdio.h> #include <pthread.h> #include <semaphore.h> #include <unistd.h> sem_t mutex ; void * thread ( void * arg ) { sem_wait ( & mutex ; ) ; printf ( " \n Entered..\n  " ) ; sleep ( 4 ) ; printf ( " \n Just Exiting...\n  " ) ; sem_post ( & mutex ; ) ; } int main ( ) { sem_init ( & mutex ; , 0 , 1 ) ; pthread_t t1 , t2 ; pthread_create ( & t1 ; , NULL , thread , NULL ) ; sleep ( 2 ) ; pthread_create ( & t2 ; , NULL , thread , NULL ) ; pthread_join ( t1 , NULL ) ; pthread_join ( t2 , NULL ) ; sem_destroy ( & mutex ; ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; printf ( " Value of a is %d\n  " , a ) ; a + = 10 ; printf ( " Value of a is %d\n  " , a ) ; a - = 10 ; printf ( " Value of a is %d\n  " , a ) ; a * = 10 ; printf ( " Value of a is %d\n  " , a ) ; a / = 10 ; printf ( " Value of a is %d\n  " , a ) ; return 0 ; }
#include <stdio.h> enum week { Mon , Tue , Wed , Thur , Fri , Sat , Sun } ; int main ( ) { enum week day ; day = Wed ; printf ( " %d " , day ) ; return 0 ; }
#include <stdio.h> enum year { Jan , Feb , Mar , Apr , May , Jun , Jul , Aug , Sep , Oct , Nov , Dec } ; int main ( ) { int i ; for ( i = Jan ; i < = Dec ; i + + ) printf ( " %d " , i ) ; return 0 ; }
#include <stdio.h> enum State { Working = 1 , Failed = 0 , Freezed = 0 } ; int main ( ) { printf ( " %d , %d , %d " , Working , Failed , Freezed ) ; return 0 ; }
#include <stdio.h> enum day { sunday , monday , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum day d = thursday ; printf ( " The day number stored in d is %d " , d ) ; return 0 ; }
#include <stdio.h> enum day { sunday = 1 , monday , tuesday = 5 , wednesday , thursday = 10 , friday , saturday } ; int main ( ) { printf ( " %d %d %d %d %d %d %d " , sunday , monday , tuesday , wednesday , thursday , friday , saturday ) ; return 0 ; }
#include <stdio.h> enum day { sunday = 1 , tuesday , wednesday , thursday , friday , saturday } ; int main ( ) { enum day d = thursday ; printf ( " The day number stored in d is %d " , d ) ; return 0 ; }
#include <stdio.h> enum State { WORKING = 0 , FAILED , FREEZED } ; enum State currState = 2 ; enum State FindState ( ) { return currState ; } int main ( ) { ( FindState ( ) = = WORKING ) ? printf ( " WORKING " ) : printf ( " NOT WORKING " ) ; return 0 ; }
#include <iostream> using namespace std ; constexpr long int fib ( int n ) { return ( n < = 1 ) ? n : fib ( n-1 ) + fib ( n-2 ) ; } int main ( ) { const long int res = fib ( 30 ) ; cout < < res ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Rectangle { int _h , _w ; public : constexpr Rectangle ( int h , int w ) : _h ( h ) , _w ( w ) { } constexpr int getArea ( ) { return _h * _w ; } } ; int main ( ) { constexpr Rectangle obj ( 10 , 20 ) ; cout < < obj.getArea ( ) ; return 0 ; }
#include <cerrno> #include <clocale> #include <cmath> #include <cstring> #include <iostream> using namespace std ; int main ( ) { double not_valid = log ( -1.0 ) ; if ( errno = = EDOM ) { cout < < " Value of errno is : " < < errno < < '\n ' ; cout < < " log ( -1 ) is not valid : " < < strerror ( errno ) < < '\n ' ; } return 0 ; }
#include <cerrno> #include <clocale> #include <cmath> #include <cstring> #include <iostream> using namespace std ; int main ( ) { double not_valid = sqrt ( -100 ) ; if ( errno = = EDOM ) { cout < < " Value of errno is : " < < errno < < '\n ' ; cout < < " -100 is not valid argument for square " < < " root function : " < < strerror ( errno ) < < '\n ' ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x ; double res ; x = 5.000000 ; res = log ( x ) ; if ( errno = = ERANGE ) { cout < < " Log ( " < < x < < " ) is out of range\n  " ; } else { cout < < " Log ( " < < x < < " ) = " < < res < < endl ; } x = 10.00000 ; res = log ( x ) ; if ( errno = = ERANGE ) { cout < < " Log ( " < < x < < " ) is out of range\n  " ; } else { cout < < " Log ( " < < x < < " ) = " < < res < < endl ; } x = 0.000000 ; res = log ( x ) ; if ( errno = = ERANGE ) { cout < < " Log ( " < < x < < " ) is out of range\n  " ; } else { cout < < " Log ( " < < x < < " ) = " < < res < < endl ; } return 0 ; }
#include " stdio.h " int main ( ) { printf ( " %d %d %d " , sizeof ( float ) , sizeof ( double ) , sizeof ( long double ) ) ; return 0 ; }
#include " stdio.h " #define PI 3.14 int main ( ) { printf ( " %d " , sizeof ( PI ) ) ; return 0 ; }
#include " stdio.h " int main ( ) { printf ( " %d %d " , sizeof ( 3.14F ) , sizeof ( 3.14L ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float b = 6.412355 ; int a = 3 ; printf ( " %. * f\n  " , a , b ) ; a = 5 ; printf ( " %. * f\n  " , a , b ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; cout < < " x = " < < x < < endl < < " y = " < < y < < endl < < " z = " < < z < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; cout < < " Sum = " < < sum ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { float f = 3.5 ; int b = static_cast <int> ( f ) ; cout < < b ; }
#include <stdio.h> #include <stdlib.h> a , b , arr [ 3 ] ; int main ( i ) { printf ( " a = %d , b = %d\n \n  " , a , b ) ; printf ( " arr [ 0 ] = %d , \n arr [ 1 ] = %d , \n arr [ 2 ] = %d , " " \n \n  " , arr [ 0 ] , arr [ 1 ] , arr [ 2 ] ) ; printf ( " i = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 } ; int i ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " arr [ %d ] = %d\n  " , i , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char a = 278 ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = -129 ; printf ( " %d " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 100000 ] ; int i , number_of_digits ; scanf ( " %d " , & number ; _of_digits ) ; for ( i = 0 ; i < number_of_digits ; i + + ) { scanf ( " %1d " , & a ; [ i ] ) ; } for ( i = 0 ; i < number_of_digits ; i + + ) printf ( " %d " , a [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a [ 100000 ] ; int i , count ; scanf ( " %d " , & count ; ) ; for ( i = 0 ; i < count ; i + + ) { scanf ( " %3d " , & a ; [ i ] ) ; } for ( i = 0 ; i < count ; i + + ) printf ( " %d " , a [ i ] ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( float s , float t ) { cout < < " Function with float called " ; } void test ( int s , int t ) { cout < < " Function with int called " ; } int main ( ) { test ( 3.5 , 5.6 ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( float s , float t ) { cout < < " Function with float called " ; } void test ( int s , int t ) { cout < < " Function with int called " ; } int main ( ) { test ( 3.5f , 5.6f ) ; return 0 ; }
#include <stdio.h> #define MAX 100 int main ( ) { float x = 123.4567 ; char buf [ MAX ] ; gcvt ( x , 6 , buf ) ; printf ( " buffer is : %s\n  " , buf ) ; return 0 ; }
#include <stdio.h> void divide ( float x , float y ) { char buffer [ 20 ] ; float z ; z = x / y ; printf ( " %f " , z ) ; gcvt ( x / y , 10 , buffer ) ; printf ( " \n  %s\n  " , buffer ) ; } int main ( ) { float x = 2.0f , y = 3.0f ; divide ( x , y ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str1 , string str2 ) { string : : size_type ch = str1.find_first_not_of ( str2 ) ; cout < < " First unmatched character : " ; cout < < str1 [ ch ] ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; cout < < " String to be looked in : " < < str2 < < endl ; find_first_not_ofDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str1 , string str2 ) { string : : size_type ch = str1.find_first_not_of ( str2 , 3 ) ; cout < < " First unmatched character : " ; cout < < str1 [ ch ] ; } int main ( ) { string str1 ( " geeKsforgeeks " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; cout < < " String to be looked in : " < < str2 < < endl ; find_first_not_ofDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( " geeksforgeeks " ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( " geeksForgeeks " , 5 ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( 'G' ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( 'G' , 6 ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; void find_first_not_ofDemo ( string str ) { string : : size_type ch = str.find_first_not_of ( " svmnist " , 4 , 3 ) ; cout < < " First unmatched character : " ; cout < < str [ ch ] ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; find_first_not_ofDemo ( str ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'x' ; } catch ( int x ) { cout < < " Caught int " < < x ; } catch ( ... ) { cout < < " Defaule catch block " ; } }
#include <iostream> using namespace std ; class MyExcept1 { } ; class MyExcept2 { public : MyExcept2 ( const MyExcept1 & e ; ) { cout < < " Conversion constructor called " ; } } ; int main ( ) { try { MyExcept1 myexp1 ; throw myexp1 ; } catch ( MyExcept2 e2 ) { cout < < " Caught MyExcept2 " < < endl ; } catch ( ... ) { cout < < " Defaule catch block " < < endl ; } return 0 ; }
#include <stdio.h> int main ( ) { FILE * fp1 , * fp2 ; char c ; fp1 = fopen ( " geeky.txt " , " r " ) ; fp2 = fopen ( " outgeeky.txt " , " w " ) ; fscanf ( fp1 , " %c " , & c ; ) ; fprintf ( fp2 , " %c " , c ) ; return 0 ; }
#include <type_traits> #include <iostream> #include <array> #include <string> using namespace std ; int main ( ) { cout < < " Is Integer an array? : " < < is_array <int> : : value < < endl ; cout < < " Is Array an array? : " < < is_array <int [ 10 ] > : : value < < endl ; cout < < " Is 2D Array an array? : " < < is_array <int [ 10 ] [ 10 ] > : : value < < endl ; cout < < " Is String an array? : " < < is_array <string> : : value < < endl ; cout < < " Is Character Array an array? : " < < is_array <char [ 10 ] > : : value < < endl ; cout < < " Is Array class type an array? : " < < is_array <array <int , 3> > : : value < < endl ; cout < < endl ; cout < < " Is 2D array same as 1D array? : " < < is_same <int [ 10 ] , int [ 10 ] [ 10 ] > : : value < < endl ; cout < < " Is Character array same as Integer array? : " < < is_same <int [ 10 ] , char [ 10 ] > : : value < < endl ; cout < < " Is 1D array same as 1D array ( Different sizes ) ? : " < < is_same <int [ 10 ] , int [ 20 ] > : : value < < endl ; cout < < " Is 1D array same as 1D array? ( Same sizes ) : " < < is_same <int [ 10 ] , int [ 10 ] > : : value < < endl ; return 0 ; }
#include <type_traits> #include <iostream> using namespace std ; int main ( ) { cout < < " The rank of integer is : " < < rank <int> : : value < < endl ; cout < < " The rank of 1D integer array is : " < < rank <int [ 10 ] > : : value < < endl ; cout < < " The rank of 2D integer array is : " < < rank <int [ 20 ] [ 10 ] > : : value < < endl ; cout < < " The rank of 3D integer array is : " < < rank <int [ 20 ] [ 10 ] [ 40 ] > : : value < < endl ; cout < < " The rank of 1D character array is : " < < rank <char [ 10 ] > : : value < < endl ; cout < < endl ; }
#include <type_traits> #include <iostream> using namespace std ; int main ( ) { cout < < " The extent of 1st dimension of 3D integer array is : " ; cout < < extent <int [ 20 ] [ 10 ] [ 40 ] , 0> : : value < < endl ; cout < < " The extent of 2nd dimension of 3D integer array is : " ; cout < < extent <int [ 20 ] [ 10 ] [ 40 ] , 1> : : value < < endl ; cout < < " The extent of 3rd dimension of 3D integer array is : " ; cout < < extent <int [ 20 ] [ 10 ] [ 40 ] , 2> : : value < < endl ; cout < < " The extent of 4th dimension of 3D integer array is : " ; cout < < extent <int [ 20 ] [ 10 ] [ 40 ] , 3> : : value < < endl ; cout < < endl ; cout < < " The rank after removing 1 extent is : " ; cout < < rank <remove_extent <int [ 20 ] [ 10 ] [ 30 ] > : : type> : : value < < endl ; cout < < " The extent of 1st after removing 1 extent is : " ; cout < < extent <remove_extent <int [ 20 ] [ 10 ] [ 30 ] > : : type> : : value < < endl ; cout < < endl ; cout < < " The rank after removing all extents is : " ; cout < < rank <remove_all_extents <int [ 20 ] [ 10 ] [ 30 ] > : : type> : : value < < endl ; cout < < " The extent of 1st after removing all extents is : " ; cout < < extent <remove_all_extents <int [ 20 ] [ 10 ] [ 30 ] > : : type> : : value < < endl ; cout < < endl ; }
#include <iostream> #include <limits.h> #include <float.h> using namespace std ; int main ( ) { cout < < " char ranges from : " < < CHAR_MIN < < " to " < < CHAR_MAX ; cout < < " \n \n short char ranges from : " < < SCHAR_MIN < < " to " < < SCHAR_MAX ; cout < < " \n \n unsigned char ranges from : " < < 0 < < " to " < < UCHAR_MAX ; cout < < " \n \n \n short int ranges from : " < < SHRT_MIN < < " to " < < SHRT_MAX ; cout < < " \n \n unsigned short int ranges from : " < < 0 < < " to " < < USHRT_MAX ; cout < < " \n \n int ranges from : " < < INT_MIN < < " to " < < INT_MAX ; cout < < " \n \n unsigned int ranges from : " < < 0 < < " to " < < UINT_MAX ; cout < < " \n \n long int ranges from : " < < LONG_MIN < < " to " < < LONG_MAX ; cout < < " \n \n unsigned long int ranges from : " < < 0 < < " to " < < ULONG_MAX ; cout < < " \n \n long long int ranges from : " < < LLONG_MIN < < " to " < < LLONG_MAX ; cout < < " \n \n unsigned long long int ranges from : " < < 0 < < " to " < < ULLONG_MAX ; cout < < " \n \n \n float ranges from : " < < FLT_MIN < < " to " < < FLT_MAX ; cout < < " \n \n negative float ranges from : " < < -FLT_MIN < < " to " < < -FLT_MAX ; cout < < " \n \n double ranges from : " < < DBL_MIN < < " to " < < DBL_MAX ; cout < < " \n \n negative double ranges from : " < < -DBL_MIN < < " to " < < + DBL_MAX ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int fun ( int N ) { cout < < " fun ( int ) " ; } int fun ( char * s ) { cout < < " fun ( char * ) " ; } int main ( ) { fun ( NULL ) ; }
#include <stdio.h> int main ( ) { int x = NULL ; }
#include <stdio.h> int main ( ) { int x = nullptr ; }
#include <iostream> using namespace std ; int main ( ) { int * ptr = nullptr ; if ( ptr ) { cout < < " true " ; } else { cout < < " false " ; } }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { nullptr_t np1 , np2 ; if ( np1 > = np2 ) cout < < " can compare " < < endl ; else cout < < " can not compare " < < endl ; char * x = np1 ; if ( x = = nullptr ) cout < < " x is null " < < endl ; else cout < < " x is not null " < < endl ; return 0 ; }
#include <stdio.h> void swap ( int * xp , int * yp ) { int temp = * xp ; * xp = * yp ; * yp = temp ; } void selectionSort ( int arr [ ] , int n ) { int i , j , min_idx ; for ( i = 0 ; i < n - 1 ; i + + ) { min_idx = i ; for ( j = i + 1 ; j < n ; j + + ) if ( arr [ j ] < arr [ min_idx ] ) min_idx = j ; swap ( & arr ; [ min_idx ] , & arr ; [ i ] ) ; } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i + + ) printf ( " %d " , arr [ i ] ) ; printf ( " \n  " ) ; } int main ( ) { int arr [ ] = { 64 , 25 , 12 , 22 , 11 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; selectionSort ( arr , n ) ; printf ( " Sorted array : \n  " ) ; printArray ( arr , n ) ; return 0 ; }
#include <stdio.h> int power ( int x , unsigned int y ) { if ( y = = 0 ) return 1 ; if ( y % 2 = = 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; } int order ( int x ) { int n = 0 ; while ( x ) { n + + ; x = x / 10 ; } return n ; } int isArmstrong ( int x ) { int n = order ( x ) ; int temp = x , sum = 0 ; while ( temp ) { int r = temp % 10 ; sum + = power ( r , n ) ; temp = temp / 10 ; } if ( sum = = x ) return 1 ; else return 0 ; } int main ( ) { int x = 153 ; if ( isArmstrong ( x ) = = 1 ) printf ( " True\n  " ) ; else printf ( " False\n  " ) ; x = 1253 ; if ( isArmstrong ( x ) = = 1 ) printf ( " True\n  " ) ; else printf ( " False\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct Student { int roll_no ; char name [ 100 ] ; float marks ; } ; int main ( ) { int i = 0 ; char n [ 100 ] ; struct Student student [ 50 ] ; for ( i = 0 ; i < 50 ; i + + ) { printf ( " \n Enter details for Student %d " , i + 1 ) ; printf ( " \n Roll Number : " ) ; scanf ( " %d " , & student ; [ i ] .roll_no ) ; printf ( " \n Name : " ) ; scanf ( " %s " , student [ i ] .name ) ; printf ( " \n Marks : " ) ; scanf ( " %f " , & student ; [ i ] .marks ) ; } printf ( " \n Enter the name of the student whose details you need : " ) ; scanf ( " %s " , n ) ; for ( i = 0 ; i < 50 ; i + + ) { if ( strcmp ( n , student [ i ] .name ) = = 0 ) { printf ( " \n Roll Number : %d " , student [ i ] .roll_no ) ; printf ( " \n Name : %s " , student [ i ] .name ) ; printf ( " \n Marks : %f " , student [ i ] .marks ) ; break ; } } if ( i = = 50 ) printf ( " No student found with this name " ) ; }
#include <iostream> #define LIMIT 5 int main ( ) { for ( int i = 0 ; i < LIMIT ; i + + ) { std : : cout < < i < < " \n  " ; } return 0 ; }
#include <iostream> #define AREA ( l , b ) ( l * b ) int main ( ) { int l1 = 10 , l2 = 5 , area ; area = AREA ( l1 , l2 ) ; std : : cout < < " Area of rectangle is : " < < area ; return 0 ; }
#include <stdio.h> int getSum ( int n ) { int sum = 0 ; while ( n ! = 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; } int main ( ) { int n = 687 ; printf ( " %d " , getSum ( n ) ) ; return 0 ; }
#include <stdio.h> int sum_of_digit ( int n ) { if ( n = = 0 ) return 0 ; return ( n % 10 + sum_of_digit ( n / 10 ) ) ; } int main ( ) { int num = 12345 ; int result = sum_of_digit ( num ) ; printf ( " Sum of digits in %d is %d\n  " , num , result ) ; return 0 ; }
#include <cstdio> #include <cstdlib> #include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( void ) { char16_t pc16 ; char s [ ] = " G " ; mbstate_t ps { } ; int length ; length = mbrtoc16 ( & pc16 ; , s , MB_CUR_MAX , & ps ; ) ; if ( length < 0 ) { perror ( " mbrtoc16 ( ) fails to convert " ) ; exit ( -1 ) ; } cout < < " Multibyte string = " < < s < < endl ; cout < < " Length = " < < length < < endl ; printf ( " 16-bit character = 0g %02hd\n  " , pc16 ) ; }
#include <cstdio> #include <cstdlib> #include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( void ) { char16_t pc16 ; char s [ ] = " " ; mbstate_t ps { } ; int length ; length = mbrtoc16 ( & pc16 ; , s , MB_CUR_MAX , & ps ; ) ; if ( length < 0 ) { perror ( " mbrtoc16 ( ) fails to convert " ) ; exit ( -1 ) ; } cout < < " Multibyte string = " < < s < < endl ; cout < < " Length = " < < length < < endl ; printf ( " 16-bit character = 1e %04xy\n  " , pc16 ) ; }
#include <iostream> using namespace std ; template <int n> struct funStruct { enum { val = 2 * funStruct <n-1> : : val } ; } ; template <> struct funStruct <0> { enum { val = 1 } ; } ; int main ( ) { cout < < funStruct <8> : : val < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Final ; class MakeFinal { private : MakeFinal ( ) { cout < < " MakFinal constructor " < < endl ; } friend class Final ; } ; class Final : virtual MakeFinal { public : Final ( ) { cout < < " Final constructor " < < endl ; } } ; class Derived : public Final { public : Derived ( ) { cout < < " Derived constructor " < < endl ; } } ; int main ( int argc , char * argv [ ] ) { Derived d ; return 0 ; }
#include <iostream> using namespace std ; class Final ; class MakeFinal { private : MakeFinal ( ) { cout < < " MakeFinal constructor " < < endl ; } friend class Final ; } ; class Final : virtual MakeFinal { public : Final ( ) { cout < < " Final constructor " < < endl ; } } ; int main ( int argc , char * argv [ ] ) { Final f ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { cout < < sizeof ( Empty ) ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { Empty a , b ; if ( & a ; = = & b ; ) cout < < " impossible " < < endl ; else cout < < " Fine " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; int main ( ) { Empty * p1 = new Empty ; Empty * p2 = new Empty ; if ( p1 = = p2 ) cout < < " impossible " < < endl ; else cout < < " Fine " < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; class Derived : Empty { int a ; } ; int main ( ) { cout < < sizeof ( Derived ) ; return 0 ; }
#include <iostream> using namespace std ; class Empty { } ; class Derived1 : public Empty { } ; class Derived2 : virtual public Empty { } ; class Derived3 : public Empty { char c ; } ; class Derived4 : virtual public Empty { char c ; } ; class Dummy { char c ; } ; int main ( ) { cout < < " sizeof ( Empty ) " < < sizeof ( Empty ) < < endl ; cout < < " sizeof ( Derived1 ) " < < sizeof ( Derived1 ) < < endl ; cout < < " sizeof ( Derived2 ) " < < sizeof ( Derived2 ) < < endl ; cout < < " sizeof ( Derived3 ) " < < sizeof ( Derived3 ) < < endl ; cout < < " sizeof ( Derived4 ) " < < sizeof ( Derived4 ) < < endl ; cout < < " sizeof ( Dummy ) " < < sizeof ( Dummy ) < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'G' ; putchar ( ch ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { char ch = '1' ; for ( ch = '1' ; ch < = '9' ; ch + + ) putchar ( ch ) ; return ( 0 ) ; }
#include <iostream> #include <unordered_map> using namespace std ; int main ( ) { unordered_map <int , int> map = { { 1 , 3 } , { 1 , 2 } , { 3 , 1 } , { 2 , 3 } } ; for ( int j = 1 ; j < = 3 ; j + + ) { auto range = map.equal_range ( j ) ; for ( auto i = range.first ; i ! = range.second ; i + + ) { cout < < " first : " < < i-> first ; cout < < " \n second : " < < i-> second < < endl < < endl ; } } }
#include <iostream> #include <unordered_map> using namespace std ; typedef unordered_map <char , char> gfg ; int main ( ) { gfg g ; g.insert ( gfg : : value_type ( 'a' , 'b' ) ) ; g.insert ( gfg : : value_type ( 'b' , 'd' ) ) ; g.insert ( gfg : : value_type ( 'e' , 'f' ) ) ; pair <gfg : : iterator , gfg : : iterator> p1 = g.equal_range ( 'f' ) ; cout < < " search for 'f' : " ; for ( ; p1.first ! = p1.second ; + + p1.first ) { cout < < p1.first-> first < < " , " < < p1.first-> second < < endl ; } p1 = g.equal_range ( 'a' ) ; cout < < " \n search for 'a' : [ " ; for ( ; p1.first ! = p1.second ; + + p1.first ) { cout < < p1.first-> first < < " , " < < p1.first-> second < < " ] " ; } return 0 ; }
#include & lt ; iostream & gt ; using namespace std ; int main ( ) { cout & lt ; < " Hello World " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int a = 5 , b = 10 , sum ; sum = a + b ; cout < < sum ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int a = 5 , b = 10 ; if ( a > b ) cout < < a ; else cout < < b ; return 0 ; }
#include & lt ; iostream & gt ; using namespace std ; int main ( ) { cout & lt ; < " Hello World " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t dest [ 30 ] ; wchar_t src [ 30 ] ; wcscpy ( dest , L " Geekforgeeks " ) ; wcscpy ( src , L " is the best " ) ; wcscat ( dest , src ) ; wprintf ( L " %ls\n  " , dest ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d\n  " , sizeof ( char ) ) ; printf ( " %d\n  " , sizeof ( int ) ) ; printf ( " %d\n  " , sizeof ( float ) ) ; printf ( " %d " , sizeof ( double ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; double d = 10.21 ; printf ( " %d " , sizeof ( a + d ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 7 , 98 , 0 , 12 , 35 , 99 , 14 } ; printf ( " Number of elements : %d " , sizeof ( arr ) / sizeof ( arr [ 0 ] ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Example { public : int a ; void add ( Example E ) { a = a + E.a ; } } ; int main ( ) { Example E1 , E2 ; E1.a = 50 ; E2.a = 100 ; cout < < " Initial Values \n  " ; cout < < " Value of object 1 : " < < E1.a < < " \n  & object 2 : " < < E2.a < < " \n \n  " ; E2.add ( E1 ) ; cout < < " New values \n  " ; cout < < " Value of object 1 : " < < E1.a < < " \n  & object 2 : " < < E2.a < < " \n \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Example { public : int a ; Example add ( Example Ea , Example Eb ) { Example Ec ; Ec.a = Ec.a + Ea.a + Eb.a ; return Ec ; } } ; int main ( ) { Example E1 , E2 , E3 ; E1.a = 50 ; E2.a = 100 ; E3.a = 0 ; cout < < " Initial Values \n  " ; cout < < " Value of object 1 : " < < E1.a < < " , \n object 2 : " < < E2.a < < " , \n object 3 : " < < E3.a < < " \n  " ; E3 = E3.add ( E1 , E2 ) ; cout < < " New values \n  " ; cout < < " Value of object 1 : " < < E1.a < < " , \n object 2 : " < < E2.a < < " , \n object 3 : " < < E3.a < < " \n  " ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( 'a' ) ) ; return 0 ; }
#include <stdio.h> int T ; int main ( ) { struct T { double x ; } ; printf ( " %d " , sizeof ( T ) ) ; return 0 ; }
#include <iostream> using namespace std ; class Base { protected : int i ; public : Base ( int a ) { i = a ; } virtual void display ( ) { cout < < " I am Base class object , i = " < < i < < endl ; } } ; class Derived : public Base { int j ; public : Derived ( int a , int b ) : Base ( a ) { j = b ; } virtual void display ( ) { cout < < " I am Derived class object , i = " < < i < < " , j = " < < j < < endl ; } } ; void somefunc ( Base obj ) { obj.display ( ) ; } int main ( ) { Base b ( 33 ) ; Derived d ( 45 , 54 ) ; somefunc ( b ) ; somefunc ( d ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x , y , z ; x = 1 ; y = 0 ; z = 10 ; if ( ( x or y ) and y ) { cout < < " Hi , we are in if. " ; } else if ( not y or x not_eq z ) { cout < < " Hi , we are in else if. " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x , y ; x = 1 ; y = compl x ; cout < < y ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( void ) { char password [ 55 ] ; printf ( " password : \n  " ) ; int p = 0 ; do { password [ p ] = getch ( ) ; if ( password [ p ] ! = '\r' ) { printf ( " * " ) ; } p + + ; } while ( password [ p-1 ] ! = '\r' ) ; password [ p-1 ] = '\0' ; printf ( " \n You have entered %s as password. " , password ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { foo ( ) ; } int foo ( ) { printf ( " Hello " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { int const j = 20 ; int * ptr = & j ; printf ( " * ptr : %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { void * vptr ; int * iptr = vptr ; return 0 ; }
#include <stdio.h> int main ( ) { const int a ; return 0 ; }
#include <stdio.h> int main ( void ) { int new = 5 ; printf ( " %d " , new ) ; }
#include <stdio.h> int main ( ) { char * c = 333 ; printf ( " c = %u " , c ) ; return 0 ; }
#include <stdio.h> void main ( ) { printf ( " Hello World " ) ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int x = 250 ; int y = 250 ; int start_angle = 155 ; int end_angle = 300 ; int radius = 100 ; initgraph ( & gd ; , & gm ; , " " ) ; arc ( x , y , start_angle , end_angle , radius ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void write ( const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vwprintf ( format , arg ) ; va_end ( arg ) ; } int main ( ) { setlocale ( LC_ALL , " en_US.UTF-8 " ) ; wchar_t buffer [ 5 ] [ 10 ] = { L " First " , L " Second " , L " Third " , L " Fourth " , L " Fifth " } ; int k = 0 ; wprintf ( L " Some English Letters\n  " ) ; for ( wchar_t i = L'A' ; i < = L'E' ; i + + ) { write ( L " %ls : %lc\n  " , buffer [ k ] , i ) ; k + + ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void write ( const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vwprintf ( format , arg ) ; va_end ( arg ) ; } int main ( ) { setlocale ( LC_ALL , " en_US.UTF-8 " ) ; wchar_t buffer [ 5 ] [ 10 ] = { L " First " , L " Second " , L " Third " , L " Fourth " , L " Fifth " } ; int k = 0 ; wprintf ( L " Some Latin Letters\n  " ) ; for ( wchar_t i = L'\u0021' ; i < = L'\u0025' ; i + + ) { write ( L " %ls : %lc\n  " , buffer [ k ] , i ) ; k + + ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void wideMatch ( const wchar_t * ws , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswscanf ( ws , format , arg ) ; va_end ( arg ) ; } int main ( ) { setlocale ( LC_ALL , " en_US.UTF-8 " ) ; wchar_t wideS [ ] = L " GFG " ; wchar_t string [ 20 ] ; wideMatch ( wideS , L " %ls " , string ) ; wprintf ( L " Random Symbols are : \n  " ) ; for ( int i = 0 ; i < wcslen ( string ) ; i + + ) { putwchar ( string [ i ] ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void WideString ( const wchar_t * ws , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswscanf ( ws , format , arg ) ; va_end ( arg ) ; } int main ( ) { int value ; wchar_t wideS [ ] = L " 100 websites of GeekforGeeks " ; WideString ( wideS , L " %d %ls " , & value ; , wideS ) ; wprintf ( L " Best : %ls\n Quantity : %d\n  " , wideS , value ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t rs1 = 'S' ; wchar_t rs2 = 's' ; if ( iswupper ( rs1 ) ) wcout < < rs1 < < " is a uppercase character " ; else wcout < < rs1 < < " is not a uppercase character " ; wcout < < endl ; if ( iswupper ( rs2 ) ) wcout < < rs2 < < " is a uppercase character " ; else wcout < < rs2 < < " is not a uppercase character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t rs1 = 'R' ; wchar_t rs2 = '@' ; if ( iswupper ( rs1 ) ) wcout < < rs1 < < " is a uppercase character " ; else wcout < < rs1 < < " is not a uppercase character " ; wcout < < endl ; if ( iswupper ( rs2 ) ) wcout < < rs2 < < " is a uppercase character " ; else wcout < < rs2 < < " is not a uppercase character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.UTF-8 " ) ; wchar_t first = L'\u05d0' , last = L'\u05ea' ; wcout < < L " All Hebrew Alphabets : " ; for ( wchar_t i = first ; i < = last ; i + + ) { putwchar ( i ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc ; wchar_t first = 'A' , last = 'Z' ; wcout < < L " All English Alphabets : " ; for ( wc = first ; wc < = last ; + + wc ) { putwchar ( wc ) ; putwchar ( ' ' ) ; } return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = 'a' ; wchar_t ch2 = 'A' ; if ( iswlower ( ch1 ) ) wcout < < ch1 < < " is a lowercase character " ; else wcout < < ch1 < < " is not a lowercase character " ; wcout < < endl ; if ( iswlower ( ch2 ) ) wcout < < ch2 < < " is a lowercase character " ; else wcout < < ch2 < < " is not a lowercase character " ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = 'q' ; wchar_t ch2 = '?' ; if ( iswlower ( ch1 ) ) wcout < < ch1 < < " is a lowercase character " ; else wcout < < ch1 < < " is not a lowercase character " ; wcout < < endl ; if ( iswlower ( ch2 ) ) wcout < < ch2 < < " is a lowercase character " ; else wcout < < ch2 < < " is not a lowercase character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ch1 = L'\n ' ; if ( iswcntrl ( ch1 ) ) wcout < < " It is a control Character " ; else wcout < < " It is not a control Character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ch1 = L'@' ; if ( iswcntrl ( ch1 ) ) wcout < < " It is a control Character " ; else wcout < < " It is not a control Character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str [ ] = L " Switching Case " ; wcout < < L " Before transformation " < < endl ; wcout < < str < < endl ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) { if ( iswctype ( str [ i ] , wctype ( " lower " ) ) ) str [ i ] = towctrans ( str [ i ] , wctrans ( " toupper " ) ) ; else if ( iswctype ( str [ i ] , wctype ( " upper " ) ) ) str [ i ] = towctrans ( str [ i ] , wctrans ( " tolower " ) ) ; } wcout < < L " After transformation " < < endl ; wcout < < str < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str [ ] = L " gFg iS fUN " ; wcout < < L " Before transformation " < < endl ; wcout < < str < < endl ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) { if ( iswctype ( str [ i ] , wctype ( " lower " ) ) ) str [ i ] = towctrans ( str [ i ] , wctrans ( " toupper " ) ) ; else if ( iswctype ( str [ i ] , wctype ( " upper " ) ) ) str [ i ] = towctrans ( str [ i ] , wctrans ( " tolower " ) ) ; } wcout < < L " After transformation " < < endl ; wcout < < str < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { fexcept_t excepts ; feraiseexcept ( FE_DIVBYZERO ) ; fegetexceptflag ( & excepts ; , FE_ALL_EXCEPT ) ; cout < < " Exception raised -> \n  " ; if ( fetestexcept ( FE_ALL_EXCEPT ) ) { if ( fetestexcept ( FE_DIVBYZERO ) ) cout < < " FE_DIVBYZERO \n  " ; if ( fetestexcept ( FE_INEXACT ) ) cout < < " FE_INEXACT \n  " ; if ( fetestexcept ( FE_INVALID ) ) cout < < " FE_INVALID \n  " ; if ( fetestexcept ( FE_OVERFLOW ) ) cout < < " FE_OVERFLOW \n  " ; if ( fetestexcept ( FE_UNDERFLOW ) ) cout < < " FE_UNDERFLOW \n  " ; if ( fetestexcept ( FE_ALL_EXCEPT ) ) cout < < " FE_ALL_EXCEPT \n  " ; } else cout < < " None " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { fexcept_t excepts ; feraiseexcept ( FE_ALL_EXCEPT ) ; fegetexceptflag ( & excepts ; , FE_ALL_EXCEPT ) ; cout < < " Exception raised -> \n  " ; if ( fetestexcept ( FE_ALL_EXCEPT ) ) { if ( fetestexcept ( FE_DIVBYZERO ) ) cout < < " FE_DIVBYZERO \n  " ; if ( fetestexcept ( FE_INEXACT ) ) cout < < " FE_INEXACT \n  " ; if ( fetestexcept ( FE_INVALID ) ) cout < < " FE_INVALID \n  " ; if ( fetestexcept ( FE_OVERFLOW ) ) cout < < " FE_OVERFLOW \n  " ; if ( fetestexcept ( FE_UNDERFLOW ) ) cout < < " FE_UNDERFLOW \n  " ; if ( fetestexcept ( FE_ALL_EXCEPT ) ) cout < < " FE_ALL_EXCEPT \n  " ; } else cout < < " None " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 999gfg " ; wchar_t * endString ; unsigned long value = wcstoul ( string , & endString ; , 36 ) ; wcout < < L " String value given is -> " < < string < < endl ; wcout < < L " Unsigned Long Int value will be -> " < < value < < endl ; wcout < < L " End String will be-> " < < endString < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 99999999999gfg " ; wchar_t * endString ; long value = wcstol ( string , & endString ; , 35 ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; value = wcstol ( string , & endString ; , 16 ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; value = wcstol ( string , & endString ; , 12 ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str1 [ ] = L " geekforgeeks " ; ; wchar_t str2 [ ] = L " geekforgeeks " ; int print = wmemcmp ( str1 , str2 , 12 ) ; wprintf ( L " wmemcmp comparison : %ls\n  " , print ? L " not equal " : L " equal " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t str1 [ ] = L " geekforgeeks " ; ; wchar_t str2 [ ] = L " geekforgeeks " ; int first = wcsncmp ( str1 , str2 , 20 ) ; int second = wmemcmp ( str1 , str2 , 20 ) ; wprintf ( L " wcsncmp comparison : %ls\n  " , first ? L " not equal " : L " equal " ) ; wprintf ( L " wmemcmp comparison : %ls\n  " , second ? L " not equal " : L " equal " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void find ( wchar_t * ws , size_t len , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswprintf ( ws , len , format , arg ) ; va_end ( arg ) ; } int main ( ) { wchar_t ws [ 60 ] ; wchar_t str [ ] = L " \u0025 \u0026 \u0027 \u0028 \u0029 " ; find ( ws , 60 , L " Some Latin letters : %ls\n  " , str ) ; wprintf ( L " %ls " , ws ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void find ( wchar_t * ws , size_t len , const wchar_t * format , ... ) { va_list arg ; va_start ( arg , format ) ; vswprintf ( ws , len , format , arg ) ; va_end ( arg ) ; } int main ( ) { wchar_t str [ ] = L " Geek for geeks " ; wchar_t ws [ 20 ] ; find ( ws , 20 , L " GFG is : %ls\n  " , str ) ; wprintf ( L " %ls " , ws ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; wchar_t wc [ ] = L " z\u00df\u6c34\U0001f34c " ; char s [ 25 ] ; int returnV ; mbstate_t ps = mbstate_t ( ) ; for ( int i = 0 ; i < wcslen ( wc ) ; i + + ) { returnV = wcrtomb ( s , wc [ i ] , & ps ; ) ; if ( returnV ! = -1 ) cout < < " Size of " < < s < < " is " < < returnV < < " bytes " < < endl ; else cout < < " Invalid wide character " < < endl ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; wchar_t wc [ ] = L " u\u00c6\u00f5\u01b5 " ; char s [ 20 ] ; int returnV ; mbstate_t ps = mbstate_t ( ) ; for ( int i = 0 ; i < wcslen ( wc ) ; i + + ) { returnV = wcrtomb ( s , wc [ i ] , & ps ; ) ; if ( returnV ! = -1 ) cout < < " Size of " < < s < < " is " < < returnV < < " bytes " < < endl ; else cout < < " Invalid wide character " < < endl ; } return 0 ; }
#include <stdio.h> #include <graphics.h> #include <dos.h> void printMsg ( ) { int gdriver = DETECT , gmode , i ; initgraph ( & gdriver ; , & gmode ; , " C : \\Turboc3\\BGI " ) ; for ( i = 3 ; i <7 ; i + + ) { setcolor ( i ) ; settextstyle ( i , 0 , i ) ; outtextxy ( 100 , 20 * i , " Geeks " ) ; delay ( 500 ) ; } delay ( 2000 ) ; } int main ( ) { printMsg ( ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { div_t result1 = div ( 100 , 6 ) ; cout < < " Quotient of 100 / 6 = " < < result1.quot < < endl ; cout < < " Remainder of 100 / 6 = " < < result1.rem < < endl ; ldiv_t result2 = div ( 19237012L , 251L ) ; cout < < " Quotient of 19237012L / 251L = " < < result2.quot < < endl ; cout < < " Remainder of 19237012L / 251L = " < < result2.rem < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double a = 3.4 , b = 2.1 , c = 4.2 ; double ans = fma ( a , b , c ) ; cout < < " fma ( a , b , c ) = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double b = 2.1 , c = 4.2 ; long double lda = 9.4 , answer ; answer = fma ( lda , c , b ) ; cout < < " fma ( lda , c , b ) = " < < answer < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char filename [ 100 ] ; cout < < " Enter file name to compile " ; cin.getline ( filename , 100 ) ; string str = " gcc " ; str = str + " -o a.out " + filename ; const char * command = str.c_str ( ) ; cout < < " Compiling file using " < < command < < endl ; system ( command ) ; cout < < " \n Running file " ; system ( " . / a.out " ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cout < < " Hello World! " < < endl ; system ( " pause " ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { cout < < " Hello World! " < < endl ; cin.get ( ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { if ( system ( NULL ) ) cout < < " Command processor exists " ; else cout < < " Command processor doesn't exists " ; return 0 ; }
#include <stdio.h> int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( void ) { int a = 10 , b = 20 ; int m = max ( a , b ) ; printf ( " m is %d " , m ) ; return 0 ; }
#include <stdio.h> void fun ( int x ) { x = 30 ; } int main ( void ) { int x = 20 ; fun ( x ) ; printf ( " x = %d " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; s [ 0 ] = 'j' ; printf ( " \n  %s " , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * s = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { const char * s = " geeksquiz " ; printf ( " %lu " , sizeof ( s ) ) ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = '?' ; wchar_t ch2 = '3' ; if ( iswdigit ( ch1 ) ) wcout < < ch1 < < " is a digit " ; else wcout < < ch1 < < " is not a digit " ; wcout < < endl ; if ( iswdigit ( ch2 ) ) wcout < < ch2 < < " is a digit " ; else wcout < < ch2 < < " is not a digit " ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = '1' ; wchar_t ch2 = 'q' ; if ( iswdigit ( ch1 ) ) wcout < < ch1 < < " is a digit " ; else wcout < < ch1 < < " is not a digit " ; wcout < < endl ; if ( iswdigit ( ch2 ) ) wcout < < ch2 < < " is a digit " ; else wcout < < ch2 < < " is not a digit " ; return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char str [ ] = " 11.03e 0mn " ; char * end ; double number ; number = strtod ( str , & end ; ) ; cout < < " number = " < < str < < endl ; cout < < " double = " < < number < < endl ; cout < < " end string = " < < end < < endl ; return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char str [ ] = " 4.06 " ; char * end ; double number ; number = strtod ( str , & end ; ) ; cout < < " number = " < < str < < endl ; cout < < " double = " < < number < < endl ; if ( * end ) { cout < < end ; } else { cout < < " null " ; } return 0 ; }
#include <cstdlib> #include <cstring> #include <iostream> using namespace std ; int main ( ) { char str [ ] = " -89.04e-3win gfg " ; char * end ; double number ; number = strtod ( str , & end ; ) ; cout < < " str = " < < str < < endl ; cout < < " double = " < < number < < endl ; cout < < " end string = " < < end < < endl < < endl ; strcpy ( str , " 1998gupta.1204ishwar " ) ; number = strtod ( str , & end ; ) ; cout < < " str = " < < str < < endl ; cout < < " double = " < < number < < endl ; cout < < " end string = " < < end < < endl ; return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char * end ; cout < < " Infinity " < < " to double = " < < strtod ( " infinity " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; cout < < " Infpqrs " < < " to double = " < < strtod ( " Infpqrs " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; cout < < " NaN11x " < < " to double = " < < strtod ( " NaN11x " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; return 0 ; }
#include <cstdlib> #include <iostream> using namespace std ; int main ( ) { char * end ; cout < < " 99.99 " < < " to double = " < < strtod ( " 19.99 " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; cout < < " xyz1.80 " < < " to double = " < < strtod ( " xyz1.80 " , & end ; ) < < endl ; cout < < " end string = " < < end < < endl < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; public : void setX ( int x ) { this-> x = x ; } void print ( ) { cout < < " x = " < < x < < endl ; } } ; int main ( ) { Test obj ; int x = 20 ; obj.setX ( x ) ; obj.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; int y ; public : Test ( int x = 0 , int y = 0 ) { this-> x = x ; this-> y = y ; } Test & setX ; ( int a ) { x = a ; return * this ; } Test & setY ; ( int b ) { y = b ; return * this ; } void print ( ) { cout < < " x = " < < x < < " y = " < < y < < endl ; } } ; int main ( ) { Test obj1 ( 5 , 5 ) ; obj1.setX ( 10 ) .setY ( 20 ) ; obj1.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; public : Test ( int x = 0 ) { this-> x = x ; } void change ( Test * t ) { this = t ; } void print ( ) { cout < < " x = " < < x < < endl ; } } ; int main ( ) { Test obj ( 5 ) ; Test * ptr = new Test ( 10 ) ; obj.change ( ptr ) ; obj.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; int y ; public : Test ( int x = 0 , int y = 0 ) { this-> x = x ; this-> y = y ; } static void fun1 ( ) { cout < < " Inside fun1 ( ) " ; } static void fun2 ( ) { cout < < " Inside fun2 ( ) " ; this-> fun1 ( ) ; } } ; int main ( ) { Test obj ; obj.fun2 ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; int y ; public : Test ( int x = 0 , int y = 0 ) { this-> x = x ; this-> y = y ; } Test setX ( int a ) { x = a ; return * this ; } Test setY ( int b ) { y = b ; return * this ; } void print ( ) { cout < < " x = " < < x < < " y = " < < y < < endl ; } } ; int main ( ) { Test obj1 ; obj1.setX ( 10 ) .setY ( 20 ) ; obj1.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { private : int x ; int y ; public : Test ( int x = 0 , int y = 0 ) { this-> x = x ; this-> y = y ; } void setX ( int a ) { x = a ; } void setY ( int b ) { y = b ; } void destroy ( ) { delete this ; } void print ( ) { cout < < " x = " < < x < < " y = " < < y < < endl ; } } ; int main ( ) { Test obj ; obj.destroy ( ) ; obj.print ( ) ; return 0 ; }
#include <iostream> #include <array> #include <tuple> using namespace std ; int main ( ) { array <int , 6> ar = { 1 , 2 , 3 , 4 , 5 , 6 } ; cout < < " The array elemets are ( using at ( ) ) : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar.at ( i ) < < " " ; cout < < endl ; cout < < " The array elemets are ( using get ( ) ) : " ; cout < < get <0> ( ar ) < < " " < < get <1> ( ar ) < < " " ; cout < < get <2> ( ar ) < < " " < < get <3> ( ar ) < < " " ; cout < < get <4> ( ar ) < < " " < < get <5> ( ar ) < < " " ; cout < < endl ; cout < < " The array elements are ( using operator [ ] ) : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar [ i ] < < " " ; cout < < endl ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar = { 1 , 2 , 3 , 4 , 5 , 6 } ; cout < < " First element of array is : " ; cout < < ar.front ( ) < < endl ; cout < < " Last element of array is : " ; cout < < ar.back ( ) < < endl ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar = { 1 , 2 , 3 , 4 , 5 , 6 } ; cout < < " The number of array elements is : " ; cout < < ar.size ( ) < < endl ; cout < < " Maximum elements array can hold is : " ; cout < < ar.max_size ( ) < < endl ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar = { 1 , 2 , 3 , 4 , 5 , 6 } ; array <int , 6> ar1 = { 7 , 8 , 9 , 10 , 11 , 12 } ; cout < < " The first array elements before swapping are : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar [ i ] < < " " ; cout < < endl ; cout < < " The second array elements before swapping are : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar1 [ i ] < < " " ; cout < < endl ; ar.swap ( ar1 ) ; cout < < " The first array elements after swapping are : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar [ i ] < < " " ; cout < < endl ; cout < < " The second array elements after swapping are : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar1 [ i ] < < " " ; cout < < endl ; return 0 ; }
#include <iostream> #include <array> using namespace std ; int main ( ) { array <int , 6> ar ; array <int , 0> ar1 ; ar1.empty ( ) ? cout < < " Array empty " : cout < < " Array not empty " ; cout < < endl ; ar.fill ( 0 ) ; cout < < " Array after filling operation is : " ; for ( int i = 0 ; i <6 ; i + + ) cout < < ar [ i ] < < " " ; return 0 ; }
#include <iostream> using namespace std ; void findSize ( int arr [ ] ) { cout < < sizeof ( arr ) < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; void findSize ( int ( & arr ; ) [ 10 ] ) { cout < < sizeof ( arr ) < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; template <size_t n> void findSize ( int ( & arr ; ) [ n ] ) { cout < < sizeof ( int ) * n < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; return 0 ; }
#include <iostream> using namespace std ; template <typename T , size_t n> void findSize ( T ( & arr ; ) [ n ] ) { cout < < sizeof ( T ) * n < < endl ; } int main ( ) { int a [ 10 ] ; cout < < sizeof ( a ) < < " " ; findSize ( a ) ; float f [ 20 ] ; cout < < sizeof ( f ) < < " " ; findSize ( f ) ; return 0 ; }
#include <iostream> #include <cstdlib> using namespace std ; int main ( ) { int * arr = ( int * ) malloc ( sizeof ( float ) * 20 ) ; return 0 ; }
#include <iostream> #include <map> using namespace std ; int main ( ) { map < char , int > mp ; map <char , int> : : iterator it ; map <char , int> : : iterator it1 ; mp [ 'a' ] = 5 ; mp [ 'b' ] = 10 ; mp [ 'c' ] = 15 ; mp [ 'd' ] = 20 ; mp [ 'e' ] = 30 ; it = mp.find ( 'b' ) ; if ( it = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair present : " < < it-> first < < " -> " < < it-> second ; cout < < endl ; it1 = mp.find ( 'm' ) ; if ( it1 = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair present : " < < it1-> first < < " -> " < < it1-> second ; }
#include <iostream> #include <map> using namespace std ; int main ( ) { map < char , int > mp ; map <char , int> : : iterator it ; map <char , int> : : iterator it1 ; map <char , int> : : iterator it2 ; mp [ 'a' ] = 5 ; mp [ 'b' ] = 10 ; mp [ 'c' ] = 15 ; mp [ 'h' ] = 20 ; mp [ 'k' ] = 30 ; it = mp.lower_bound ( 'b' ) ; if ( it = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair returned : " < < it-> first < < " -> " < < it-> second ; cout < < endl ; it1 = mp.lower_bound ( 'd' ) ; if ( it1 = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair returned : " < < it1-> first < < " -> " < < it1-> second ; cout < < endl ; it2 = mp.lower_bound ( 'p' ) ; if ( it2 = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair returned : " < < it2-> first < < " -> " < < it2-> second ; }
#include <iostream> #include <map> using namespace std ; int main ( ) { map < char , int > mp ; map <char , int> : : iterator it ; map <char , int> : : iterator it1 ; map <char , int> : : iterator it2 ; mp [ 'a' ] = 5 ; mp [ 'b' ] = 10 ; mp [ 'c' ] = 15 ; mp [ 'h' ] = 20 ; mp [ 'k' ] = 30 ; it = mp.upper_bound ( 'b' ) ; if ( it = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair returned : " < < it-> first < < " -> " < < it-> second ; cout < < endl ; it1 = mp.upper_bound ( 'd' ) ; if ( it1 = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair returned : " < < it1-> first < < " -> " < < it1-> second ; cout < < endl ; it2 = mp.upper_bound ( 'p' ) ; if ( it2 = = mp.end ( ) ) cout < < " Key-value pair not present in map " ; else cout < < " Key-value pair returned : " < < it2-> first < < " -> " < < it2-> second ; }
#include <iostream> #include <map> using namespace std ; int main ( ) { map < char , int > mp ; pair <map <char , int> : : iterator , map <char , int> : : iterator> it ; mp [ 'a' ] = 5 ; mp [ 'b' ] = 10 ; mp [ 'c' ] = 15 ; mp [ 'h' ] = 20 ; mp [ 'k' ] = 30 ; it = mp.equal_range ( 'b' ) ; cout < < " The lower_bound of key is : " < < it.first -> first < < " -> " < < it.first -> second ; cout < < endl ; cout < < " The upper_bound of key is : " < < it.second -> first < < " -> " < < it.second -> second ; cout < < endl < < endl ; it = mp.equal_range ( 'd' ) ; cout < < " The lower_bound of key is : " < < it.first -> first < < " -> " < < it.first -> second ; cout < < endl ; cout < < " The upper_bound of key is : " < < it.second -> first < < " -> " < < it.second -> second ; }
#include <string.h> #include <iostream> using namespace std ; int main ( ) { string str = " GeeksforGeeks " ; cout < < str.size ( ) < < endl ; cout < < str.length ( ) < < endl ; cout < < strlen ( str.c_str ( ) ) < < endl ; int i = 0 ; while ( str [ i ] ! = '\0' ) { + + i ; } cout < < i < < endl ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { } cout < < i < < endl ; return 0 ; }
#include <algorithm> #include <iostream> #include <vector> int main ( ) { int first [ ] = { 5 , 10 , 15 , 20 , 25 } ; int second [ ] = { 50 , 40 , 30 , 20 , 10 } ; int n = sizeof ( first ) / sizeof ( first [ 0 ] ) ; std : : cout < < " First array contains : " ; for ( int i = 0 ; i < n ; i + + ) std : : cout < < " " < < first [ i ] ; std : : cout < < " \n  " ; std : : cout < < " Second array contains : " ; for ( int i = 0 ; i < n ; i + + ) std : : cout < < " " < < second [ i ] ; std : : cout < < " \n \n  " ; std : : vector <int> v ( 10 ) ; std : : vector <int> : : iterator it , st ; std : : sort ( first , first + 5 ) ; std : : sort ( second , second + 5 ) ; it = std : : set_symmetric_difference ( first , first + 5 , second , second + 5 , v.begin ( ) ) ; std : : cout < < " The symmetric difference has " < < ( it - v.begin ( ) ) < < " elements : \n  " ; for ( st = v.begin ( ) ; st ! = it ; + + st ) std : : cout < < ' ' < < * st ; std : : cout < < '\n ' ; return 0 ; }
#include <algorithm> #include <iostream> #include <vector> bool comp ( int a , int b ) { return a < b ; } int main ( ) { int first [ ] = { 5 , 10 , 15 , 20 , 25 } ; int second [ ] = { 50 , 40 , 30 , 20 , 10 } ; int n = sizeof ( first ) / sizeof ( first [ 0 ] ) ; std : : cout < < " First array contains : " ; for ( int i = 0 ; i < n ; i + + ) std : : cout < < " " < < first [ i ] ; std : : cout < < " \n  " ; std : : cout < < " Second array contains : " ; for ( int i = 0 ; i < n ; i + + ) std : : cout < < " " < < second [ i ] ; std : : cout < < " \n \n  " ; std : : vector <int> v ( 10 ) ; std : : vector <int> : : iterator it , st ; std : : sort ( first , first + 5 ) ; std : : sort ( second , second + 5 ) ; it = std : : set_symmetric_difference ( first , first + 5 , second , second + 5 , v.begin ( ) , comp ) ; std : : cout < < " The symmetric difference has " < < ( it - v.begin ( ) ) < < " elements : \n  " ; for ( st = v.begin ( ) ; st ! = it ; + + st ) std : : cout < < ' ' < < * st ; std : : cout < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { std : : vector <string> class1 { " Samir " , " Manoj " , " Pranav " , " Rajesh " } ; std : : vector <string> class2 { " Samir " , " Junaid " , " Manoj " , " Pankaj " , " Arpit " } ; cout < < " Students attending first class are : " ; for ( auto i : class1 ) { cout < < i < < " " ; } cout < < " \n Students attending second class are : " ; for ( auto i : class2 ) { cout < < i < < " " ; } std : : vector <string> result ( 10 ) ; std : : vector <string> : : iterator it ; it = set_symmetric_difference ( class1.begin ( ) , class1.end ( ) , class2.begin ( ) , class2.end ( ) , result.begin ( ) ) ; cout < < " \n \n List of students that are not taking both classes : " ; for ( std : : vector <string> : : iterator i = result.begin ( ) ; i ! = it ; i + + ) { cout < < * i < < " " ; } return 0 ; }
#include <cstring> #include <iostream> using namespace std ; int main ( ) { char dest [ 50 ] = " This is an " ; char src [ 50 ] = " example " ; strcat ( dest , src ) ; cout < < dest ; return 0 ; }
#include <cstring> #include <iostream> using namespace std ; int main ( ) { char dest [ 25 ] = " This is an example " ; char src [ 50 ] = " to show working of strncat ( ) this is not added " ; strncat ( dest , src , 29 ) ; cout < < dest ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char src [ 50 ] = " forgeeks " ; char dest1 [ 50 ] = " geeks " ; char dest2 [ 50 ] = " geeks " ; printf ( " Before strcat ( ) function execution , " ) ; printf ( " destination string : %s\n  " , dest1 ) ; strcat ( dest1 , src ) ; printf ( " After strcat ( ) function execution , " ) ; printf ( " destination string : %s\n  " , dest1 ) ; printf ( " Before strncat ( ) function execution , " ) ; printf ( " destination string : %s\n  " , dest2 ) ; strncat ( dest2 , src , 3 ) ; printf ( " After strncat ( ) function execution , " ) ; printf ( " destination string : %s\n  " , dest2 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 1 , y = 2 ; switch ( x ) { case 1 : switch ( y ) { case 2 : cout < < " Choice is 2 " ; break ; case 3 : cout < < " Choice is 3 " ; break ; } break ; case 4 : cout < < " Choice is 4 " ; break ; case 5 : cout < < " Choice is 5 " ; break ; default : cout < < " Choice is other than 1 , 2 3 , 4 , or 5 " ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int c = 10 ; switch ( c ) { case i : printf ( " Value of c = %d " , c ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { const int i = 10 ; int c = 10 ; switch ( c ) { case i : printf ( " Value of c = %d " , c ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int n1 = 10 , n2 = 11 ; switch ( ( int ) ( n1 > n2 ) ) { case 0 : printf ( " %d is the largest\n  " , n2 ) ; break ; default : printf ( " %d is the largest\n  " , n1 ) ; } switch ( ( int ) ( n1 < n2 ) ) { case 0 : printf ( " %d is the largest\n  " , n1 ) ; break ; default : printf ( " %d is the largest\n  " , n2 ) ; } return 0 ; }
#include <iostream> class Test { static Test * fun ( ) { return this ; } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( ) { } void fun ( ) { } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( ) const { return ; } } ; int main ( ) { getchar ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void print_ ( const char * s ) { mbstate_t ps = mbstate_t ( ) ; int length = strlen ( s ) ; const char * n = s + length ; int len ; wchar_t pwc ; while ( ( len = mbrtowc ( & pwc ; , s , n - s , & ps ; ) ) > 0 ) { wcout < < " Next " < < len < < " bytes are the character " < < pwc < < '\n ' ; s + = len ; } } int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; const char * str = u8 " z\u00df\u6c34\U0001d10b " ; print_ ( str ) ; }
#include <bits / stdc + + .h> using namespace std ; void print_ ( const char * s ) { mbstate_t ps = mbstate_t ( ) ; int length = strlen ( s ) ; const char * n = s + length ; int len ; wchar_t pwc ; while ( ( len = mbrtowc ( & pwc ; , s , n - s , & ps ; ) ) > 0 ) { wcout < < " Next " < < len < < " bytes are the character " < < pwc < < '\n ' ; s + = len ; } } int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; const char * str = u8 " \xE2\x88\x83y\xE2\x88\x80x\xC2\xAC " ; print_ ( str ) ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " GeeksforGeeks " ; wchar_t ch = L'e' ; wchar_t * p = wcsrchr ( str , ch ) ; if ( p ) wcout < < L " Last position of " < < ch < < L " in \ " " < < str < < " \ " is " < < ( p - str ) ; else wcout < < ch < < L " is not present in \ " " < < str < < L " \ " " ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " Ishwar Gupta " ; wchar_t ch = L'o' ; wchar_t * p = wcsrchr ( str , ch ) ; if ( p ) wcout < < L " Last position of " < < ch < < L " in \ " " < < str < < " \ " is " < < ( p - str ) ; else wcout < < ch < < L " is not present in \ " " < < str < < L " \ " " ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t src [ ] = L " Ishwar Gupta " ; wchar_t dest [ ] = L " GeeksforGeeks " ; wchar_t * s = wcspbrk ( dest , src ) ; int pos ; if ( s ) { pos = s - dest ; wcout < < L " First occurrence in \ " " < < dest < < L " \ " is at position " < < pos < < endl ; } else wcout < < L " No number found in \ " " < < dest < < " \ " " ; return 0 ; }
#include <cwchar> #include <iostream> using namespace std ; int main ( ) { wchar_t src [ ] = L " 123 " ; wchar_t dest [ ] = L " Hello World " ; wchar_t * s = wcspbrk ( dest , src ) ; int pos ; if ( s ) { pos = s - dest ; wcout < < L " First occurrence in \ " " < < dest < < L " \ " is at position " < < pos < < endl ; } else wcout < < L " No common wide character " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void check_ ( const char * str , size_t n ) { mbstate_t ps = mbstate_t ( ) ; int returnV = mbrlen ( str , n , & ps ; ) ; if ( returnV = = -2 ) cout < < " Next " < < n < < " byte ( s ) doesn't " < < " represent a complete " < < " multibyte character " < < endl ; else if ( returnV = = -1 ) cout < < " Next " < < n < < " byte ( s ) doesn't " < < " represent a valid multibyte character " < < endl ; else cout < < " Next " < < n < < " byte ( s ) of " < < str < < " holds " < < returnV < < " byte " < < " multibyte character " < < endl ; } int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; char str [ ] = " \u10000b5 " ; check_ ( str , 1 ) ; check_ ( str , 6 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void check_ ( const char * str , size_t n ) { mbstate_t ps = mbstate_t ( ) ; int returnV = mbrlen ( str , n , & ps ; ) ; if ( returnV = = -2 ) cout < < " Next " < < n < < " byte ( s ) doesn't " < < " represent a complete " < < " multibyte character " < < endl ; else if ( returnV = = -1 ) cout < < " Next " < < n < < " byte ( s ) doesn't " < < " represent a valid multibyte character " < < endl ; else cout < < " Next " < < n < < " byte ( s ) of " < < str < < " holds " < < returnV < < " byte " < < " multibyte character " < < endl ; } int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; char str [ ] = " " ; check_ ( str , 1 ) ; check_ ( str , 3 ) ; return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char16_t str [ ] = u " Ishwar Gupta " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c16rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char16_t str [ ] = u " " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c16rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char32_t str [ ] = U " GeeksforGeeks " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c32rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <iostream> #include <uchar.h> #include <wchar.h> using namespace std ; int main ( ) { const char32_t str [ ] = U " " ; char s [ 50 ] ; mbstate_t p { } ; size_t length ; int j = 0 ; while ( str [ j ] ) { length = c32rtomb ( s , str [ j ] , & p ; ) ; if ( ( length = = 0 ) || ( length > 50 ) ) break ; for ( int i = 0 ; i < length ; + + i ) cout < < s [ i ] ; + + j ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " geeks " ; char str2 [ ] = " geeks " ; int j = strcmpi ( str1 , str2 ) ; printf ( " The function returns = %d " , j ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ ] = " geeks " ; char str2 [ ] = " ForGeeks " ; int i = strcmpi ( str1 , str2 ) ; printf ( " The function returns = %d " , i ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( int a ) { cout < < a < < " \n  " ; return 0 ; } int main ( char * a ) { cout < < a < < endl ; return 0 ; } int main ( int a , int b ) { cout < < a < < " " < < b ; return 0 ; } int main ( ) { main ( 3 ) ; main ( " C + + " ) ; main ( 9 , 6 ) ; return 0 ; }
#include <iostream> int main ( ) { int main = 10 ; std : : cout < < main ; return 0 ; }
#include <iostream> using namespace std ; class Test { public : int main ( int s ) { cout < < s < < " \n  " ; return 0 ; } int main ( char * s ) { cout < < s < < endl ; return 0 ; } int main ( int s , int m ) { cout < < s < < " " < < m ; return 0 ; } } ; int main ( ) { Test obj ; obj.main ( 3 ) ; obj.main ( " I love C + + " ) ; obj.main ( 9 , 6 ) ; return 0 ; }
#include <stdio.h> void myStartupFun ( void ) __attribute__ ( ( constructor ) ) ; void myStartupFun ( void ) { printf ( " GeeksforGeeks " ) ; } int main ( ) { }
#include <stdio.h> #include <stdlib.h> int main ( void ) { } void _start ( void ) { printf ( " GeeeksforGeeks " ) ; int var = main ( ) ; exit ( var ) ; }
#include <iostream> class MyClass { public : MyClass ( ) { std : : cout < < " GeeksforGeeks " ; } } m ; int main ( ) { }
#include <iostream> struct Mystruct { Mystruct ( ) { std : : cout < < " GeeksforGeeks " ; } } obj ; int main ( ) { }
#include <cstdio> int var = printf ( " GeeksforGeeks " ) ; int main ( ) { }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <3 , 9> ratio1 ; typedef ratio <1 , 3> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 3 / 9 is greater than or equal to 1 / 3 " ; else cout < < " 3 / 9 is less than 1 / 3 " ; return 0 ; }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <1 , 2> ratio1 ; typedef ratio <1 , 3> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 1 / 2 is greater than or equal to 1 / 3 " ; else cout < < " 1 / 2 is less than 1 / 3 " ; return 0 ; }
#include <iostream> #include <ratio> using namespace std ; int main ( ) { typedef ratio <1 , 10> ratio1 ; typedef ratio <1 , 8> ratio2 ; if ( ratio_greater_equal <ratio1 , ratio2> : : value ) cout < < " 1 / 10 is greater than or equal to 1 / 8 " ; else cout < < " 1 / 10 is less than 1 / 8 " ; return 0 ; }
#include <iostream> #include <cinttypes> #include <cstring> using namespace std ; int main ( ) { int base = 10 ; char str [ ] = " 999999abcdefg " ; char * end ; uintmax_t num ; num = strtoumax ( str , & end ; , base ) ; cout < < " Given String = " < < str < < endl ; cout < < " Number with base 10 in string " < < num < < endl ; cout < < " End String points to " < < end < < endl < < endl ; base = 2 ; strcpy ( str , " 10010 " ) ; cout < < " Given String = " < < str < < endl ; num = strtoumax ( str , & end ; , base ) ; cout < < " Number with base 2 in string " < < num < < endl ; if ( * end ) { cout < < end ; } else { cout < < " Null pointer " ; } return 0 ; }
#include <iostream> #include <cinttypes> #include <cstring> using namespace std ; int main ( ) { int base = 10 ; char str [ ] = " -10000 " ; char * end ; uintmax_t num ; num = strtoumax ( str , & end ; , base ) ; cout < < " Given String = " < < str < < endl ; cout < < " Garbage value stored in num " < < num < < endl ; if ( * end ) { cout < < " End String points to " < < end ; } else { cout < < " Null pointer " < < endl < < endl ; } base = 10 ; strcpy ( str , " abcd " ) ; cout < < " Given String = " < < str < < endl ; num = strtoumax ( str , & end ; , base ) ; cout < < " Number with base 10 in string " < < num < < endl ; if ( * end ) { cout < < " End String points to " < < end ; } else { cout < < " Null pointer " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'@' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither an " < < " alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'g' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither " < < " an alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int base = 10 ; char str [ ] = " 1000xyz " ; char * end ; intmax_t num ; num = strtoimax ( str , & end ; , base ) ; cout < < " Given String = " < < str < < endl ; cout < < " Number with base 10 in string " < < num < < endl ; cout < < " End String points to " < < end < < endl < < endl ; base = 16 ; strcpy ( str , " ff " ) ; cout < < " Given String = " < < str < < endl ; num = strtoimax ( str , & end ; , base ) ; cout < < " Number with base 16 in string " < < num < < endl ; if ( * end ) { cout < < end ; } else { cout < < " Null pointer " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str [ ] = " 10 50 f 100 " ; char * end ; intmax_t a , b , c , d ; a = strtoimax ( str , & end ; , 10 ) ; b = strtoimax ( end , & end ; , 8 ) ; c = strtoimax ( end , & end ; , 16 ) ; d = strtoimax ( end , & end ; , 2 ) ; cout < < " The decimal equivalents of all numbers are \n  " ; cout < < a < < endl < < b < < endl < < c < < endl < < d ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " GeeksforGeeks " ; printf ( " Original String : %s\n  " , str ) ; printf ( " Modified String : %s\n  " , strnset ( str , ' * ' , 5 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " Computer Science " ; printf ( " Original String : %s\n  " , str ) ; printf ( " Modified String : %s\n  " , strnset ( str , ' * ' , 5 ) ) ; return 0 ; }
#include <stdio.h> #include <time.h> #define CST ( + 8 ) #define IND ( -5 ) int main ( ) { time_t current_time ; struct tm * ptime ; time ( & current ; _time ) ; ptime = gmtime ( & current ; _time ) ; printf ( " Current time : \n  " ) ; printf ( " Beijing ( China ) : %2d : %02d : %02d\n  " , ( ptime-> tm_hour + CST ) % 24 , ptime-> tm_min , ptime-> tm_sec ) ; printf ( " Delhi ( India ) : %2d : %02d : %02d\n  " , ( ptime-> tm_hour + IND ) % 24 , ptime-> tm_min , ptime-> tm_sec ) ; return 0 ; }
#include <stdio.h> #include <time.h> #define UTC ( 0 ) #define ART ( -3 ) int main ( ) { time_t current_time ; struct tm * ptime ; time ( & current ; _time ) ; ptime = gmtime ( & current ; _time ) ; printf ( " Current time : \n  " ) ; printf ( " Monrovia ( Liberia ) : %2d : %02d : %02d\n  " , ( ptime-> tm_hour + UTC ) % 24 , ptime-> tm_min , ptime-> tm_sec ) ; printf ( " Buenos Aires ( Argentina ) : %2d : %02d : %02d\n  " , ( ptime-> tm_hour + ART ) % 24 , ptime-> tm_min , ptime-> tm_sec ) ; return 0 ; }
#include <stdio.h> #include <time.h> void delay ( int number_of_seconds ) { int milli_seconds = 1000 * number_of_seconds ; clock_t start_time = clock ( ) ; while ( clock ( ) < start_time + milli_seconds ) ; } int main ( ) { int i ; for ( i = 0 ; i < 10 ; i + + ) { delay ( 1 ) ; printf ( " %d seconds have passed\n  " , i + 1 ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " geeksforgeeks is the best " ; printf ( " %s\n  " , strupr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " CompuTer ScienCe PoRTAl fOr geeKS " ; printf ( " Given string is : %s\n  " , str ) ; printf ( " \n string after converting to the uppercase is : %s " , strupr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <sys / resource.h> #include <string.h> #include <errno.h> #include <unistd.h> #include <sys / types.h> #include <sys / stat.h> #include <fcntl.h> int main ( ) { struct rlimit old_lim , lim , new_lim ; if ( getrlimit ( RLIMIT_NOFILE , & old ; _lim ) = = 0 ) printf ( " Old limits -> soft limit = %ld \t " " hard limit = %ld \n  " , old_lim.rlim_cur , old_lim.rlim_max ) ; else fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; lim.rlim_cur = 3 ; lim.rlim_max = 1024 ; if ( setrlimit ( RLIMIT_NOFILE , & lim ; ) = = -1 ) fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; if ( getrlimit ( RLIMIT_NOFILE , & new ; _lim ) = = 0 ) printf ( " New limits -> soft limit = %ld " " \t hard limit = %ld \n  " , new_lim.rlim_cur , new_lim.rlim_max ) ; else fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; return 0 ; }
#include <stdio.h> #include <sys / resource.h> #include <string.h> #include <errno.h> #include <unistd.h> #include <sys / types.h> #include <sys / stat.h> #include <fcntl.h> int main ( ) { struct rlimit old_lim , lim , new_lim ; if ( getrlimit ( RLIMIT_NOFILE , & old ; _lim ) = = 0 ) printf ( " Old limits -> soft limit = %ld \t " " hard limit = %ld \n  " , old_lim.rlim_cur , old_lim.rlim_max ) ; else fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; lim.rlim_cur = 3 ; lim.rlim_max = 1024 ; if ( setrlimit ( RLIMIT_NOFILE , & lim ; ) = = -1 ) fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; if ( getrlimit ( RLIMIT_NOFILE , & new ; _lim ) = = 0 ) printf ( " New limits -> soft limit = %ld \t " " hard limit = %ld \n  " , new_lim.rlim_cur , new_lim.rlim_max ) ; else fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; if ( open ( " foo.txt " , O_WRONLY | O_CREAT , 0 ) = = -1 ) fprintf ( stderr , " %s\n  " , strerror ( errno ) ) ; else printf ( " Opened successfully\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * i , * j ; int * ii = NULL , * jj = NULL ; if ( i = = j ) { printf ( " This might get printed if both i and j are same by chance. " ) ; } if ( ii = = jj ) { printf ( " This is always printed coz ii and jj are same. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , NULL ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( NULL ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptr = NULL ; printf ( " %d " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( void ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " %d " , sizeof ( void * ) ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { void * operator new ( size_t size ) ; int x ; public : Test ( ) { x = 9 ; cout < < " Constructor is called\n  " ; } void display ( ) { cout < < " x = " < < x < < " \n  " ; } ~Test ( ) { cout < < " Destructor is executed\n  " ; } } ; int main ( ) { Test t ; t.display ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { vector <int> v { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; sort ( v.begin ( ) , v.end ( ) ) ; cout < < " Sorted \n  " ; for ( auto x : v ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { vector <int> v { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; sort ( v.begin ( ) , v.end ( ) , greater <int> ( ) ) ; cout < < " Sorted \n  " ; for ( auto x : v ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; struct Interval { int start , end ; } ; bool compareInterval ( Interval i1 , Interval i2 ) { return ( i1.start < i2.start ) ; } int main ( ) { vector <Interval> v { { 6 , 8 } , { 1 , 9 } , { 2 , 4 } , { 4 , 7 } } ; sort ( v.begin ( ) , v.end ( ) , compareInterval ) ; cout < < " Intervals sorted by start time : \n  " ; for ( auto x : v ) cout < < " [ " < < x.start < < " , " < < x.end < < " ] " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; sort ( arr , arr + n ) ; cout < < " \n Array after sorting using " " default sort is : \n  " ; for ( int i = 0 ; i < n ; + + i ) cout < < arr [ i ] < < " " ; return 0 ; }
#include <iostream> #include <unordered_map> using namespace std ; int main ( ) { unordered_map <int , string> umap ; umap.insert ( make_pair ( 1 , " Welcome " ) ) ; umap.insert ( make_pair ( 2 , " to " ) ) ; umap.insert ( make_pair ( 3 , " GeeksforGeeks " ) ) ; if ( umap.count ( 1 ) ) { cout < < " Element Found " < <endl ; } else { cout < < " Element Not Found " < <endl ; } return 0 ; }
#include <iostream> #include <unordered_map> using namespace std ; int main ( ) { unordered_map <int , string> umap ; umap.insert ( make_pair ( 1 , " Welcome " ) ) ; umap.insert ( make_pair ( 2 , " to " ) ) ; umap.insert ( make_pair ( 3 , " GeeksforGeeks " ) ) ; umap.insert ( make_pair ( 3 , " CS Portal " ) ) ; cout < < " Count of elements in map , mapped with key 3 : " < <umap.count ( 3 ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point p1 = { 0 , 1 } ; p1.x = 20 ; printf ( " x = %d , y = %d " , p1.x , p1.y ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y , z ; } ; int main ( ) { struct Point p1 = { .y = 0 , .z = 1 , .x = 2 } ; struct Point p2 = { .x = 20 } ; printf ( " x = %d , y = %d , z = %d\n  " , p1.x , p1.y , p1.z ) ; printf ( " x = %d " , p2.x ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point arr [ 10 ] ; arr [ 0 ] .x = 10 ; arr [ 0 ] .y = 20 ; printf ( " %d %d " , arr [ 0 ] .x , arr [ 0 ] .y ) ; return 0 ; }
#include <stdio.h> struct Point { int x , y ; } ; int main ( ) { struct Point p1 = { 1 , 2 } ; struct Point * p2 = & p1 ; printf ( " %d %d " , p2-> x , p2-> y ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <sys / wait.h> #include <unistd.h> int main ( ) { pid_t cpid ; if ( fork ( ) = = 0 ) exit ( 0 ) ; else cpid = wait ( NULL ) ; printf ( " Parent pid = %d\n  " , getpid ( ) ) ; printf ( " Child pid = %d\n  " , cpid ) ; return 0 ; }
#include <stdio.h> #include <sys / wait.h> #include <unistd.h> int main ( ) { if ( fork ( ) = = 0 ) printf ( " HC : hello from child\n  " ) ; else { printf ( " HP : hello from parent\n  " ) ; wait ( NULL ) ; printf ( " CT : child has terminated\n  " ) ; } printf ( " Bye\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <sys / wait.h> #include <unistd.h> void waitexample ( ) { int stat ; if ( fork ( ) = = 0 ) exit ( 1 ) ; else wait ( & stat ; ) ; if ( WIFEXITED ( stat ) ) printf ( " Exit status : %d\n  " , WEXITSTATUS ( stat ) ) ; else if ( WIFSIGNALED ( stat ) ) psignal ( WTERMSIG ( stat ) , " Exit signal " ) ; } int main ( ) { waitexample ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <sys / wait.h> #include <unistd.h> void waitexample ( ) { int i , stat ; pid_t pid [ 5 ] ; for ( i = 0 ; i <5 ; i + + ) { if ( ( pid [ i ] = fork ( ) ) = = 0 ) { sleep ( 1 ) ; exit ( 100 + i ) ; } } for ( i = 0 ; i <5 ; i + + ) { pid_t cpid = waitpid ( pid [ i ] , & stat ; , 0 ) ; if ( WIFEXITED ( stat ) ) printf ( " Child %d terminated with status : %d\n  " , cpid , WEXITSTATUS ( stat ) ) ; } } int main ( ) { waitexample ( ) ; return 0 ; }
#include <stdio.h> union test { int x , y ; } ; int main ( ) { union test t ; t.x = 2 ; printf ( " After making x = 2 : \n  x = %d , y = %d\n \n  " , t.x , t.y ) ; t.y = 10 ; printf ( " After making y = 10 : \n  x = %d , y = %d\n \n  " , t.x , t.y ) ; return 0 ; }
#include <stdio.h> union test1 { int x ; int y ; } Test1 ; union test2 { int x ; char y ; } Test2 ; union test3 { int arr [ 10 ] ; char y ; } Test3 ; int main ( ) { printf ( " sizeof ( test1 ) = %lu , sizeof ( test2 ) = %lu , " " sizeof ( test3 ) = %lu " , sizeof ( Test1 ) , sizeof ( Test2 ) , sizeof ( Test3 ) ) ; return 0 ; }
#include <stdio.h> union test { int x ; char y ; } ; int main ( ) { union test p1 ; p1.x = 65 ; union test * p2 = & p1 ; printf ( " %d %c " , p2-> x , p2-> y ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 0101 ; cout < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 020 ; cout < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 090 ; cout < < x ; return 0 ; }
#include <stdio.h> void ( foo ) ( int n ) { printf ( " Function : %d " , n ) ; } int main ( ) { ( foo ) ( 4 ) ; return 0 ; }
#include <stdio.h> #define foo ( n ) printf ( " \n Macro : %d " , n ) ; void ( foo ) ( int n ) { printf ( " Function : %d " , n ) ; } int main ( ) { ( foo ) ( 4 ) ; foo ( 4 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void done ( ) { cout < < " Exiting Successfully " < < " \n  " ; } int main ( ) { int value ; value = atexit ( done ) ; if ( value ! = 0 ) { cout < < " atexit ( ) function registration failed " ; exit ( 1 ) ; } cout < < " Registration successful " < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void first ( ) { cout < < " Exit first " < < endl ; } void second ( ) { cout < < " Exit Second " < < endl ; } void third ( ) { cout < < " Exit Third " < < endl ; } void fourth ( ) { cout < < " Exit Fourth " < < endl ; } int main ( ) { int value1 , value2 , value3 , value4 ; value1 = atexit ( first ) ; value2 = atexit ( second ) ; value3 = atexit ( third ) ; value4 = atexit ( fourth ) ; if ( ( value1 ! = 0 ) or ( value2 ! = 0 ) or ( value3 ! = 0 ) or ( value4 ! = 0 ) ) { cout < < " atexit ( ) function registration Failed " < < endl ; exit ( 1 ) ; } cout < < " Registration successful " < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void shows_Exception ( ) { int y = 50 , z = 0 ; int x = y / z ; cout < < " Divided by zero " ; } int main ( ) { int value ; value = atexit ( shows_Exception ) ; if ( value ! = 0 ) { cout < < " atexit ( ) function registration failed " ; exit ( 1 ) ; } cout < < " Registration successful " < < endl ; return 0 ; }
#include <iostream> #include <locale.h> using namespace std ; int main ( ) { setlocale ( LC_MONETARY , " en_US.utf8 " ) ; struct lconv * lc = localeconv ( ) ; printf ( " %s " , lc-> currency_symbol ) ; return 0 ; }
#include <clocale> #include <iostream> using namespace std ; int main ( ) { char * s ; setlocale ( LC_ALL , " en_UA.utf8 " ) ; s = setlocale ( LC_ALL , NULL ) ; cout < < s < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x = 6 , result ; int exp = 2 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double result ; int x = 20 , exp = 9 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double result ; int x = 20 , exp = 10000 ; result = ldexp ( x , exp ) ; cout < < " ldexp ( x , exp ) = " < < result < < endl ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " GEEKSFORGEEKS IS THE BEST " ; printf ( " %s\n  " , strlwr ( str ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str [ ] = " CompuTer ScienCe PoRTAl fOr geeKS " ; printf ( " Given string is : %s\n  " , str ) ; printf ( " \n String after converting to the " " lowercase is : %s " , strlwr ( str ) ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " GeeksforGeeks " ; wcout < < L " The uppercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towupper ( str [ i ] ) ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " hello Ishwar 123!@# " ; wcout < < L " The uppercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towupper ( str [ i ] ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float f = 6.0F ; cout < < " isinf ( 6.0 / 0.0 ) is = " < < isinf ( f / 0.0 ) < < endl ; f = -1.2F ; cout < < " isinf ( -1.2 / 0.0 ) is = " < < isinf ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { cout < < " isinf ( 0.0 ) is = " < < isinf ( 0.0 ) < < endl ; cout < < " isinf ( sqrt ( -1.0 ) ) is = " < < isinf ( sqrt ( -1.0 ) ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " GeeksForGeeks " ; wcout < < L " Initial string -> " < < string < < endl ; wctype_t first = wctype ( " lower " ) ; wctype_t second = wctype ( " upper " ) ; for ( int i = 0 ; i < wcslen ( string ) ; i + + ) { if ( iswctype ( string [ i ] , first ) ) string [ i ] = towctrans ( string [ i ] , wctrans ( " toupper " ) ) ; else if ( iswctype ( string [ i ] , second ) ) string [ i ] = towctrans ( string [ i ] , wctrans ( " tolower " ) ) ; } wcout < < L " After transformation -> " < < string < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " gfg " ; wcout < < L " Initial string -> " < < string < < endl ; wctype_t first = wctype ( " lower " ) ; wctype_t second = wctype ( " upper " ) ; for ( int i = 0 ; i < wcslen ( string ) ; i + + ) { if ( iswctype ( string [ i ] , first ) ) string [ i ] = towctrans ( string [ i ] , wctrans ( " toupper " ) ) ; else if ( iswctype ( string [ i ] , second ) ) string [ i ] = towctrans ( string [ i ] , wctrans ( " tolower " ) ) ; } wcout < < L " After transformation -> " < < string < < endl ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { } ; } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { } ; Test t ; Test * tp ; } int main ( ) { Test t ; Test * tp ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : void method ( ) { cout < < " Local Class method ( ) called " ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : void method ( ) ; } ; void Test : : method ( ) { cout < < " Local Class method ( ) " ; } } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { static int i ; } ; } int main ( ) { return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { class Test { public : static void method ( ) { cout < < " Local Class method ( ) called " ; } } ; Test : : method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { static int x ; enum { i = 1 , j = 2 } ; class Test { public : void method ( ) { cout < < " x = " < < x < < endl ; cout < < " i = " < < i < < endl ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void fun ( ) { int x ; class Test { public : void method ( ) { cout < < " x = " < < x < < endl ; } } ; Test t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; int x ; void fun ( ) { class Test1 { public : Test1 ( ) { cout < < " Test1 : : Test1 ( ) " < < endl ; } } ; class Test2 { Test1 t1 ; public : void method ( ) { cout < < " x = " < < x < < endl ; } } ; Test2 t ; t.method ( ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys / types.h> #include <sys / socket.h> #include <arpa / inet.h> #include <netinet / in.h> #define PORT 8080 #define MAXLINE 1024 int main ( ) { int sockfd ; char buffer [ MAXLINE ] ; char * hello = " Hello from server " ; struct sockaddr_in servaddr , cliaddr ; if ( ( sockfd = socket ( AF_INET , SOCK_DGRAM , 0 ) ) < 0 ) { perror ( " socket creation failed " ) ; exit ( EXIT_FAILURE ) ; } memset ( & servaddr ; , 0 , sizeof ( servaddr ) ) ; memset ( & cliaddr ; , 0 , sizeof ( cliaddr ) ) ; servaddr.sin_family = AF_INET ; servaddr.sin_addr.s_addr = INADDR_ANY ; servaddr.sin_port = htons ( PORT ) ; if ( bind ( sockfd , ( const struct sockaddr * ) & servaddr ; , sizeof ( servaddr ) ) < 0 ) { perror ( " bind failed " ) ; exit ( EXIT_FAILURE ) ; } int len , n ; n = recvfrom ( sockfd , ( char * ) buffer , MAXLINE , MSG_WAITALL , ( struct sockaddr * ) & cliaddr ; , & len ; ) ; buffer [ n ] = '\0' ; printf ( " Client : %s\n  " , buffer ) ; sendto ( sockfd , ( const char * ) hello , strlen ( hello ) , MSG_CONFIRM , ( const struct sockaddr * ) & cliaddr ; , len ) ; printf ( " Hello message sent.\n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys / types.h> #include <sys / socket.h> #include <arpa / inet.h> #include <netinet / in.h> #define PORT 8080 #define MAXLINE 1024 int main ( ) { int sockfd ; char buffer [ MAXLINE ] ; char * hello = " Hello from client " ; struct sockaddr_in servaddr ; if ( ( sockfd = socket ( AF_INET , SOCK_DGRAM , 0 ) ) < 0 ) { perror ( " socket creation failed " ) ; exit ( EXIT_FAILURE ) ; } memset ( & servaddr ; , 0 , sizeof ( servaddr ) ) ; servaddr.sin_family = AF_INET ; servaddr.sin_port = htons ( PORT ) ; servaddr.sin_addr.s_addr = INADDR_ANY ; int n , len ; sendto ( sockfd , ( const char * ) hello , strlen ( hello ) , MSG_CONFIRM , ( const struct sockaddr * ) & servaddr ; , sizeof ( servaddr ) ) ; printf ( " Hello message sent.\n  " ) ; n = recvfrom ( sockfd , ( char * ) buffer , MAXLINE , MSG_WAITALL , ( struct sockaddr * ) & servaddr ; , & len ; ) ; buffer [ n ] = '\0' ; printf ( " Server : %s\n  " , buffer ) ; close ( sockfd ) ; return 0 ; }
#include <any> #include <iostream> #include <string> using namespace std ; int main ( ) { try { any value = 42 ; cout < < " \n  Value : " < < any_cast <int> ( value ) ; value = " Hello World " ; cout < < " \n  Value : " < < any_cast <const char * > ( value ) ; any val ( 19.0 ) ; cout < < " \n  Value : " < < any_cast <double> ( val ) ; any val_brace { string ( " Brace Initialisation " ) } ; cout < < " \n  Value : " < < any_cast <string> ( val_brace ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any value = 4.2 ; cout < < " \n  Value : " < < any_cast <double> ( value ) ; value.emplace <int> ( 44 ) ; cout < < " \n  Value : " < < any_cast <int> ( value ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 4.2 ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; var.reset ( ) ; if ( !var.has_value ( ) ) cout < < " \n  No value found in var variable " ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 9.5 ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; if ( var.has_value ( ) ) cout < < " \n  Value found of type " < < var.type ( ) .name ( ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 12.0f ; cout < < " \n  Type : " < < var.type ( ) .name ( ) ; var = " Hello World " ; cout < < " \n  Type : " < < var.type ( ) .name ( ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> int main ( ) { try { any var = 12.0f ; cout < < " \n  Value : " < < any_cast <double> ( var ) ; } catch ( bad_any_cast & e ) { cout < < " \n  " < < e.what ( ) ; } return 0 ; }
#include <any> #include <iostream> #include <string> using namespace std ; int main ( ) { any var = 12.0f ; auto * tval = any_cast <float> ( & var ; ) ; if ( !tval ) { cout < < " \n  Bad_any_cast " ; } else { cout < < " \n  Value : " < < * tval ; } return 0 ; }
#include <iostream> using namespace std ; void swap ( int * x , int * y ) { int z = * x ; * x = * y ; * y = z ; } int main ( ) { int a = 45 , b = 35 ; cout < < " Before Swap\n  " ; cout < < " a = " < < a < < " b = " < < b < < " \n  " ; swap ( & a ; , & b ; ) ; cout < < " After Swap with pass by pointer\n  " ; cout < < " a = " < < a < < " b = " < < b < < " \n  " ; }
#include <iostream> using namespace std ; void swap ( int & x , int & y ) { int z = x ; x = y ; y = z ; } int main ( ) { int a = 45 , b = 35 ; cout < < " Before Swap\n  " ; cout < < " a = " < < a < < " b = " < < b < < " \n  " ; swap ( a , b ) ; cout < < " After Swap with pass by reference\n  " ; cout < < " a = " < < a < < " b = " < < b < < " \n  " ; }
#include <iostream> using namespace std ; struct demo { int a ; } ; int main ( ) { int x = 5 ; int y = 6 ; demo d ; int * p ; p = & x ; p = & y ; int & r ; = x ; r = y ; p = NULL ; p + + ; r + + ; cout < < & p ; < < " " < < & x ; < < endl ; cout < < & r ; < < " " < < & x ; < < endl ; demo * q = & d ; demo & qq ; = d ; q-> a = 8 ; qq.a = 8 ; cout < < p < < endl ; cout < < r < < endl ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; class MyClass { vector <int> vec ; public : MyClass ( vector <int> v ) { vec = v ; } void print ( ) { for ( int i = 0 ; i < vec.size ( ) ; i + + ) cout < < vec [ i ] < < " " ; } } ; int main ( ) { vector <int> vec ; for ( int i = 1 ; i < = 5 ; i + + ) vec.push_back ( i ) ; MyClass obj ( vec ) ; obj.print ( ) ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; class MyClass { vector <int> vec ; public : MyClass ( vector <int> v ) : vec ( v ) { } void print ( ) { for ( int i = 0 ; i < vec.size ( ) ; i + + ) cout < < vec [ i ] < < " " ; } } ; int main ( ) { vector <int> vec ; for ( int i = 1 ; i < = 5 ; i + + ) vec.push_back ( i ) ; MyClass obj ( vec ) ; obj.print ( ) ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; class MyClass { vector <int> & vec ; public : MyClass ( vector <int> & arr ) : vec ( arr ) { } void print ( ) { for ( int i = 0 ; i < vec.size ( ) ; i + + ) cout < < vec [ i ] < < " " ; } } ; int main ( ) { vector <int> vec ; for ( int i = 1 ; i < = 5 ; i + + ) vec.push_back ( i ) ; MyClass obj ( vec ) ; obj.print ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { char * p = NULL ; printf ( " %s " , p ) ; return 0 ; }
#include <iostream> #include <set> using namespace std ; void printSet ( set <int> myset ) { set <int> : : iterator it ; for ( it = myset.begin ( ) ; it ! = myset.end ( ) ; + + it ) cout < < ' ' < < * it ; cout < < '\n ' ; } void deleteByValue ( set <int> myset , int valueOfElementToBeDeleted ) { cout < < " \n Set originally : " ; printSet ( myset ) ; myset.erase ( valueOfElementToBeDeleted ) ; cout < < " Set after deleting " < < valueOfElementToBeDeleted < < " : " ; printSet ( myset ) ; } int main ( ) { set <int> myset ; for ( int i = 1 ; i < 10 ; i + + ) myset.insert ( i * 10 ) ; int valueOfElementToBeDeleted = 50 ; deleteByValue ( myset , valueOfElementToBeDeleted ) ; return 0 ; }
#include <iostream> #include <chrono> int main ( ) { using namespace std : : chrono ; milliseconds mil ( 1000 ) ; mil = mil * 60 ; std : : cout < < " duration ( in periods ) : " ; std : : cout < < mil.count ( ) < < " milliseconds.\n  " ; std : : cout < < " duration ( in seconds ) : " ; std : : cout < < ( mil.count ( ) * milliseconds : : period : : num / milliseconds : : period : : den ) ; std : : cout < < " seconds.\n  " ; return 0 ; }
#include <iostream> #include <chrono> #include <ctime> long fibonacci ( unsigned n ) { if ( n < 2 ) return n ; return fibonacci ( n-1 ) + fibonacci ( n-2 ) ; } int main ( ) { std : : chrono : : time_point <std : : chrono : : system_clock> start , end ; start = std : : chrono : : system_clock : : now ( ) ; std : : cout < < " f ( 42 ) = " < < fibonacci ( 42 ) < < '\n ' ; end = std : : chrono : : system_clock : : now ( ) ; std : : chrono : : duration <double> elapsed_seconds = end - start ; std : : time_t end_time = std : : chrono : : system_clock : : to_time_t ( end ) ; std : : cout < < " finished computation at " < < std : : ctime ( & end ; _time ) < < " elapsed time : " < < elapsed_seconds.count ( ) < < " s\n  " ; }
#include <stdio.h> #include <math.h> int main ( ) { float num = 5.48958123 ; num = floor ( 10000 * num ) / 10000 ; printf ( " %f " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { float num = 5.48958123 ; printf ( " %0.4f " , num ) ; return 0 ; }
#include <stdio.h> #include <time.h> int main ( ) { time_t curtime ; time ( & curtime ; ) ; printf ( " Current time = %s " , ctime ( & curtime ; ) ) ; return ( 0 ) ; }
#include <iostream> using namespace std ; main ( ) { int i ; cout < < " The loop with break produces output as : \n  " ; for ( i = 1 ; i < = 5 ; i + + ) { if ( ( i % 3 ) = = 0 ) break ; else cout < < i < < " " ; } cout < < " \n The loop with continue produces output as : \n  " ; for ( i = 1 ; i < = 5 ; i + + ) { if ( ( i % 3 ) = = 0 ) continue ; cout < < i < < " " ; } }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , a ; a = + + x ; cout < < " Pre Increment Operation " ; cout < < " \n a = " < < a ; cout < < " \n x = " < < x ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 , a ; a = x + + ; cout < < " Post Increment Operation " ; cout < < " \n a = " < < a ; cout < < " \n x = " < < x ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> vect1 { 1 , 2 , 3 , 4 } ; vector <int> vect2 ; for ( int i = 0 ; i <vect1.size ( ) ; i + + ) vect2.push_back ( vect1 [ i ] ) ; cout < < " Old vector elements are : " ; for ( int i = 0 ; i <vect1.size ( ) ; i + + ) cout < < vect1 [ i ] < < " " ; cout < < endl ; cout < < " New vector elements are : " ; for ( int i = 0 ; i <vect2.size ( ) ; i + + ) cout < < vect2 [ i ] < < " " ; cout < < endl ; vect1 [ 0 ] = 2 ; cout < < " The first element of old vector is : " ; cout < < vect1 [ 0 ] < < endl ; cout < < " The first element of new vector is : " ; cout < < vect2 [ 0 ] < <endl ; return 0 ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> vect1 { 1 , 2 , 3 , 4 } ; vector <int> vect2 ; vect2 = vect1 ; cout < < " Old vector elements are : " ; for ( int i = 0 ; i <vect1.size ( ) ; i + + ) cout < < vect1 [ i ] < < " " ; cout < < endl ; cout < < " New vector elements are : " ; for ( int i = 0 ; i <vect2.size ( ) ; i + + ) cout < < vect2 [ i ] < < " " ; cout < < endl ; vect1 [ 0 ] = 2 ; cout < < " The first element of old vector is : " ; cout < < vect1 [ 0 ] < < endl ; cout < < " The first element of new vector is : " ; cout < < vect2 [ 0 ] < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { vector <int> vect1 { 1 , 2 , 3 , 4 } ; vector <int> vect2 ( vect1 ) ; cout < < " Old vector elements are : " ; for ( int i = 0 ; i <vect1.size ( ) ; i + + ) cout < < vect1 [ i ] < < " " ; cout < < endl ; cout < < " New vector elements are : " ; for ( int i = 0 ; i <vect2.size ( ) ; i + + ) cout < < vect2 [ i ] < < " " ; cout < < endl ; vect1 [ 0 ] = 2 ; cout < < " The first element of old vector is : " ; cout < < vect1 [ 0 ] < < endl ; cout < < " The first element of new vector is : " ; cout < < vect2 [ 0 ] < <endl ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> #include <iterator> using namespace std ; int main ( ) { vector <int> vect1 { 1 , 2 , 3 , 4 } ; vector <int> vect2 ; copy ( vect1.begin ( ) , vect1.end ( ) , back_inserter ( vect2 ) ) ; cout < < " Old vector elements are : " ; for ( int i = 0 ; i <vect1.size ( ) ; i + + ) cout < < vect1 [ i ] < < " " ; cout < < endl ; cout < < " New vector elements are : " ; for ( int i = 0 ; i <vect2.size ( ) ; i + + ) cout < < vect2 [ i ] < < " " ; cout < < endl ; vect1 [ 0 ] = 2 ; cout < < " The first element of old vector is : " ; cout < < vect1 [ 0 ] < < endl ; cout < < " The first element of new vector is : " ; cout < < vect2 [ 0 ] < <endl ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> #include <iterator> using namespace std ; int main ( ) { vector <int> vect1 { 1 , 2 , 3 , 4 } ; vector <int> vect2 ; vect2.assign ( vect1.begin ( ) , vect1.end ( ) ) ; cout < < " Old vector elements are : " ; for ( int i = 0 ; i <vect1.size ( ) ; i + + ) cout < < vect1 [ i ] < < " " ; cout < < endl ; cout < < " New vector elements are : " ; for ( int i = 0 ; i <vect2.size ( ) ; i + + ) cout < < vect2 [ i ] < < " " ; cout < < endl ; vect1 [ 0 ] = 2 ; cout < < " The first element of old vector is : " ; cout < < vect1 [ 0 ] < < endl ; cout < < " The first element of new vector is : " ; cout < < vect2 [ 0 ] < <endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGABRT , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGABRT ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGINT , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGINT ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGTERM , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGTERM ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGSEGV , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGSEGV ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <csignal> #include <iostream> using namespace std ; sig_atomic_t s_value = 0 ; void handle ( int signal_ ) { s_value = signal_ ; } int main ( ) { signal ( SIGFPE , handle ) ; cout < < " Before called Signal = " < < s_value < < endl ; raise ( SIGFPE ) ; cout < < " After called Signal = " < < s_value < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { char a123 = 'a' ; float b ; int _c , _d45 , e ; printf ( " %c \n  " , a123 ) ; return 0 ; }
#include <stdio.h> extern int x = 9 ; int z = 10 ; typedef long long int LL ; void calSquare ( int arg ) { printf ( " The square of %d is %d\n  " , arg , arg * arg ) ; } int main ( void ) { const int a = 32 ; char b = 'G' ; extern int z ; LL c = 1000000 ; printf ( " Hello World!\n  " ) ; printf ( " This is the value of the constant variable 'a' : %d\n  " , a ) ; printf ( " 'b' is a char variable. Its value is %c\n  " , b ) ; printf ( " 'c' is a long long int variable. Its value is %lld\n  " , c ) ; printf ( " These are the values of the extern variables 'x' and 'z' " " respectively : %d and %d\n  " , x , z ) ; x = 2 ; z = 5 ; printf ( " These are the modified values of the extern variables " " 'x' and 'z' respectively : %d and %d\n  " , x , z ) ; printf ( " The value of static variable 'y' is NOT initialized to 5 after the " " first iteration! See for yourself : ) \n  " ) ; while ( x > 0 ) { static int y = 5 ; y + + ; printf ( " The value of y is %d\n  " , y ) ; x-- ; } calSquare ( 5 ) ; printf ( " Bye! See you soon. : ) \n  " ) ; return 0 ; }
#include <iostream> using namespace std ; class Distance { public : int feet , inch ; Distance ( int f , int i ) { this-> feet = f ; this-> inch = i ; } void operator- ( ) { feet-- ; inch-- ; cout < < " \n Feet & Inches ( Decrement ) : " < < feet < < " ' " < < inch ; } } ; int main ( ) { Distance d1 ( 8 , 9 ) ; -d1 ; return 0 ; }
#include <iostream> using namespace std ; class Distance { public : int feet , inch ; Distance ( ) { this-> feet = 0 ; this-> inch = 0 ; } Distance ( int f , int i ) { this-> feet = f ; this-> inch = i ; } Distance operator + ( Distance & d2 ) { Distance d3 ; d3.feet = this-> feet + d2.feet ; d3.inch = this-> inch + d2.inch ; return d3 ; } } ; int main ( ) { Distance d1 ( 8 , 9 ) ; Distance d2 ( 10 , 2 ) ; Distance d3 ; d3 = d1 + d2 ; cout < < " \n Total Feet & Inches : " < < d3.feet < < " ' " < < d3.inch ; return 0 ; }
#include <iostream> using namespace std ; class Distance { public : int feet , inch ; Distance ( ) { this-> feet = 0 ; this-> inch = 0 ; } Distance ( int f , int i ) { this-> feet = f ; this-> inch = i ; } friend Distance operator + ( Distance & , Distance & ) ; } ; Distance operator + ( Distance & d1 , Distance & d2 ) { Distance d3 ; d3.feet = d1.feet + d2.feet ; d3.inch = d1.inch + d2.inch ; return d3 ; } int main ( ) { Distance d1 ( 8 , 9 ) ; Distance d2 ( 10 , 2 ) ; Distance d3 ; d3 = d1 + d2 ; cout < < " \n Total Feet & Inches : " < < d3.feet < < " ' " < < d3.inch ; return 0 ; }
#include <iostream> #include <string> struct foo { int x , y , z ; } ; double f [ 3 ] ; int * p ; std : : string s ; int main ( int argc , char * argv [ ] ) { foo x = foo ( ) ; std : : cout < < x.x < < x.y < < x.z < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Geeks { public : string geekname ; void printname ( ) { cout < < " Geekname is : " < < geekname ; } } ; int main ( ) { Geeks obj1 ; obj1.geekname = " GeeksForGeeks " ; obj1.printname ( ) ; return 0 ; }
#include <iostream> using namespace std ; struct Point { int x , y ; } ; int main ( ) { struct Point arr [ 10 ] ; arr [ 0 ] .x = 10 ; arr [ 0 ] .y = 20 ; cout < < arr [ 0 ] .x < < " , " < < arr [ 0 ] .y ; return 0 ; }
#include <iostream> using namespace std ; union test { int x , y ; } ; int main ( ) { union test t ; t.x = 2 ; cout < < " After making x = 2 : " < < endl < < " x = " < < t.x < < " , y = " < < t.y < < endl ; t.y = 10 ; cout < < " After making Y = 10 : " < < endl < < " x = " < < t.x < < " , y = " < < t.y < < endl ; return 0 ; }
#include <iostream> using namespace std ; enum week { Mon , Tue , Wed , Thur , Fri , Sat , Sun } ; int main ( ) { enum week day ; day = Wed ; cout < < day ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t start , ending ; long addition ; time ( & start ; ) ; for ( int i = 0 ; i < 20000 ; i + + ) { for ( int j = 0 ; j < 20000 ; j + + ) ; } for ( int i = 0 ; i < 20000 ; i + + ) { for ( int j = 0 ; j < 20000 ; j + + ) ; } for ( int i = 0 ; i < 20000 ; i + + ) { for ( int j = 0 ; j < 20000 ; j + + ) ; } time ( & ending ; ) ; cout < < " Total time required = " < < difftime ( ending , start ) < < " seconds " < < endl ; return 0 ; }
#include <iostream> using namespace std ; int sum ( int x , int y , int z = 0 , int w = 0 ) { return ( x + y + z + w ) ; } int main ( ) { cout < < sum ( 10 , 15 ) < < endl ; cout < < sum ( 10 , 15 , 25 ) < < endl ; cout < < sum ( 10 , 15 , 25 , 30 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int removeZero ( int n ) { int res = 0 ; int d = 1 ; while ( n > 0 ) { if ( n % 10 ! = 0 ) { res + = ( n % 10 ) * d ; d * = 10 ; } n / = 10 ; } return res ; } bool isEqual ( int a , int b ) { if ( removeZero ( a ) + removeZero ( b ) = = removeZero ( a + b ) ) return true ; return false ; } int main ( ) { int a = 105 , b = 106 ; isEqual ( a , b ) ? cout < < " Yes " : cout < < " No " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char ch ; float f ; int i ; double d ; long l ; cout < < ch < < endl ; cout < < f < < endl ; cout < < i < < endl ; cout < < d < < endl ; cout < < l < < endl ; return 0 ; }
#include <stdio.h> void f ( void ) ; int x = 38 ; int y = 39 ; int main ( ) { f ( ) ; printf ( " x = % d\n  " , x ) ; printf ( " y = % d\n  " , y ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { for ( char a = 0 ; a < = 225 ; a + + ) cout < < a ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { bool a = true ; for ( a = 1 ; a < = 5 ; a + + ) cout < < a ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { short a ; for ( a = 32767 ; a < 32770 ; a + + ) cout < < a < < " \n  " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { unsigned short a ; for ( a = 65532 ; a < 65536 ; a + + ) cout < < a < < " \n  " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x1 = 10 , x2 = 20 , m = 2 ; bool b1 , b2 ; b1 = x1 = = x2 ; b2 = x1 < x2 ; cout < < " b1 is = " < < b1 < < " \n  " ; cout < < " b2 is = " < < b2 < < " \n  " ; bool b3 = true ; if ( b3 ) cout < < " Yes " < < " \n  " ; else cout < < " No " < < " \n  " ; int x3 = false + 5 * m - b3 ; cout < < x3 ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n = 2 ; char str [ 50 ] ; FILE * fptr = fopen ( " sample.txt " , " w " ) ; if ( fptr = = NULL ) { printf ( " Could not open file " ) ; return 0 ; } for ( i = 0 ; i <n ; i + + ) { puts ( " Enter a name " ) ; gets ( str ) ; fprintf ( fptr , " %d. %s\n  " , i , str ) ; } fclose ( fptr ) ; return 0 ; }
#include <iostream> using namespace std ; double add ( double a , double b ) { return a + b ; } int main ( ) { cout < < " Sum = " < < add ( 2.4 , 8.5 ) < < endl ; cout < < " Sum = " < < add ( 16 , 18 ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Test { int * ptr ; public : Test ( int i = 0 ) { ptr = new int ( i ) ; } void setValue ( int i ) { * ptr = i ; } void print ( ) { cout < < * ptr < < endl ; } } ; int main ( ) { Test t1 ( 5 ) ; Test t2 ; t2 = t1 ; t1.setValue ( 10 ) ; t2.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int * ptr ; public : Test ( int i = 0 ) { ptr = new int ( i ) ; } void setValue ( int i ) { * ptr = i ; } void print ( ) { cout < < * ptr < < endl ; } Test & operator = ( const Test & t ; ) ; } ; Test & Test : : operator = ( const Test & t ; ) { if ( this ! = & t ; ) * ptr = * ( t.ptr ) ; return * this ; } int main ( ) { Test t1 ( 5 ) ; Test t2 ; t2 = t1 ; t1.setValue ( 10 ) ; t2.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace first { int val = 500 ; } int val = 100 ; int main ( ) { int val = 200 ; cout < < first : : val < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; namespace ns1 { int value ( ) { return 5 ; } } namespace ns2 { const double x = 100 ; double value ( ) { return 2 * x ; } } int main ( ) { cout < < ns1 : : value ( ) < < '\n ' ; cout < < ns2 : : value ( ) < < '\n ' ; cout < < ns2 : : x < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { class geek { public : void display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } } ; } int main ( ) { ns : : geek obj ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { class geek ; } class ns : : geek { public : void display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } } ; int main ( ) { ns : : geek obj ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; namespace ns { void display ( ) ; class geek { public : void display ( ) ; } ; } void ns : : geek : : display ( ) { cout < < " ns : : geek : : display ( ) \n  " ; } void ns : : display ( ) { cout < < " ns : : display ( ) \n  " ; } int main ( ) { ns : : geek obj ; ns : : display ( ) ; obj.display ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unsigned root = chrono : : system_clock : : now ( ) .time_since_epoch ( ) .count ( ) ; default_random_engine generator ( root ) ; double can_val = generate_canonical <double , numeric_limits <double> : : digits> ( generator ) ; cout < < " Random canonical value : " < < can_val ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; printf ( " %c\n  " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 45 , y = 90 ; printf ( " %d\n  " , x ) ; printf ( " %i\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { float a = 12.67 ; printf ( " %f\n  " , a ) ; printf ( " %e\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 67 ; printf ( " %o\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 15 ; printf ( " %x\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ ] = " geeksforgeeks " ; printf ( " %s\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " geeksforgeeks " ; printf ( " %20s\n  " , str ) ; printf ( " %-20s\n  " , str ) ; printf ( " %20.5s\n  " , str ) ; printf ( " %-20.5s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; scanf ( " %d " , & a ; ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 0 ; scanf ( " %i " , & a ; ) ; printf ( " %d\n  " , a ) ; scanf ( " %i " , & a ; ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { float a = 0.0 ; scanf ( " %f " , & a ; ) ; printf ( " %f\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ 20 ] ; scanf ( " %s " , str ) ; printf ( " %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; scanf ( " %c " , & ch ; ) ; printf ( " %c\n  " , ch ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string su = " Jatin Goyal " ; transform ( su.begin ( ) , su.end ( ) , su.begin ( ) , : : toupper ) ; cout < < su < < endl ; string sl = " Jatin Goyal " ; transform ( sl.begin ( ) , sl.end ( ) , sl.begin ( ) , : : tolower ) ; cout < < sl < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str1 [ ] = " 5672345 " ; long int num1 = atol ( str1 ) ; cout < < " Number is " < < num1 < < " \n  " ; char str2 [ ] = " 10000002 0 " ; long int num2 = atol ( str2 ) ; cout < < " Number is " < < num2 < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char big_num1 [ ] = " 8239206483232728 " ; long long int num1 = atoll ( big_num1 ) ; cout < < " Number is " < < num1 < < " \n  " ; char big_num2 [ ] = " 100000 9 1324100 " ; long long int num2 = atoll ( big_num2 ) ; cout < < " Number is " < < num2 < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char pi [ ] = " 3.1415926535 " ; double pi_val = atof ( pi ) ; cout < < " Value of pi = " < < pi_val < < " \n  " ; char acc_g [ ] = " 9.8 " ; double acc_g_val = atof ( acc_g ) ; cout < < " Value of acceleration due to gravity = " < < acc_g_val < < " \n  " ; return 0 ; }
#include <stdio.h> void fun1 ( ) { unsigned char i ; for ( i = 0 ; i <256 ; i + + ) printf ( " %d " , i ) ; } int main ( ) { fun1 ( ) ; return 0 ; }
#include <stdio.h> void fun2 ( ) { signed char i ; for ( i = 0 ; i <128 ; i + + ) printf ( " %d " , i ) ; } int main ( ) { fun2 ( ) ; return 0 ; }
#include <stdio.h> void fun1 ( ) { unsigned char i = 0 ; do { printf ( " %d " , i ) ; i + + ; } while ( i > 0 ) ; } int main ( ) { fun1 ( ) ; return 0 ; }
#include <stdio.h> void fun2 ( ) { signed char i = 0 ; do { printf ( " %d " , i ) ; i + + ; } while ( i > 0 ) ; } int main ( ) { fun2 ( ) ; return 0 ; }
#include <iostream> #include <setjmp.h> using namespace std ; jmp_buf buf ; int main ( ) { int x = 1 ; setjmp ( buf ) ; cout < < " 1 " ; x + + ; if ( x < = 100 ) longjmp ( buf , 1 ) ; return 0 ; }
#include <stdio.h> void mysubstr ( char str [ ] , int low , int high ) { if ( low < = high ) { printf ( " %c " , str [ low ] ) ; mysubstr ( str , low + 1 , high ) ; } } int main ( ) { char str [ ] = " geeksforgeeks " ; mysubstr ( str , 1 , 3 ) ; return 0 ; }
#include <stdio.h> void mysubstr ( char str [ ] , int low , int high ) { printf ( " %. * s " , high-low + 1 , ( str + low ) ) ; } int main ( ) { char str [ ] = " geeksforgeeks " ; mysubstr ( str , 1 , 3 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 101GeeksForGeeks " ; int base = 3 ; wchar_t * endString ; long value = wcstol ( string , & endString ; , base ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 101GFG " ; wchar_t * endString ; long value = wcstol ( string , & endString ; , 2 ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; value = wcstol ( string , & endString ; , 5 ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; value = wcstol ( string , & endString ; , 12 ) ; wcout < < L " String value --> " < < string < < " \n  " ; wcout < < L " Long integer value --> " < < value < < " \n  " ; wcout < < L " End String = " < < endString < < " \n  " ; return 0 ; }
#include <iostream> int foo ( ) { return 10 ; } char foo ( ) { return 'a' ; } int main ( ) { char x = foo ( ) ; getchar ( ) ; return 0 ; }
#include <iostream> class Test { static void fun ( int i ) { } void fun ( int i ) { } } ; int main ( ) { Test t ; getchar ( ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; int f ( int x ) { return x + 10 ; } int f ( const int x ) { return x + 10 ; } int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; int f ( int x , int y ) { return x + 10 ; } int f ( int x , int y = 10 ) { return x + y ; } int main ( ) { getchar ( ) ; return 0 ; }
#include <iostream> using namespace std ; void print ( int i ) { cout < < " Here is int " < < i < < endl ; } void print ( double f ) { cout < < " Here is float " < < f < < endl ; } void print ( char const * c ) { cout < < " Here is char * " < < c < < endl ; } int main ( ) { print ( 10 ) ; print ( 10.10 ) ; print ( " ten " ) ; return 0 ; }
#include <iostream> using namespace std ; class Rectangle { int width ; int length ; public : Rectangle ( ) { length = 0 ; width = 0 ; } Rectangle ( int l , int w ) { length = l ; width = w ; } ~Rectangle ( ) { cout < < " Destructor of rectangle " < < endl ; } int getLength ( ) { return length ; } int getWidth ( ) { return width ; } } ; int main ( ) { { Rectangle r ( 2 , 3 ) ; cout < < " Inside Block1... " < < endl ; cout < < " length of rectangle is : " < < r.getLength ( ) < < endl ; cout < < " width of rectangle is : " < < r.getWidth ( ) < < endl ; } cout < < " with the exit of the block , destructor\n  " < < " called automatically for the object stored in stack. " < < endl ; Rectangle * ptr2 ; { Rectangle * ptr3 = new Rectangle ( 5 , 6 ) ; ptr2 = ptr3 ; cout < < " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * " < < endl ; cout < < " Inside Block2 " < < endl ; cout < < " length of rectangle is : " < < ptr3-> getLength ( ) < < endl ; cout < < " width of rectangle is : " < < ptr3-> getWidth ( ) < < endl ; delete ptr3 ; } cout < < " length of rectangle is : " < < ptr2-> getLength ( ) < < endl ; cout < < " width of rectangle is : " < < ptr2-> getWidth ( ) < < endl ; return 0 ; }
#include <string> #include <iostream> int main ( void ) { std : : string str = " y = 4.4786754x + 5.6 " ; double y , x , a , b ; y = 0 ; x = 0 ; std : : size_t offset = 0 ; a = std : : stod ( & str ; [ 2 ] , & offset ; ) ; b = std : : stod ( & str ; [ offset + 3 ] ) ; std : : cout < < b ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string b = " 5 " ; double a = stod ( b ) ; int c = stoi ( b ) ; cout < < b < < " " < < a < < " " < < c < < endl ; }
#include <iostream> #include <string> int main ( ) { std : : string x ; x = " 20 " ; float y = std : : stof ( x ) + 2.5 ; std : : cout < < y ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string str = " 5000.5 " ; float x = std : : stof ( str ) ; std : : cout < < x ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string str = " 500087 " ; long double x = std : : stold ( str ) ; std : : cout < < x ; return 0 ; }
#include <iostream> #include <string> int main ( ) { std : : string x ; x = " 2075 " ; long double y = std : : stof ( x ) + 2.5 ; std : : cout < < y ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; printf ( " Hello World\n  " ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; cout < < " Hello World\n  " ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " Hello World\n  " ) ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 10 ; i + + ) { cout < < " Hello World\n  " ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 ; while ( i < 6 ) { printf ( " Hello World\n  " ) ; i + + ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int i = 1 ; while ( i < 6 ) { cout < < " Hello World\n  " ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 2 ; do { printf ( " Hello World\n  " ) ; i + + ; } while ( i < 1 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int i = 2 ; do { cout < < " Hello World\n  " ; i + + ; } while ( i < 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( ; ; ) { printf ( " This loop will run forever.\n  " ) ; } }
#include <iostream> using namespace std ; int main ( ) { int i ; for ( ; ; ) { cout < < " This loop will run forever.\n  " ; } }
#include <iostream> #include <set> using namespace std ; void printSet ( set <int> myset ) { set <int> : : iterator it ; for ( it = myset.begin ( ) ; it ! = myset.end ( ) ; + + it ) cout < < ' ' < < * it ; cout < < '\n ' ; } void deleteByMethod1 ( set <int> myset ) { cout < < " \n Set originally : " ; printSet ( myset ) ; set <int> : : iterator it ; it = prev ( myset.end ( ) ) ; myset.erase ( it ) ; cout < < " Set after deletion : " ; printSet ( myset ) ; } int main ( ) { set <int> myset ; for ( int i = 1 ; i < 10 ; i + + ) myset.insert ( i * 10 ) ; deleteByMethod1 ( myset ) ; return 0 ; }
#include <iostream> #include <set> using namespace std ; void printSet ( set <int> myset ) { set <int> : : iterator it ; for ( it = myset.begin ( ) ; it ! = myset.end ( ) ; + + it ) cout < < ' ' < < * it ; cout < < '\n ' ; } void deleteByMethod2 ( set <int> myset ) { cout < < " \n Set originally : " ; printSet ( myset ) ; set <int> : : iterator it ; it = --myset.end ( ) ; myset.erase ( it ) ; cout < < " Set after deletion : " ; printSet ( myset ) ; } int main ( ) { set <int> myset ; for ( int i = 1 ; i < 10 ; i + + ) myset.insert ( i * 10 ) ; deleteByMethod2 ( myset ) ; return 0 ; }
#include <iostream> #define gfg 7 #if gfg > 200 #undef gfg #define gfg 200 #elif gfg < 50 #undef gfg #define gfg 50 #else #undef gfg #define gfg 100 #endif int main ( ) { std : : cout < < gfg ; }
#include <stdio.h> int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } int main ( ) { int num ; scanf ( " %d " , & num ; ) ; printf ( " Reverse of no. is %d " , reversDigits ( num ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> struct Student { char * name ; int id ; char age ; } ; int comparator ( const void * p , const void * q ) { return strcmp ( ( ( struct Student * ) p ) -> name , ( ( struct Student * ) q ) -> name ) ; } int main ( ) { int i = 0 , n = 5 ; struct Student arr [ n ] ; arr [ 0 ] .id = 1 ; arr [ 0 ] .name = " bd " ; arr [ 0 ] .age = 12 ; arr [ 1 ] .id = 2 ; arr [ 1 ] .name = " ba " ; arr [ 1 ] .age = 10 ; arr [ 2 ] .id = 3 ; arr [ 2 ] .name = " bc " ; arr [ 2 ] .age = 8 ; arr [ 3 ] .id = 4 ; arr [ 3 ] .name = " aaz " ; arr [ 3 ] .age = 9 ; arr [ 4 ] .id = 5 ; arr [ 4 ] .name = " az " ; arr [ 4 ] .age = 10 ; printf ( " Unsorted Student Records : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " Id = %d , Name = %s , Age = %d \n  " , arr [ i ] .id , arr [ i ] .name , arr [ i ] .age ) ; } qsort ( arr , n , sizeof ( struct Student ) , comparator ) ; printf ( " \n \n Student Records sorted by Name : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " Id = %d , Name = %s , Age = %d \n  " , arr [ i ] .id , arr [ i ] .name , arr [ i ] .age ) ; } return 0 ; }
#include <stdio.h> unsigned int factorial ( unsigned int n ) { if ( n = = 0 ) return 1 ; return n * factorial ( n - 1 ) ; } int main ( ) { int num ; scanf ( " %d " , & num ; ) ; printf ( " Enter the number : %d " , num ) ; printf ( " \n Factorial of %d is %d " , num , factorial ( num ) ) ; return 0 ; }
#include <stdio.h> void func ( int a , int b ) { a + = b ; printf ( " In func , a = %d b = %d\n  " , a , b ) ; } int main ( void ) { int x = 5 , y = 7 ; func ( x , y ) ; printf ( " In main , x = %d y = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> void swapnum ( int * i , int * j ) { int temp = * i ; * i = * j ; * j = temp ; } int main ( void ) { int a = 10 , b = 20 ; swapnum ( & a ; , & b ; ) ; printf ( " a is %d and b is %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> int isPrime ( int n ) { if ( n < = 1 ) return 0 ; for ( int i = 2 ; i < n ; i + + ) if ( n % i = = 0 ) return 0 ; return 1 ; } int main ( ) { int num ; scanf ( " %d " , & num ; ) ; printf ( " Enter the number : %d " , num ) ; printf ( " \n Is %d prime : " , num ) ; if ( isPrime ( num ) = = 1 ) { printf ( " Yes " ) ; } else { printf ( " No " ) ; } return 0 ; }
#include " areaperi.h " #include <stdio.h> int main ( ) { float radius , length , breadth ; scanf ( " %f " , & radius ; ) ; printf ( " Enter the radius of the circle : %f " , radius ) ; printf ( " \n The area of circle : %f " , AREA_OF_CIRCLE ( radius ) ) ; printf ( " \n The perimeter of circle : %f " , PERIMETER_OF_CIRCLE ( radius ) ) ; scanf ( " %f " , & length ; ) ; printf ( " \n Enter the length of the Rectangle : %f " , length ) ; scanf ( " %f " , & breadth ; ) ; printf ( " \n Enter the breadth of the Rectangle : %f " , breadth ) ; printf ( " \n The area of Rectangle : %f " , AREA_OF_RECTANGLE ( length , breadth ) ) ; printf ( " \n The perimeter of Rectangle : %f " , PERIMETER_OF_CIRCLE ( length , breadth ) ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fptr1 , * fptr2 ; char filename [ 100 ] , c ; printf ( " Enter the filename to open for reading \n  " ) ; scanf ( " %s " , filename ) ; fptr1 = fopen ( filename , " r " ) ; if ( fptr1 = = NULL ) { printf ( " Cannot open file %s \n  " , filename ) ; exit ( 0 ) ; } printf ( " Enter the filename to open for writing \n  " ) ; scanf ( " %s " , filename ) ; fptr2 = fopen ( filename , " w " ) ; if ( fptr2 = = NULL ) { printf ( " Cannot open file %s \n  " , filename ) ; exit ( 0 ) ; } c = fgetc ( fptr1 ) ; while ( c ! = EOF ) { fputc ( c , fptr2 ) ; c = fgetc ( fptr1 ) ; } printf ( " \n Contents copied to %s " , filename ) ; fclose ( fptr1 ) ; fclose ( fptr2 ) ; return 0 ; }
#include <stdio.h> struct Date { int date ; int month ; int year ; } ; int main ( ) { int date1 , date2 , month1 , month2 , year1 , year2 ; scanf ( " %d " , & date1 ; ) ; printf ( " Enter the first date : %d " , date1 ) ; scanf ( " %d " , & month1 ; ) ; printf ( " \n Enter the first month : %d " , month1 ) ; scanf ( " %d " , & year1 ; ) ; printf ( " \n Enter the first year : %d " , year1 ) ; struct Date Date1 = { date1 , month1 , year1 } ; scanf ( " %d " , & date2 ; ) ; printf ( " \n Enter the second date : %d " , date2 ) ; scanf ( " %d " , & month2 ; ) ; printf ( " \n Enter the second month : %d " , month2 ) ; scanf ( " %d " , & year2 ; ) ; printf ( " \n Enter the second year : %d " , year2 ) ; struct Date Date2 = { date2 , month2 , year2 } ; printf ( " \n The given dates are : " ) ; if ( Date1.date = = Date2.date & & Date1.month = = Date2.month & & Date1.year = = Date2.year ) { printf ( " Equal " ) ; } else { printf ( " Unequal " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> struct Student { char * name ; int id ; char age ; } ; int comparator ( const void * p , const void * q ) { return strcmp ( ( ( struct Student * ) p ) -> name , ( ( struct Student * ) q ) -> name ) ; } int main ( ) { int i = 0 , n = 5 ; struct Student arr [ n ] ; arr [ 0 ] .id = 1 ; arr [ 0 ] .name = " bd " ; arr [ 0 ] .age = 12 ; arr [ 1 ] .id = 2 ; arr [ 1 ] .name = " ba " ; arr [ 1 ] .age = 10 ; arr [ 2 ] .id = 3 ; arr [ 2 ] .name = " bc " ; arr [ 2 ] .age = 8 ; arr [ 3 ] .id = 4 ; arr [ 3 ] .name = " aaz " ; arr [ 3 ] .age = 9 ; arr [ 4 ] .id = 5 ; arr [ 4 ] .name = " az " ; arr [ 4 ] .age = 10 ; printf ( " Unsorted Student Records : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " Id = %d , Name = %s , Age = %d \n  " , arr [ i ] .id , arr [ i ] .name , arr [ i ] .age ) ; } qsort ( arr , n , sizeof ( struct Student ) , comparator ) ; printf ( " \n \n Student Records sorted by Name : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " Id = %d , Name = %s , Age = %d \n  " , arr [ i ] .id , arr [ i ] .name , arr [ i ] .age ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> static int myCompare ( const void * a , const void * b ) { return strcmp ( * ( const char * * ) a , * ( const char * * ) b ) ; } void sort ( const char * arr [ ] , int n ) { qsort ( arr , n , sizeof ( const char * ) , myCompare ) ; } int main ( ) { const char * arr [ ] ; = { " GeeksforGeeks " , " GeeksQuiz " , " CLanguage " } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int i ; printf ( " Given array of names is\n  " ) ; for ( i = 0 ; i < n ; i + + ) printf ( " %d : %s \n  " , i , arr [ i ] ) ; sort ( arr , n ) ; printf ( " \n Sorted array of names is\n  " ) ; for ( i = 0 ; i < n ; i + + ) printf ( " %d : %s \n  " , i , arr [ i ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string1 [ 100 ] , string2 [ 100 ] ; scanf ( " %s " , string1 ) ; printf ( " Enter the first string : %s " , string1 ) ; scanf ( " %s " , string2 ) ; printf ( " \n Enter the second string : %s " , string2 ) ; printf ( " \n Are both strings same : " ) ; if ( strcmp ( string1 , string2 ) = = 0 ) { printf ( " Yes " ) ; } else { printf ( " No " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr ; int n , i , sum = 0 ; n = 5 ; printf ( " Enter number of elements : %d\n  " , n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory not allocated.\n  " ) ; exit ( 0 ) ; } else { printf ( " Memory successfully allocated using malloc.\n  " ) ; for ( i = 0 ; i < n ; + + i ) { ptr [ i ] = i + 1 ; } printf ( " The elements of the array are : " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d , " , ptr [ i ] ) ; } } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr ; int n , i , sum = 0 ; n = 5 ; printf ( " Enter number of elements : %d\n  " , n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory not allocated.\n  " ) ; exit ( 0 ) ; } else { printf ( " Memory successfully allocated using calloc.\n  " ) ; for ( i = 0 ; i < n ; + + i ) { ptr [ i ] = i + 1 ; } printf ( " The elements of the array are : " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d , " , ptr [ i ] ) ; } } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr , * ptr1 ; int n , i , sum = 0 ; n = 5 ; printf ( " Enter number of elements : %d\n  " , n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; ptr1 = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL || ptr1 = = NULL ) { printf ( " Memory not allocated.\n  " ) ; exit ( 0 ) ; } else { printf ( " Memory successfully allocated using malloc.\n  " ) ; free ( ptr ) ; printf ( " Malloc Memory successfully freed.\n  " ) ; printf ( " \n Memory successfully allocated using calloc.\n  " ) ; free ( ptr1 ) ; printf ( " Calloc Memory successfully freed.\n  " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr ; int n , i , sum = 0 ; n = 5 ; printf ( " Enter number of elements : %d\n  " , n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory not allocated.\n  " ) ; exit ( 0 ) ; } else { printf ( " Memory successfully allocated using calloc.\n  " ) ; for ( i = 0 ; i < n ; + + i ) { ptr [ i ] = i + 1 ; } printf ( " The elements of the array are : " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d , " , ptr [ i ] ) ; } n = 10 ; printf ( " \n \n Enter the new size of the array : %d\n  " , n ) ; ptr = realloc ( ptr , n * sizeof ( int ) ) ; printf ( " Memory successfully re-allocated using realloc.\n  " ) ; for ( i = 5 ; i < n ; + + i ) { ptr [ i ] = i + 1 ; } printf ( " The elements of the array are : " ) ; for ( i = 0 ; i < n ; + + i ) { printf ( " %d , " , ptr [ i ] ) ; } free ( ptr ) ; } return 0 ; }
#include <limits.h> #include <stdio.h> #include <stdlib.h> struct Stack { int top ; unsigned capacity ; int * array ; } ; struct Stack * createStack ( unsigned capacity ) { struct Stack * stack = ( struct Stack * ) malloc ( sizeof ( struct Stack ) ) ; stack-> capacity = capacity ; stack-> top = -1 ; stack-> array = ( int * ) malloc ( stack-> capacity * sizeof ( int ) ) ; return stack ; } int isFull ( struct Stack * stack ) { return stack-> top = = stack-> capacity - 1 ; } int isEmpty ( struct Stack * stack ) { return stack-> top = = -1 ; } void push ( struct Stack * stack , int item ) { if ( isFull ( stack ) ) return ; stack-> array [ + + stack-> top ] = item ; printf ( " %d pushed to stack\n  " , item ) ; } int pop ( struct Stack * stack ) { if ( isEmpty ( stack ) ) return INT_MIN ; return stack-> array [ stack-> top-- ] ; } int main ( ) { struct Stack * stack = createStack ( 100 ) ; push ( stack , 10 ) ; push ( stack , 20 ) ; push ( stack , 30 ) ; printf ( " %d popped from stack\n  " , pop ( stack ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned char a = 5 , b = 9 ; printf ( " a = %d , b = %d\n  " , a , b ) ; printf ( " a & b ; = %d\n  " , a & b ) ; printf ( " a|b = %d\n  " , a | b ) ; printf ( " a^b = %d\n  " , a ^ b ) ; printf ( " ~a = %d\n  " , a = ~a ) ; printf ( " b < <1 = %d\n  " , b < < 1 ) ; printf ( " b> > 1 = %d\n  " , b > > 1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 ; char y = 'a' ; x = x + y ; float z = x + 1.0 ; printf ( " x = %d , z = %f " , x , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { double x = 1.2 ; int sum = ( int ) x + 1 ; printf ( " sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int power ( int x , unsigned int y ) { if ( y = = 0 ) return 1 ; if ( y % 2 = = 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; } int order ( int x ) { int n = 0 ; while ( x ) { n + + ; x = x / 10 ; } return n ; } int isArmstrong ( int x ) { int n = order ( x ) ; int temp = x , sum = 0 ; while ( temp ) { int r = temp % 10 ; sum + = power ( r , n ) ; temp = temp / 10 ; } if ( sum = = x ) return 1 ; else return 0 ; } int main ( ) { int i = 1 ; for ( i = 1 ; i < = 100 ; i + + ) if ( isArmstrong ( i ) = = 1 ) printf ( " %d is an ArmStrong Number\n  " , i ) ; else printf ( " %d is not an ArmStrong Number\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; for ( i = 1 ; i < 5 ; i + + ) { for ( j = 1 ; j < = 6 - i ; j + + ) printf ( " %d " , j ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define N 3 void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N ] ) { int i , j ; for ( i = 0 ; i < N ; i + + ) for ( j = 0 ; j < N ; j + + ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ; } int main ( ) { int A [ N ] [ N ] = { { 1 , 1 , 1 } , { 2 , 2 , 2 } , { 3 , 3 , 3 } } ; int B [ N ] [ N ] = { { 1 , 1 , 1 } , { 2 , 2 , 2 } , { 3 , 3 , 3 } } ; int C [ N ] [ N ] ; int i , j ; add ( A , B , C ) ; printf ( " Result matrix is \n  " ) ; for ( i = 0 ; i < N ; i + + ) { for ( j = 0 ; j < N ; j + + ) printf ( " %d " , C [ i ] [ j ] ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> struct Student { int roll_no ; char name [ 100 ] ; float marks ; } ; int main ( ) { int i = 0 ; char n [ 100 ] ; struct Student student [ 50 ] ; for ( i = 0 ; i < 50 ; i + + ) { printf ( " \n Enter details for Student %d " , i + 1 ) ; printf ( " \n Roll Number : " ) ; scanf ( " %d " , & student ; [ i ] .roll_no ) ; printf ( " \n Name : " ) ; scanf ( " %s " , student [ i ] .name ) ; printf ( " \n Marks : " ) ; scanf ( " %f " , & student ; [ i ] .marks ) ; } printf ( " \n Enter the name of the student whose details you need : " ) ; scanf ( " %s " , n ) ; for ( i = 0 ; i < 50 ; i + + ) { if ( strcmp ( n , student [ i ] .name ) = = 0 ) { printf ( " \n Roll Number : %d " , student [ i ] .roll_no ) ; printf ( " \n Name : %s " , student [ i ] .name ) ; printf ( " \n Marks : %f " , student [ i ] .marks ) ; break ; } } if ( i = = 50 ) printf ( " No student found with this name " ) ; }
#include <stdio.h> #include <string.h> void reverseString ( char * str ) { int l , i ; char * begin_ptr , * end_ptr , ch ; l = strlen ( str ) ; begin_ptr = str ; end_ptr = str ; for ( i = 0 ; i < l - 1 ; i + + ) end_ptr + + ; for ( i = 0 ; i < l / 2 ; i + + ) { ch = * end_ptr ; * end_ptr = * begin_ptr ; * begin_ptr = ch ; begin_ptr + + ; end_ptr-- ; } } int main ( ) { char str [ 100 ] = " GeeksForGeeks " ; printf ( " Enter a string : %s\n  " , str ) ; reverseString ( str ) ; printf ( " Reverse of the string : %s\n  " , str ) ; return 0 ; }
#include <stdio.h> struct Date { int date ; int month ; int year ; } ; int main ( ) { int date1 , date2 , month1 , month2 , year1 , year2 ; scanf ( " %d " , & date1 ; ) ; printf ( " Enter the first date : %d " , date1 ) ; scanf ( " %d " , & month1 ; ) ; printf ( " \n Enter the first month : %d " , month1 ) ; scanf ( " %d " , & year1 ; ) ; printf ( " \n Enter the first year : %d " , year1 ) ; struct Date Date1 = { date1 , month1 , year1 } ; scanf ( " %d " , & date2 ; ) ; printf ( " \n Enter the second date : %d " , date2 ) ; scanf ( " %d " , & month2 ; ) ; printf ( " \n Enter the second month : %d " , month2 ) ; scanf ( " %d " , & year2 ; ) ; printf ( " \n Enter the second year : %d " , year2 ) ; struct Date Date2 = { date2 , month2 , year2 } ; printf ( " \n The given dates are : " ) ; if ( Date1.date = = Date2.date & & Date1.month = = Date2.month & & Date1.year = = Date2.year ) { printf ( " Equal " ) ; } else { printf ( " Unequal " ) ; } return 0 ; }
#include <limits.h> #include <stdio.h> #include <stdlib.h> struct Stack { int top ; unsigned capacity ; int * array ; } ; struct Stack * createStack ( unsigned capacity ) { struct Stack * stack = ( struct Stack * ) malloc ( sizeof ( struct Stack ) ) ; stack-> capacity = capacity ; stack-> top = -1 ; stack-> array = ( int * ) malloc ( stack-> capacity * sizeof ( int ) ) ; return stack ; } int isFull ( struct Stack * stack ) { return stack-> top = = stack-> capacity - 1 ; } int isEmpty ( struct Stack * stack ) { return stack-> top = = -1 ; } void push ( struct Stack * stack , int item ) { if ( isFull ( stack ) ) return ; stack-> array [ + + stack-> top ] = item ; printf ( " %d pushed to stack\n  " , item ) ; } int pop ( struct Stack * stack ) { if ( isEmpty ( stack ) ) return INT_MIN ; return stack-> array [ stack-> top-- ] ; } int main ( ) { struct Stack * stack = createStack ( 100 ) ; push ( stack , 10 ) ; push ( stack , 20 ) ; push ( stack , 30 ) ; printf ( " %d popped from stack\n  " , pop ( stack ) ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> struct Student { char * name ; int id ; char age ; } ; int comparator ( const void * p , const void * q ) { return strcmp ( ( ( struct Student * ) p ) -> name , ( ( struct Student * ) q ) -> name ) ; } int main ( ) { int i = 0 , n = 5 ; struct Student arr [ n ] ; arr [ 0 ] .id = 1 ; arr [ 0 ] .name = " bd " ; arr [ 0 ] .age = 12 ; arr [ 1 ] .id = 2 ; arr [ 1 ] .name = " ba " ; arr [ 1 ] .age = 10 ; arr [ 2 ] .id = 3 ; arr [ 2 ] .name = " bc " ; arr [ 2 ] .age = 8 ; arr [ 3 ] .id = 4 ; arr [ 3 ] .name = " aaz " ; arr [ 3 ] .age = 9 ; arr [ 4 ] .id = 5 ; arr [ 4 ] .name = " az " ; arr [ 4 ] .age = 10 ; printf ( " Unsorted Student Records : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " Id = %d , Name = %s , Age = %d \n  " , arr [ i ] .id , arr [ i ] .name , arr [ i ] .age ) ; } qsort ( arr , n , sizeof ( struct Student ) , comparator ) ; printf ( " \n \n Student Records sorted by Name : \n  " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " Id = %d , Name = %s , Age = %d \n  " , arr [ i ] .id , arr [ i ] .name , arr [ i ] .age ) ; } return 0 ; }
#include <stdio.h> const int MAX = 3 ; void transpose ( int mat [ ] [ MAX ] , int tr [ ] [ MAX ] , int N ) { for ( int i = 0 ; i < N ; i + + ) for ( int j = 0 ; j < N ; j + + ) tr [ i ] [ j ] = mat [ j ] [ i ] ; } int isSymmetric ( int mat [ ] [ MAX ] , int N ) { int tr [ N ] [ MAX ] ; transpose ( mat , tr , N ) ; for ( int i = 0 ; i < N ; i + + ) for ( int j = 0 ; j < N ; j + + ) if ( mat [ i ] [ j ] ! = tr [ i ] [ j ] ) return 0 ; return 1 ; } int main ( ) { int mat [ 3 ] [ 3 ] = { { 1 , 3 , 5 } , { 3 , 2 , 4 } , { 5 , 4 , 1 } } ; if ( isSymmetric ( mat , 3 ) = = 1 ) printf ( " Yes " ) ; else printf ( " No " ) ; return 0 ; }
#include <stdio.h> int main ( void ) { printf ( " Hello Geeks\b\b\b\bF " ) ; return ( 0 ) ; }
#include <fenv.h> #include <iostream> #include <math.h> #pragma STDC FENV_ACCESS on using namespace std ; int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; sqrt ( -1 ) ; if ( fetestexcept ( FE_INVALID ) ) cout < < " sqrt ( -1 ) raises FE_INVALID " < < endl ; return 0 ; }
#include <iostream> #include <algorithm> #include <vector> using namespace std ; int main ( ) { vector <int> v1 = { 1 , 10 , 15 , 20 } ; vector <int> v2 = { 1 , 10 , 25 , 30 , 45 } ; vector <int> v3 = { 1 , 10 , 15 , 20 } ; vector <int> v4 = { 1 , 10 , 15 , 20 , 24 } ; pair < vector <int> : : iterator , vector <int> : : iterator > mispair ; mispair = mismatch ( v1.begin ( ) , v1.end ( ) , v2.begin ( ) ) ; cout < < " The 1st mismatch element of 1st container : " ; cout < < * mispair.first < < endl ; cout < < " The 1st mismatch element of 2nd container : " ; cout < < * mispair.second < < endl ; mispair = mismatch ( v3.begin ( ) , v3.end ( ) , v4.begin ( ) ) ; cout < < " The returned value from 1st container is : " ; cout < < * mispair.first < < endl ; cout < < " The returned value from 2nd container is : " ; cout < < * mispair.second < < endl ; }
#include <iostream> #include <algorithm> #include <vector> using namespace std ; bool compare ( int a , int b ) { return ( a> b ) ; } int main ( ) { vector <int> v1 = { 23 , 13 , 15 , 20 } ; vector <int> v2 = { 1 , 10 , 25 , 30 , 45 } ; vector <int> v3 = { 12 , 100 , 152 , 204 } ; vector <int> v4 = { 1 , 10 , 15 , 20 , 24 } ; pair < vector <int> : : iterator , vector <int> : : iterator > mispair ; mispair = mismatch ( v1.begin ( ) , v1.end ( ) , v2.begin ( ) , compare ) ; cout < < " The 1st mismatch element of 1st container : " ; cout < < * mispair.first < < endl ; cout < < " The 1st mismatch element of 2nd container : " ; cout < < * mispair.second < < endl ; mispair = mismatch ( v3.begin ( ) , v3.end ( ) , v4.begin ( ) , compare ) ; cout < < " The returned value from 1st container is : " ; cout < < * mispair.first < < endl ; cout < < " The returned value from 2nd container is : " ; cout < < * mispair.second < < endl ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; enum class GFG2 { var1 , var2 , var3 , var4 } ; int main ( ) { cout < < boolalpha ; cout < < " is_scalar : " < < endl ; cout < < " GFG1 : " < < is_scalar <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_scalar <GFG2> : : value < < endl ; cout < < " int [ 10 ] : " < < is_scalar <int [ 10 ] > : : value < < endl ; cout < < " int & : " < < is_scalar <int & > : : value < < endl ; cout < < " char : " < < is_scalar <char> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { class gfg { } ; cout < < boolalpha ; cout < < " is_scalar : " < < endl ; cout < < " int ( gfg : : * ) : " < < is_scalar <int ( gfg : : * ) > : : value < < endl ; cout < < " int * : " < < is_scalar <int * > : : value < < endl ; cout < < " bool : " < < is_scalar <bool> : : value < < endl ; cout < < " int ( int ) : " < < is_scalar <int ( int ) > : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; union GFG { int var1 ; float var2 ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_scalar : " < < endl ; cout < < " GFG : " < < is_scalar <GFG> : : value < < endl ; cout < < " float : " < < is_scalar <float> : : value < < endl ; cout < < " double : " < < is_scalar <double> : : value < < endl ; cout < < " char : " < < is_scalar <char> : : value < < endl ; cout < < " nullptr_t : " < < is_scalar <std : : nullptr_t> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct GFG1 { } ; union GFG2 { int var1 ; float var2 ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_compound : " < < endl ; cout < < " GFG1 : " < < is_compound <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_compound <GFG2> : : value < < endl ; cout < < " int : " < < is_compound <int> : : value < < endl ; cout < < " int * : " < < is_compound <int * > : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; enum class GFG2 { var1 , var2 , var3 , var4 } ; int main ( ) { cout < < boolalpha ; cout < < " is_compound : " < < endl ; cout < < " GFG1 : " < < is_compound <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_compound <GFG2> : : value < < endl ; cout < < " int [ 10 ] : " < < is_compound <int [ 10 ] > : : value < < endl ; cout < < " int & : " < < is_compound <int & > : : value < < endl ; cout < < " char : " < < is_compound <char> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { class gfg { } ; cout < < boolalpha ; cout < < " is_compound : " < < endl ; cout < < " int ( gfg : : * ) : " < < is_compound <int ( gfg : : * ) > : : value < < endl ; cout < < " float : " < < is_compound <float> : : value < < endl ; cout < < " double : " < < is_compound <double> : : value < < endl ; cout < < " int ( int ) : " < < is_compound <int ( int ) > : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG { } ; int main ( ) { cout < < boolalpha ; cout < < " is_fundamental : " < < '\n ' ; cout < < " GFG : " < < is_fundamental <GFG> : : value < < '\n ' ; cout < < " int : " < < is_fundamental <int> : : value < < '\n ' ; cout < < " int & : " < < is_fundamental <int & > : : value < < '\n ' ; cout < < " int * : " < < is_fundamental <int * > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_fundamental : " < < '\n ' ; cout < < " float : " < < is_fundamental <float> : : value < < '\n ' ; cout < < " float & : " < < is_fundamental <float & > : : value < < '\n ' ; cout < < " float * : " < < is_fundamental <float * > : : value < < '\n ' ; cout < < " double : " < < is_fundamental <double> : : value < < '\n ' ; cout < < " double & : " < < is_fundamental <double & > : : value < < '\n ' ; cout < < " double * : " < < is_fundamental <double * > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_fundamental : " < < '\n ' ; cout < < " char : " < < is_fundamental <char> : : value < < '\n ' ; cout < < " char & : " < < is_fundamental <char & > : : value < < '\n ' ; cout < < " char * : " < < is_fundamental <char * > : : value < < '\n ' ; cout < < " void : " < < is_fundamental <void> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_const : " < < endl ; cout < < " int : " < < is_const <int> : : value < < '\n ' ; cout < < " const int : " < < is_const <const int> : : value < < '\n ' ; cout < < " const int & : " < < is_const <typename remove_reference <const int & > : : type> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_const : " < < endl ; cout < < " const int * : " < < is_const <const int * > : : value < < '\n ' ; cout < < " int * const : " < < is_const <int * const> : : value < < '\n ' ; cout < < " const int & : " < < is_const <const int & > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_const : " < < endl ; cout < < " float : " < < is_const <float> : : value < < '\n ' ; cout < < " const float : " < < is_const <const float> : : value < < '\n ' ; cout < < " char const : " < < is_const <char const> : : value < < '\n ' ; cout < < " double : " < < is_const <double> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_void : " < < '\n ' ; cout < < " void : " < < is_void <void> : : value < < '\n ' ; cout < < " const void : " < < is_void <const void> : : value < < '\n ' ; cout < < " int : " < < is_void <int> : : value < < '\n ' ; cout < < " char : " < < is_void <char> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_void : " < < '\n ' ; cout < < " double : " < < is_void <double> : : value < < '\n ' ; cout < < " float : " < < is_void <float> : : value < < '\n ' ; cout < < " volatile void : " < < is_void <volatile void> : : value < < '\n ' ; cout < < " const volatile void : " < < is_void <const volatile void> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < std : : boolalpha ; cout < < " is_floating_point : " < < endl ; cout < < " char : " < < is_floating_point <char> : : value < < endl ; cout < < " int : " < < is_floating_point <int> : : value < < endl ; cout < < " float : " < < is_floating_point <float> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < std : : boolalpha ; cout < < " is_floating_point : " < < endl ; cout < < " double : " < < is_floating_point <double> : : value < < endl ; cout < < " bool : " < < is_floating_point <bool> : : value < < endl ; cout < < " long int : " < < is_floating_point <long int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_floating_point : " < < endl ; cout < < " wchar_t : " < < is_floating_point <wchar_t> : : value < < endl ; cout < < " long double : " < < is_floating_point <long double> : : value < < endl ; cout < < " unsigned short int : " < < is_floating_point <unsigned short int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { class gfg { } ; cout < < boolalpha ; cout < < " is_object : " < < endl ; cout < < " sam : " < < is_object <gfg> : : value < < '\n ' ; cout < < " sam & : " < < is_object <gfg & > : : value < < '\n ' ; cout < < " int : " < < is_object <int> : : value < < '\n ' ; cout < < " int & : " < < is_object <int & > : : value ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { class geeks { } ; cout < < boolalpha ; cout < < " is_object : " < < endl ; cout < < " float : " < < is_object <float> : : value < < '\n ' ; cout < < " float & : " < < is_object <float & > : : value < < '\n ' ; cout < < " raj : " < < is_object <geeks> : : value < < '\n ' ; cout < < " raj & : " < < is_object <geeks & > : : value < < '\n ' ; cout < < " char : " < < is_object <char> : : value < < '\n ' ; cout < < " char & : " < < is_object <char & > : : value ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_integral : " < < endl ; cout < < " char : " < < is_integral <char> : : value < < endl ; cout < < " int : " < < is_integral <int> : : value < < endl ; cout < < " float : " < < is_integral <float> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_integral : " < < endl ; cout < < " double : " < < is_integral <double> : : value < < endl ; cout < < " bool : " < < is_integral <bool> : : value < < endl ; cout < < " long int : " < < is_integral <long int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_integral : " < < endl ; cout < < " wchar_t : " < < is_integral <wchar_t> : : value < < endl ; cout < < " long double : " < < is_integral <long double> : : value < < endl ; cout < < " unsigned short int : " < < is_integral <unsigned short int> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; enum class GFG2 { var1 , var2 , var3 , var4 } ; int main ( ) { cout < < boolalpha ; cout < < " is_enum : " < < endl ; cout < < " GFG1 : " < < is_enum <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_enum <GFG2> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; enum class GFG2 : int { } ; int main ( ) { cout < < boolalpha ; cout < < " is_enum : " < < endl ; cout < < " GFG1 : " < < is_enum <GFG1> : : value < < '\n ' ; cout < < " GFG2 : " < < is_enum <GFG2> : : value < < '\n ' ; cout < < " int : " < < is_enum <int> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { } ; int main ( ) { cout < < boolalpha ; cout < < " is_reference : " < < '\n ' ; cout < < " gfg : " < < is_reference <gfg> : : value < < '\n ' ; cout < < " gfg & : " < < is_reference <gfg & > : : value < < '\n ' ; cout < < " gfg & & : " < < is_reference <gfg & & > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_reference : " < < '\n ' ; cout < < " int : " < < is_reference <int> : : value < < '\n ' ; cout < < " int & : " < < is_reference <int & > : : value < < '\n ' ; cout < < " int & & : " < < is_reference <int & & > : : value < < '\n ' ; cout < < " char : " < < is_reference <char> : : value < < '\n ' ; cout < < " char & : " < < is_reference <char & > : : value < < '\n ' ; cout < < " char & & : " < < is_reference <char & & > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_reference : " < < '\n ' ; cout < < " float : " < < is_reference <float> : : value < < '\n ' ; cout < < " float & : " < < is_reference <float & > : : value < < '\n ' ; cout < < " float & & : " < < is_reference <float & & > : : value < < '\n ' ; cout < < " double : " < < is_reference <double> : : value < < '\n ' ; cout < < " double & : " < < is_reference <double & > : : value < < '\n ' ; cout < < " double & & : " < < is_reference <double & & > : : value < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; class Circle { public : double radius ; double compute_area ( ) { return 3.14 * radius * radius ; } } ; int main ( ) { Circle obj ; obj.radius = 5.5 ; cout < < " Radius is : " < < obj.radius < < " \n  " ; cout < < " Area is : " < < obj.compute_area ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Circle { private : double radius ; public : double compute_area ( ) { return 3.14 * radius * radius ; } } ; int main ( ) { Circle obj ; obj.radius = 1.5 ; cout < < " Area is : " < < obj.compute_area ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Circle { private : double radius ; public : double compute_area ( double r ) { radius = r ; double area = 3.14 * radius * radius ; cout < < " Radius is : " < < radius < < endl ; cout < < " Area is : " < < area ; } } ; int main ( ) { Circle obj ; obj.compute_area ( 1.5 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Parent { protected : int id_protected ; } ; class Child : public Parent { public : void setId ( int id ) { id_protected = id ; } void displayId ( ) { cout < < " id_protected is : " < < id_protected < < endl ; } } ; int main ( ) { Child obj1 ; obj1.setId ( 81 ) ; obj1.displayId ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Parent { public : int id_p ; } ; class Child : public Parent { public : int id_c ; } ; int main ( ) { Child obj1 ; obj1.id_c = 7 ; obj1.id_p = 91 ; cout < < " Child id is " < < obj1.id_c < < endl ; cout < < " Parent id is " < < obj1.id_p < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Car : public Vehicle { } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class FourWheeler { public : FourWheeler ( ) { cout < < " This is a 4 wheeler Vehicle " < < endl ; } } ; class Car : public Vehicle , public FourWheeler { } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class fourWheeler : public Vehicle { public : fourWheeler ( ) { cout < < " Objects with 4 wheels are vehicles " < <endl ; } } ; class Car : public fourWheeler { public : car ( ) { cout < < " Car has 4 Wheels " < <endl ; } } ; int main ( ) { Car obj ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Car : public Vehicle { } ; class Bus : public Vehicle { } ; int main ( ) { Car obj1 ; Bus obj2 ; return 0 ; }
#include <iostream> using namespace std ; class Vehicle { public : Vehicle ( ) { cout < < " This is a Vehicle " < < endl ; } } ; class Fare { public : Fare ( ) { cout < < " Fare of Vehicle\n  " ; } } ; class Car : public Vehicle { } ; class Bus : public Vehicle , public Fare { } ; int main ( ) { Bus obj2 ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; class Geeks { public : void func ( int x ) { cout < < " value of x is " < < x < < endl ; } void func ( double x ) { cout < < " value of x is " < < x < < endl ; } void func ( int x , int y ) { cout < < " value of x and y is " < < x < < " , " < < y < < endl ; } } ; int main ( ) { Geeks obj1 ; obj1.func ( 7 ) ; obj1.func ( 9.132 ) ; obj1.func ( 85 , 64 ) ; return 0 ; }
#include <iostream> using namespace std ; class Complex { private : int real , imag ; public : Complex ( int r = 0 , int i = 0 ) { real = r ; imag = i ; } Complex operator + ( Complex const & obj ; ) { Complex res ; res.real = real + obj.real ; res.imag = imag + obj.imag ; return res ; } void print ( ) { cout < < real < < " + i " < < imag < < endl ; } } ; int main ( ) { Complex c1 ( 10 , 5 ) , c2 ( 2 , 4 ) ; Complex c3 = c1 + c2 ; c3.print ( ) ; }
#include <bits / stdc + + .h> using namespace std ; class base { public : virtual void print ( ) { cout < < " print base class " < <endl ; } void show ( ) { cout < < " show base class " < <endl ; } } ; class derived : public base { public : void print ( ) { cout < < " print derived class " < <endl ; } void show ( ) { cout < < " show derived class " < <endl ; } } ; int main ( ) { base * bptr ; derived d ; bptr = & d ; bptr-> print ( ) ; bptr-> show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Encapsulation { private : int x ; public : void set ( int a ) { x = a ; } int get ( ) { return x ; } } ; int main ( ) { Encapsulation obj ; obj.set ( 5 ) ; cout < <obj.get ( ) ; return 0 ; }
#include <iostream> using namespace std ; class implementAbstraction { private : int a , b ; public : void set ( int x , int y ) { a = x ; b = y ; } void display ( ) { cout < < " a = " < <a < < endl ; cout < < " b = " < < b < < endl ; } } ; int main ( ) { implementAbstraction obj ; obj.set ( 10 , 20 ) ; obj.display ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Enclosing { private : int x ; class Nested { int y ; void NestedFun ( Enclosing * e ) { cout < <e-> x ; } } ; } ; int main ( ) { }
#include <iostream> using namespace std ; class Enclosing { int x ; class Nested { int y ; } ; void EnclosingFun ( Nested * n ) { cout < <n-> y ; } } ; int main ( ) { }
#include <iostream> using namespace std ; class construct { public : int a , b ; construct ( ) { a = 10 ; b = 20 ; } } ; int main ( ) { construct c ; cout < < " a : " < < c.a < < endl < < " b : " < < c.b ; return 1 ; }
#include <iostream> using namespace std ; class Point { private : int x , y ; public : Point ( int x1 , int y1 ) { x = x1 ; y = y1 ; } int getX ( ) { return x ; } int getY ( ) { return y ; } } ; int main ( ) { Point p1 ( 10 , 15 ) ; cout < < " p1.x = " < < p1.getX ( ) < < " , p1.y = " < < p1.getY ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Point { private : int x ; int y ; public : Point ( int i = 0 , int j = 0 ) : x ( i ) , y ( j ) { } int getX ( ) const { return x ; } int getY ( ) const { return y ; } } ; int main ( ) { Point t1 ( 10 , 15 ) ; cout < < " x = " < <t1.getX ( ) < < " , " ; cout < < " y = " < <t1.getY ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { const int t ; public : Test ( int t ) : t ( t ) { } int getT ( ) { return t ; } } ; int main ( ) { Test t1 ( 10 ) ; cout < <t1.getT ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int & t ; public : Test ( int & t ; ) : t ( t ) { } int getT ( ) { return t ; } } ; int main ( ) { int x = 20 ; Test t1 ( x ) ; cout < <t1.getT ( ) < <endl ; x = 30 ; cout < <t1.getT ( ) < <endl ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; } ; A : : A ( int arg ) { i = arg ; cout < < " A's Constructor called : Value of i : " < < i < < endl ; } class B { A a ; public : B ( int ) ; } ; B : : B ( int x ) : a ( x ) { cout < < " B's Constructor called " ; } int main ( ) { B obj ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; } ; A : : A ( int arg ) { i = arg ; cout < < " A's Constructor called : Value of i : " < < i < < endl ; } class B : A { public : B ( int ) ; } ; B : : B ( int x ) : A ( x ) { cout < < " B's Constructor called " ; } int main ( ) { B obj ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int i ; public : A ( int ) ; int getI ( ) const { return i ; } } ; A : : A ( int i ) : i ( i ) { } int main ( ) { A a ( 10 ) ; cout < <a.getI ( ) ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int foo ( ) { i = 3 ; A ob ; return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int & foo ( ) { i = 3 ; A ob ; return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int i ; class A { public : ~A ( ) { i = 10 ; } } ; int foo ( ) { i = 3 ; { A ob ; } return i ; } int main ( ) { cout < < " i = " < < foo ( ) < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str ; getline ( cin , str ) ; cout < < " The initial string is : " ; cout < < str < < endl ; str.push_back ( 's' ) ; cout < < " The string after push_back operation is : " ; cout < < str < < endl ; str.pop_back ( ) ; cout < < " The string after pop_back operation is : " ; cout < < str < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str = " geeksforgeeks is for geeks " ; cout < < " The initial string is : " ; cout < < str < < endl ; str.resize ( 13 ) ; cout < < " The string after resize operation is : " ; cout < < str < < endl ; cout < < " The capacity of string is : " ; cout < < str.capacity ( ) < < endl ; str.shrink_to_fit ( ) ; cout < < " The new capacity after shrinking is : " ; cout < < str.capacity ( ) < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str = " geeksforgeeks " ; std : : string : : iterator it ; std : : string : : reverse_iterator it1 ; cout < < " The string using forward iterators is : " ; for ( it = str.begin ( ) ; it! = str.end ( ) ; it + + ) cout < < * it ; cout < < endl ; cout < < " The reverse string using reverse iterators is : " ; for ( it1 = str.rbegin ( ) ; it1! = str.rend ( ) ; it1 + + ) cout < < * it1 ; cout < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str1 = " geeksforgeeks is for geeks " ; string str2 = " geeksforgeeks rocks " ; char ch [ 80 ] ; str1.copy ( ch , 13 , 0 ) ; cout < < " The new copied character array is : " ; cout < < ch < < endl < < endl ; cout < < " The 1st string before swapping is : " ; cout < < str1 < < endl ; cout < < " The 2nd string before swapping is : " ; cout < < str2 < < endl ; str1.swap ( str2 ) ; cout < < " The 1st string after swapping is : " ; cout < < str1 < < endl ; cout < < " The 2nd string after swapping is : " ; cout < < str2 < < endl ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 2 , 20 , 1 , 30 } ; valarray <int> varr1 ; varr1 = varr.apply ( [ ] ( int x ) { return x = x + 5 ; } ) ; cout < < " The new valarray with manipulated values is : " ; for ( int & x ; : varr1 ) cout < < x < < " " ; cout < < endl ; cout < < " The sum of old valarray is : " ; cout < < varr.sum ( ) < < endl ; cout < < " The sum of new valarray is : " ; cout < < varr1.sum ( ) < < endl ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 2 , 20 , 1 , 30 } ; cout < < " The largest element of valarray is : " ; cout < < varr.max ( ) < < endl ; cout < < " The smallest element of valarray is : " ; cout < < varr.min ( ) < < endl ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 2 , 20 , 1 , 30 } ; valarray <int> varr1 ; varr1 = varr.shift ( 2 ) ; cout < < " The new valarray after shifting is : " ; for ( int & x ; : varr1 ) cout < < x < < " " ; cout < < endl ; varr1 = varr.cshift ( -3 ) ; cout < < " The new valarray after circular shifting is : " ; for ( int & x ; : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { valarray <int> varr1 = { 1 , 2 , 3 , 4 } ; valarray <int> varr2 = { 2 , 4 , 6 , 8 } ; cout < < " The contents of 1st valarray " " before swapping are : " ; for ( int & x ; : varr1 ) cout < < x < < " " ; cout < < endl ; cout < < " The contents of 2nd valarray " " before swapping are : " ; for ( int & x ; : varr2 ) cout < < x < < " " ; cout < < endl ; varr1.swap ( varr2 ) ; cout < < " The contents of 1st valarray " " after swapping are : " ; for ( int & x ; : varr1 ) cout < < x < < " " ; cout < < endl ; cout < < " The contents of 2nd valarray " " after swapping are : " ; for ( int & x ; : varr2 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; int & ref = x ; ref = 20 ; cout < < " x = " < < x < < endl ; x = 30 ; cout < < " ref = " < < ref < < endl ; return 0 ; }
#include <iostream> using namespace std ; void swap ( int & first , int & second ) { int temp = first ; first = second ; second = temp ; } int main ( ) { int a = 2 , b = 3 ; swap ( a , b ) ; cout < < a < < " " < < b ; return 0 ; }
#include <iostream> using namespace std ; int & fun ; ( ) { static int x = 10 ; return x ; } int main ( ) { fun ( ) = 30 ; cout < < fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; int fun ( int & x ; ) { return x ; } int main ( ) { cout < < fun ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; void swap ( char * & str1 ; , char * & str2 ; ) { char * temp = str1 ; str1 = str2 ; str2 = temp ; } int main ( ) { char * str1 = " GEEKS " ; char * str2 = " FOR GEEKS " ; swap ( str1 , str2 ) ; cout < < " str1 is " < <str1 < <endl ; cout < < " str2 is " < <str2 < <endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = 10 ; int * ptr = & x ; int & * ptr1 = ptr ; }
#include <iostream> using namespace std ; int main ( ) { int * ptr = NULL ; int & ref ; = * ptr ; cout < < ref ; }
#include <iostream> using namespace std ; int & fun ; ( ) { int x = 10 ; return x ; } int main ( ) { fun ( ) = 30 ; cout < < fun ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t time_ptr ; time_ptr = time ( NULL ) ; tm * tm_local = localtime ( & time ; _ptr ) ; cout < < " Current local time is = " < < tm_local-> tm_hour < < " : " < < tm_local-> tm_min < < " : " < < tm_local-> tm_sec ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; tuple <int , int , char> foo ( int n1 , int n2 ) { return make_tuple ( n2 , n1 , 'a' ) ; } std : : pair <int , int> foo1 ( int num1 , int num2 ) { return std : : make_pair ( num2 , num1 ) ; } int main ( ) { int a , b ; char cc ; tie ( a , b , cc ) = foo ( 5 , 10 ) ; pair <int , int> p = foo1 ( 5 , 2 ) ; cout < < " Values returned by tuple : " ; cout < < a < < " " < < b < < " " < < cc < < endl ; cout < < " Values returned by Pair : " ; cout < < p.first < < " " < < p.second ; return 0 ; }
#include <iostream> #include <fstream> using namespace std ; class Contestant { public : string Name ; int Age , Ratings ; int input ( ) ; int output_highest_rated ( ) ; } ; int Contestant : : input ( ) { ofstream file_obj ; file_obj.open ( " Input.txt " , ios : : app ) ; Contestant obj ; string str = " Micheal " ; int age = 18 , ratings = 2500 ; obj.Name = str ; obj.Age = age ; obj.Ratings = ratings ; file_obj.write ( ( char * ) & obj ; , sizeof ( obj ) ) ; str = " Terry " ; age = 21 ; ratings = 3200 ; obj.Name = str ; obj.Age = age ; obj.Ratings = ratings ; file_obj.write ( ( char * ) & obj ; , sizeof ( obj ) ) ; return 0 ; } int Contestant : : output_highest_rated ( ) { ifstream file_obj ; file_obj.open ( " Input.txt " , ios : : in ) ; Contestant obj ; file_obj.read ( ( char * ) & obj ; , sizeof ( obj ) ) ; int max = 0 ; string Highest_rated ; while ( !file_obj.eof ( ) ) { if ( obj.Ratings > max ) { max = obj.Ratings ; Highest_rated = obj.Name ; } file_obj.read ( ( char * ) & obj ; , sizeof ( obj ) ) ; } cout < < Highest_rated ; return 0 ; } int main ( ) { Contestant object ; object.input ( ) ; object.output_highest_rated ( ) ; return 0 ; }
#include <iostream> using namespace std ; void relational_operation ( string s1 , string s2 ) { string s3 = s1 + s2 ; if ( s1 ! = s2 ) cout < < s1 < < " is not equal to " < < s2 < < endl ; if ( s1 > s2 ) cout < < s1 < < " is greater than " < < s2 < < endl ; else if ( s1 < s2 ) cout < < s1 < < " is smaller than " < < s2 < < endl ; if ( s3 = = s1 + s2 ) cout < < s3 < < " is equal to " < < s1 + s2 < < endl ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; relational_operation ( s1 , s2 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; typedef pair <int , int> pairs ; set <pairs> s ; void display ( ) { int f = 0 ; for ( auto itr = s.begin ( ) ; itr ! = s.end ( ) ; itr + + ) { f = 1 ; pairs x = * itr ; cout < < " ( " < < x.first < < " , " < < x.second < < " ) " < < " " ; } if ( f = = 0 ) cout < < " No valid pair\n  " ; } int main ( ) { int t , n , j , i ; n = 6 ; int a [ ] = { 2 , 3 , 1 , 6 , 5 , 8 , 10 , 9 } ; sort ( a , a + n ) ; for ( i = 0 ; i < n - 1 ; i + + ) { for ( j = i + 1 ; j < n ; j + + ) { if ( a [ i ] % 2 = = 0 & & a [ j ] % 2 = = 0 ) { pairs x = make_pair ( a [ i ] , a [ j ] ) ; s.insert ( x ) ; } } } display ( ) ; s.clear ( ) ; }
#include <iostream> using namespace std ; class A { public : A ( ) { cout < < " A's constructor called " < < endl ; } } ; class B { public : B ( ) { cout < < " B's constructor called " < < endl ; } } ; class C : public B , public A { public : C ( ) { cout < < " C's constructor called " < < endl ; } } ; int main ( ) { C c ; return 0 ; }
#include <iostream> using namespace std ; class Person { public : Person ( int x ) { cout < < " Person : : Person ( int ) called " < < endl ; } } ; class Faculty : public Person { public : Faculty ( int x ) : Person ( x ) { cout < < " Faculty : : Faculty ( int ) called " < < endl ; } } ; class Student : public Person { public : Student ( int x ) : Person ( x ) { cout < < " Student : : Student ( int ) called " < < endl ; } } ; class TA : public Faculty , public Student { public : TA ( int x ) : Student ( x ) , Faculty ( x ) { cout < < " TA : : TA ( int ) called " < < endl ; } } ; int main ( ) { TA ta1 ( 30 ) ; }
#include <iostream> using namespace std ; class Person { public : Person ( int x ) { cout < < " Person : : Person ( int ) called " < < endl ; } Person ( ) { cout < < " Person : : Person ( ) called " < < endl ; } } ; class Faculty : virtual public Person { public : Faculty ( int x ) : Person ( x ) { cout < < " Faculty : : Faculty ( int ) called " < < endl ; } } ; class Student : virtual public Person { public : Student ( int x ) : Person ( x ) { cout < < " Student : : Student ( int ) called " < < endl ; } } ; class TA : public Faculty , public Student { public : TA ( int x ) : Student ( x ) , Faculty ( x ) { cout < < " TA : : TA ( int ) called " < < endl ; } } ; int main ( ) { TA ta1 ( 30 ) ; }
#include <iostream> using namespace std ; class Person { public : Person ( int x ) { cout < < " Person : : Person ( int ) called " < < endl ; } Person ( ) { cout < < " Person : : Person ( ) called " < < endl ; } } ; class Faculty : virtual public Person { public : Faculty ( int x ) : Person ( x ) { cout < < " Faculty : : Faculty ( int ) called " < < endl ; } } ; class Student : virtual public Person { public : Student ( int x ) : Person ( x ) { cout < < " Student : : Student ( int ) called " < < endl ; } } ; class TA : public Faculty , public Student { public : TA ( int x ) : Student ( x ) , Faculty ( x ) , Person ( x ) { cout < < " TA : : TA ( int ) called " < < endl ; } } ; int main ( ) { TA ta1 ( 30 ) ; }
#include <iostream> using namespace std ; class A { int x ; public : void setX ( int i ) { x = i ; } void print ( ) { cout < < x ; } } ; class B : public A { public : B ( ) { setX ( 10 ) ; } } ; class C : public A { public : C ( ) { setX ( 20 ) ; } } ; class D : public B , public C { } ; int main ( ) { D d ; d.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x ; public : A ( int i ) { x = i ; } void print ( ) { cout < < x ; } } ; class B : virtual public A { public : B ( ) : A ( 10 ) { } } ; class C : virtual public A { public : C ( ) : A ( 10 ) { } } ; class D : public B , public C { } ; int main ( ) { D d ; d.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Base { public : virtual int fun ( int i ) { } } ; class Derived : public Base { private : int fun ( int x ) { } } ; int main ( ) { }
#include <iostream> using namespace std ; class Base { public : virtual int fun ( int i ) { cout < < " Base : : fun ( int i ) called " ; } } ; class Derived : public Base { private : int fun ( int x ) { cout < < " Derived : : fun ( int x ) called " ; } } ; int main ( ) { Base * ptr = new Derived ; ptr-> fun ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int x = -1 ; cout < < " Before try \n  " ; try { cout < < " Inside try \n  " ; if ( x < 0 ) { throw x ; cout < < " After throw ( Never executed ) \n  " ; } } catch ( int x ) { cout < < " Exception Caught \n  " ; } cout < < " After catch ( Will be executed ) \n  " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 10 ; } catch ( char * excp ) { cout < < " Caught " < < excp ; } catch ( ... ) { cout < < " Default Exception\n  " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'a' ; } catch ( int x ) { cout < < " Caught " < < x ; } catch ( ... ) { cout < < " Default Exception\n  " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { throw 'a' ; } catch ( int x ) { cout < < " Caught " ; } return 0 ; }
#include <iostream> using namespace std ; void fun ( int * ptr , int x ) { if ( ptr = = NULL ) throw ptr ; if ( x = = 0 ) throw x ; } int main ( ) { try { fun ( NULL , 0 ) ; } catch ( ... ) { cout < < " Caught exception from fun ( ) " ; } return 0 ; }
#include <iostream> using namespace std ; int main ( ) { try { try { throw 20 ; } catch ( int n ) { cout < < " Handle Partially " ; throw ; } } catch ( int n ) { cout < < " Handle remaining " ; } return 0 ; }
#include <iostream> using namespace std ; class Test { public : Test ( ) { cout < < " Constructor of Test " < < endl ; } ~Test ( ) { cout < < " Destructor of Test " < < endl ; } } ; int main ( ) { try { Test t1 ; throw 10 ; } catch ( int i ) { cout < < " Caught " < < i < < endl ; } }
#include <stdio.h> int main ( ) { printf ( " Size = %lu " , sizeof ( size_t ) ) ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; pieslice ( 300 , 300 , 0 , 120 , 150 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtextxy ( 200 , 150 , " Hello Geek , Have a good day ! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; int x = 150 ; int y = 150 ; int font = 8 ; int direction = 0 ; int font_size = 5 ; settextstyle ( font , direction , font_size ) ; outtextxy ( x , y , " Geeks For Geeks " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtext ( " Hello Geek , Have a good day ! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int c ; int x = 200 , y = 100 ; initgraph ( & gd ; , & gm ; , " " ) ; for ( c = 0 ; c < 5 ; c + + ) { setlinestyle ( c , 0 , 1 ) ; line ( x , y , x + 200 , y ) ; y = y + 25 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; int x_circle = 250 ; int y_circle = 250 ; int radius = 100 ; int border_color = WHITE ; setfillstyle ( HATCH_FILL , RED ) ; circle ( x_circle , y_circle , radius ) ; floodfill ( x_circle , y_circle , border_color ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ptr [ ] = L " GeeksForGeeks " ; wchar_t ch = L'o' ; bool look = wmemchr ( ptr , ch , 8 ) ; if ( look ) wcout < < " ' " < < ch < < " ' " < < L " is present in first " < < 8 < < L " characters of \ " " < < ptr < < " \ " " ; else wcout < < " ' " < < ch < < " ' " < < L " is not present in first " < < 8 < < L " characters of \ " " < < ptr < < " \ " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ptr [ ] = L " GFG " ; wchar_t ch = L'p' ; bool look = wmemchr ( ptr , ch , 3 ) ; if ( look ) wcout < < " ' " < < ch < < " ' " < < L " is present in first " < < 3 < < L " characters of \ " " < < ptr < < " \ " " ; else wcout < < " ' " < < ch < < " ' " < < L " is not present in first " < < 3 < < L " characters of \ " " < < ptr < < " \ " " ; return 0 ; }
#include <iostream> #include <cctype> using namespace std ; int main ( ) { char x ; cin > > x ; if ( isupper ( x ) ) cout < < " Uppercase " ; else cout < < " Not uppercase. " ; return 0 ; }
#include <iostream> #include <cctype> using namespace std ; int main ( ) { char x ; cin > > x ; if ( islower ( x ) ) cout < < " Lowercase " ; else cout < < " Not Lowercase. " ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; void toggle ( string & str ) { int length = str.length ( ) ; for ( int i = 0 ; i < length ; i + + ) { int c = str [ i ] ; if ( islower ( c ) ) str [ i ] = toupper ( c ) ; else if ( isupper ( c ) ) str [ i ] = tolower ( c ) ; } } int main ( ) { string str = " GeekS " ; toggle ( str ) ; cout < < str ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void comparetwo ( const wchar_t * wcs1 , const wchar_t * wcs2 ) { if ( wcscoll ( wcs1 , wcs2 ) < 0 ) wcout < < wcs1 < < L " precedes " < < wcs2 < < '\n ' ; else if ( wcscoll ( wcs1 , wcs2 ) > 0 ) wcout < < wcs2 < < L " precedes " < < wcs1 < < '\n ' ; else wcout < < wcs2 < < L " equals " < < wcs1 < < '\n ' ; } int main ( ) { wchar_t string [ ] = L " article " ; wchar_t string_ [ ] = L " everyone " ; setlocale ( LC_ALL , " en_US.utf8 " ) ; wcout < < L " In American : " ; comparetwo ( string , string_ ) ; setlocale ( LC_ALL , " sv_SE.utf8 " ) ; wcout < < L " In Swedish : " ; comparetwo ( string , string_ ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void comparetwo ( const wchar_t * wcs1 , const wchar_t * wcs2 ) { if ( wcscoll ( wcs1 , wcs2 ) < 0 ) wcout < < wcs1 < < L " precedes " < < wcs2 < < '\n ' ; else if ( wcscoll ( wcs1 , wcs2 ) > 0 ) wcout < < wcs2 < < L " precedes " < < wcs1 < < '\n ' ; else wcout < < wcs2 < < L " equals " < < wcs1 < < '\n ' ; } int main ( ) { wchar_t string [ ] = L " geekforgeeks " ; wchar_t string_ [ ] = L " gfg " ; setlocale ( LC_COLLATE , " cs_CZ.utf8 " ) ; wcout < < L " In Czech : " ; comparetwo ( string , string_ ) ; setlocale ( LC_COLLATE , " en_US.utf8 " ) ; wcout < < " In the American locale : " ; comparetwo ( string , string_ ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'A' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither " < < " an alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t wc = L'5' ; if ( iswctype ( wc , wctype ( " digit " ) ) ) wcout < < wc < < L " is a digit " ; else if ( iswctype ( wc , wctype ( " alpha " ) ) ) wcout < < wc < < L " is an alphabet " ; else wcout < < wc < < L " is neither " < < " an alphabet nor a digit " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string [ ] = " Geeks for Geeks " ; char character = 'k' ; char * ptr = strrchr ( string , character ) ; if ( ptr ) cout < < " Last position of " < < character < < " in " < < string < < " is " < < ptr - string ; else cout < < character < < " is not present " < < string < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string [ ] = " Geeks for Geeks " ; char * ptr ; char character = 'z' ; ptr = strrchr ( string , character ) ; if ( ptr ) cout < < " Last position of " < < character < < " in " < < string < < " is " < < ptr - string ; else cout < < character < < " is not present in " < < string < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " 888geekforgeeks " ; wchar_t string2 [ ] = L " 999gfg " ; wchar_t * End ; int b = 10 ; int value ; value = wcstoll ( string1 , & End ; , b ) ; value = wcstoll ( string2 , & End ; , b ) ; wcout < < " String Value = " < < string1 < < " \n  " ; wcout < < " Long Long Int value = " < < value < < " \n  " ; wcout < < " End String = " < < End < < " \n  " ; wcout < < " String Value = " < < string2 < < " \n  " ; wcout < < " Long Long Int Value = " < < value < < " \n  " ; wcout < < " End String = " < < End < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t * End ; wchar_t string [ ] = L " 1356geekforgeeks " ; wcout < < " Long Long Int with base5 = " < < wcstoll ( string , & End ; , 5 ) < < " \n  " ; wcout < < " End String = " < < End < < " \n  " ; wcout < < " Long Long Int with base12 = " < < wcstoll ( string , & End ; , 12 ) < < " \n  " ; wcout < < " End String = " < < End < < " \n  " ; wcout < < " Long Long Int with base36 = " < < wcstoll ( string , & End ; , 36 ) < < " \n  " ; wcout < < " End String = " < < End < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> int fun ( ) { int i , num ; const wchar_t wc [ ] = L " priya lal " ; num = 0 ; for ( i = 0 ; i < wcslen ( wc ) ; + + i ) if ( wctob ( wc [ i ] ) ! = EOF ) + + num ; wprintf ( L " wc has %d characters to be translated " " to single-byte characters. " , num ) ; } int main ( ) { fun ( ) ; return 0 ; }
#include <bits / stdc + + .h> void fun ( wchar_t wc ) { int cn = wctob ( wc ) ; if ( cn ! = EOF ) printf ( " %#x translated to %#x\n  " , wc , cn ) ; else printf ( " %#x could not be translated\n  " , wc ) ; } int main ( void ) { char * utf_locale_present = setlocale ( LC_ALL , " th_TH.utf8 " ) ; puts ( " In Thai UTF-8 locale : " ) ; fun ( L'a' ) ; fun ( L'?' ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str [ 256 ] = " 90600 Geeks For Geeks " ; char * end ; long result ; result = strtoul ( str , & end ; , 36 ) ; cout < < " The unsigned long integer is : " < < result < < endl ; cout < < " String in str is : " < < end ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str [ 256 ] = " 12345 GFG " ; char * end ; long result ; result = strtoul ( str , & end ; , 0 ) ; cout < < " The unsigned long integer is : " < < result < < endl ; cout < < " String in str is : " < < end < < endl ; result = strtoul ( str , & end ; , 12 ) ; cout < < " The unsigned long integer is : " < < result < < endl ; cout < < " String in str is : " < < end < < endl ; result = strtoul ( str , & end ; , 30 ) ; cout < < " The unsigned long integer is : " < < result < < endl ; cout < < " String in str is : " < < end < < endl ; return 0 ; }
#include <iostream> using namespace std ; #include <ext / pb_ds / assoc_container.hpp> #include <ext / pb_ds / tree_policy.hpp> #include <functional> #include <iostream> using namespace __gnu_pbds ; using namespace std ; typedef tree <int , null_type , less <int> , rb_tree_tag , tree_order_statistics_node_update> ordered_set ; int main ( ) { ordered_set mySet ; mySet.insert ( 5 ) ; mySet.insert ( 2 ) ; mySet.insert ( 6 ) ; mySet.insert ( 4 ) ; cout < < " Count of elements less than 6 : : " < < mySet.order_of_key ( 6 ) < < endl ; cout < < " Count of elements less than 7 : : " < < mySet.order_of_key ( 7 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 20 ] ; wchar_t source [ ] = L " geeks are for geeks " ; int n = 13 ; wmemcpy ( destination , source , n ) ; wcout < < L " Initial string -> " < < source < < " \n  " ; wcout < < L " Final string -> " ; for ( int i = 0 ; i < n ; i + + ) putwchar ( destination [ i ] ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 3 ] ; wchar_t source [ ] = L " GFG " ; int n = 3 ; wmemcpy ( destination , source , n ) ; wcout < < L " Initial string -> " < < source < < " \n  " ; wcout < < L " Final string -> " ; for ( int i = 0 ; i < n ; i + + ) putwchar ( destination [ i ] ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 95.6Geek " ; wchar_t * endString ; double value = wcstod ( string , & endString ; ) ; wcout < < L " String -> " < < string < < " \n  " ; wcout < < L " Double value -> " < < value < < " \n  " ; wcout < < L " End String is : " < < endString < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 10.6464 " ; wchar_t * endString ; double value = wcstod ( string , & endString ; ) ; wcout < < L " String -> " < < string < < " \n  " ; wcout < < L " Double value -> " < < value < < " \n  " ; wcout < < L " End String is : " < < endString < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string [ ] = L " 99.999Geek " ; wchar_t * endString ; double value = wcstod ( string , & endString ; ) ; wcout < < L " String -> " < < string < < " \n  " ; wcout < < L " Double value -> " < < value < < " \n  " ; wcout < < L " End String is : " < < endString < < " \n  " ; return 0 ; }
#include <cmath> #include <iomanip> #include <iostream> using namespace std ; int main ( ) { double val ; val = fmax ( 10.0 , 1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmax ( 10.0 , 1.0 ) = " < < val < < " \n  " ; val = fmax ( -10.0 , 1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmax ( -10.0 , 1.0 ) = " < < val < < " \n  " ; val = fmax ( -10.0 , -1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmax ( -10.0 , -1.0 ) = " < < val < < " \n  " ; return 0 ; }
#include <cmath> #include <iomanip> #include <iostream> using namespace std ; int main ( ) { double val ; val = fmin ( 10.0 , 1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmin ( 10.0 , 1.0 ) = " < < val < < " \n  " ; val = fmin ( -10.0 , 1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmin ( -10.0 , 1.0 ) = " < < val < < " \n  " ; val = fmin ( -10.0 , -1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmin ( -10.0 , -1.0 ) = " < < val < < " \n  " ; return 0 ; }
#include <cmath> #include <iomanip> #include <iostream> using namespace std ; int main ( ) { double val ; val = fmin ( 10.0f , 1.0 ) ; cout < < fixed < < setprecision ( 4 ) < < " fmin ( 10.0f , 1.0 ) = " < < val < < " \n  " ; val = fmax ( 10.0 , -1.0f ) ; cout < < fixed < < setprecision ( 4 ) < < " fmax ( 10.0 , -1.0f ) = " < < val < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 19.0 ; cout < < " The value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 9.6 / 0.0 ; cout < < " The value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double x = 0.0 / 0.0 ; cout < < " Value of x is = " < < x < < endl ; cout < < " isfinite ( x ) = " < <isfinite ( x ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char * str1 = " This is GeeksForGeeks " ; cout < < str1 < < endl ; int size = 30 ; char * str2 = ( char * ) malloc ( sizeof ( char ) * size ) ; str2 = " GeeksForGeeks For Everyone " ; cout < < str2 ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char * str = " Hello " ; const char * str1 = " Hello " ; str [ 1 ] = 'o' ; cout < < str < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { string s1 = " Hello " ; string s2 = " World " ; cout < < s1.size ( ) < < endl ; cout < < s2.length ( ) < < endl ; s1 = s1 + s2 ; cout < < s1 < < endl ; s1.append ( " Geeks " ) ; cout < < s1 < < endl ; string s3 = " HelloWorldGeeks " ; if ( s1.compare ( s3 ) = = 0 ) cout < < " true " < < endl ; else cout < < " false " < < endl ; string sub = s1.substr ( 0 , 5 ) ; cout < < sub < < endl ; s1.insert ( 10 , " For " ) ; cout < < s1 < < endl ; string target = " World " ; size_t pos = s1.find ( target ) ; if ( pos ! = std : : string : : npos ) cout < < " Found at Position : " < < pos < < endl ; cout < < s1.replace ( 5 , 5 , " Geeks " ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char str [ ] = " Hello " ; str [ 1 ] = 'o' ; cout < < str < < endl ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; int main ( ) { char str [ 10 ] = " Hello " ; cout < < " Before Concatenation : " < < str < < endl ; strcat ( str , " World " ) ; cout < < " After Concatenation : " < < str ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; int main ( ) { char s1 [ 10 ] = " Hello " ; cout < < strlen ( s1 ) < < endl ; char s2 [ 50 ] ; strcpy ( s2 , s1 ) ; cout < < s2 < < endl ; char s3 [ 10 ] = " World " ; strcat ( s2 , s3 ) ; cout < < s2 < < endl ; char s4 [ 50 ] = " HelloWorld " ; if ( strcmp ( s2 , s4 ) = = 0 ) cout < < " true " < < endl ; else cout < < " false " < < endl ; char s5 [ 30 ] ; strncpy ( s5 , s4 , 5 ) ; cout < < s5 < < endl ; char target [ 10 ] = " Hello " ; if ( strstr ( s4 , target ) ! = NULL ) cout < < " true " < < endl ; else cout < < " false " < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { wchar_t w = L'A' ; cout < < " Wide character value : : " < < w < < endl ; cout < < " Size of the wide char is : : " < < sizeof ( w ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char caname [ ] = " geeksforgeeks " ; cout < < caname < < endl ; wchar_t waname [ ] = L " geeksforgeeks " ; wcout < < waname < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t waname [ ] = L " geeksforgeeks " ; wcout < < L " The length of ' " < < waname < < L " ' is " < < wcslen ( waname ) < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t waname [ ] = L " geeksforgeeks " ; wchar_t wacopy [ 14 ] ; wcscpy ( wacopy , waname ) ; wcout < < L " Original = " < < waname < < L " \n Copy = " < < wacopy < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " geeksforgeeks " ; wchar_t string2 [ ] = L " is for Geeks " ; wcscat ( string1 , string2 ) ; wcout < < L " Concatenated wide string is = " < < string1 < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " geeksforgeeks " ; wchar_t string2 [ ] = L " GEEKS " ; wcout < < L " Comparison1 = " < < wcscmp ( string1 , string2 ) < < endl ; wcout < < L " Comparison2 = " < < wcscmp ( string1 , string1 ) < < endl ; wcout < < L " Comparison3 = " < < wcscmp ( string2 , string1 ) < < endl ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string [ ] = L " geeksforgeeks , is , for , GEEKS " ; wchar_t * internal_state ; wchar_t delim [ ] = L " , " ; wchar_t * token = wcstok ( string , delim , & internal ; _state ) ; while ( token ) { wcout < < token < < endl ; token = wcstok ( NULL , delim , & internal ; _state ) ; } return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " Geeks For Geeks " ; wchar_t string2 [ 20 ] ; wchar_t string3 [ 20 ] ; wcsncpy ( string2 , string1 , 20 ) ; wcsncpy ( string3 , string2 , 5 ) ; string3 [ 5 ] = L'\0' ; wcout < < string1 < < endl < < string2 < < endl < < string3 ; return 0 ; }
#include <iostream> #include <cwchar> using namespace std ; int main ( ) { wchar_t string1 [ ] = L " Geeks Are Geeks " ; wchar_t * string2 = wcsstr ( string1 , L " Are " ) ; wcsncpy ( string2 , L " For " , 3 ) ; wcout < < string1 < < endl ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * f ; int char ; char buffer [ 256 ] ; f = fopen ( " use1.txt " , " r " ) ; if ( f = = NULL ) { printf ( " Error in opening file " ) ; return ( -1 ) ; } while ( !feof ( f ) ) { char = getc ( f ) ; if ( char = = '!' ) { ungetc ( ' + ' , f ) ; } else { ungetc ( c , f ) ; } fgets ( buffer , 255 , f ) ; fputs ( buffer , stdout ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch ; while ( ( ch = getchar ( ) ) ! = '1' ) putchar ( ch ) ; ungetc ( ch , stdin ) ; ch = getchar ( ) ; putchar ( ch ) ; return 0 ; }
#include <bits / stdc + + .h> int main ( ) { int i = 0 ; int count_ = 0 ; char string1 [ ] = " ~Hello geekforgeeks ! " ; char string2 [ count_ ] ; while ( string1 [ i ] ) { if ( iswpunct ( string1 [ i ] ) ) { string2 [ count_ ] = string1 [ i ] ; count_ + + ; } i + + ; } printf ( " The sentence contains %d punct. character : \n  " , count_ ) ; for ( int i = 0 ; i < count_ ; i + + ) printf ( " %c " , string2 [ i ] ) ; return 0 ; }
#include <bits / stdc + + .h> int main ( ) { int i = 0 ; int count_ = 0 ; char string1 [ ] = " @#$^gfg " ; char string2 [ count_ ] ; while ( string1 [ i ] ) { if ( iswpunct ( string1 [ i ] ) ) { string2 [ count_ ] = string1 [ i ] ; count_ + + ; } i + + ; } printf ( " The sentence contains %d punct. character : \n  " , count_ ) ; for ( int i = 0 ; i < count_ ; i + + ) printf ( " %c " , string2 [ i ] ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x ; public : A ( ) { x = 0 ; } void fun ( ) { delete this ; cout < <x ; } } ;
#include <bits / stdc + + .h> using namespace std ; class Graph { int V ; bool * * adj ; public : Graph ( int V ) ; void addEdge ( int u , int v ) { adj [ u ] [ v ] = true ; } void print ( ) ; } ; Graph : : Graph ( int V ) { this-> V = V ; adj = new bool * [ V ] ; for ( int i = 0 ; i <V ; i + + ) { adj [ i ] = new bool [ V ] ; memset ( adj [ i ] , false , V * sizeof ( bool ) ) ; } } void Graph : : print ( ) { for ( int u = 0 ; u <V ; u + + ) { for ( int v = 0 ; v <V ; v + + ) cout < < adj [ u ] [ v ] < < " " ; cout < < endl ; } } int main ( ) { Graph g ( 4 ) ; g.addEdge ( 0 , 1 ) ; g.addEdge ( 0 , 2 ) ; g.addEdge ( 1 , 2 ) ; g.addEdge ( 2 , 0 ) ; g.addEdge ( 2 , 3 ) ; g.addEdge ( 3 , 3 ) ; g.print ( ) ; return 0 ; }
#include <iostream> template <typename T , size_t N> void printDimensions ( const T ( & a ; ) [ N ] ) { std : : cout < < N ; } template <typename T , size_t N , size_t M> void printDimensions ( const T ( & a ; ) [ N ] [ M ] ) { std : : cout < < N < < " x " ; printDimensions ( a [ 0 ] ) ; } int main ( ) { int a [ 2 ] [ 3 ] [ 4 ] ; printDimensions ( a ) ; return 0 ; }
#include <iostream> #include <type_traits> template <typename T> std : : enable_if_t <std : : rank <T> : : value = = 1> printDimensions ( const T & a ) { std : : cout < < std : : extent <T> : : value ; } template <typename T> std : : enable_if_t <std : : rank <T> : : value ! = 1> printDimensions ( const T & a ) { std : : cout < < std : : extent <T> : : value < < " x " ; printDimensions ( a [ 0 ] ) ; } int main ( ) { int a [ 2 ] [ 3 ] [ 4 ] ; printDimensions ( a ) ; return 0 ; }
#include <iostream> #include <cmath> using namespace std ; double findProbability ( double a ) { double prob_x_a = erf ( a ) ; return prob_x_a ; } int main ( ) { double a = 0.25 ; cout < < " probability that normal r.v " " X takes value between " < < -a < < " & " < < a < < " is " < < findProbability ( a ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string dec_num = " 9876543210 " ; cout < < " dec_num = " < < stol ( dec_num , nullptr , 10 ) < < " \n  " ; string hex_num = " FFFFFF " ; cout < < " hex_num = " < < stol ( hex_num , nullptr , 16 ) < < " \n  " ; string binary_num = " 1111111 " ; cout < < " binary_num = " < < stol ( binary_num , nullptr , 2 ) < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string dec_num = " 9876543210 " ; cout < < " dec_num = " < < stoll ( dec_num , nullptr , 10 ) < < " \n  " ; string hex_num = " FFFFFF " ; cout < < " hex_num = " < < stoll ( hex_num , nullptr , 16 ) < < " \n  " ; string binary_num = " 1111111 " ; cout < < " binary_num = " < < stoll ( binary_num , nullptr , 2 ) < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string invalid_num = " abcf$#@de " ; try { cout < < stoll ( invalid_num ) < < " \n  " ; } catch ( const std : : invalid_argument ) { cerr < < " Invalid argument " < < " \n  " ; } return 0 ; }
#include <iostream> using namespace std ; class Test { int value ; public : Test ( int v = 0 ) { value = v ; } int getValue ( ) const { return value ; } } ; int main ( ) { Test t ( 20 ) ; cout < <t.getValue ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { int value ; public : Test ( int v = 0 ) { value = v ; } int getValue ( ) { return value ; } } ; int main ( ) { const Test t ; cout < < t.getValue ( ) ; return 0 ; }
#include <iostream> #include <utility> using namespace std ; int main ( ) { int a [ ] = { 1 , 2 , 3 , 4 } ; int b [ ] = { 5 , 6 , 7 , 8 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; swap ( a , b ) ; cout < < " a [ ] = " ; for ( int i = 0 ; i <n ; i + + ) cout < < a [ i ] < < " , " ; cout < < " \n b [ ] = " ; for ( int i = 0 ; i <n ; i + + ) cout < < b [ i ] < < " , " ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { string str = str1 ; str1 + = str2 ; cout < < " Using + = : " ; cout < < str1 < < endl ; str.append ( str2 ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2 , 0 , 5 ) ; cout < < " Using append ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " GeeksforGeeks " ) ; string str2 ( " Hello World! " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { string str1 = str ; str + = " GeeksforGeeks " ; cout < < " Using + = : " ; cout < < str < < endl ; str1.append ( " GeeksforGeeks " ) ; cout < < " Using append ( ) : " ; cout < < str1 < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { char ch [ 6 ] = { 'G' , 'e' , 'e' , 'k' , 's' , '\0' } ; string str1 = str ; str + = ch ; cout < < " Using + = : " < < str < < endl ; str1.append ( ch ) ; cout < < " Using append ( ) : " ; cout < < str1 < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { string str1 = str ; str + = 'C' ; cout < < " Using + = : " < < str < < endl ; str1.push_back ( 'C' ) ; cout < < " Using push_back : " ; cout < < str1 ; } int main ( ) { string str ( " AB " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2.begin ( ) + 5 , str2.end ( ) ) ; cout < < " Using append : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; string appendDemo ( string str1 , string str2 ) { str1.append ( str2 ) ; cout < < " Using append : " ; return str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; string str ; cout < < " Original String : " < < str1 < < endl ; str = appendDemo ( str1 , str2 ) ; cout < < str ; return 0 ; }
#include <iostream> #include <thread> #include <chrono> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 5 ; + + i ) { cout < < i < < " " ; this_thread : : sleep_for ( chrono : : seconds ( 1 ) ) ; } cout < < endl ; return 0 ; }
#include <iostream> #include <thread> #include <chrono> using namespace std ; int main ( ) { for ( int i = 1 ; i < = 5 ; + + i ) { cout < < i < < " " < < flush ; this_thread : : sleep_for ( chrono : : seconds ( 1 ) ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int randomfunc ( int j ) { return rand ( ) % j ; } int main ( ) { srand ( unsigned ( time ( 0 ) ) ) ; vector <int> arr ; for ( int j = 1 ; j < 10 ; + + j ) arr.push_back ( j ) ; random_shuffle ( arr.begin ( ) , arr.end ( ) ) ; random_shuffle ( arr.begin ( ) , arr.end ( ) , randomfunc ) ; cout < < " arr contains : " ; for ( vector <int> : : iterator i = arr.begin ( ) ; i ! = arr.end ( ) ; + + i ) cout < < ' ' < < * i ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { array <int , 5> s { 1 , 2 , 3 , 4 , 5 } ; unsigned seed = 0 ; shuffle ( s.begin ( ) , s.end ( ) , default_random_engine ( seed ) ) ; cout < < " shuffled elements are : " ; for ( int & i : s ) cout < < ' ' < < i ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { bool z [ ] = { true , false , true , false , true } ; bool y [ ] = { true , true , false , false , true } ; int n = 5 ; bool result [ n ] ; transform ( z , z + n , y , result , logical_and <bool> ( ) ) ; cout < < " Logical AND : \n  " ; for ( int i = 0 ; i < n ; i + + ) cout < < z [ i ] < < " AND " < < y [ i ] < < " = " < < result [ i ] < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> int x = printf ( " Hello World " ) ; int main ( ) { }
#include <iostream> using namespace std ; class A { public : A ( ) { cout < < " Hello World " ; } } ; A obj ; int main ( ) { }
#include <stdio.h> void main ( ) { int a ; if ( a = = 2 ) a + + ; printf ( " value of a is " , a ) ; else printf ( " value of a is not equal to 2 " ) ; }
#include <stdio.h> void main ( ) { int a ; 10 = a ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] ; int i ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " Enter number : " ) ; scanf ( " %d " , arr ) ; arr + + ; } }
#include <stdio.h> int main ( ) { for ( int i = 0 ; i <5 ; i + + ) { if ( fork ( ) = = 0 ) { printf ( " [ son ] pid %d from [ parent ] pid %d\n  " , getpid ( ) , getppid ( ) ) ; exit ( 0 ) ; } } for ( int i = 0 ; i <5 ; i + + ) wait ( NULL ) ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> myvector { 1 , 2 , 3 , 4 , 5 } ; myvector.push_back ( 6 ) ; for ( auto x : myvector ) cout < < x < < " " ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> myvector { 1 , 2 , 3 , 4 , 5 } ; auto it = myvector.begin ( ) ; myvector.erase ( it ) ; for ( auto x : myvector ) cout < < x < < " " ; return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on double answer ( double y ) { fenv_t trial ; feholdexcept ( & trial ; ) ; y = log ( y ) ; feclearexcept ( FE_OVERFLOW | FE_DIVBYZERO ) ; feupdateenv ( & trial ; ) ; return y ; } int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; printf ( " log ( 0.0 ) : %f\n  " , answer ( 0.0 ) ) ; if ( !fetestexcept ( FE_ALL_EXCEPT ) ) { printf ( " no exceptions raised " ) ; } return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on double answer ( double y ) { fenv_t trial ; feholdexcept ( & trial ; ) ; y = log ( y ) ; feclearexcept ( FE_OVERFLOW | FE_DIVBYZERO ) ; feupdateenv ( & trial ; ) ; return y ; } int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; printf ( " log ( 10.0 ) : %f\n  " , answer ( 10.0 ) ) ; if ( !fetestexcept ( FE_ALL_EXCEPT ) ) { printf ( " no exceptions raised " ) ; } else printf ( " exceptions raised " ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int base = 10 ; char str [ ] = " 123abc " ; char * end ; long int num ; num = strtol ( str , & end ; , base ) ; cout < < " Given String = " < < str < < endl ; cout < < " Number with base 10 in string " < < num < < endl ; cout < < " End String points to " < < end < < endl < < endl ; strcpy ( str , " 12345 " ) ; cout < < " Given String = " < < str < < endl ; num = strtol ( str , & end ; , base ) ; cout < < " Number with base 10 in string " < < num < < endl ; if ( * end ) { cout < < end ; } else { cout < < " Null pointer " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char str [ ] = " 100 ab 123 1010 " ; char * end ; long int a , b , c , d ; a = strtol ( str , & end ; , 10 ) ; b = strtol ( end , & end ; , 16 ) ; c = strtol ( end , & end ; , 8 ) ; d = strtol ( end , & end ; , 2 ) ; cout < < " The decimal equivalents of all numbers are \n  " ; cout < < a < < endl < < b < < endl < < c < < endl < < d ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { time_t time_ptr ; time ( & time ; _ptr ) ; cout < < " Current date and time = " < < asctime ( localtime ( & time ; _ptr ) ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int n = 7 ; int x = 5 ; int ans ; ans = scalbn ( x , n ) ; cout < < x < < " * " < < FLT_RADIX < < " ^ " < < n < < " = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int n = 7 ; double x = 3.9 ; int ans ; ans = scalbn ( x , n ) ; cout < < x < < " * " < < FLT_RADIX < < " ^ " < < n < < " = " < < ans < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 6.3 ; float y = sqrt ( -9 ) ; cout < < " The value of x is = " < < x < < endl ; cout < < " The value of y is = " < < y < < endl ; cout < < " isunordered ( x , y ) = " < <isunordered ( x , y ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float x = 4.6 ; float y = 9.2 ; cout < < " The value of x is = " < < x < < endl ; cout < < " The value of y is = " < < y < < endl ; cout < < " isunordered ( x , y ) = " < <isunordered ( x , y ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { float f = 7.0F ; cout < < " isnormal ( 7.0 ) is = " < < isnormal ( f ) < < endl ; f = 0.0F ; cout < < " isnormal ( 0.0 ) is = " < < isnormal ( f ) < < endl ; f = 9.2F ; cout < < " isnormal ( 9.2 / 0.0 ) is = " < < isnormal ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { double f = 7.0 ; cout < < " isnormal ( 7.0 ) is = " < < isnormal ( f ) < < endl ; f = 0.0 ; cout < < " isnormal ( 0.0 ) is = " < < isnormal ( f ) < < endl ; f = 9.2 ; cout < < " isnormal ( 9.2 / 0.0 ) is = " < < isnormal ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { long double f = 7.0 ; cout < < " isnormal ( 7.0 ) is = " < < isnormal ( f ) < < endl ; f = 0.0 ; cout < < " isnormal ( 0.0 ) is = " < < isnormal ( f ) < < endl ; f = 9.2 ; cout < < " isnormal ( 9.2 / 0.0 ) is = " < < isnormal ( f / 0.0 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 20 ] ; wchar_t source [ 20 ] ; wcscpy ( destination , L " Geekforgeeks " ) ; wcscpy ( source , L " is the best " ) ; wcsncat ( destination , source , 20 ) ; wprintf ( L " %ls\n  " , destination ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t destination [ 40 ] ; wchar_t source [ 40 ] ; wcscpy ( destination , L " only some of the " ) ; wcscpy ( source , L " letters will be copied " ) ; wcsncat ( destination , source , 20 ) ; wprintf ( L " %ls\n  " , destination ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " GeeksforGeeks " ; wcout < < L " The lowercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towlower ( str [ i ] ) ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t str [ ] = L " hello Ishwar 123!@# " ; wcout < < L " The lowercase version of \ " " < < str < < L " \ " is " ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) putwchar ( towlower ( str [ i ] ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 1987 ; printf ( " %d " , printf ( " %d " , printf ( " %d " , x ) ) ) ; return ( 0 ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { map <int , int> mp ; mp [ 1 ] = 10 ; mp [ 2 ] = 20 ; mp [ 3 ] = 30 ; cout < < " Contents of mp before deleting " " the last element : \n  " ; for ( auto it = mp.begin ( ) ; it ! = mp.end ( ) ; it + + ) cout < < it-> first < < " = = > " < < it-> second < < " \n  " ; cout < < " Deleting the last element from " " the map.\n  " ; mp.erase ( prev ( mp.end ( ) ) ) ; cout < < " Contents of mp after deleting the last " " element : \n  " ; for ( auto it = mp.begin ( ) ; it ! = mp.end ( ) ; it + + ) cout < < it-> first < < " = = > " < < it-> second < < " \n  " ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { map <int , int> mp ; mp [ 1 ] = 10 ; mp [ 2 ] = 20 ; mp [ 3 ] = 30 ; cout < < " Contents of mp before deleting " " the last element : \n  " ; for ( auto it = mp.begin ( ) ; it ! = mp.end ( ) ; it + + ) cout < < it-> first < < " = = > " < < it-> second < < " \n  " ; cout < < " Deleting the last element from " " the map.\n  " ; auto it = mp.end ( ) ; it-- ; mp.erase ( it ) ; cout < < " Contents of mp after deleting the " " last element : \n  " ; for ( auto it = mp.begin ( ) ; it ! = mp.end ( ) ; it + + ) cout < < it-> first < < " = = > " < < it-> second < < " \n  " ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * array = new int [ 10 ] ; delete [ ] array ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr = NULL ; delete ptr ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr1 = new int ; int * ptr2 = new int ( 20 ) ; cout < < " Value of ptr1 = " < < * ptr1 < < " \n  " ; cout < < " Value of ptr2 = " < < * ptr2 < < " \n  " ; delete ptr1 ; delete ptr2 ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { void * ptr ; delete ptr ; cout < < " ptr deleted successfully " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * ptr2 = ( int * ) malloc ( sizeof ( int ) ) ; delete ptr2 ; cout < < " ptr2 deleted successfully " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; struct P { static void operator delete ( void * ptr , std : : size_t sz ) { cout < < " custom delete for size " < < sz < <endl ; delete ( ptr ) ; } static void operator delete [ ] ( void * ptr , std : : size_t sz ) { cout < < " custom delete for size " < < sz < <endl ; delete ( ptr ) ; } } ; int main ( ) { P * var1 = new P ; delete var1 ; P * var2 = new P [ 10 ] ; delete [ ] var2 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int x ; delete x ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int x ; int * ptr1 = & x ; delete ptr1 ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { double y [ ] = { 0.0 , 3.0 , -2.0 } ; double x [ ] = { -3.0 , 3.0 , -1.0 } ; valarray <double> ycoords ( y , 3 ) ; valarray <double> xcoords ( x , 3 ) ; valarray <double> res = atan2 ( ycoords , xcoords ) ; cout < < " results : " ; for ( size_t i = 0 ; i < res.size ( ) ; + + i ) cout < < ' ' < < res [ i ] ; cout < < '\n ' ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { double y [ ] = { 4.0 , 5.6 , -2.8 , 7.3 } ; double x [ ] = { 5.0 , -1.5 , 7.0 , -0.8 } ; valarray <double> ycoords ( y , 4 ) ; valarray <double> xcoords ( x , 4 ) ; valarray <double> res = atan2 ( ycoords , xcoords ) ; cout < < " results : " ; for ( size_t i = 0 ; i < res.size ( ) ; + + i ) cout < < ' ' < < res [ i ] ; cout < < '\n ' ; return 0 ; }
#include <iostream> #include <valarray> using namespace std ; int main ( ) { double y [ ] = { -2.8 , 7.3 } ; float x [ ] = { 5.0 , -0.8 , 3.2 , 5 , 1 } ; valarray <double> ycoords ( y , 2 ) ; valarray <float> xcoords ( x , 4 ) ; valarray <double> res = atan2 ( ycoords , xcoords ) ; cout < < " results : " ; for ( size_t i = 0 ; i < res.size ( ) ; + + i ) cout < < ' ' < < res [ i ] ; cout < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { string string1 = " Geeks.\n For.\n Geeks.\n  " ; string string2 = R " ( Geeks.\n For.\n Geeks.\n  ) " ; cout < < string1 < < endl ; cout < < string2 < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void printVector ( vector <int> v ) { for_each ( v.begin ( ) , v.end ( ) , [ ] ( int i ) { std : : cout < < i < < " " ; } ) ; cout < < endl ; } int main ( ) { vector <int> v { 4 , 1 , 3 , 5 , 2 , 3 , 1 , 7 } ; printVector ( v ) ; vector <int> : : iterator p = find_if ( v.begin ( ) , v.end ( ) , [ ] ( int i ) { return i > 4 ; } ) ; cout < < " First number greater than 4 is : " < < * p < < endl ; sort ( v.begin ( ) , v.end ( ) , [ ] ( const int & a , const int & b ) -> bool { return a > b ; } ) ; printVector ( v ) ; int count_5 = count_if ( v.begin ( ) , v.end ( ) , [ ] ( int a ) { return ( a > = 5 ) ; } ) ; cout < < " The number of elements greater than or equal to 5 is : " < < count_5 < < endl ; p = unique ( v.begin ( ) , v.end ( ) , [ ] ( int a , int b ) { return a = = b ; } ) ; v.resize ( distance ( v.begin ( ) , p ) ) ; printVector ( v ) ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int f = accumulate ( arr , arr + 10 , 1 , [ ] ( int i , int j ) { return i * j ; } ) ; cout < < " Factorial of 10 is : " < < f < < endl ; auto square = [ ] ( int i ) { return i * i ; } ; cout < < " Square of 5 is : " < < square ( 5 ) < < endl ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { vector <int> v1 = { 3 , 1 , 7 , 9 } ; vector <int> v2 = { 10 , 2 , 7 , 16 , 9 } ; auto pushinto = [ & ] ( int m ) { v1.push_back ( m ) ; v2.push_back ( m ) ; } ; pushinto ( 20 ) ; [ v1 ] ( ) { for ( auto p = v1.begin ( ) ; p ! = v1.end ( ) ; p + + ) { cout < < * p < < " " ; } } ; int N = 5 ; vector <int> : : iterator p = find_if ( v1.begin ( ) , v1.end ( ) , [ N ] ( int i ) { return i > N ; } ) ; cout < < " First number greater than 5 is : " < < * p < < endl ; int count_N = count_if ( v1.begin ( ) , v1.end ( ) , [ = ] ( int a ) { return ( a > = N ) ; } ) ; cout < < " The number of elements greater than or equal to 5 is : " < < count_N < < endl ; }
#include <iostream> using namespace std ; class B { public : B ( const char * str = " \0 " ) { cout < < " Constructor called " < < endl ; } B ( const B & b ; ) { cout < < " Copy constructor called " < < endl ; } } ; int main ( ) { B ob = " copy me " ; return 0 ; }
#include <iostream> #include <cstring> using namespace std ; class anyArrayClass { int size ; int * ptr ; public : anyArrayClass ( int s = 0 ) : size ( s ) , ptr ( size? new int [ size ] : nullptr ) { } anyArrayClass ( const anyArrayClass & obj ) : size ( obj.size ) , ptr ( size? new int [ size ] : nullptr ) { memmove ( ptr , obj.ptr , size * sizeof ( int ) ) ; } anyArrayClass & operator = ( const anyArrayClass & obj ) { if ( this ! = & obj ; ) { delete ptr ; size = obj.size ; ptr = size? new int [ size ] : nullptr ; memmove ( ptr , obj.ptr , size * sizeof ( int ) ) ; return * this ; } } ~anyArrayClass ( ) { delete [ ] ptr ; } }
#include <iostream> #include <cstring> using namespace std ; class anyArrayClass { int size ; int * ptr ; public : anyArrayClass ( int s = 0 ) : size ( s ) , ptr ( size? new int [ size ] : nullptr ) { } anyArrayClass ( const anyArrayClass & obj ) : size ( obj.size ) , ptr ( size? new int [ size ] : nullptr ) { memmove ( ptr , obj.ptr , size * sizeof ( int ) ) ; } friend void swap ( anyArrayClass & obj1 , anyArrayClass & obj2 ) { std : : swap ( obj1.size , obj2.size ) ; std : : swap ( obj1.ptr , obj2.ptr ) ; } anyArrayClass & operator = ( anyArrayClass obj ) { swap ( * this , obj ) ; return * this ; } ~anyArrayClass ( ) { delete [ ] ptr ; } }
#include <iostream> using namespace std ; void fun ( ) { cout < < " Hello " ; return ; } int main ( ) { fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; void work ( ) { cout < < " The void function has returned " " a void ( ) !!! \n  " ; } void test ( ) { return work ( ) ; } int main ( ) { test ( ) ; return 0 ; }
#include <iostream> using namespace std ; void test ( ) { cout < < " Hello " ; return ( void ) " Doesn't Print " ; } int main ( ) { test ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Complex { private : int real , imag ; public : Complex ( int r = 0 , int i = 0 ) { real = r ; imag = i ; } Complex operator + ( Complex const & obj ; ) { Complex res ; res.real = real + obj.real ; res.imag = imag + obj.imag ; return res ; } void print ( ) { cout < < real < < " + i " < < imag < < endl ; } } ; int main ( ) { Complex c1 ( 10 , 5 ) , c2 ( 2 , 4 ) ; Complex c3 = c1 + c2 ; c3.print ( ) ; }
#include <iostream> using namespace std ; class Complex { private : int real , imag ; public : Complex ( int r = 0 , int i = 0 ) { real = r ; imag = i ; } void print ( ) { cout < < real < < " + i " < < imag < < endl ; } friend Complex operator + ( Complex const & , Complex const & ) ; } ; Complex operator + ( Complex const & c1 ; , Complex const & c2 ; ) { return Complex ( c1.real + c2.real , c1.imag + c2.imag ) ; } int main ( ) { Complex c1 ( 10 , 5 ) , c2 ( 2 , 4 ) ; Complex c3 = c1 + c2 ; c3.print ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Fraction { int num , den ; public : Fraction ( int n , int d ) { num = n ; den = d ; } operator float ( ) const { return float ( num ) / float ( den ) ; } } ; int main ( ) { Fraction f ( 2 , 5 ) ; float val = f ; cout < < val ; return 0 ; }
#include <iostream> using namespace std ; class Point { private : int x , y ; public : Point ( int i = 0 , int j = 0 ) { x = i ; y = j ; } void print ( ) { cout < < endl < < " x = " < < x < < " , y = " < < y ; } } ; int main ( ) { Point t ( 20 , 20 ) ; t.print ( ) ; t = 30 ; t.print ( ) ; return 0 ; }
#include <iostream> #include <stdlib.h> using namespace std ; class student { string name ; int age ; public : student ( ) { cout < < " Constructor is called\n  " ; } student ( string name , int age ) { this-> name = name ; this-> age = age ; } void display ( ) { cout < < " Name : " < < name < < endl ; cout < < " Age : " < < age < < endl ; } void * operator new ( size_t size ) { cout < < " Overloading new operator with size : " < < size < < endl ; void * p = : : new student ( ) ; return p ; } void operator delete ( void * p ) { cout < < " Overloading delete operator " < < endl ; free ( p ) ; } } ; int main ( ) { student * p = new student ( " Yash " , 24 ) ; p-> display ( ) ; delete p ; }
#include <iostream> #include <stdlib.h> using namespace std ; void * operator new ( size_t size ) { cout < < " New operator overloading " < < endl ; void * p = malloc ( size ) ; return p ; } void operator delete ( void * p ) { cout < < " Delete operator overloading " < < endl ; free ( p ) ; } int main ( ) { int n = 5 , i ; int * p = new int [ 3 ] ; for ( i = 0 ; i <n ; i + + ) p [ i ] = i ; cout < < " Array : " ; for ( i = 0 ; i <n ; i + + ) cout < < p [ i ] < < " " ; cout < < endl ; delete p ; }
#include <iostream> #include <cstdlib> using namespace std ; class Array { private : int * ptr ; int size ; public : Array ( int * , int ) ; int & operator ; [ ] ( int ) ; void print ( ) const ; } ; int & Array ; : : operator [ ] ( int index ) { if ( index > = size ) { cout < < " Array index out of bound , exiting " ; exit ( 0 ) ; } return ptr [ index ] ; } Array : : Array ( int * p = NULL , int s = 0 ) { size = s ; ptr = NULL ; if ( s ! = 0 ) { ptr = new int [ s ] ; for ( int i = 0 ; i < s ; i + + ) ptr [ i ] = p [ i ] ; } } void Array : : print ( ) const { for ( int i = 0 ; i < size ; i + + ) cout < <ptr [ i ] < < " " ; cout < <endl ; } int main ( ) { int a [ ] = { 1 , 2 , 4 , 5 } ; Array arr1 ( a , 4 ) ; arr1 [ 2 ] = 6 ; arr1.print ( ) ; arr1 [ 8 ] = 6 ; return 0 ; }
#include <iostream> using namespace std ; class construct { public : float area ; construct ( ) { area = 0 ; } construct ( int a , int b ) { area = a * b ; } void disp ( ) { cout < < area < < endl ; } } ; int main ( ) { construct o ; construct o2 ( 10 , 20 ) ; o.disp ( ) ; o2.disp ( ) ; return 1 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int * pi = new int [ 5 ] { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i < 5 ; i + + ) cout < < * ( pi + i ) ; }
#include <iostream> using namespace std ; class A { int arr [ 3 ] ; public : A ( int x , int y , int z ) : arr { x , y , z } { } ; void show ( ) { for ( int i = 0 ; i < 3 ; i + + ) cout < < * ( arr + i ) ; } } ; int main ( ) { A a ( 1 , 2 , 3 ) ; a.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int a ; int b ; public : A ( int x , int y ) : a ( x ) , b ( y ) { } void show ( ) { cout < < a < < " " < < b ; } } ; A f ( int a , int b ) { return { a , b } ; } int main ( ) { A x = f ( 1 , 2 ) ; x.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int a ; int b ; public : A ( int x , int y ) : a ( x ) , b ( y ) { } void show ( ) { cout < < a < < " " < < b ; } } ; void f ( A x ) { x.show ( ) ; } int main ( ) { f ( { 1 , 2 } ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; struct Test { int id ; bool operator = = ( const Test & t ) const { return ( this-> id = = t.id ) ; } } ; class MyHashFunction { public : size_t operator ( ) ( const Test & t ) const { return t.id ; } } ; int main ( ) { Test t1 = { 110 } , t2 = { 102 } , t3 = { 101 } , t4 = { 115 } ; unordered_set <Test , MyHashFunction> us ; us.insert ( t1 ) ; us.insert ( t2 ) ; us.insert ( t3 ) ; us.insert ( t4 ) ; for ( auto e : us ) { cout < < e.id < < " " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; struct Person { string first , last ; Person ( string f , string l ) { first = f ; last = l ; } bool operator = = ( const Person & p ) const { return first = = p.first & & last = = p.last ; } } ; class MyHashFunction { public : size_t operator ( ) ( const Person & p ) const { return ( hash <string> ( ) ( p.first ) ) ^ ( hash <string> ( ) ( p.last ) ) ; } } ; int main ( ) { unordered_set <Person , MyHashFunction> us ; Person p1 ( " kartik " , " kapoor " ) ; Person p2 ( " Ram " , " Singh " ) ; Person p3 ( " Laxman " , " Prasad " ) ; us.insert ( p1 ) ; us.insert ( p2 ) ; us.insert ( p3 ) ; for ( auto e : us ) { cout < < " [ " < < e.first < < " , " < < e.last < < " ] \n  " ; } return 0 ; }
#include <bits / stdc + + .h> #define SIZE ( x ) sizeof ( x ) * 8 using namespace std ; void printSignedRange ( int count ) { int min = pow ( 2 , count - 1 ) ; int max = pow ( 2 , count - 1 ) - 1 ; printf ( " %d to %d " , min * ( -1 ) , max ) ; } int main ( ) { cout < < " signed char : " ; printSignedRange ( SIZE ( char ) ) ; cout < < " \n signed int : " ; printSignedRange ( SIZE ( int ) ) ; cout < < " \n signed short int : " ; printSignedRange ( SIZE ( short int ) ) ; return 0 ; }
#include <bits / stdc + + .h> #define SIZE ( x ) sizeof ( x ) * 8 using namespace std ; void UnsignedRange ( int count ) { unsigned int max = pow ( 2 , count ) - 1 ; cout < < " 0 to " < < max ; } int main ( ) { cout < < " unsigned char : " ; UnsignedRange ( SIZE ( unsigned char ) ) ; cout < < " \n unsigned int : " ; UnsignedRange ( SIZE ( unsigned int ) ) ; cout < < " \n unsigned short int : " ; UnsignedRange ( SIZE ( unsigned short ) ) ; return 0 ; }
#include <algorithm> #include <iostream> using namespace std ; int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; sort ( arr , arr + 3 ) ; cout < < " The 3! possible permutations with 3 elements : \n  " ; do { cout < < arr [ 0 ] < < " " < < arr [ 1 ] < < " " < < arr [ 2 ] < < " \n  " ; } while ( next_permutation ( arr , arr + 3 ) ) ; cout < < " After loop : " < < arr [ 0 ] < < ' ' < < arr [ 1 ] < < ' ' < < arr [ 2 ] < < '\n ' ; return 0 ; }
#include <algorithm> #include <iostream> using namespace std ; int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; sort ( arr , arr + 3 ) ; reverse ( arr , arr + 3 ) ; cout < < " The 3! possible permutations with 3 elements : \n  " ; do { cout < < arr [ 0 ] < < " " < < arr [ 1 ] < < " " < < arr [ 2 ] < < " \n  " ; } while ( prev_permutation ( arr , arr + 3 ) ) ; cout < < " After loop : " < < arr [ 0 ] < < ' ' < < arr [ 1 ] < < ' ' < < arr [ 2 ] < < '\n ' ; return 0 ; }
#include <iostream> #include <stdio.h> using namespace std ; class Test { public : Test ( ) { } Test ( const Test & t ; ) { cout < < " Copy constructor called " < <endl ; } Test & operator = ( const Test & t ; ) { cout < < " Assignment operator called " < <endl ; } } ; int main ( ) { Test t1 , t2 ; t2 = t1 ; Test t3 = t1 ; getchar ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { public : A & operator = ( A & a ; ) { cout < < " base class assignment operator called " ; return * this ; } } ; class B : public A { } ; int main ( ) { B a , b ; a.A : : operator = ( b ) ; getchar ( ) ; return 0 ; }
#include <iostream> #include " Header1.h " #include " Header2.h " using namespace std ; using namespace one ; using namespace two ; int main ( ) { print ( ) ; }
#include <iostream> #include " Header1.h " #include " Header2.h " int main ( ) { one : : print ( ) ; two : : print ( ) ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> v = { 1 , 2 , 3 } ; vector <int> : : iterator i ; int j ; cout < < " Without iterators = " ; for ( j = 0 ; j < 3 ; + + j ) { cout < < v [ j ] < < " " ; } cout < < " \n With iterators = " ; for ( i = v.begin ( ) ; i ! = v.end ( ) ; + + i ) { cout < < * i < < " " ; } v.push_back ( 4 ) ; cout < < " \n Without iterators = " ; for ( j = 0 ; j < 4 ; + + j ) { cout < < v [ j ] < < " " ; } cout < < " \n With iterators = " ; for ( i = v.begin ( ) ; i ! = v.end ( ) ; + + i ) { cout < < * i < < " " ; } return 0 ; }
#include <iostream> #include <vector> using namespace std ; int main ( ) { vector <int> v = { 1 , 2 , 3 } ; vector <int> : : iterator i ; int j ; for ( i = v.begin ( ) ; i ! = v.end ( ) ; + + i ) { if ( i = = v.begin ( ) ) { i = v.insert ( i , 5 ) ; } } for ( i = v.begin ( ) ; i ! = v.end ( ) ; + + i ) { if ( i = = v.begin ( ) + 1 ) { i = v.erase ( i ) ; } } for ( i = v.begin ( ) ; i ! = v.end ( ) ; + + i ) { cout < < * i < < " " ; } return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { int m ; } ; struct sam { virtual void foo ( ) = 0 ; } ; class raj : sam { } ; int main ( ) { cout < < boolalpha ; cout < < " is_abstract : " < < '\n ' ; cout < < " gfg : " < < is_abstract <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_abstract <sam> : : value < < '\n ' ; cout < < " raj : " < < is_abstract <raj> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { virtual void foo ( ) ; } ; class raj { virtual void foo ( ) = 0 ; } ; struct sam : raj { } ; class geek { virtual void foo ( ) ; } ; int main ( ) { cout < < std : : boolalpha ; cout < < " is_abstract : " < < '\n ' ; cout < < " gfg : " < < is_abstract <gfg> : : value < < '\n ' ; cout < < " raj : " < < is_abstract <raj> : : value < < '\n ' ; cout < < " sam : " < < is_abstract <sam> : : value < < '\n ' ; cout < < " geek : " < < is_abstract <geek> : : value < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; template <class T> void fun ( T a ) { cout < < " The main template fun ( ) : " < < a < < endl ; } template <> void fun ( int a ) { cout < < " Specialized Template for int type : " < < a < < endl ; } int main ( ) { fun <char> ( 'a' ) ; fun <int> ( 10 ) ; fun <float> ( 10.14 ) ; }
#include <iostream> using namespace std ; template <class T> class Test { public : Test ( ) { cout < < " General template object \n  " ; } } ; template <> class Test <int> { public : Test ( ) { cout < < " Specialized template object\n  " ; } } ; int main ( ) { Test <int> a ; Test <char> b ; Test <float> c ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { } ; enum sam : int { } ; enum class raj : int { } ; int main ( ) { cout < < boolalpha ; cout < < " is_signed : " < < '\n ' ; cout < < " int : " < < is_signed <int> : : value < < '\n ' ; cout < < " gfg : " < < is_signed <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_signed <sam> : : value < < '\n ' ; cout < < " raj : " < < is_signed <raj> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_signed : " < < '\n ' ; cout < < " float : " < < is_signed <float> : : value < < '\n ' ; cout < < " signed int : " < < is_signed <signed int> : : value < < '\n ' ; cout < < " unsigned int : " < < is_signed <unsigned int> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_signed : " < < '\n ' ; cout < < " bool : " < < is_signed <bool> : : value < < '\n ' ; cout < < " unsigned char : " < < is_signed <unsigned char> : : value < < '\n ' ; cout < < " signed char : " < < is_signed <signed char> : : value < < '\n ' ; cout < < " double : " < < is_signed <double> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { int var1 ; } ; struct sam { int var2 ; private : int var3 ; } ; struct raj { virtual void func ( ) ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_pod : " < < '\n ' ; cout < < " gfg : " < < is_pod <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_pod <sam> : : value < < '\n ' ; cout < < " raj : " < < is_pod <raj> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { int var1 ; } ; class sam { int var2 ; private : int var3 ; } ; class raj { virtual void func ( ) ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_pod : " < < '\n ' ; cout < < " gfg : " < < is_pod <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_pod <sam> : : value < < '\n ' ; cout < < " raj : " < < is_pod <raj> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; union gfg { int var1 ; } ; union sam { int var2 ; private : int var3 ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_pod : " < < '\n ' ; cout < < " gfg : " < < is_pod <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_pod <sam> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct GFG1 { } ; struct GFG2 { int variab ; } ; struct GFG3 { static int variab ; } ; struct GFG4 { virtual ~GFG4 ( ) ; } ; int main ( ) { cout < < boolalpha ; cout < < " Is GFG1 empty : " < < is_empty <GFG1> : : value < < '\n ' ; cout < < " Is GFG2 empty : " < < is_empty <GFG2> : : value < < '\n ' ; cout < < " Is GFG3 empty : " < < is_empty <GFG3> : : value < < '\n ' ; cout < < " Is GFG4 empty : " < < is_empty <GFG4> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class GFG1 { } ; class GFG2 { int variab ; } ; class GFG3 { static int variab ; } ; class GFG4 { virtual ~GFG4 ( ) ; } ; int main ( ) { cout < < boolalpha ; cout < < " Is GFG1 empty : " < < is_empty <GFG1> : : value < < '\n ' ; cout < < " Is GFG2 empty : " < < is_empty <GFG2> : : value < < '\n ' ; cout < < " Is GFG3 empty : " < < is_empty <GFG3> : : value < < '\n ' ; cout < < " Is GFG4 empty : " < < is_empty <GFG4> : : value < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wstring str = L " geeksforgeeks " ; intmax_t val = wcstoimax ( str.c_str ( ) , nullptr , 36 ) ; wcout < < str < < " in base 36 is " < < val < < " in base 10\n \n  " ; wchar_t * end ; val = wcstoimax ( str.c_str ( ) , & end ; , 30 ) ; wcout < < " Given String = " < < str < < endl ; wcout < < " Number with base 30 in string " < < val < < " in base 10 " < < endl ; wcout < < " End String points to " < < end < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int base = 10 ; wstring str = L " 12345abcd " ; wchar_t * end ; uintmax_t num ; num = wcstoumax ( str.c_str ( ) , & end ; , base ) ; wcout < < " Given String = " < < str < < endl ; wcout < < " Value stored in num " < < num < < endl ; if ( * end ) { wcout < < " End string points to " < < end < < endl < < endl ; } else { wcout < < " Null pointer " < < endl < < endl ; } base = 10 ; wstring str2 = L " abcd " ; wcout < < " Given String = " < < str2 < < endl ; num = wcstoumax ( str2.c_str ( ) , & end ; , base ) ; wcout < < " Number with base 10 in string " < < num < < endl ; if ( * end ) { wcout < < " End String points to " < < end ; } else { wcout < < " Null pointer " ; } return 0 ; }
#include <iostream> using namespace std ; void replaceDemo ( string s1 , string s2 , string s3 , string s4 ) { s1.replace ( 0 , 7 , s2 ) ; cout < < s1 < < endl ; s4.replace ( 0 , 3 , " Hello " ) ; cout < < s4 < < endl ; s4.replace ( 6 , 5 , s3 , 0 , 5 ) ; cout < < s4 < < endl ; s4.replace ( 6 , 5 , " to all " , 6 ) ; cout < < s4 < < endl ; s4.replace ( 12 , 1 , 3 , '!' ) ; cout < < s4 < < endl ; } int main ( ) { string s1 = " Example of replace " ; string s2 = " Demonstration " ; string s3 = " GeeksforGeeks " ; string s4 = " HeyWorld ! " ; replaceDemo ( s1 , s2 , s3 , s4 ) ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> using namespace std ; bool IsVowel ( char ch ) { return ( ch = = 'A' || ch = = 'E' || ch = = 'I' || ch = = 'O' || ch = = 'U' ) ; } void replace_ifDemo ( vector <char> & v ; ) { replace_if ( v.begin ( ) , v.end ( ) , IsVowel , 'V' ) ; } void print ( vector <char> & v ; ) { int len = v.size ( ) ; for ( int i = 0 ; i < len ; i + + ) cout < < v [ i ] < < " " ; cout < < endl ; } int main ( ) { vector <char> v ; for ( int i = 0 ; i < = 6 ; i + + ) v.push_back ( 'A' + i ) ; cout < < " Before replace_if " < < " : " ; print ( v ) ; replace_ifDemo ( v ) ; cout < < " After replace_if " < < " : " ; print ( v ) ; return 0 ; }
#include <vector> #include <algorithm> #include <iostream> using namespace std ; void removecopyDemo ( vector <int> & v1 ; ) { remove_copy ( v1.begin ( ) , v1.end ( ) , v1.begin ( ) , 3 ) ; } void print ( vector <int> & v ; ) { int len = v.size ( ) ; for ( int i = 0 ; i < len ; i + + ) cout < < v [ i ] < < " " ; cout < < endl ; } int main ( ) { vector <int> v1 , v2 ( 10 ) ; for ( int i = 10 ; i < = 25 ; i + + ) v1.push_back ( i % 6 ) ; cout < < " elements of v1 before remove_copy : " < <endl ; print ( v1 ) ; removecopyDemo ( v1 ) ; cout < < " After removing element 3 " < <endl ; print ( v1 ) ; return 0 ; }
#include <vector> #include <algorithm> #include <iostream> using namespace std ; bool IsOdd ( int i ) { return ( ( i % 2 ) ! = 0 ) ; } void remove_copy_ifDemo ( vector <int> & v1 ; , vector <int> & v2 ; ) { remove_copy_if ( v1.begin ( ) , v1.end ( ) , v2.begin ( ) , IsOdd ) ; } void print ( vector <int> & v ; ) { int len = v.size ( ) ; for ( int i = 0 ; i < len ; i + + ) cout < < v [ i ] < < " " ; cout < < endl ; } int main ( ) { vector <int> v1 , v2 ( 10 ) ; for ( int i = 10 ; i < = 20 ; i + + ) v1.push_back ( i ) ; cout < < " elements of v1 before remove_copy : " ; print ( v1 ) ; remove_copy_ifDemo ( v1 , v2 ) ; cout < < " elements of v1 after remove_copy : " ; print ( v1 ) ; cout < < " After removing Odd Numbers from v1 " " copy result in vector v2 " < <endl ; print ( v2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str1 , string str2 ) { str1.insert ( 6 , str2 ) ; cout < < " Using insert : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; insertDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str1 , string str2 ) { str1.insert ( 6 , str2 , 8 , 6 ) ; cout < < " Using insert : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; insertDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , " are " ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , " are here " , 10 ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( 5 , 5 , '$' ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " * * * * * * * * * * " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { str.insert ( str.begin ( ) + 5 , 5 , '$' ) ; cout < < " Using insert : " ; cout < < str ; } int main ( ) { string str ( " * * * * * * * * * * " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str ) { std : : string : : iterator pos ; pos = str.insert ( str.begin ( ) + 5 , '$' ) ; cout < < " Using insert : " ; cout < < str < < endl ; cout < < " Value at Iterator returned : " < < * pos ; } int main ( ) { string str ( " * * * * * * * * * * " ) ; cout < < " Original String : " < < str < < endl ; insertDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void insertDemo ( string str1 , string str2 ) { str1.insert ( str1.begin ( ) + 6 , str2.begin ( ) + 5 , str2.end ( ) - 6 ) ; cout < < " Using insert : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; insertDemo ( str1 , str2 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unordered_map <std : : string , std : : string> mymap ; mymap = { { " Australia " , " Canberra " } , { " U.S. " , " Washington " } , { " France " , " Paris " } } ; auto it = mymap.begin ( ) ; cout < < it-> first < < " " < < it-> second ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unordered_map <std : : string , std : : string> mymap ; mymap = { { " Australia " , " Canberra " } , { " U.S. " , " Washington " } , { " France " , " Paris " } } ; auto it = mymap.begin ( 0 ) ; cout < < it-> first < < " " < < it-> second ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> using namespace std ; void printx2 ( int a ) { cout < < a * 2 < < " " ; } struct Class2 { void operator ( ) ( int a ) { cout < < a * 3 < < " " ; } } ob1 ; int main ( ) { int arr [ 5 ] = { 1 , 5 , 2 , 4 , 3 } ; cout < < " Using Arrays : " < < endl ; cout < < " Multiple of 2 of elements are : " ; for_each ( arr , arr + 5 , printx2 ) ; cout < < endl ; cout < < " Multiple of 3 of elements are : " ; for_each ( arr , arr + 5 , ob1 ) ; cout < < endl ; vector <int> arr1 = { 4 , 5 , 8 , 3 , 1 } ; cout < < " Using Vectors : " < < endl ; cout < < " Multiple of 2 of elements are : " ; for_each ( arr1.begin ( ) , arr1.end ( ) , printx2 ) ; cout < < endl ; cout < < " Multiple of 3 of elements are : " ; for_each ( arr1.begin ( ) , arr1.end ( ) , ob1 ) ; cout < < endl ; }
#include <iostream> #include <vector> #include <algorithm> using namespace std ; void printx2 ( int a ) { cout < < a * 2 < < " " ; if ( a % 2 = = 0 ) { throw a ; } } struct Class2 { void operator ( ) ( int a ) { cout < < a * 3 < < " " ; if ( a % 2 = = 0 ) { throw a ; } } } ob1 ; int main ( ) { int arr [ 5 ] = { 1 , 5 , 2 , 4 , 3 } ; cout < < " Using Array " < < endl ; try { for_each ( arr , arr + 5 , printx2 ) ; } catch ( int i ) { cout < < " \n The Exception element is : " < < i ; } cout < < endl ; try { for_each ( arr , arr + 5 , ob1 ) ; } catch ( int i ) { cout < < " \n The Exception element is : " < < i ; } vector <int> arr1 = { 1 , 3 , 6 , 5 , 1 } ; cout < < " \n Using Vector " < < endl ; try { for_each ( arr1.begin ( ) , arr1.end ( ) , printx2 ) ; } catch ( int i ) { cout < < " \n The Exception element is : " < < i ; } cout < < endl ; try { for_each ( arr1.begin ( ) , arr1.end ( ) , ob1 ) ; } catch ( int i ) { cout < < " \n The Exception element is : " < < i ; } }
#include <iostream> #include <vector> int main ( ) { std : : vector <int> v = { 0 , 1 , 2 , 3 , 4 , 5 } ; for ( auto i : v ) std : : cout < < i < < ' ' ; std : : cout < < '\n ' ; for ( int n : { 0 , 1 , 2 , 3 , 4 , 5 } ) std : : cout < < n < < ' ' ; std : : cout < < '\n ' ; int a [ ] = { 0 , 1 , 2 , 3 , 4 , 5 } ; for ( int n : a ) std : : cout < < n < < ' ' ; std : : cout < < '\n ' ; for ( int n : a ) std : : cout < < " In loop " < < ' ' ; std : : cout < < '\n ' ; std : : string str = " Geeks " ; for ( char c : str ) std : : cout < < c < < ' ' ; std : : cout < < '\n ' ; std : : map <int , int> MAP ( { { 1 , 1 } , { 2 , 2 } , { 3 , 3 } } ) ; for ( auto i : MAP ) std : : cout < < ' { ' < < i.first < < " , " < < i.second < < " } \n  " ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string str = " FF " ; unsigned long num = stoul ( str , nullptr , 16 ) ; cout < < num < < " \n  " ; string st = " FFFFFF " ; unsigned long long val = stoull ( st , nullptr , 16 ) ; cout < < val ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string s1 = " 4F " ; string s2 = " A0 " ; unsigned long n1 = stoul ( s1 , nullptr , 16 ) ; unsigned long n2 = stoul ( s2 , nullptr , 16 ) ; if ( n1 > n2 ) cout < < s1 < < " is greater than " < < s2 ; else if ( n2 > n1 ) cout < < s2 < < " is greater than " < < s1 ; else cout < < " Both " < < s1 < < " and " < < s2 < < " are equal " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { const wchar_t * src = L " Geekforgeeks " ; char dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int len = 12 ; int value = wcsrtombs ( dest , & src ; , len , & ps ; ) ; cout < < " Number of multibyte characters = " < < value < < endl ; cout < < " Multibyte characters written = " < < dest < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { const wchar_t * src = L " This website is the best " ; char dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int len = 14 ; int value = wcsrtombs ( dest , & src ; , len , & ps ; ) ; cout < < " Number of multibyte characters = " < < value < < endl ; cout < < " Multibyte characters written = " < < dest < < endl ; return 0 ; }
#include <iostream> using namespace std ; class Complex { private : int real , imag ; public : Complex ( int r = 0 , int i = 0 ) { real = r ; imag = i ; } friend ostream & operator < < ( ostream & out ; , const Complex & c ; ) ; friend istream & operator > > ( istream & in ; , Complex & c ; ) ; } ; ostream & operator < < ( ostream & out ; , const Complex & c ; ) { out < < c.real ; out < < " + i " < < c.imag < < endl ; return out ; } istream & operator > > ( istream & in ; , Complex & c ; ) { cout < < " Enter Real Part " ; in > > c.real ; cout < < " Enter Imagenory Part " ; in > > c.imag ; return in ; } int main ( ) { Complex c1 ; cin > > c1 ; cout < < " The complex object is " ; cout < < c1 ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int num ; cout < < " Enter the integer : " ; cin > > num ; cout < < " Entered integer is : " < < num ; return 0 ; }
#include <algorithm> #include <functional> #include <iostream> #include <iterator> using namespace std ; int main ( ) { int xyz [ ] = { 500 , 600 , 300 , 800 , 200 } ; int abc [ ] = { 0xf , 0xf , 0xf , 255 , 255 } ; int n = 5 ; int results [ n ] ; transform ( xyz , end ( xyz ) , abc , results , bit_and <int> ( ) ) ; cout < < " Results : " ; for ( const int & x : results ) cout < < ' ' < < x ; return 0 ; }
#include <algorithm> #include <functional> #include <iostream> #include <iterator> using namespace std ; int main ( ) { int xyz [ ] = { 0 , 1100 } ; int abc [ ] = { 0xf , 0xf } ; int results [ 2 ] ; transform ( xyz , end ( xyz ) , abc , results , bit_and <int> ( ) ) ; cout < < " Results : " ; for ( const int & x : results ) cout < < ' ' < < x ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , size = 15 ; for ( a = size / 2 ; a < = size ; a = a + 2 ) { for ( b = 1 ; b < size-a ; b = b + 2 ) printf ( " " ) ; for ( b = 1 ; b < = a ; b + + ) printf ( " A " ) ; for ( b = 1 ; b < = size-a ; b + + ) printf ( " " ) ; for ( b = 1 ; b < = a-1 ; b + + ) printf ( " A " ) ; printf ( " \n  " ) ; } for ( a = size ; a > = 0 ; a-- ) { for ( b = a ; b < size ; b + + ) printf ( " " ) ; for ( b = 1 ; b < = ( ( a * 2 ) - 1 ) ; b + + ) printf ( " B " ) ; printf ( " \n  " ) ; } }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " aksh " ; char str2 [ 10 ] = " akash " ; int result = strncmp ( str1 , str2 , 4 ) ; if ( result = = 0 ) { printf ( " str1 is equal to str2 upto num characters\n  " ) ; } else if ( result > 0 ) printf ( " str1 is greater than str2\n  " ) ; else printf ( " str2 is greater than str1\n  " ) ; printf ( " Value returned by strncmp ( ) is : %d " , result ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " akash " ; char str2 [ 10 ] = " aksh " ; int result = strncmp ( str1 , str2 , 4 ) ; if ( result = = 0 ) { printf ( " str1 is equal to str2 upto num characters\n  " ) ; } else if ( result > 0 ) printf ( " str1 is greater than str2\n  " ) ; else printf ( " str2 is greater than str1\n  " ) ; printf ( " Value returned by strncmp ( ) is : %d " , result ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char str1 [ 10 ] = " akash " ; char str2 [ 10 ] = " akas " ; int result = strncmp ( str1 , str2 , 4 ) ; if ( result = = 0 ) { printf ( " str1 is equal to str2 upto num characters\n  " ) ; } else if ( result > 0 ) printf ( " str1 is greater than str2\n  " ) ; else printf ( " str2 is greater than str1\n  " ) ; printf ( " Value returned by strncmp ( ) is : %d " , result ) ; return 0 ; }
#include <cstring> #include <iostream> void display ( char * abc , char * xyz , int res , int count ) { if ( res > 0 ) std : : cout < < xyz < < " come-before " < < abc ; else if ( res < 0 ) std : : cout < < abc < < " come-before " < < xyz ; else std : : cout < < " First " < < count < < " characters of string " < < abc < < " and " < < xyz < < " are same " ; } int main ( ) { char abc [ ] = " GeeksforGeeks " ; char xyz [ ] = " Geeks " ; int res ; res = std : : strncmp ( abc , xyz , 4 ) ; display ( abc , xyz , res , 4 ) ; return 0 ; }
#include <cstring> #include <iostream> void display ( char * abc , char * xyz , int res , int count ) { if ( res > 0 ) std : : cout < < xyz < < " come-before " < < abc ; else if ( res < 0 ) std : : cout < < abc < < " come-before " < < xyz ; else std : : cout < < " First " < < count < < " characters of string " < < abc < < " and " < < xyz < < " are same " ; ; } int main ( ) { char abc [ ] = " GeeksforGeeks " ; char xyz [ ] = " Geeks " ; int res ; res = std : : strncmp ( abc , xyz , 6 ) ; display ( abc , xyz , res , 6 ) ; return 0 ; }
#include <iostream> #include <fstream> #include " opencv2 / imgcodecs.hpp " #include " opencv2 / highgui.hpp " #include " opencv2 / stitching.hpp " using namespace std ; using namespace cv ; Stitcher : : Mode mode = Stitcher : : PANORAMA ; vector <Mat> imgs ; int main ( int argc , char * argv [ ] ) { for ( int i = 1 ; i < argc ; + + i ) { Mat img = imread ( argv [ i ] ) ; if ( img.empty ( ) ) { cout < < " Can't read image ' " < < argv [ i ] < < " '\n  " ; return -1 ; } imgs.push_back ( img ) ; } Mat pano ; Ptr <Stitcher> stitcher = Stitcher : : create ( mode , false ) ; Stitcher : : Status status = stitcher-> stitch ( imgs , pano ) ; if ( status ! = Stitcher : : OK ) { cout < < " Can't stitch images\n  " ; return -1 ; } imwrite ( " result.jpg " , pano ) ; imshow ( " Result " , pano ) ; waitKey ( 0 ) ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct GFG1 { } ; union GFG2 { int var1 ; float var2 ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_union : " < < endl ; cout < < " GFG1 : " < < is_union <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_union <GFG2> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; union GFG1 { int var1 ; float var2 ; char var3 ; } ; struct GFG2 { union { int var4 ; float var5 ; } ; } ; int main ( ) { cout < < boolalpha ; cout < < " is_union : " < < endl ; cout < < " int : " < < is_union <int> : : value < < endl ; cout < < " GFG1 : " < < is_union <GFG1> : : value < < endl ; cout < < " GFG2 : " < < is_union <GFG2> : : value < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { int variab ; } ; struct sam { int variab ; private : int variab_priv ; } ; union raj { } ; int main ( ) { cout < < boolalpha ; cout < < " Is gfg class a standard layout : " < < is_standard_layout <gfg> : : value < < '\n ' ; cout < < " Is structure sam a standard layout : " < < is_standard_layout <sam> : : value < < '\n ' ; cout < < " Is union raj a standard layout : " < < is_standard_layout <raj> : : value < < '\n ' ; cout < < " Is datatype char a standard layout : " < < is_standard_layout <char> : : value < < '\n ' ; cout < < " Is integer array 'int a [ 10 ] ' a standard layout : " < < is_standard_layout <int [ 10 ] > : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { int variab ; } ; class sam { int variab ; private : int variab_priv ; } ; class raj { } ; int main ( ) { cout < < boolalpha ; cout < < " Is gfg class a standard layout : " < < is_standard_layout <gfg> : : value < < '\n ' ; cout < < " Is structure sam a standard layout : " < < is_standard_layout <sam> : : value < < '\n ' ; cout < < " Is union raj a standard layout : " < < is_standard_layout <raj> : : value < < '\n ' ; cout < < " Is pointer 'int ( gfg : : * ) ' a standard layout : " < < is_standard_layout <int ( gfg : : * ) > : : value < < '\n ' ; cout < < " Is pointer 'int * ' a standard layout : " < < is_standard_layout <int * > : : value < < '\n ' ; cout < < " Is pointer 'nullptr_t' a standard layout : " < < is_standard_layout <nullptr_t> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { virtual void foo ( ) ; } ; struct geeks : gfg { } ; class raj { virtual void foo ( ) = 0 ; } ; struct sam : raj { } ; int main ( ) { cout < < boolalpha ; cout < < " is_polymorphic : " < < '\n ' ; cout < < " gfg : " < < is_polymorphic <gfg> : : value < < '\n ' ; cout < < " geeks : " < < is_polymorphic <geeks> : : value < < '\n ' ; cout < < " raj : " < < is_polymorphic <raj> : : value < < '\n ' ; cout < < " sam : " < < is_polymorphic <sam> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; struct gfg { int m ; } ; struct sam { virtual void foo ( ) = 0 ; } ; class raj : sam { } ; int main ( ) { cout < < boolalpha ; cout < < " is_polymorphic : " < < '\n ' ; cout < < " gfg : " < < is_polymorphic <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_polymorphic <sam> : : value < < '\n ' ; cout < < " raj : " < < is_polymorphic <raj> : : value < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 20 , 30 , 40 , 50 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -10 , -20 , -30 , -40 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 12 , -20 , 0 , -30 } ; valarray <int> varr1 ; varr1 = abs ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -36 , -369 , -20 , 0 , -30 } ; valarray <int> varr1 ; varr1 = abs ( varr ) ; cout < < " The new valarray " < < " with manipulated values is : " ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1 , 2 , 3 , 4 , 5 } ; valarray <double> varr1 ; varr1 = log10 ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { -1 , 6 , 3 , 45 , 5 } ; valarray <double> varr1 ; varr1 = log10 ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_volatile : " < < '\n ' ; cout < < " volatile int : " < < is_volatile <volatile int> : : value < < '\n ' ; cout < < " volatile void : " < < is_volatile <volatile void> : : value < < '\n ' ; cout < < " int : " < < is_volatile <int> : : value < < '\n ' ; cout < < " char : " < < is_volatile <char> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_volatile : " < < '\n ' ; cout < < " double : " < < is_volatile <double> : : value < < '\n ' ; cout < < " float : " < < is_volatile <float> : : value < < '\n ' ; cout < < " const volatile void : " < < is_volatile <const volatile void> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_volatile : " < < '\n ' ; cout < < " volatile double : " < < is_volatile <volatile double> : : value < < '\n ' ; cout < < " volatile float : " < < is_volatile <volatile float> : : value < < '\n ' ; cout < < " bool : " < < is_volatile <bool> : : value < < '\n ' ; cout < < " volatile char : " < < is_volatile <volatile char> : : value < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; class Parent { public : Parent ( ) { cout < < " Inside base class " < < endl ; } } ; class Child : public Parent { public : Child ( ) { cout < < " Inside sub class " < < endl ; } } ; int main ( ) { Child obj ; return 0 ; }
#include <iostream> using namespace std ; class Parent1 { public : Parent1 ( ) { cout < < " Inside first base class " < < endl ; } } ; class Parent2 { public : Parent2 ( ) { cout < < " Inside second base class " < < endl ; } } ; class Child : public Parent1 , public Parent2 { public : Child ( ) { cout < < " Inside child class " < < endl ; } } ; int main ( ) { Child obj1 ; return 0 ; }
#include <iostream> using namespace std ; class Parent { public : Parent ( int i ) { int x = i ; cout < < " Inside base class's parameterised constructor " < < endl ; } } ; class Child : public Parent { public : Child ( int j ) : Parent ( j ) { cout < < " Inside sub class's parameterised constructor " < < endl ; } } ; int main ( ) { Child obj1 ( 10 ) ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { char sample [ ] = " GeeksforGeeks " ; cout < < sample < < " - A computer science portal for geeks " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int age ; cout < < " Enter your age : " ; cin > > age ; cout < < " \n Your age is : " < <age ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { cerr < < " An error occured " ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { clog < < " An error occured " ; return 0 ; }
#include <iostream> class Base { public : virtual ~Base ( ) = 0 ; } ; class Derived : public Base { public : ~Derived ( ) { std : : cout < < " ~Derived ( ) is executed " ; } } ; int main ( ) { Base * b = new Derived ( ) ; delete b ; return 0 ; }
#include <iostream> class Base { public : virtual ~Base ( ) = 0 ; } ; Base : : ~Base ( ) { std : : cout < < " Pure virtual destructor is called " ; } class Derived : public Base { public : ~Derived ( ) { std : : cout < < " ~Derived ( ) is executed\n  " ; } } ; int main ( ) { Base * b = new Derived ( ) ; delete b ; return 0 ; }
#include <iostream> class Test { public : virtual ~Test ( ) = 0 ; } ; Test : : ~Test ( ) { } int main ( ) { Test p ; Test * t1 = new Test ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 1 , 4 , 5 } ; cout < < " The smallest element " < < " of valarray is = " < < varr.min ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 22 , 24 , 36 , 42 , 12 } ; cout < < " The smallest element " < < " of valarray is = " < < varr.min ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 15 , 10 , 30 , 33 , 40 } ; cout < < " The sum of valarray is = " < < varr.sum ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 1 , 2 , 3 , 4 , 5 } ; cout < < " The sum of valarray is = " < < varr.sum ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1 , 2 , 3 , 4 , 5 } ; valarray <double> varr1 ; varr1 = log ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { -1 , 6 , 3 , 45 , 5 } ; valarray <double> varr1 ; varr1 = log ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -1 , 2 , 3 , 4 , -5 } ; valarray <int> varr1 ; varr1 = pow ( varr , 3 ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -1 , 6 , 3 , 4 , 5 } ; valarray <int> varr1 ; varr1 = pow ( varr , 2 ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( int & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = tan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1.2 , 3.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = tan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1 , 2 , 3 , 4 , 5 } ; valarray <double> varr1 ; varr1 = exp ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { -1 , 0 , 3 , 0 , -5 } ; valarray <double> varr1 ; varr1 = exp ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = sin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1.2 , 3.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = sin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.shift ( 3 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.shift ( -2 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 1 , 4 , 5 } ; cout < < " The largest element of valarray is = " ; cout < < varr.max ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 22 , 24 , 36 , 42 , 12 } ; cout < < " The largest element of valarray is = " ; cout < < varr.max ( ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = cos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 1.2 , 3.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = cos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = acos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = acos ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = atan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = atan ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> bool IsOdd ( int i ) { return ( ( i % 2 ) = = 1 ) ; } int main ( ) { std : : vector <int> vec1 { 10 , 20 , 30 , 30 , 20 , 10 , 10 , 20 } ; std : : vector <int> vec2 { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; std : : cout < < " Original vector : " ; for ( int i = 0 ; i < vec1.size ( ) ; i + + ) std : : cout < < " " < < vec1 [ i ] ; std : : cout < < " \n  " ; std : : vector <int> : : iterator pend ; pend = std : : remove ( vec1.begin ( ) , vec1.end ( ) , 20 ) ; std : : cout < < " After remove : " ; for ( std : : vector <int> : : iterator p = vec1.begin ( ) ; p ! = pend ; + + p ) std : : cout < < ' ' < < * p ; std : : cout < < '\n ' ; std : : cout < < " \n Original vector : " ; for ( int i = 0 ; i < vec2.size ( ) ; i + + ) std : : cout < < " " < < vec2 [ i ] ; std : : cout < < " \n  " ; pend = std : : remove_if ( vec2.begin ( ) , vec2.end ( ) , IsOdd ) ; std : : cout < < " After remove_if : " ; for ( std : : vector <int> : : iterator q = vec2.begin ( ) ; q ! = pend ; + + q ) std : : cout < < ' ' < < * q ; std : : cout < < '\n ' ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( s2 ) ) < 0 ) cout < < s1 < < " is smaller than " < < s2 < < endl ; if ( ( s1.compare ( s1 ) ) = = 0 ) cout < < s1 < < " is equal to " < < s1 < < endl ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s2.compare ( 3 , 5 , s1 ) ) = = 0 ) cout < < " Here , " < < s1 < < " are " < < s2 ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( 0 , 5 , s2 , 3 , 5 ) ) = = 0 ) cout < < " Welcome to " < < s1 < < s2 < < " World " ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( " GeeksforGeeks " ) ) < 0 ) cout < < s1 < < " is smaller than string " < < " GeeksforGeeks " ; if ( ( s2.compare ( " forGeeks " ) ) = = 0 ) cout < < endl < < s2 < < " is equal to string " < < s2 ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 ) { if ( ( s1.compare ( 0 , 5 , " Geeks " ) ) = = 0 ) cout < < s1 < < " are " < < " awesome people " ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; compareOperation ( s1 ) ; return 0 ; }
#include <iostream> using namespace std ; void compareOperation ( string s1 , string s2 ) { if ( ( s1.compare ( 0 , 5 , " Geeks " , 5 ) ) = = 0 ) cout < < " This is " < < s1 < < s2 ; else cout < < " Strings didn't match " ; } int main ( ) { string s1 ( " Geeks " ) ; string s2 ( " forGeeks " ) ; compareOperation ( s1 , s2 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { array <int , 5> a = { 1 , 2 , 3 , 4 , 5 } ; array <int , 5> b = { 1 , 2 , 3 , 4 , 5 } ; array <int , 5> c = { 5 , 4 , 3 , 2 , 1 } ; if ( a > = b ) { cout < < " a is greter than equal to b\n  " ; } else { cout < < " a is neither greater than nor equal to b\n  " ; } if ( b < c ) { cout < < " b is less than c\n  " ; } else { cout < < " b is not lesser than c\n  " ; } if ( a > = c ) { cout < < " a is greter than equal to c\n  " ; } else { cout < < " a is neither greater than nor equal to c\n  " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { array <char , 5> a = { 'a' , 'b' , 'c' , 'd' , 'e' } ; array <char , 5> b = { 'e' , 'd' , 'c' , 'b' , 'a' } ; array <char , 5> c = { 'a' , 'b' , 'c' , 'd' , 'e' } ; if ( a = = b ) { cout < < " a is equal to b\n  " ; } else { cout < < " a is not equal to b\n  " ; } if ( b ! = c ) { cout < < " b is not equal to c\n  " ; } else { cout < < " b is equal to c\n  " ; } if ( a = = c ) { cout < < " a is equal to c\n  " ; } else { cout < < " a is not equal to c\n  " ; } return 0 ; }
#include <iostream> using namespace std ; void usingCompare ( string str1 , string str2 ) { if ( str1.compare ( 2 , 3 , str2 , 3 , 3 ) = = 0 ) cout < < " Both are same " ; else cout < < " Not equal " ; } int main ( ) { string s1 ( " GeeksforGeeks " ) ; string s2 ( " HelloWorld ! " ) ; usingCompare ( s1 , s2 ) ; return 0 ; }
#include <iostream> using namespace std ; void relational_operation ( string s1 , string s2 ) { int i , j ; for ( i = 2 , j = 3 ; i < = 5 & & j < = 6 ; i + + , j + + ) { if ( s1 [ i ] ! = s2 [ j ] ) break ; } if ( i = = 6 & & j = = 7 ) cout < < " Equal " ; else cout < < " Not equal " ; } int main ( ) { string s1 ( " GeeksforGeeks " ) ; string s2 ( " HelloWorld ! " ) ; relational_operation ( s1 , s2 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; struct hash_pair { template <class T1 , class T2> size_t operator ( ) ( const pair <T1 , T2> & p ) const { auto hash1 = hash <T1> { } ( p.first ) ; auto hash2 = hash <T2> { } ( p.second ) ; return hash1 ^ hash2 ; } } ; int main ( ) { unordered_map <pair <int , int> , bool , hash_pair> um ; pair <int , int> p1 ( 1000 , 2000 ) ; pair <int , int> p2 ( 2000 , 3000 ) ; pair <int , int> p3 ( 2005 , 3005 ) ; um [ p1 ] = true ; um [ p2 ] = false ; um [ p3 ] = true ; cout < < " Contents of the unordered_map : \n  " ; for ( auto p : um ) cout < < " [ " < < ( p.first ) .first < < " , " < < ( p.first ) .second < < " ] = = > " < < p.second < < " \n  " ; return 0 ; }
#include <iostream> using namespace std ; float Division ( float num , float den ) { return ( num / den ) ; } int main ( ) { float numerator = 12.5 ; float denominator = 0 ; float result ; result = Division ( numerator , denominator ) ; cout < < " The quotient of 12.5 / 0 is " < < result < < endl ; }
#include <iostream> #include <stdexcept> using namespace std ; float Division ( float num , float den ) { if ( den = = 0 ) { throw runtime_error ( " Math error : Attempted to divide by Zero\n  " ) ; } return ( num / den ) ; } int main ( ) { float numerator , denominator , result ; numerator = 12.5 ; denominator = 0 ; try { result = Division ( numerator , denominator ) ; cout < < " The quotient is " < < result < < endl ; } catch ( runtime_error & e ) { cout < < " Exception occurred " < < endl < < e.what ( ) ; } }
#include <iostream> #include <stdexcept> using namespace std ; class Exception : public runtime_error { public : Exception ( ) : runtime_error ( " Math error : Attempted to divide by Zero\n  " ) { } } ; float Division ( float num , float den ) { if ( den = = 0 ) throw Exception ( ) ; return ( num / den ) ; } int main ( ) { float numerator , denominator , result ; numerator = 12.5 ; denominator = 0 ; try { result = Division ( numerator , denominator ) ; cout < < " The quotient is " < < result < < endl ; } catch ( Exception & e ) { cout < < " Exception occurred " < < endl < < e.what ( ) ; } }
#include <iostream> #include <stdexcept> using namespace std ; float CheckDenominator ( float den ) { if ( den = = 0 ) { throw runtime_error ( " Math error : Attempted to divide by zero\n  " ) ; } else return den ; } float Division ( float num , float den ) { return ( num / CheckDenominator ( den ) ) ; } int main ( ) { float numerator , denominator , result ; numerator = 12.5 ; denominator = 0 ; try { result = Division ( numerator , denominator ) ; cout < < " The quotient is " < < result < < endl ; } catch ( runtime_error & e ) { cout < < " Exception occurred " < < endl < < e.what ( ) ; } }
#include <iostream> #include <stdexcept> using namespace std ; float CheckDenominator ( float den ) { if ( den = = 0 ) throw " Error " ; else return den ; } int main ( ) { float numerator , denominator , result ; numerator = 12.5 ; denominator = 0 ; try { if ( CheckDenominator ( denominator ) ) { result = ( numerator / denominator ) ; cout < < " The quotient is " < < result < < endl ; } } catch ( ... ) { cout < < " Exception occurred " < < endl ; } }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; fillpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; setfillstyle ( XHATCH_FILL , RED ) ; fillpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current position of x = %d " , getx ( ) ) ; outtext ( arr ) ; moveto ( 80 , 50 ) ; sprintf ( arr , " Current position of x = %d " , getx ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; linerel ( 200 , 100 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 150 ) ; linerel ( 150 , 60 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> using namespace std ; void pypart ( int n ) { for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; pypart ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void pypart2 ( int n ) { int k = 2 * n - 2 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j <k ; j + + ) cout < < " " ; k = k - 2 ; for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; pypart2 ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void triangle ( int n ) { int k = 2 * n - 2 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j <k ; j + + ) cout < < " " ; k = k - 1 ; for ( int j = 0 ; j < = i ; j + + ) { cout < < " * " ; } cout < < endl ; } } int main ( ) { int n = 5 ; triangle ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void numpat ( int n ) { int num = 1 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) cout < < num < < " " ; num = num + 1 ; cout < < endl ; } } int main ( ) { int n = 5 ; numpat ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void numpat ( int n ) { int num = 1 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { cout < < num < < " " ; num = num + 1 ; } cout < < endl ; } } int main ( ) { int n = 5 ; numpat ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void alphapat ( int n ) { int num = 65 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { char ch = char ( num ) ; cout < < ch < < " " ; } num = num + 1 ; cout < < endl ; } } int main ( ) { int n = 5 ; alphapat ( n ) ; return 0 ; }
#include <iostream> using namespace std ; void contalpha ( int n ) { int num = 65 ; for ( int i = 0 ; i <n ; i + + ) { for ( int j = 0 ; j < = i ; j + + ) { char ch = char ( num ) ; cout < < ch < < " " ; num = num + 1 ; } cout < < endl ; } } int main ( ) { int n = 5 ; contalpha ( n ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void convertStrtoArr ( string str ) { int str_length = str.length ( ) ; int arr [ str_length ] = { 0 } ; int j = 0 , i , sum = 0 ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] = = ' , ' ) { j + + ; } else { arr [ j ] = arr [ j ] * 10 + ( str [ i ] - 48 ) ; } } cout < < " arr [ ] = " ; for ( i = 0 ; i < = j ; i + + ) { cout < < arr [ i ] < < " " ; sum + = arr [ i ] ; } cout < < " \n Sum of array is = " < < sum < < endl ; } int main ( ) { string str = " 2 , 6 , 3 , 14 " ; convertStrtoArr ( str ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ws [ ] = L " This is some good coding " ; wchar_t * point ; wprintf ( L " Looking for the 'o' character in \ " %ls\ " ...\n  " , ws ) ; point = wcschr ( ws , L'o' ) ; while ( point ! = NULL ) { wprintf ( L " found at %d\n  " , point - ws + 1 ) ; point = wcschr ( point + 1 , L'o' ) ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t ws [ ] = L " geekforgeeks " ; wchar_t * point ; wprintf ( L " Looking for the 'g' character in \ " %ls\ " ...\n  " , ws ) ; point = wcschr ( ws , L'g' ) ; while ( point ! = NULL ) { wprintf ( L " found at %d\n  " , point - ws + 1 ) ; point = wcschr ( point + 1 , L'g' ) ; } return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on double divide ( double x , double y ) { fenv_t envp ; double ans = x / y ; feholdexcept ( & envp ; ) ; feclearexcept ( FE_OVERFLOW | FE_DIVBYZERO ) ; return ans ; } int main ( ) { feclearexcept ( FE_ALL_EXCEPT ) ; double x = 10 ; double y = 0 ; printf ( " x / y = %f\n  " , divide ( x , y ) ) ; if ( !fetestexcept ( FE_ALL_EXCEPT ) ) { printf ( " No exceptions raised " ) ; } return 0 ; }
#include <bits / stdc + + .h> #pragma STDC FENV_ACCESS on using namespace std ; void raised_exceptions ( ) { cout < < " Exceptions raised are : " ; if ( fetestexcept ( FE_DIVBYZERO ) ) cout < < " FE_DIVBYZERO\n  " ; else if ( fetestexcept ( FE_INVALID ) ) cout < < " FE_INVALID\n  " ; else if ( fetestexcept ( FE_OVERFLOW ) ) cout < < " FE_OVERFLOW\n  " ; else if ( fetestexcept ( FE_UNDERFLOW ) ) cout < < " FE_UNDERFLOW\n  " ; else cout < < " No exception found\n  " ; return ; } int main ( ) { fenv_t envp ; feraiseexcept ( FE_DIVBYZERO ) ; raised_exceptions ( ) ; feholdexcept ( & envp ; ) ; raised_exceptions ( ) ; feupdateenv ( & envp ; ) ; raised_exceptions ( ) ; return 0 ; }
#include <iostream> #include <vector> #include <iterator> using namespace std ; int main ( ) { vector <int> v ; int i ; for ( i = 0 ; i < 10 ; + + i ) { v.push_back ( i ) ; } vector <int> : : iterator first ; vector <int> : : iterator last ; first = v.begin ( ) ; last = v.begin ( ) + 5 ; int num = std : : distance ( first , last ) ; cout < < num < < " \n  " ; return 0 ; }
#include <iostream> #include <vector> #include <iterator> using namespace std ; int main ( ) { vector <int> v ; int i ; for ( i = 0 ; i < 10 ; + + i ) { v.push_back ( i ) ; } int num = std : : distance ( v.begin ( ) , v.end ( ) ) ; cout < < num < < " \n  " ; num = std : : distance ( v.end ( ) , v.begin ( ) ) ; cout < < num < < " \n  " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string_1 [ ] = L " geeksforgeeks012345 " ; wchar_t string_2 [ ] = L " 0123456789 " ; int last = wcscspn ( string_1 , string_2 ) ; if ( last > wcslen ( string_1 ) ) wcout < < string_1 < < L " Didn't match any character " ; else wcout < < L " Occurrence of a character in -> \n  " < < string_1 < < " is at position : " < < last ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t string_1 [ ] = L " GFG " ; wchar_t string_2 [ ] = L " 909090909 " ; int last = wcscspn ( string_1 , string_2 ) ; if ( last > wcslen ( string_1 ) ) wcout < < string_1 < < L " does not contain numbers " ; else wcout < < L " Length of the string -> " < < string_1 < < " is : " < < last ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = ' ' ; wchar_t ch2 = 'i' ; if ( isblank ( ch1 ) ) cout < < " ch1 is blank \n  " ; else cout < < " ch1 is not blank\n  " ; if ( isblank ( ch2 ) ) cout < < " ch2 is blank \n  " ; else cout < < " ch2 is not blank\n  " ; return 0 ; }
#include <cwctype> #include <iostream> using namespace std ; int main ( ) { wchar_t ch1 = '3' ; wchar_t ch2 = ' ' ; if ( isblank ( ch1 ) ) cout < < " ch1 is blank \n  " ; else cout < < " ch1 is not blank\n  " ; if ( isblank ( ch2 ) ) cout < < " ch2 is blank \n  " ; else cout < < " ch2 is not blank\n  " ; return 0 ; }
#include <iostream> using namespace std ; void func ( ) { int age = 18 ; } int main ( ) { cout < < " Age is : " < <age ; return 0 ; }
#include <iostream> using namespace std ; void func ( ) { int age = 18 ; cout < <age ; } int main ( ) { cout < < " Age is : " ; func ( ) ; return 0 ; }
#include <iostream> using namespace std ; int global = 5 ; void display ( ) { cout < <global < <endl ; } int main ( ) { display ( ) ; global = 10 ; display ( ) ; }
#include <iostream> using namespace std ; int global = 5 ; int main ( ) { int global = 2 ; cout < < global < < endl ; }
#include <iostream> using namespace std ; int x = 0 ; int main ( ) { int x = 10 ; cout < < " Value of global x is " < < : : x ; cout < < " \n Value of local x is " < < x ; return 0 ; }
#include <iostream> using namespace std ; class Derived ; class Base { private : virtual void fun ( ) { cout < < " Base Fun " ; } friend int main ( ) ; } ; class Derived : public Base { public : void fun ( ) { cout < < " Derived Fun " ; } } ; int main ( ) { Base * ptr = new Derived ; ptr-> fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; struct Geeks { int i ; float f ; char s ; } ; struct Empty { } ; int main ( ) { cout < < " Alignment of char : " < < alignof ( char ) < < endl ; cout < < " Alignment of pointer : " < < alignof ( int * ) < < endl ; cout < < " Alignment of float : " < < alignof ( float ) < < endl ; cout < < " Alignment of class Geeks : " < < alignof ( Geeks ) < < endl ; cout < < " Alignment of Empty class : " < < alignof ( Empty ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; struct Geeks { int i ; float f ; char s ; } ; int main ( ) { cout < < " alignment of Geeks : " < < alignof ( Geeks ) < < '\n ' ; cout < < " sizeof of Geeks : " < < sizeof ( Geeks ) < < '\n ' ; cout < < " alignment of int : " < < alignof ( int ) < < '\n ' ; cout < < " sizeof of int : " < < sizeof ( int ) < < '\n ' ; }
#include <iostream> int main ( ) { std : : string str = " abc " ; std : : cout < < " string size = " < < str.size ( ) < < '\n ' ; std : : cout < < " Element : " < < str [ 2 ] ; }
#include <iostream> #include <sstream> using namespace std ; void extractIntegerWords ( string str ) { stringstream ss ; ss < < str ; string temp ; int found ; while ( !ss.eof ( ) ) { ss > > temp ; if ( stringstream ( temp ) > > found ) cout < < found < < " " ; temp = " " ; } } int main ( ) { string str = " 1 : 2 3 4 prakhar " ; extractIntegerWords ( str ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int z [ ] = { 1 , 0 , 1 , 0 } ; int y [ ] = { 1 , 1 , 0 , 0 } ; int n = 4 ; int result [ n ] ; transform ( z , z + n , y , result , logical_or <int> ( ) ) ; cout < < " Logical OR : \n  " ; for ( int i = 0 ; i < n ; i + + ) cout < < z [ i ] < < " OR " < < y [ i ] < < " = " < < result [ i ] < < " \n  " ; return 0 ; }
#include <stdio.h> int a = 5 ; int * b = & a ; int func ( double * b ) { a = 1 ; * b = 5.10 ; return ( a ) ; } int main ( ) { printf ( " %d " , func ( ( double * ) & a ; ) ) ; return 0 ; }
#include <stdio.h> #include <pthread.h> void * thread ( void * vargp ) { } int main ( ) { int err = 0 , count = 0 ; pthread_t tid ; while ( err = = 0 ) { err = pthread_create ( & tid ; , NULL , thread , NULL ) ; count + + ; } printf ( " Maximum number of thread within a Process " " is : %d\n  " , count ) ; }
#include <bits / stdc + + .h> #include <cstdio> using namespace std ; int main ( ) { FILE * file_ ; char buffer [ 100 ] ; file_ = fopen ( " g4g.txt " , " aman " ) ; while ( !feof ( file_ ) ) { fread ( buffer , sizeof ( buffer ) , 1 , file_ ) ; cout < < buffer ; } return 0 ; }
#include <bits / stdc + + .h> #include <cstdio> using namespace std ; int main ( ) { FILE * file_ ; char buffer [ 100 ] ; file_ = fopen ( " g4g.txt " , " aman " ) ; cout < < " count = 0 , return value = " < < fread ( buffer , sizeof ( buffer ) , 0 , file_ ) ; cout < < " \n size = 0 , return value = " < < fread ( buffer , 0 , 1 , file_ ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { wchar_t dest [ 30 ] ; wchar_t src [ 30 ] ; wcscpy ( dest , L " A computer science portal for geeks " ) ; wprintf ( L " Destination : %ls\n  " , dest ) ; wcscpy ( src , L " geeksforgeeks " ) ; wprintf ( L " Source : %ls\n  " , src ) ; wmemmove ( dest + 2 , src + 3 , 5 ) ; wprintf ( L " After modication , destinstion : %ls\n  " , dest ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; void ishexadecimal ( wchar_t * str ) { bool flag = false ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) { if ( !iswxdigit ( str [ i ] ) ) { flag = true ; break ; } } if ( flag ) wcout < < str < < L " is not a valid " < < " hexadecimal number " < < endl ; else wcout < < str < < L " is a valid " < < " hexadecimal number " < < endl ; } int main ( ) { wchar_t str [ ] = L " a3lz " ; ishexadecimal ( str ) ; wchar_t str1 [ ] = L " 10dbe " ; ishexadecimal ( str1 ) ; return 0 ; }
#include <cwchar> #include <cwctype> #include <iostream> using namespace std ; void ishexadecimal ( wchar_t * str ) { bool flag = false ; for ( int i = 0 ; i < wcslen ( str ) ; i + + ) { if ( !iswxdigit ( str [ i ] ) ) { flag = true ; break ; } } if ( flag ) wcout < < str < < L " is not a valid " < < " hexadecimal number " < < endl ; else wcout < < str < < L " is a valid " < < " hexadecimal number " < < endl ; } int main ( ) { wchar_t str [ ] = L " 1441a " ; ishexadecimal ( str ) ; wchar_t str1 [ ] = L " xyz2 " ; ishexadecimal ( str1 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = tanh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 1.0 , 0.0 } ; valarray <double> varr1 ; varr1 = tanh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 10 , 20 , 30 , 40 , 50 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -10 , -20 , -30 , -40 } ; cout < < " valarray contains = " ; for ( auto i = begin ( varr ) ; i ! = end ( varr ) ; i + + ) { cout < < ' ' < < * i ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 4 , 16 , 25 , 36 , 49 } ; valarray <double> varr1 ; varr1 = sqrt ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 5 , 16 , 26 , 37 , 1 } ; valarray <double> varr1 ; varr1 = sqrt ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <iostream> #include <boost / lexical_cast.hpp> #include <string> using namespace std ; int main ( ) { string str = " 5 " ; string str1 = " 6.5 " ; float f_value = boost : : lexical_cast <float> ( str1 ) ; int i_value = boost : : lexical_cast <int> ( str ) ; cout < < " The float value after casting is : " ; cout < < f_value < <endl ; cout < < " The int value after casting is : " ; cout < < i_value < <endl ; return 0 ; }
#include <iostream> #include <sstream> #include <string> using namespace std ; int main ( ) { int num = 2016 ; ostringstream str1 ; str1 < < num ; string geek = str1.str ( ) ; cout < < " The newly formed string from number is : " ; cout < < geek < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { int i_val = 20 ; float f_val = 30.50 ; string stri = to_string ( i_val ) ; string strf = to_string ( f_val ) ; cout < < " The integer in string is : " ; cout < < stri < < endl ; cout < < " The float in string is : " ; cout < < strf < < endl ; return 0 ; }
#include <boost / lexical_cast.hpp> #include <string> using namespace std ; int main ( ) { float f_val = 10.5 ; int i_val = 17 ; string strf = boost : : lexical_cast <string> ( f_val ) ; string stri = boost : : lexical_cast <string> ( i_val ) ; cout < < " The float value in string is : " ; cout < < strf < < endl ; cout < < " The int value in string is : " ; cout < < stri < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; int main ( ) { string str ; cout < < " Please enter your name : \n  " ; getline ( cin , str ) ; cout < < " Hello , " < < str < < " welcome to GfG !\n  " ; return 0 ; }
#include <iostream> #include <string> #include <cstring> using namespace std ; void dataDemo ( string str1 ) { const char * str2 ; str2 = str1.data ( ) ; cout < < " Content of transformed string : " ; cout < < str2 < < endl ; cout < < " After data ( ) , length : " ; cout < < strlen ( str2 ) ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Content of Original String : " ; cout < < str < < endl ; cout < < " Length of original String : " ; cout < < str.size ( ) < < endl ; dataDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2 ) ; cout < < " Using append ( ) : " ; cout < < str1 < < endl ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2 , 0 , 5 ) ; cout < < " Using append ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " GeeksforGeeks " ) ; string str2 ( " Hello World! " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( " GeeksforGeeks " ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( " GeeksforGeeks " , 5 ) ; cout < < " Using append ( ) : " ; cout < < str < < endl ; } int main ( ) { string str ( " World of " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str ) { str.append ( 10 , '$' ) ; cout < < " After append ( ) : " ; cout < < str ; } int main ( ) { string str ( " ######### " ) ; cout < < " Original String : " < < str < < endl ; appendDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void appendDemo ( string str1 , string str2 ) { str1.append ( str2.begin ( ) + 5 , str2.end ( ) ) ; cout < < " Using append : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; appendDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> using namespace std ; void print ( ) { cout < < " I am empty function and " " I am called at last.\n  " ; } template <typename T , typename... Types> void print ( T var1 , Types... var2 ) { cout < < var1 < < endl ; print ( var2... ) ; } int main ( ) { print ( 1 , 2 , 3.14 , " Pass me any " " number of arguments " , " I will print\n  " ) ; return 0 ; }
#include <iostream> #include <regex> using namespace std ; int main ( ) { string a = " GeeksForGeeks " ; regex b ( " ( Geek ) ( . * ) " ) ; if ( regex_match ( a , b ) ) cout < < " String 'a' matches regular expression 'b' \n  " ; if ( regex_match ( a.begin ( ) , a.end ( ) , b ) ) cout < < " String 'a' matches with regular expression " " 'b' in the range from 0 to string end\n  " ; return 0 ; }
#include <iostream> #include <regex> #include <string.h> using namespace std ; int main ( ) { string s = " I am looking for GeeksForGeeks " " articles " ; regex r ( " Geek [ a-zA-Z ] + " ) ; smatch m ; regex_search ( s , m , r ) ; for ( auto x : m ) cout < < x < < " " ; return 0 ; }
#include <iostream> #include <string> #include <regex> #include <iterator> using namespace std ; int main ( ) { string s = " I am looking for GeeksForGeek \n  " ; regex r ( " Geek [ a-zA-z ] + " ) ; cout < < std : : regex_replace ( s , r , " geek " ) ; string result ; regex_replace ( back_inserter ( result ) , s.begin ( ) , s.end ( ) , r , " geek " ) ; cout < < result ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { int input ; int count = 0 ; cout < < " To stop enter any character " ; cout < < " \n Enter Your Input : : " ; while ( cin > > input ) count + + ; cout < < " \n Total number of inputs entered : " < < count ; return 0 ; }
#include <iostream> using namespace std ; class A { int x , y , z ; public : A ( ) { x = 0 ; y = 0 ; z = 0 ; } A ( int z ) { x = 0 ; y = 0 ; this-> z = z ; } void show ( ) { cout < < x < < '\n ' < < y < < '\n ' < < z ; } } ; int main ( ) { A obj ( 3 ) ; obj.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x , y , z ; void init ( ) { x = 0 ; y = 0 ; } public : A ( ) { init ( ) ; z = 0 ; } A ( int z ) { init ( ) ; this-> z = z ; } void show ( ) { cout < < x < < '\n ' < < y < < '\n ' < < z ; } } ; int main ( ) { A obj ( 3 ) ; obj.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; class A { int x , y , z ; public : A ( ) { x = 0 ; y = 0 ; z = 0 ; } A ( int z ) : A ( ) { this-> z = z ; } void show ( ) { cout < < x < < '\n ' < < y < < '\n ' < < z ; } } ; int main ( ) { A obj ( 3 ) ; obj.show ( ) ; return 0 ; }
#include <iostream> using namespace std ; template <typename T> void fun ( const T & x ) { static int i = 10 ; cout < < + + i ; return ; } int main ( ) { fun <int> ( 1 ) ; cout < < endl ; fun <int> ( 2 ) ; cout < < endl ; fun <double> ( 1.1 ) ; cout < < endl ; getchar ( ) ; return 0 ; }
#include <iostream> using namespace std ; template <class T> class Test { private : T val ; public : static int count ; Test ( ) { count + + ; } } ; template <class T> int Test <T> : : count = 0 ; int main ( ) { Test <int> a ; Test <int> b ; Test <double> c ; cout < < Test <int> : : count < < endl ; cout < < Test <double> : : count < < endl ; getchar ( ) ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; class gfg { } ; enum sam : unsigned { } ; enum class raj : unsigned { } ; int main ( ) { cout < < boolalpha ; cout < < " is_unsigned : " < < '\n ' ; cout < < " unsigned int : " < < is_unsigned <unsigned int> : : value < < '\n ' ; cout < < " gfg : " < < is_unsigned <gfg> : : value < < '\n ' ; cout < < " sam : " < < is_unsigned <sam> : : value < < '\n ' ; cout < < " raj : " < < is_unsigned <raj> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_unsigned : " < < '\n ' ; cout < < " signed char : " < < is_unsigned <signed char> : : value < < '\n ' ; cout < < " unsigned char : " < < is_unsigned <unsigned char> : : value < < '\n ' ; cout < < " signed int : " < < is_unsigned <signed int> : : value < < '\n ' ; return 0 ; }
#include <iostream> #include <type_traits> using namespace std ; int main ( ) { cout < < boolalpha ; cout < < " is_unsigned : " < < '\n ' ; cout < < " bool : " < < is_unsigned <bool> : : value < < '\n ' ; cout < < " float : " < < is_unsigned <float> : : value < < '\n ' ; cout < < " double : " < < is_unsigned <double> : : value < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; const char * src = " \u0763\u0757 " ; wchar_t dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int max = 10 ; int retVal = mbsrtowcs ( dest , & src ; , max , & ps ; ) ; wcout < < L " Number of wide characters written = " < < retVal < < endl ; wcout < < L " Wide character = " < < dest < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; const char * src = u8 " z\u00df\u6c34\U0001f34c " ; wchar_t dest [ 20 ] ; mbstate_t ps = mbstate_t ( ) ; int max = 10 ; int retVal = mbsrtowcs ( dest , & src ; , max , & ps ; ) ; wcout < < L " Number of wide characters written = " < < retVal < < endl ; wcout < < L " Wide character = " < < dest < < endl ; return 0 ; }
#include <iostream> #include <set> using namespace std ; int main ( ) { set <int> st ; set <int> : : iterator it = st.begin ( ) ; set <int> : : iterator it1 , it2 ; pair < set <int> : : iterator , bool> ptr ; ptr = st.insert ( 20 ) ; if ( ptr.second ) cout < < " The element was newly inserted " ; else cout < < " The element was already present " ; cout < < " \n The set elements after 1st insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; st.insert ( it , 24 ) ; cout < < " \n The set elements after 2nd insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; int arr [ 3 ] = { 25 , 24 , 26 } ; st.insert ( arr , arr + 3 ) ; cout < < " \n The set elements after 3rd insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; }
#include <iostream> #include <set> using namespace std ; int main ( ) { set <int> st ; set <int> : : iterator it = st.begin ( ) ; set <int> : : iterator it1 , it2 ; pair < set <int> : : iterator , bool> ptr ; ptr = st.emplace ( 24 ) ; if ( ptr.second ) cout < < " The element was newly inserted " ; else cout < < " The element was already present " ; cout < < " \n The set elements after 1st insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; ptr = st.emplace ( 24 ) ; if ( ptr.second ) cout < < " \n The element was newly inserted " ; else cout < < " \n The element was already present " ; cout < < " \n The set elements after 2nd insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; st.emplace_hint ( it , 25 ) ; cout < < " \n The set elements after 3rd insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; }
#include <iostream> #include <set> using namespace std ; int main ( ) { set <int> st ; set <int> : : iterator it ; set <int> : : iterator it1 ; set <int> : : iterator it2 ; pair < set <int> : : iterator , bool> ptr ; for ( int i = 1 ; i <10 ; i + + ) st.insert ( i * 5 ) ; cout < < " The set elements after insertion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; it = st.begin ( ) ; cout < < endl ; + + it ; st.erase ( it ) ; cout < < " The set elements after 1st deletion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; st.erase ( 40 ) ; cout < < " \n The set elements after 2nd deletion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; + + it ; + + it ; + + it ; + + it ; st.erase ( it , st.end ( ) ) ; cout < < " \n The set elements after 3rd deletion are : " ; for ( it1 = st.begin ( ) ; it1! = st.end ( ) ; + + it1 ) cout < < * it1 < < " " ; cout < < endl ; }
#include <bits / stdc + + .h> using namespace std ; void checkfor ( mbstate_t ps ) { int func = mbsinit ( & ps ; ) ; if ( func ) cout < < " The conversion state is initial " < < " conversion state\n  " ; else cout < < " The conversion state is not initial " < < " conversion state " ; } int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; char str [ ] = " \u00df " ; mbstate_t ps = mbstate_t ( ) ; checkfor ( ps ) ; mbrlen ( str , 1 , & ps ; ) ; checkfor ( ps ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; void checkfor ( mbstate_t ps ) { int func = mbsinit ( & ps ; ) ; if ( func ) cout < < " the conversion state is initial " < < " conversion state\n  " ; else cout < < " the conversion state is not initial " < < " conversion state " ; } int main ( ) { setlocale ( LC_ALL , " en_US.utf8 " ) ; char str [ ] = " " ; mbstate_t ps = mbstate_t ( ) ; cout < < " After ps is initialized , " ; checkfor ( ps ) ; mbrlen ( str , 0 , & ps ; ) ; cout < < " After performing some task , " ; checkfor ( ps ) ; return 0 ; }
#include <iostream> #include <algorithm> #include <vector> using namespace std ; int main ( ) { vector <int> v { 6 , 9 , 0 , 1 , 2 , 7 , 5 , 8 , 0 } ; stable_partition ( v.begin ( ) , v.end ( ) , [ ] ( int n ) { return n> 0 ; } ) ; for ( int n : v ) { cout < < n < < ' ' ; } cout < < '\n ' ; }
#include <iostream> #include <algorithm> #include <vector> bool odd ( int i ) { return ( i % 2 ) = = 1 ; } int main ( ) { std : : vector <int> vct ; for ( int i = 1 ; i < 10 ; + + i ) vct.push_back ( i ) ; std : : vector <int> : : iterator bound ; bound = std : : stable_partition ( vct.begin ( ) , vct.end ( ) , odd ) ; std : : cout < < " odd numbers : " ; for ( std : : vector <int> : : iterator it = vct.begin ( ) ; it ! = bound ; + + it ) std : : cout < < ' ' < < * it ; std : : cout < < '\n ' ; std : : cout < < " evennumbers : " ; for ( std : : vector <int> : : iterator it = bound ; it ! = vct.end ( ) ; + + it ) std : : cout < < ' ' < < * it ; std : : cout < < '\n ' ; return 0 ; }
#include <algorithm> #include <deque> #include <functional> #include <iostream> #include <iterator> template <class Arg> struct is_even : public std : : unary_function <Arg , bool> { bool operator ( ) ( const Arg & arg1 ) const { return ( arg1 % 2 ) = = 0 ; } } ; int main ( ) { typedef std : : deque <int , std : : allocator <int> > Deque ; typedef std : : ostream_iterator <int , char , std : : char_traits <char> > Iter ; const Deque : : value_type a [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; Deque d1 ( a + 0 , a + sizeof a / sizeof * a ) ; Deque d2 ( d1 ) ; std : : cout < < " Unpartitioned values : \t\t " ; std : : copy ( d1.begin ( ) , d1.end ( ) , Iter ( std : : cout , " " ) ) ; std : : partition ( d2.begin ( ) , d2.end ( ) , is_even <int> ( ) ) ; std : : cout < < " \n Partitioned values : \t\t " ; std : : copy ( d2.begin ( ) , d2.end ( ) , Iter ( std : : cout , " " ) ) ; std : : stable_partition ( d1.begin ( ) , d1.end ( ) , is_even <int> ( ) ) ; std : : cout < < " \n Stable partitioned values : \t " ; std : : copy ( d1.begin ( ) , d1.end ( ) , Iter ( std : : cout , " " ) ) ; std : : cout < < std : : endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The exp of " < < complexnumber < < " is " < < exp ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The exp of " < < complexnumber < < " is " < < exp ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , 0.0 ) ; cout < < " The atanh of " < < complexnumber < < " is " < < atanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , -0.0 ) ; cout < < " The atanh of " < < complexnumber < < " is " < < atanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = cosh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 1.0 , 0.0 } ; valarray <double> varr1 ; varr1 = cosh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.cshift ( 3 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 3 , 2 , 5 , 4 , 1 } ; valarray <int> varr1 ; varr1 = varr.cshift ( -3 ) ; cout < < " The new valarray after shifting is = " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = asin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 5.0 , 0.0 } ; valarray <double> varr1 ; varr1 = asin ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The log10 of " < < complexnumber < < " is " < < log10 ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , -0.0 ) ; cout < < " The log10 of " < < complexnumber < < " is " < < log10 ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; varr.resize ( 2 , 3 ) ; cout < < " The contents of valarray " " after resizes are : " ; for ( int & x : varr ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; varr.resize ( 12 , 5 ) ; cout < < " The contents of valarray " " after resizes are : " ; for ( int & x : varr ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <stdio.h> void __attribute__ ( ( constructor ) ) calledFirst ( ) ; void __attribute__ ( ( destructor ) ) calledLast ( ) ; void main ( ) { printf ( " \n I am in main " ) ; } void calledFirst ( ) { printf ( " \n I am called first " ) ; } void calledLast ( ) { printf ( " \n I am called last " ) ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0 , 0.25 , 0.5 , 0.75 , 1 } ; valarray <double> varr1 ; varr1 = sinh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <double> varr = { 0.2 , 0.14 , 1.0 , 0.0 } ; valarray <double> varr1 ; varr1 = sinh ( varr ) ; cout < < " The new valarray with " < < " manipulated values is : " < < endl ; for ( double & x : varr1 ) { cout < < x < < " " ; } cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The acos of " < < complexnumber < < " is " < < acos ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , -0.0 ) ; cout < < " The acos of " < < complexnumber < < " is " < < acos ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { 20 , 40 , 60 , 80 } ; cout < < " The size of valarray is : " ; cout < < varr.size ( ) ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr = { -20 , 40 , -50 , 60 , 80 , 0 , 0 } ; cout < < " The size of valarray is : " ; cout < < varr.size ( ) ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The atan of " < < complexnumber < < " is " < < atan ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 2.0 ) ; cout < < " The atan of " < < complexnumber < < " is " < < atan ( complexnumber ) < < endl ; return 0 ; }
#include <exception> #include <iostream> using namespace std ; void myhandler ( ) { cout < < " Inside new terminate handler\n  " ; abort ( ) ; } int main ( ) { set_terminate ( myhandler ) ; try { cout < < " Inside try block\n  " ; throw 100 ; } catch ( char a ) { cout < < " Inside catch block\n  " ; } return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd , gm , errorcode ; initgraph ( & gd ; , & gm ; , " " ) ; errorcode = graphresult ( ) ; if ( errorcode ! = grOk ) { printf ( " Graphics error : %s\n  " , grapherrormsg ( errorcode ) ) ; printf ( " Press any key to exit. " ) ; getch ( ) ; exit ( 1 ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; fillellipse ( 200 , 200 , 50 , 90 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; sector ( 200 , 200 , 0 , 150 , 50 , 65 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( arr ) ; moveto ( 70 , 40 ) ; sprintf ( arr , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; lineto ( 250 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 100 ) ; lineto ( 250 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string_1 [ ] = " geekforgeeks456 " ; char string_2 [ ] = " 123456789 " ; size_t match = strcspn ( string_1 , string_2 ) ; if ( match < strlen ( string_1 ) ) cout < < " The number of characters before " < < " the matched character are " < < match ; else cout < < string_1 < < " didn't matched any character from string_2 " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { char string_1 [ ] = " geekforgeeks456 " ; char string_2 [ ] = " " ; size_t match = strcspn ( string_1 , string_2 ) ; if ( match < strlen ( string_1 ) ) cout < < " The number of character before " < < " the matched character are " < < match ; else cout < < string_1 < < " didn't matched any character from string_2 " ; return 0 ; }
#include <iostream> #include <algorithm> #include <vector> using namespace std ; int main ( ) { vector <int> v1 ; int i ; for ( i = 0 ; i < 10 ; + + i ) { v1.push_back ( i ) ; } vector <int> v2 ( 5 , 100 ) ; std : : swap_ranges ( v1.begin ( ) + 3 , v1.begin ( ) + 7 , v2.begin ( ) ) ; for ( i = 0 ; i < 10 ; + + i ) { cout < < v1 [ i ] < < " " ; } cout < < " \n  " ; for ( i = 0 ; i < 5 ; + + i ) { cout < < v2 [ i ] < < " " ; } return 0 ; }
#include <iostream> #include <algorithm> #include <vector> using namespace std ; int main ( ) { vector <int> v1 = { 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 } ; int i ; vector <int> v2 = v1 ; vector <int> v3 = { 1 , 2 , 3 , 4 , 1 , 2 , 3 , 5 } ; vector <int> v4 = v3 ; if ( v1.size ( ) % 2 = = 0 ) std : : swap_ranges ( v1.begin ( ) , v1.begin ( ) + ( v1.size ( ) / 2 ) , v1.begin ( ) + v1.size ( ) / 2 ) ; else std : : swap_ranges ( v1.begin ( ) , v1.begin ( ) + v1.size ( ) / 2 , v1.begin ( ) + ( v1.size ( ) / 2 ) + 1 ) ; if ( v1 = = v2 ) { cout < < " Yes " ; } else { cout < < " No " ; } if ( v3.size ( ) % 2 = = 0 ) std : : swap_ranges ( v3.begin ( ) , v3.begin ( ) + ( v3.size ( ) / 2 ) , v3.begin ( ) + v3.size ( ) / 2 ) ; else std : : swap_ranges ( v3.begin ( ) , v3.begin ( ) + v3.size ( ) / 2 , v3.begin ( ) + ( v3.size ( ) / 2 ) + 1 ) ; cout < < " \n  " ; if ( v3 = = v4 ) { cout < < " Yes " ; } else { cout < < " No " ; } return 0 ; }
#include <iostream> using namespace std ; int x ; int main ( ) { int x = 10 ; cout < < " Value of global x is " < < : : x ; cout < < " \n Value of local x is " < < x ; return 0 ; }
#include <iostream> using namespace std ; class A { public : void fun ( ) ; } ; void A : : fun ( ) { cout < < " fun ( ) called " ; } int main ( ) { A a ; a.fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; class Test { static int x ; public : static int y ; void func ( int x ) { cout < < " Value of static x is " < < Test : : x ; cout < < " \n Value of local x is " < < x ; } } ; int Test : : x = 1 ; int Test : : y = 2 ; int main ( ) { Test obj ; int x = 3 ; obj.func ( x ) ; cout < < " \n Test : : y = " < < Test : : y ; return 0 ; }
#include <iostream> using namespace std ; class A { protected : int x ; public : A ( ) { x = 10 ; } } ; class B { protected : int x ; public : B ( ) { x = 20 ; } } ; class C : public A , public B { public : void fun ( ) { cout < < " A's x is " < < A : : x ; cout < < " \n B's x is " < < B : : x ; } } ; int main ( ) { C c ; c.fun ( ) ; return 0 ; }
#include <iostream> using namespace std ; string removeZero ( string str ) { int i = 0 ; while ( str [ i ] = = '0' ) i + + ; str.erase ( 0 , i ) ; return str ; } int main ( ) { string str ; str = " 00000123569 " ; str = removeZero ( str ) ; cout < < str < < endl ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <time.h> void printRandoms ( int lower , int upper , int count ) { int i ; for ( i = 0 ; i < count ; i + + ) { int num = ( rand ( ) % ( upper - lower + 1 ) ) + lower ; printf ( " %d " , num ) ; } } int main ( ) { int lower = 5 , upper = 7 , count = 1 ; srand ( time ( 0 ) ) ; printRandoms ( lower , upper , count ) ; return 0 ; }
#include <stdio.h> #include <pthread.h> pthread_cond_t cond1 = PTHREAD_COND_INITIALIZER ; pthread_cond_t cond2 = PTHREAD_COND_INITIALIZER ; pthread_cond_t cond3 = PTHREAD_COND_INITIALIZER ; pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER ; int done = 1 ; void * foo ( void * n ) { while ( 1 ) { pthread_mutex_lock ( & lock ; ) ; if ( done ! = ( int ) * ( int * ) n ) { if ( ( int ) * ( int * ) n = = 1 ) { pthread_cond_wait ( & cond1 ; , & lock ; ) ; } else if ( ( int ) * ( int * ) n = = 2 ) { pthread_cond_wait ( & cond2 ; , & lock ; ) ; } else { pthread_cond_wait ( & cond3 ; , & lock ; ) ; } } printf ( " %d " , * ( int * ) n ) ; if ( done = = 3 ) { done = 1 ; pthread_cond_signal ( & cond1 ; ) ; } else if ( done = = 1 ) { done = 2 ; pthread_cond_signal ( & cond2 ; ) ; } else if ( done = = 2 ) { done = 3 ; pthread_cond_signal ( & cond3 ; ) ; } pthread_mutex_unlock ( & lock ; ) ; } return NULL ; } int main ( ) { pthread_t tid1 , tid2 , tid3 ; int n1 = 1 , n2 = 2 , n3 = 3 ; pthread_create ( & tid1 ; , NULL , foo , ( void * ) & n1 ; ) ; pthread_create ( & tid2 ; , NULL , foo , ( void * ) & n2 ; ) ; pthread_create ( & tid3 ; , NULL , foo , ( void * ) & n3 ; ) ; while ( 1 ) ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unordered_multimap <int , int> sample1 , sample2 ; sample1.insert ( { 10 , 100 } ) ; sample1.insert ( { 50 , 500 } ) ; cout < < " Key and Elements of Sample1 before copy are : " ; for ( auto it = sample1.begin ( ) ; it ! = sample1.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } cout < < " \n The size of sample2 before copy : " < < sample2.size ( ) ; sample2 = sample1 ; cout < < " \n Key and Elements of Sample2 after copy are : " ; for ( auto it = sample2.begin ( ) ; it ! = sample2.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; unordered_multimap <char , char> merge ( unordered_multimap <char , char> a , unordered_multimap <char , char> b ) { unordered_multimap <char , char> temp ( a ) ; temp.insert ( b.begin ( ) , b.end ( ) ) ; return temp ; } int main ( ) { unordered_multimap <char , char> sample1 , sample2 , sample3 ; sample1.insert ( { 'a' , 'A' } ) ; sample1.insert ( { 'g' , 'G' } ) ; sample2.insert ( { 'b' , 'B' } ) ; sample2.insert ( { 'c' , 'C' } ) ; sample2.insert ( { 'd' , 'D' } ) ; cout < < " Key and Elements of Sample1 are : " ; for ( auto it = sample1.begin ( ) ; it ! = sample1.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } cout < < " \n Key and Elements of Sample2 are : " ; for ( auto it = sample2.begin ( ) ; it ! = sample2.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } sample3 = merge ( sample1 , sample2 ) ; sample1 = sample3 ; cout < < " \n \n Key and Elements of Sample1 are : " ; for ( auto it = sample1.begin ( ) ; it ! = sample1.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { unordered_multimap <int , int> sample1 = { { 1 , 2 } , { 3 , 4 } , { 5 , 6 } } ; cout < < " Key and Elements of Sample1 are : " ; for ( auto it = sample1.begin ( ) ; it ! = sample1.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } unordered_multimap <char , char> sample2 = { { 'a' , 'A' } , { 'b' , 'B' } , { 'c' , 'C' } } ; cout < < " \n \n Key and Elements of Sample1 are : " ; for ( auto it = sample2.begin ( ) ; it ! = sample2.end ( ) ; it + + ) { cout < < " { " < < it-> first < < " , " < < it-> second < < " } " ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The tanh of " < < complexnumber < < " is " < < tanh ( complexnumber ) < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 0.0 ) ; cout < < " The tanh of " < < complexnumber < < " is " < < tanh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { cout < < " Square root of -9 is = " ; cout < < sqrt ( complex <double> ( -9 , 0 ) ) < < endl ; cout < < " Square root of ( -9 , -0 ) , is = " ; cout < < sqrt ( complex <double> ( -9 , -0.0 ) ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr1 = { 12 , 24 , 36 , 48 } ; valarray <int> varr2 = { 20 , 40 , 60 , 80 } ; varr1.swap ( varr2 ) ; cout < < " The contents of 1st valarray " " after swapping are : " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; cout < < " The contents of 2nd valarray " " after swapping are : " ; for ( int & x : varr2 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { valarray <int> varr1 = { -12 , -24 , -36 , -48 } ; valarray <int> varr2 = { 20 , 40 , 60 , 80 } ; varr1.swap ( varr2 ) ; cout < < " The contents of 1st valarray " " after swapping are : " ; for ( int & x : varr1 ) cout < < x < < " " ; cout < < endl ; cout < < " The contents of 2nd valarray " " after swapping are : " ; for ( int & x : varr2 ) cout < < x < < " " ; cout < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str1 , string str2 ) { str1.assign ( str2 ) ; cout < < " After assign ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; assignDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str1 , string str2 ) { str1.assign ( str2 , 5 , 13 ) ; cout < < " After assign ( ) : " ; cout < < str1 ; } int main ( ) { string str1 ( " Hello World! " ) ; string str2 ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str1 < < endl ; assignDemo ( str1 , str2 ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( " GeeksforGeeks " ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( " GeeksforGeeks " , 5 ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { str.assign ( 10 , 'x' ) ; cout < < " After assign ( ) : " ; cout < < str ; } int main ( ) { string str ( " ######### " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void assignDemo ( string str ) { string str1 ; str1.assign ( str.begin ( ) + 6 , str.end ( ) -0 ) ; cout < < " After assign ( ) : " ; cout < < str1 ; } int main ( ) { string str ( " Hello World! " ) ; cout < < " Original String : " < < str < < endl ; assignDemo ( str ) ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { tuple <char , int , float> geek ; geek = make_tuple ( 'a' , 10 , 15.5 ) ; cout < < " The initial values of tuple are : " ; cout < < get <0> ( geek ) < < " " < < get <1> ( geek ) ; cout < < " " < < get <2> ( geek ) < < endl ; get <0> ( geek ) = 'b' ; get <2> ( geek ) = 20.5 ; cout < < " The modified values of tuple are : " ; cout < < get <0> ( geek ) < < " " < < get <1> ( geek ) ; cout < < " " < < get <2> ( geek ) < < endl ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { tuple <char , int , float> geek ( 20 , 'g' , 17.5 ) ; cout < < " The size of tuple is : " ; cout < < tuple_size <decltype ( geek ) > : : value < < endl ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { tuple <int , char , float> tup1 ( 20 , 'g' , 17.5 ) ; tuple <int , char , float> tup2 ( 10 , 'f' , 15.5 ) ; cout < < " The first tuple elements before swapping are : " ; cout < < get <0> ( tup1 ) < < " " < < get <1> ( tup1 ) < < " " < < get <2> ( tup1 ) < < endl ; cout < < " The second tuple elements before swapping are : " ; cout < < get <0> ( tup2 ) < < " " < < get <1> ( tup2 ) < < " " < < get <2> ( tup2 ) < < endl ; tup1.swap ( tup2 ) ; cout < < " The first tuple elements after swapping are : " ; cout < < get <0> ( tup1 ) < < " " < < get <1> ( tup1 ) < < " " < < get <2> ( tup1 ) < < endl ; cout < < " The second tuple elements after swapping are : " ; cout < < get <0> ( tup2 ) < < " " < < get <1> ( tup2 ) < < " " < < get <2> ( tup2 ) < < endl ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { int i_val ; char ch_val ; float f_val ; tuple <int , char , float> tup1 ( 20 , 'g' , 17.5 ) ; tie ( i_val , ch_val , f_val ) = tup1 ; cout < < " The unpacked tuple values ( without ignore ) are : " ; cout < < i_val < < " " < < ch_val < < " " < < f_val ; cout < < endl ; tie ( i_val , ignore , f_val ) = tup1 ; cout < < " The unpacked tuple values ( with ignore ) are : " ; cout < < i_val < < " " < < f_val ; cout < < endl ; return 0 ; }
#include <iostream> #include <tuple> using namespace std ; int main ( ) { tuple <int , char , float> tup1 ( 20 , 'g' , 17.5 ) ; tuple <int , char , float> tup2 ( 30 , 'f' , 10.5 ) ; auto tup3 = tuple_cat ( tup1 , tup2 ) ; cout < < " The new tuple elements in order are : " ; cout < < get <0> ( tup3 ) < < " " < < get <1> ( tup3 ) < < " " ; cout < < get <2> ( tup3 ) < < " " < < get <3> ( tup3 ) < < " " ; cout < < get <4> ( tup3 ) < < " " < < get <5> ( tup3 ) < < endl ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void resizeDemo ( string str ) { str.resize ( 5 ) ; cout < < " Using resize : " ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; resizeDemo ( str ) ; return 0 ; }
#include <iostream> #include <string> using namespace std ; void resizeDemo ( string str ) { cout < < " Using resize : " < < endl ; cout < < " If num > size ( ) : " ; str.resize ( 15 , '$' ) ; cout < < str < < endl ; cout < < " If num < size ( ) : " ; str.resize ( 5 , '$' ) ; cout < < str ; } int main ( ) { string str ( " GeeksforGeeks " ) ; cout < < " Original String : " < < str < < endl ; resizeDemo ( str ) ; return 0 ; }
#include <iostream> #include <algorithm> int main ( ) { int A [ ] = { 10 , 13 , 16 , 16 , 18 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int * it = std : : adjacent_find ( A , A + n ) ; std : : cout < < * it ; }
#include <algorithm> #include <iostream> #include <vector> int main ( ) { std : : vector <int> vec { 0 , 1 , 2 , 5 , 40 , 40 , 41 , 41 , 5 } ; int range1 = 5 ; int range2 = 9 ; std : : vector <int> : : iterator it ; it = std : : adjacent_find ( vec.begin ( ) , vec.begin ( ) + range1 , std : : greater <int> ( ) ) ; if ( it = = vec.begin ( ) + range1 ) { std : : cout < < " Sorted in the range : " < < range1 < < std : : endl ; } else { std : : cout < < " Not sorted in the range : " < < range1 < < std : : endl ; } it = std : : adjacent_find ( vec.begin ( ) , vec.begin ( ) + range2 , std : : greater <int> ( ) ) ; if ( it = = vec.begin ( ) + range2 ) { std : : cout < < " Sorted in the range : " < < range2 < < std : : endl ; } else { std : : cout < < " Not sorted in the range : " < < range2 < < std : : endl ; } }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { int arr [ ] = { 10 , 20 , 30 , 30 , 20 , 10 , 10 , 20 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int old_val = 20 , new_val = 99 ; cout < < " Original Array : " ; for ( int i = 0 ; i < n ; i + + ) cout < < ' ' < < arr [ i ] ; cout < < '\n ' ; replace ( arr , arr + n , old_val , new_val ) ; cout < < " New Array : " ; for ( int i = 0 ; i < n ; i + + ) cout < < ' ' < < arr [ i ] ; cout < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; bool IsOdd ( int i ) { return ( ( i % 2 ) = = 1 ) ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout < < " Original Array : " ; for ( int i = 0 ; i < n ; i + + ) cout < < ' ' < < arr [ i ] ; cout < < '\n ' ; int new_val = 0 ; replace_if ( arr , arr + n , IsOdd , new_val ) ; cout < < " New Array : " ; for ( int i = 0 ; i < n ; i + + ) cout < < ' ' < < arr [ i ] ; cout < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { string sp ( " geeksforgeeks " ) ; regex re ( " ( geeks ) ( . * ) " ) ; smatch match ; if ( regex_search ( sp , match , re ) = = true ) { cout < < " Match size = " < < match.size ( ) < < endl ; cout < < " Whole match : " < < match.str ( 0 ) < < endl ; cout < < " First capturing group is ' " < < match.str ( 1 ) < < " ' which is captured at index " < < match.position ( 1 ) < < endl ; cout < < " Second capturing group is ' " < < match.str ( 2 ) < < " ' which is captured at index " < < match.position ( 2 ) < < endl ; } else { cout < < " No match is found " < < endl ; } return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 2.0 ) ; cout < < " ( 1.0 , 2.0 ) ^2 = " < < pow ( complexnumber , 2 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2.0 , 1.0 ) ; cout < < " ( 2.0 , 1.0 ) ^3 = " < < pow ( complexnumber , 3 ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 5.0 , 12.0 ) ; cout < < " The argument of " < < complexnumber < < " is : " ; cout < < arg ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 4.0 , 3.0 ) ; cout < < " The argument of " < < complexnumber < < " is : " ; cout < < arg ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The asinh of " < < complexnumber < < " is " < < asinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -0.0 , -2.0 ) ; cout < < " The asinh of " < < complexnumber < < " is " < < asinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , 0.0 ) ; cout < < " The log of " < < complexnumber < < " is " < < log ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -1.0 , -0.0 ) ; cout < < " The log of " < < complexnumber < < " is " < < log ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The acosh of " < < complexnumber < < " is " < < acosh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.5 , 0.0 ) ; cout < < " The acosh of " < < complexnumber < < " is " < < acosh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 0.0 , 1.0 ) ; cout < < " The sinh of " < < complexnumber < < " is " < < sinh ( complexnumber ) < <endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 1.0 , 0.0 ) ; cout < < " The sinh of " < < complexnumber < < " is " < < sinh ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , 0.0 ) ; cout < < " The asin of " < < complexnumber < < " is " < < asin ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( -2.0 , -0.0 ) ; cout < < " The asin of " < < complexnumber < < " is " < < asin ( complexnumber ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color , width ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; width = textwidth ( " Hello Geek ! Have a good day. " ) ; sprintf ( arr , " Textwidth is = %d " , width ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current position of y = %d " , gety ( ) ) ; outtext ( arr ) ; moveto ( 80 , 50 ) ; sprintf ( arr , " Current position of y = %d " , gety ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum Y coordinate for current " " graphics mode And driver = %d " , getmaxy ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int size ; char str1 [ ] = " geeksforgeeks " ; char str2 [ ] = " kfc " ; size = strcspn ( str1 , str2 ) ; printf ( " The unmatched characters before first matched character : %d\n  " , size ) ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { int score1 = 0 , score2 = 0 , k = 0 , sizen = 0 , size = 0 ; char player1 [ ] = " geeks " ; char play2 [ ] = " " ; while ( 1 ) { char randoml = 'a' + ( random ( ) % 26 ) ; play2 [ k + + ] = randoml ; size = strcspn ( play2 , player1 ) ; if ( size = = sizen ) { score2 = size ; break ; } else { sizen = size ; } } const char player2 [ ] = " geeks " ; char play1 [ ] = " " ; k = 0 , sizen = 0 ; while ( 1 ) { char randoml = 'a' + ( random ( ) % 26 ) ; play1 [ k + + ] = randoml ; size = strcspn ( play1 , player2 ) ; if ( size = = sizen ) { score1 = size ; break ; } else { sizen = size ; } } if ( score1 > score2 ) printf ( " Player 1 won!! Score : %d " , score1 ) ; else if ( score2 > score1 ) printf ( " Player 2 won!! Score : %d " , score2 ) ; else printf ( " Match Drawn!! Score : %d " , score1 ) ; }
#include <bits / stdc + + .h> using namespace std ; int randomize ( ) { return ( rand ( ) % 1000 ) ; } int main ( ) { srand ( time ( NULL ) ) ; vector <int> vect ( 10 ) ; generate ( vect.begin ( ) , vect.end ( ) , randomize ) ; for ( int i = 0 ; i <vect.size ( ) ; i + + ) cout < < vect [ i ] < < " " ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int randomize ( ) { return ( rand ( ) % 1000 ) ; } int main ( ) { srand ( time ( NULL ) ) ; vector <int> vect ( 10 ) ; generate_n ( vect.begin ( ) , 6 , randomize ) ; for ( int i = 0 ; i <vect.size ( ) ; i + + ) cout < < vect [ i ] < < " " ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> imagpart ( 20.3 , 4.9 ) ; cout < < " Complex Number = " < < imagpart < < endl ; cout < < " Imag part of the complex number is = " < < imag ( imagpart ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> imagpart ( 2 , 2 ) ; cout < < " Complex Number = " < < imagpart < < endl ; cout < < " Imag part of the complex number is = " < < imag ( imagpart ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 5.0 , 12.0 ) ; cout < < " The absolute value of " < < complexnumber < < " is : " ; cout < < abs ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 4.0 , 3.0 ) ; cout < < " The absolute value of " < < complexnumber < < " is : " ; cout < < abs ( complexnumber ) < < endl ; return 0 ; }
#include <iostream> using namespace std ; int main ( ) { double a = 4.223234232 ; double b = 2323.0 ; cout.precision ( 4 ) ; cout < < " Normal values of floating point numbers\n a = " ; cout < < a < < " \n b = " < < b < < '\n ' ; cout < < " Values using fixed \n  " < < std : : fixed ; cout < < a < < " \n  " < < b < < '\n ' ; cout < < " Values using scientific are : " < < std : : scientific < < endl ; cout < < a < < '\n ' < < b < < '\n ' ; cout < < " Values using hexfloat are : " < < std : : hexfloat < < endl ; cout < < a < < '\n ' < < b < < '\n ' ; cout < < " Values using defaultfloat are : " < < std : : defaultfloat < < endl ; cout < < a < < '\n ' < < b < < '\n ' ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2 , 2 ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( INFINITY , -2 ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <bits / stdc + + .h> using namespace std ; int main ( ) { complex <double> complexnumber ( 2 , -INFINITY ) ; cout < < " proj " < < complexnumber < < " = " < < proj ( complexnumber ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color , height ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; height = textheight ( " Hello Geek ! Have a good day. " ) ; sprintf ( arr , " Textheight is = %d " , height ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum X coordinate for current " " graphics mode And driver = %d " , getmaxx ( ) ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; moverel ( 200 , 100 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; moveto ( 100 , 150 ) ; moverel ( 150 , 60 ) ; sprintf ( arr , " Current x position = %d and " " y position = %d " , getx ( ) , gety ( ) ) ; outtextxy ( 100 , 150 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> int gen ( ) { static int i = 0 ; return + + i ; } using namespace std ; int main ( ) { int i ; vector <int> v1 ( 10 ) ; std : : generate ( v1.begin ( ) , v1.end ( ) , gen ) ; vector <int> : : iterator i1 ; for ( i1 = v1.begin ( ) ; i1 ! = v1.end ( ) ; + + i1 ) { cout < < * i1 < < " " ; } return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> realpart ( 20.3 , 4.9 ) ; cout < < " Complex Number = " < < realpart < < endl ; cout < < " Real part of the complex number is = " < < real ( realpart ) < < endl ; return 0 ; }
#include <bits / stdC + + .h> using namespace std ; int main ( ) { complex <double> realpart ( 2 , 2 ) ; cout < < " Complex Number = " < < realpart < < endl ; cout < < " Real part of the complex number is = " < < real ( realpart ) < < endl ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color , bytes ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; circle ( 200 , 200 , 50 ) ; line ( 150 , 200 , 250 , 200 ) ; line ( 200 , 150 , 200 , 250 ) ; bytes = imagesize ( 150 , 150 , 250 , 250 ) ; sprintf ( arr , " Number of bytes required " " to store required area = %d " , bytes ) ; outtextxy ( 20 , 280 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; setbkcolor ( GREEN ) ; outtext ( " Press any key to clear the screen. " ) ; getch ( ) ; cleardevice ( ) ; outtext ( " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <iostream> #include <vector> #include <algorithm> int gen ( ) { static int i = 0 ; return + + i ; } using namespace std ; int main ( ) { int i ; vector <int> v1 ( 10 ) ; std : : generate_n ( v1.begin ( ) , 10 , gen ) ; vector <int> : : iterator i1 ; for ( i1 = v1.begin ( ) ; i1 ! = v1.end ( ) ; + + i1 ) { cout < < * i1 < < " " ; } return 0 ; }
#include <iostream> #include <vector> #include <algorithm> using namespace std ; int main ( ) { int i , j ; vector <int> v1 = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; vector <int> v2 = { 3 , 4 , 5 } ; vector <int> : : iterator i1 ; i1 = std : : search ( v1.begin ( ) , v1.end ( ) , v2.begin ( ) , v2.end ( ) ) ; if ( i1 ! = v1.end ( ) ) { cout < < " vector2 is present at index " < < ( i1 - v1.begin ( ) ) ; } else { cout < < " vector2 is not present in vector1 " ; } return 0 ; }
#include <iostream> #include <vector> #include <algorithm> using namespace std ; bool pred ( int i , int j ) { if ( i > j ) { return 1 ; } else { return 0 ; } } int main ( ) { int i , j ; vector <int> v1 = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; vector <int> v2 = { 3 , 4 , 5 } ; vector <int> : : iterator i1 ; i1 = std : : search ( v1.begin ( ) , v1.end ( ) , v2.begin ( ) , v2.end ( ) , pred ) ; if ( i1 ! = v1.end ( ) ) { cout < < " vector1 elements are greater than vector2 starting " < < " from position " < < ( i1 - v1.begin ( ) ) ; } else { cout < < " vector1 elements are not greater than vector2 " < < " elements consecutively. " ; } return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color ; initgraph ( & gd ; , & gm ; , " " ) ; circle ( 100 , 100 , 50 ) ; setcolor ( GREEN ) ; circle ( 200 , 200 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd ; , & gm ; , " " ) ; outtext ( " Press any key to close " " the graphics mode !! " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <bits / stdc + + .h> int main ( ) { std : : vector <int> vec { 10 , 20 , 30 , 40 } ; std : : vector <int> : : iterator it ; std : : cout < < " Original vector : " ; for ( int i = 0 ; i <vec.size ( ) ; i + + ) std : : cout < < " " < < vec [ i ] ; std : : cout < < " \n  " ; int ser = 30 ; it = std : : find ( vec.begin ( ) , vec.end ( ) , ser ) ; if ( it ! = vec.end ( ) ) { std : : cout < < " Element " < < ser < < " found at position : " ; std : : cout < < it - vec.begin ( ) + 1 < < " \n  " ; } else std : : cout < < " Element not found.\n \n  " ; return 0 ; }
#include <bits / stdc + + .h> bool IsOdd ( int i ) { return i % 2 ; } int main ( ) { std : : vector <int> vec { 10 , 25 , 40 , 55 } ; std : : vector <int> : : iterator it ; it = std : : find_if ( vec.begin ( ) , vec.end ( ) , IsOdd ) ; std : : cout < < " The first odd value is " < < * it < < '\n ' ; std : : vector <int> : : iterator ite ; ite = std : : find_if_not ( vec.begin ( ) , vec.end ( ) , IsOdd ) ; std : : cout < < " The first non-odd ( or even ) value is " < < * ite < < '\n ' ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color ; char arr [ 50 ] ; initgraph ( & gd ; , & gm ; , " " ) ; color = getpixel ( 0 , 0 ) ; sprintf ( arr , " color of pixel at ( 0 , 0 ) = %d " , color ) ; outtext ( arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int arr [ ] = { 320 , 150 , 400 , 250 , 250 , 350 , 320 , 150 } ; initgraph ( & gd ; , & gm ; , " " ) ; drawpoly ( 4 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Maximum number of colors for " " current graphics mode and " " driver = %d " , getmaxcolor ( ) + 1 ) ; outtextxy ( 20 , 100 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm , color ; initgraph ( & gd ; , & gm ; , " " ) ; putpixel ( 85 , 35 , GREEN ) ; putpixel ( 30 , 40 , RED ) ; putpixel ( 115 , 50 , YELLOW ) ; putpixel ( 135 , 50 , CYAN ) ; putpixel ( 45 , 60 , BLUE ) ; putpixel ( 20 , 100 , WHITE ) ; putpixel ( 200 , 100 , LIGHTBLUE ) ; putpixel ( 150 , 100 , LIGHTGREEN ) ; putpixel ( 200 , 50 , YELLOW ) ; putpixel ( 120 , 70 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; sprintf ( arr , " Current background color = %d " , getbkcolor ( ) ) ; outtextxy ( 10 , 10 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; setbkcolor ( RED ) ; sprintf ( arr , " Current background color = %d " , getbkcolor ( ) ) ; outtextxy ( 10 , 10 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdio.h> int main ( ) { int gd = DETECT , gm ; struct arccoordstype p ; char arr [ 100 ] ; initgraph ( & gd ; , & gm ; , " " ) ; arc ( 250 , 200 , 0 , 90 , 100 ) ; getarccoords ( & p ; ) ; sprintf ( arr , " ( %d , %d ) " , p.xstart , p.ystart ) ; outtextxy ( 360 , 195 , arr ) ; sprintf ( arr , " ( %d , %d ) " , p.xend , p.yend ) ; outtextxy ( 245 , 85 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " This is output from my first program!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 5 ; b = 7 ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter the first value : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter the second value : " ) ; scanf ( " %d " , & b ) ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter the first value : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter the second value : " ) ; scanf ( " %d " , & b ) ; c = a + b ; printf ( " %d + %d = %d\n  " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int b ; printf ( " Enter a value : " ) ; scanf ( " %d " , & b ) ; if ( b < 0 ) printf ( " The value is negative\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a ; printf ( " Enter a number : " ) ; scanf ( " %d " , & a ) ; if ( a ) { printf ( " The value is True\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a ; a = 0 ; while ( a < = 100 ) { printf ( " %4d degrees F = %4d degrees C\n  " , a , ( a - 32 ) * 5 / 9 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a ; a = 0 ; while ( a < = 100 ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a ; a = 0 ; while ( a < = 100 ) { if ( a > 98.6 ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , 98.6 , ( 98.6 - 32.0 ) * 5.0 / 9.0 ) ; } printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { float a , b ; a = 0 ; b = -1 ; while ( a < = 100 ) { if ( ( a > 98.6 ) & & ( b < 98.6 ) ) { printf ( " %6.2f degrees F = %6.2f degrees C\n  " , 98.6 , ( 98.6 - 32.0 ) * 5.0 / 9.0 ) ; } printf ( " %6.2f degrees F = %6.2f degrees C\n  " , a , ( a - 32.0 ) * 5.0 / 9.0 ) ; b = a ; a = a + 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { int a [ 5 ] ; int i ; for ( i = 0 ; i <5 ; i + + ) a [ i ] = i ; for ( i = 0 ; i <5 ; i + + ) printf ( " a [ %d ] = %d\n  " , i , a [ i ] ) ; }
#include <stdio.h> #define MAX 10 int a [ MAX ] ; int rand_seed = 10 ; int rand ( ) { rand_seed = rand_seed * 1103515245 + 12345 ; return ( unsigned int ) ( rand_seed / 65536 ) % 32768 ; } int main ( ) { int i , t , x , y ; for ( i = 0 ; i < MAX ; i + + ) { a [ i ] = rand ( ) ; printf ( " %d\n  " , a [ i ] ) ; } return 0 ; }
#include <stdio.h> void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } int add ( int i , int j ) { return i + j ; }
#include <stdio.h> int add ( int , int ) ; void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } int add ( int i , int j ) { return i + j ; }
#include <stdio.h> void main ( ) { printf ( " %d\n  " , add ( 3 ) ) ; } float add ( int i , int j ) { return i + j ; }
#include <stdio.h> #define MAX 10 int a [ MAX ] ; int rand_seed = 10 ; int rand ( ) { rand_seed = rand_seed * 1103515245 + 12345 ; return ( unsigned int ) ( rand_seed / 65536 ) % 32768 ; } void main ( ) { int i , t , x , y ; for ( i = 0 ; i < MAX ; i + + ) { a [ i ] = rand ( ) ; printf ( " %d\n  " , a [ i ] ) ; } for ( x = 0 ; x < MAX-1 ; x + + ) for ( y = 0 ; y < MAX-x-1 ; y + + ) if ( a [ y ] > a [ y + 1 ] ) { t = a [ y ] ; a [ y ] = a [ y + 1 ] ; a [ y + 1 ] = t ; } printf ( " --------------------\n  " ) ; for ( i = 0 ; i < MAX ; i + + ) printf ( " %d\n  " , a [ i ] ) ; }
#include <stdio.h> #define MAX 10 int a [ MAX ] ; int rand_seed = 10 ; int rand ( ) { rand_seed = rand_seed * 1103515245 + 12345 ; return ( unsigned int ) ( rand_seed / 65536 ) % 32768 ; } void bubble_sort ( int m ) { int x , y , t ; for ( x = 0 ; x < m-1 ; x + + ) for ( y = 0 ; y < m-x-1 ; y + + ) if ( a [ y ] > a [ y + 1 ] ) { t = a [ y ] ; a [ y ] = a [ y + 1 ] ; a [ y + 1 ] = t ; } } void main ( ) { int i , t , x , y ; for ( i = 0 ; i < MAX ; i + + ) { a [ i ] = rand ( ) ; printf ( " %d\n  " , a [ i ] ) ; } bubble_sort ( MAX ) ; printf ( " --------------------\n  " ) ; for ( i = 0 ; i < MAX ; i + + ) printf ( " %d\n  " , a [ i ] ) ; }
#include " util.h " int rand_seed = 10 ; int rand ( ) { rand_seed = rand_seed * 1103515245 + 12345 ; return ( unsigned int ) ( rand_seed / 65536 ) % 32768 ; } void bubble_sort ( int m , int a [ ] ) { int x , y , t ; for ( x = 0 ; x < m-1 ; x + + ) for ( y = 0 ; y < m-x-1 ; y + + ) if ( a [ y ] > a [ y + 1 ] ) { t = a [ y ] ; a [ y ] = a [ y + 1 ] ; a [ y + 1 ] = t ; } }
#include <stdio.h> #include " util.h " #define MAX 10 int a [ MAX ] ; void main ( ) { int i , t , x , y ; for ( i = 0 ; i < MAX ; i + + ) { a [ i ] = rand ( ) ; printf ( " %d\n  " , a [ i ] ) ; } bubble_sort ( MAX , a ) ; printf ( " --------------------\n  " ) ; for ( i = 0 ; i < MAX ; i + + ) printf ( " %d\n  " , a [ i ] ) ; }
#include <stdio.h> #include <string.h> void main ( ) { char s [ 1000 ] ; int count = 0 ; while ( gets ( s ) ) count + = strlen ( s ) ; printf ( " %d\n  " , count ) ; }
#include <stdio.h> #define MAX 10 int main ( ) { FILE * f ; int x ; f = fopen ( " out " , " w " ) ; if ( !f ) return 1 ; for ( x = 1 ; x < = MAX ; x + + ) fprintf ( f , " %d\n  " , x ) ; fclose ( f ) ; return 0 ; }
#include <stdio.h> int main ( ) { FILE * f ; char s [ 1000 ] ; f = fopen ( " infile " , " r " ) ; if ( !f ) return 1 ; while ( fgets ( s , 1000 , f ) ! = NULL ) printf ( " %s " , s ) ; fclose ( f ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int * p ; p = & i ; * p = 5 ; j = i ; printf ( " %d %d %d\n  " , i , j , * p ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int * p ; printf ( " %d %d\n  " , p , & i ) ; p = & i ; printf ( " %d %d\n  " , p , & i ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * p ; printf ( " %d\n  " , * p ) ; }
#include <stdio.h> int main ( ) { int i ; int * p ; p = & i ; * p = 5 ; printf ( " %d %d\n  " , i , * p ) ; return 0 ; }
#include <stdio.h> void swap ( int i , int j ) { int t ; t = i ; i = j ; j = t ; } void main ( ) { int a , b ; a = 5 ; b = 10 ; printf ( " %d %d\n  " , a , b ) ; swap ( a , b ) ; printf ( " %d %d\n  " , a , b ) ; }
#include <stdio.h> void swap ( int * i , int * j ) { int t ; t = * i ; * i = * j ; * j = t ; } void main ( ) { int a , b ; a = 5 ; b = 10 ; printf ( " %d %d\n  " , a , b ) ; swap ( & a , & b ) ; printf ( " %d %d\n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int * p ; p = ( int * ) malloc ( sizeof ( int ) ) ; * p = 10 ; printf ( " %d\n  " , * p ) ; free ( p ) ; return 0 ; }
#include <stdio.h> struct rec { int i ; float f ; char c ; } ; int main ( ) { struct rec * p ; p = ( struct rec * ) malloc ( sizeof ( struct rec ) ) ; ( * p ) .i = 10 ; ( * p ) .f = 3.14 ; ( * p ) .c = 'a' ; printf ( " %d %f %c\n  " , ( * p ) .i , ( * p ) .f , ( * p ) .c ) ; free ( p ) ; return 0 ; }
#include " stack.h " #include <stdio.h> struct stack_rec { stack_data data ; struct stack_rec * next ; } ; struct stack_rec * top = NULL ; void stack_init ( ) { top = NULL ; } void stack_clear ( ) { stack_data x ; while ( !stack_empty ( ) ) x = stack_pop ( ) ; } int stack_empty ( ) { if ( top = = NULL ) return ( 1 ) ; else return ( 0 ) ; } void stack_push ( stack_data d ) { struct stack_rec * temp ; temp = ( struct stack_rec * ) malloc ( sizeof ( struct stack_rec ) ) ; temp-> data = d ; temp-> next = top ; top = temp ; } stack_data stack_pop ( ) { struct stack_rec * temp ; stack_data d = 0 ; if ( top! = NULL ) { d = top-> data ; temp = top ; top = top-> next ; free ( temp ) ; } return ( d ) ; }
#include <string.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; strcpy ( s1 , " hello " ) ; strcpy ( s2 , s1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ 100 ] , s2 [ 100 ] ; gets ( s1 ) ; gets ( s2 ) ; if ( strcmp ( s1 , s2 ) = = 0 ) printf ( " equal\n  " ) ; else if ( strcmp ( s1 , s2 ) <0 ) printf ( " s1 less than s2\n  " ) ; else printf ( " s1 greater than s2\n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s [ 100 ] , * p ; gets ( s ) ; p = s ; while ( * p = = ' ' ) p + + ; printf ( " %s\n  " , p ) ; return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int x ; printf ( " %d\n  " , argc ) ; for ( x = 0 ; x <argc ; x + + ) printf ( " %s\n  " , argv [ x ] ) ; return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; for ( i = 0 ; i < MAX ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; for ( i = MAX ; i> = 0 ; i-- ) { for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; int space = 4 ; for ( i = 0 ; i < MAX ; i + + ) { for ( j = 0 ; j < space ; j + + ) { printf ( " " ) ; } for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; space-- ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; int space = 4 ; for ( i = 0 ; i < MAX ; i + + ) { for ( j = 0 ; j < space ; j + + ) { printf ( " " ) ; } for ( j = 0 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; space-- ; } space = 0 ; for ( i = MAX ; i> 0 ; i-- ) { for ( j = 0 ; j < space ; j + + ) { printf ( " " ) ; } for ( j = 0 ; j < i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; space + + ; } return 0 ; }
#include <stdio.h> #define MAX 5 int main ( ) { int i , j ; int space = 0 ; for ( i = MAX ; i> 0 ; i-- ) { for ( j = 0 ; j < i ; j + + ) { printf ( " * " ) ; } for ( j = 0 ; j < space ; j + + ) { printf ( " " ) ; } for ( j = 0 ; j < i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; space + = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 ; i < = 4 ; i + + ) { for ( j = 4 ; j> i ; j-- ) printf ( " " ) ; for ( k = 0 ; k < = i ; k + + ) { if ( k %2 = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , l = 8 , m , n , o , p ; for ( i = 0 ; i < = 4 ; i + + ) { for ( j = 0 ; j < = i ; j + + ) { if ( j %2 = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } for ( k = 1 ; k < = l ; k + + ) { printf ( " " ) ; } l = l-2 ; for ( m = 0 ; m < = i ; m + + ) { if ( m %2 = = 0 ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , l = 1 ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 4 ; j> = i ; j-- ) { printf ( " " ) ; } for ( k = 1 ; k < = l ; k + + ) { printf ( " %d " , k ) ; } l = l + 2 ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , l , m = 8 , n = 1 ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( k = m ; k> = 1 ; k-- ) { printf ( " " ) ; } m = m-2 ; for ( l = n ; l> = 1 ; l-- ) { printf ( " %d " , l ) ; } n = n + 1 ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int space = 0 ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = space ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %d " , j ) ; for ( j = i-1 ; j> = 1 ; j-- ) printf ( " %d " , j ) ; printf ( " \n  " ) ; space + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char ch = 'A' ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %c " , ch + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char ch ; for ( i = 1 ; i < = 5 ; i + + ) { ch = 'A' ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %c " , ch + + ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char CH = 'E' ; int space = 1 ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 'A' ; j < = CH ; j + + ) printf ( " %c " , j ) ; if ( i = = 1 ) printf ( " \b " ) ; for ( j = 1 ; j <space ; j + + ) printf ( " " ) ; for ( j = CH ; j> = 'A' ; j-- ) printf ( " %c " , j ) ; printf ( " \n  " ) ; CH-- ; space + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; char CH = 'A' ; int space = 4 ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 1 ; j < = space ; j + + ) printf ( " " ) ; for ( j = CH ; j> = 'A' ; j-- ) printf ( " %c " , j ) ; for ( j = 'B' ; j < = CH ; j + + ) printf ( " %c " , j ) ; printf ( " \n  " ) ; CH + + ; space-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 5 ; i> = 1 ; i-- ) { for ( j = 1 , k = 'A' ; j < = i ; j + + , k + + ) { printf ( " %d %c " , j , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int space = 4 ; char CH = 'A' ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 1 ; j < = space ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " %c " , CH + j-1 ) ; for ( j = i-1 ; j> = 1 ; j-- ) printf ( " %c " , CH + j-1 ) ; printf ( " \n  " ) ; space-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , N , sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0 ; for ( i = 1 ; i < = N ; i + + ) sum = sum + i ; printf ( " Sum of the series is : %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , N ; unsigned long sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0 ; for ( i = 1 ; i < = N ; i + + ) sum = sum + ( i * i ) ; printf ( " Sum of the series is : %ld\n  " , sum ) ; return 0 ; }
#include <stdio.h> unsigned long factorial ( int num ) { int i ; unsigned long fact = 1 ; for ( i = num ; i> = 1 ; i-- ) fact = fact * i ; return fact ; } int main ( ) { int i , N ; float sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0.0f ; for ( i = 1 ; i < = N ; i + + ) sum = sum + ( ( float ) ( i ) / ( float ) ( factorial ( i ) ) ) ; printf ( " Sum of the series is : %f\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , N ; float sum ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & N ) ; sum = 0.0f ; for ( i = 1 ; i < = N ; i + + ) sum = sum + ( ( float ) 1 / ( float ) i ) ; printf ( " Sum of the series is : %f\n  " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int i , N ; float sum ; int count ; printf ( " Enter total number of terms : " ) ; scanf ( " %d " , & N ) ; sum = 0.0f ; count = 1 ; for ( i = 1 ; i < = N ; i + + ) { sum = sum + ( ( float ) ( pow ( count , 2 ) ) / ( float ) ( pow ( count , 3 ) ) ) ; count + = 2 ; } printf ( " Sum of the series is : %f\n  " , sum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * iVar ; char * cVar ; float * fVar ; iVar = ( int * ) malloc ( 1 * sizeof ( int ) ) ; cVar = ( char * ) malloc ( 1 * sizeof ( char ) ) ; fVar = ( float * ) malloc ( 1 * sizeof ( float ) ) ; printf ( " Enter integer value : " ) ; scanf ( " %d " , iVar ) ; printf ( " Enter character value : " ) ; scanf ( " %c " , cVar ) ; printf ( " Enter float value : " ) ; scanf ( " %f " , fVar ) ; printf ( " Inputted value are : %d , %c , %.2f\n  " , * iVar , * cVar , * fVar ) ; free ( iVar ) ; free ( cVar ) ; free ( fVar ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int n ; char * text ; printf ( " Enter limit of the text : " ) ; scanf ( " %d " , & n ) ; text = ( char * ) malloc ( n * sizeof ( char ) ) ; printf ( " Enter text : " ) ; scanf ( " " ) ; gets ( text ) ; printf ( " Inputted text is : %s\n  " , text ) ; free ( text ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * arr ; int limit , i ; int sum = 0 ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & limit ) ; arr = ( int * ) malloc ( limit * sizeof ( int ) ) ; if ( arr = = NULL ) { printf ( " Insufficient Memory , Exiting... \n  " ) ; return 0 ; } printf ( " Enter %d elements : \n  " , limit ) ; for ( i = 0 ; i <limit ; i + + ) { printf ( " Enter element %3d : " , i + 1 ) ; scanf ( " %d " , ( arr + i ) ) ; sum = sum + * ( arr + i ) ; } printf ( " Array elements are : " ) ; for ( i = 0 ; i <limit ; i + + ) printf ( " %3d " , * ( arr + i ) ) ; printf ( " \n Sum of all elements : %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct student { char name [ 30 ] ; int roll ; float perc ; } ; int main ( ) { struct student * pstd ; pstd = ( struct student * ) malloc ( 1 * sizeof ( struct student ) ) ; if ( pstd = = NULL ) { printf ( " Insufficient Memory , Exiting... \n  " ) ; return 0 ; } printf ( " Enter name : " ) ; gets ( pstd-> name ) ; printf ( " Enter roll number : " ) ; scanf ( " %d " , & pstd-> roll ) ; printf ( " Enter percentage : " ) ; scanf ( " %f " , & pstd-> perc ) ; printf ( " \n Entered details are : \n  " ) ; printf ( " Name : %s , Roll Number : %d , Percentage : %.2f\n  " , pstd-> name , pstd-> roll , pstd-> perc ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct student { char name [ 30 ] ; int roll ; float perc ; } ; int main ( ) { struct student * pstd ; int n , i ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & n ) ; pstd = ( struct student * ) malloc ( n * sizeof ( struct student ) ) ; if ( pstd = = NULL ) { printf ( " Insufficient Memory , Exiting... \n  " ) ; return 0 ; } for ( i = 0 ; i <n ; i + + ) { printf ( " \n Enter detail of student [ %3d ] : \n  " , i + 1 ) ; printf ( " Enter name : " ) ; scanf ( " " ) ; gets ( ( pstd + i ) -> name ) ; printf ( " Enter roll number : " ) ; scanf ( " %d " , & ( pstd + i ) -> roll ) ; printf ( " Enter percentage : " ) ; scanf ( " %f " , & ( pstd + i ) -> perc ) ; } printf ( " \n Entered details are : \n  " ) ; for ( i = 0 ; i <n ; i + + ) { printf ( " %30s \t %5d \t %.2f\n  " , ( pstd + i ) -> name , ( pstd + i ) -> roll , ( pstd + i ) -> perc ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; float result ; char ch ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; printf ( " Choose operation to perform ( + , - , * , / , % ) : " ) ; scanf ( " %c " , & ch ) ; result = 0 ; switch ( ch ) { case ' + ' : result = num1 + num2 ; break ; case '-' : result = num1-num2 ; break ; case ' * ' : result = num1 * num2 ; break ; case ' / ' : result = ( float ) num1 / ( float ) num2 ; break ; case ' %' : result = num1 %num2 ; break ; default : printf ( " Invalid operation.\n  " ) ; } printf ( " Result : %d %c %d = %f\n  " , num1 , ch , num2 , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , i ; long int fact ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; fact = 1 ; for ( i = num ; i> = 1 ; i-- ) fact = fact * i ; printf ( " \n Factorial of %d is = %ld " , num , fact ) ; return 0 ; }
#include <stdio.h> long int factorial ( int n ) { int i ; long int fact = 1 ; if ( n = = 1 ) return fact ; for ( i = n ; i> = 1 ; i-- ) fact = fact * i ; return fact ; } int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; printf ( " \n Factorial of %d is = %ld " , num , factorial ( num ) ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num ; int iVar ; float fVar ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; fVar = sqrt ( ( double ) num ) ; iVar = fVar ; if ( iVar = = fVar ) printf ( " %d is a perfect square. " , num ) ; else printf ( " %d is not a perfect square. " , num ) ; return 0 ; }
#include <stdio.h> #include <math.h> int isPerfectSquare ( int number ) { int iVar ; float fVar ; fVar = sqrt ( ( double ) number ) ; iVar = fVar ; if ( iVar = = fVar ) return 1 ; else return 0 ; } int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; if ( isPerfectSquare ( num ) ) printf ( " %d is a perfect square. " , num ) ; else printf ( " %d is not a perfect square. " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , sum ; float avg ; printf ( " Enter first number : " ) ; scanf ( " %d " , & a ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & b ) ; sum = a + b ; avg = ( float ) ( a + b ) / 2 ; printf ( " \n Sum of %d and %d is = %d " , a , b , sum ) ; printf ( " \n Average of %d and %d is = %f " , a , b , avg ) ; return 0 ; }
#include <stdio.h> int main ( ) { float fh , cl ; int choice ; printf ( " \n 1 : Convert temperature from Fahrenheit to Celsius. " ) ; printf ( " \n 2 : Convert temperature from Celsius to Fahrenheit. " ) ; printf ( " \n Enter your choice ( 1 , 2 ) : " ) ; scanf ( " %d " , & choice ) ; if ( choice = = 1 ) { printf ( " \n Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fh ) ; cl = ( fh - 32 ) / 1.8 ; printf ( " Temperature in Celsius : %.2f " , cl ) ; } else if ( choice = = 2 ) { printf ( " \n Enter temperature in Celsius : " ) ; scanf ( " %f " , & cl ) ; fh = ( cl * 1.8 ) + 32 ; printf ( " Temperature in Fahrenheit : %.2f " , fh ) ; } else { printf ( " \n Invalid Choice !!! " ) ; } return 0 ; }
#include <stdio.h> struct employee { char name [ 30 ] ; int empId ; float salary ; } ; int main ( ) { struct employee emp ; printf ( " \n Enter details : \n  " ) ; printf ( " Name ? : " ) ; gets ( emp.name ) ; printf ( " ID ? : " ) ; scanf ( " %d " , & emp.empId ) ; printf ( " Salary ? : " ) ; scanf ( " %f " , & emp.salary ) ; printf ( " \n Entered detail is : " ) ; printf ( " Name : %s " , emp.name ) ; printf ( " Id : %d " , emp.empId ) ; printf ( " Salary : %f\n  " , emp.salary ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , cnt , i ; int bin [ 32 ] ; printf ( " Enter decimal number : " ) ; scanf ( " %d " , & number ) ; cnt = 0 ; while ( number> 0 ) { bin [ cnt ] = number %2 ; number = number / 2 ; cnt + + ; } printf ( " Binary value is : " ) ; for ( i = ( cnt-1 ) ; i> = 0 ; i-- ) printf ( " %d " , bin [ i ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; return 0 ; }
#include <stdio.h> void printMessage ( void ) { printf ( " Hello World! " ) ; } int main ( ) { printMessage ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , t ; printf ( " Enter value of A ? " ) ; scanf ( " %d " , & a ) ; printf ( " Enter value of B ? " ) ; scanf ( " %d " , & b ) ; printf ( " \n  Before swapping : A = %d , B = %d " , a , b ) ; t = a ; a = b ; b = t ; printf ( " \n  After swapping ( First method ) : A = %d , B = %d\n  " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n  After swapping ( second method ) : A = %d , B = %d\n  " , a , b ) ; a^ = b ; b^ = a ; a^ = b ; printf ( " \n  After swapping ( third method ) : A = %d , B = %d\n  " , a , b ) ; a = a + b- ( b = a ) ; printf ( " \n  After swapping ( fourth method ) : A = %d , B = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number , sum = 0 , rem = 0 , tempNumber ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & number ) ; tempNumber = number ; while ( tempNumber! = 0 ) { rem = tempNumber %10 ; sum = sum + ( rem * rem * rem ) ; tempNumber / = 10 ; } if ( sum = = number ) printf ( " %d is an Armstrong number. " , number ) ; else printf ( " %d is not an Armstrong number. " , number ) ; return 0 ; }
#include <stdio.h> int isArmstrong ( int num ) { int tempNumber = num ; int rem , sum ; sum = 0 ; while ( tempNumber! = 0 ) { rem = tempNumber %10 ; sum = sum + ( rem * rem * rem ) ; tempNumber / = 10 ; } if ( sum = = num ) return 1 ; else return 0 ; } int main ( ) { int number ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & number ) ; if ( isArmstrong ( number ) ) printf ( " %d is an Armstrong number. " , number ) ; else printf ( " %d is not an Armstrong number. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter an integer number : " ) ; scanf ( " %d " , & num ) ; if ( num %2 = = 0 ) printf ( " %d is an EVEN number. " , num ) ; else printf ( " %d is an ODD number. " , num ) ; return 0 ; }
#include <stdio.h> int checkLeapYear ( int year ) { if ( ( year % 400 = = 0 ) || ( year %4 = = 0 & & year %100! = 0 ) ) return 1 ; else return 0 ; } int main ( ) { int i , n ; printf ( " Enter the value of N : " ) ; scanf ( " %d " , & n ) ; printf ( " Leap years from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( checkLeapYear ( i ) ) printf ( " %d\t " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char name [ 30 ] ; float basic , hra , da , pf , gross ; printf ( " Enter name : " ) ; gets ( name ) ; printf ( " Enter Basic Salary : " ) ; scanf ( " %f " , & basic ) ; printf ( " Enter HRA : " ) ; scanf ( " %f " , & hra ) ; printf ( " Enter D.A. : " ) ; scanf ( " %f " , & da ) ; pf = ( basic * 12 ) / 100 ; gross = basic + da + hra + pf ; printf ( " \n Name : %s \n BASIC : %f \n HRA : %f \n DA : %f \n PF : %f \n  * * * GROSS SALARY : %f * * * " , name , basic , hra , da , pf , gross ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; int num ; for ( i = 1 ; i < = 20 ; i + + ) { num = i ; for ( j = 1 ; j < = 10 ; j + + ) { printf ( " %3d\t " , ( num * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { unsigned char count ; for ( count = 32 ; count < 255 ; count + = 1 ) { printf ( " %3d - %c " , count , count ) ; if ( count % 6 = = 0 ) printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <dos.h> int main ( ) { char choice ; struct dosdate_t date ; _dos_getdate ( & date ) ; printf ( " \n Current date is : %02d - %02d - %02d " , date.day , date.month , date.year ) ; printf ( " \n Want to change date ( Y : yes ) : " ) ; choice = getchar ( ) ; if ( choice = = 'Y'||choice = = 'y' ) { printf ( " Enter new date : \n  " ) ; printf ( " Enter day : " ) ; scanf ( " %d " , & date.day ) ; printf ( " Enter month : " ) ; scanf ( " %d " , & date.month ) ; printf ( " Enter year : " ) ; scanf ( " %d " , & date.year ) ; _dos_setdate ( & date ) ; printf ( " \n Date changed successfully. " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; void display ( node * temp ) { node * temp1 = temp ; printf ( " \n Now the list is : \n  %d-> " , temp-> data ) ; temp = temp-> next ; while ( temp! = temp1 ) { printf ( " %d-> " , temp-> data ) ; temp = temp-> next ; } printf ( " %d\n  " , temp1-> data ) ; } int main ( ) { node * head = NULL , * temp , * temp1 , * temp2 ; int choice , key ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = head ) { temp1 = temp1-> next ; } temp1-> next = temp ; } temp-> next = head ; } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add m ore data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; display ( head ) ; printf ( " \n Enter the data of the node which you want to exchange with it's next : " ) ; scanf ( " %d " , & key ) ; temp = head ; while ( temp-> data! = key ) { temp1 = temp ; temp = temp-> next ; } if ( temp = = head ) { temp1 = temp-> next ; temp-> next = temp1-> next ; temp1-> next = temp ; head = temp1 ; } else { temp2 = temp-> next ; temp-> next = temp2-> next ; temp2-> next = temp ; temp1-> next = temp2 ; } display ( head ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; struct list * prev ; } node ; void display ( node * temp ) { printf ( " The list is as follows : \n  " ) ; while ( temp! = NULL ) { printf ( " %d-> " , temp-> data ) ; temp = temp-> next ; } printf ( " NULL " ) ; return ; } int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , max ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { temp-> prev = head ; temp-> next = head ; head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; temp-> prev = temp1 ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add more data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; display ( head ) ; temp = head ; max = temp-> data ; while ( temp! = NULL ) { if ( temp-> data> max ) max = temp-> data ; temp = temp-> next ; } printf ( " \n The largest element in the list is : %d " , max ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; void display ( node * temp ) { node * temp1 = temp ; printf ( " The list is as follows : \n  %d-> " , temp-> data ) ; temp = temp-> next ; while ( temp! = temp1 ) { printf ( " %d-> " , temp-> data ) ; temp = temp-> next ; } printf ( " %d\n  " , temp1-> data ) ; return ; } int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , count = 0 , key ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add m ore data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; temp = head ; while ( temp-> next! = NULL ) { temp = temp-> next ; } temp-> next = head ; display ( head ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; struct list * prev ; } node ; void display ( node * temp ) { node * temp1 = temp ; printf ( " The list is as follows : \n  %d-> " , temp-> data ) ; temp = temp-> next ; while ( temp! = temp1 ) { printf ( " %d-> " , temp-> data ) ; temp = temp-> next ; } printf ( " %d\n  " , temp1-> data ) ; return ; } int main ( ) { node * head = NULL , * temp , * temp1 ; int choice ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = head ; if ( head = = NULL ) { head = temp ; temp-> prev = head ; temp-> next = head ; } else { temp1 = head ; while ( temp1-> next! = head ) { temp1 = temp1-> next ; } temp1-> next = temp ; temp-> prev = temp1 ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add more data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; display ( head ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; void alternatedisp ( node * temp ) ; int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , count = 0 , key ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add m ore data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; alternatedisp ( head ) ; return 0 ; } void alternatedisp ( node * temp ) { printf ( " \n Displaying the alternative items of the list starting from the begining : \n  " ) ; while ( temp! = NULL ) { printf ( " %d " , temp-> data ) ; if ( temp-> next = = NULL ) temp = NULL ; else temp = temp-> next-> next ; } }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; void alternatedisp ( node * temp ) ; int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , count = 0 , key ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add m ore data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; printf ( " \n Displaying the alternative items of the list starting from the begining : \n  " ) ; alternatedisp ( head ) ; printf ( " NULL\n  " ) ; return 0 ; } void alternatedisp ( node * temp ) { if ( temp! = NULL ) { printf ( " %d-> " , temp-> data ) ; if ( temp-> next = = NULL ) temp = NULL ; else alternatedisp ( temp-> next-> next ) ; } else return ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; int length ( node * temp ) ; int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , count ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add more data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; count = length ( head ) ; printf ( " \n The length of the list is : %d " , count ) ; return 0 ; } int length ( node * temp ) { int c = 0 ; while ( temp! = NULL ) { c = c + 1 ; temp = temp-> next ; } return c ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; int l = 0 ; int main ( ) { node * head = NULL , * temp , * temp1 ; int len , choice , count = 0 , key ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add m ore data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; len = length ( head ) ; printf ( " The list has a total of %d no of nodes " , l ) ; return 0 ; } int length ( node * temp ) { if ( temp = = NULL ) return l ; else { l = l + 1 ; length ( temp-> next ) ; } }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , count = 0 , key ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add m ore data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; printf ( " \n Enter the data to find it's occurrence : " ) ; scanf ( " %d " , & key ) ; temp = head ; while ( temp! = NULL ) { if ( temp-> data = = key ) { count = count + 1 ; } temp = temp-> next ; } printf ( " \n  %d occurred %d times in the list " , key , count ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> typedef struct list { int data ; struct list * next ; } node ; int key , c = 0 ; int occurence ( node * temp ) ; int main ( ) { node * head = NULL , * temp , * temp1 ; int choice , count ; do { temp = ( node * ) malloc ( sizeof ( node ) ) ; if ( temp! = NULL ) { printf ( " \n Enter the element in the list : " ) ; scanf ( " %d " , & temp-> data ) ; temp-> next = NULL ; if ( head = = NULL ) { head = temp ; } else { temp1 = head ; while ( temp1-> next! = NULL ) { temp1 = temp1-> next ; } temp1-> next = temp ; } } else { printf ( " \n Memory not avilable...node allocation is not possible " ) ; } printf ( " \n If you wish to add more data on the list enter 1 : " ) ; scanf ( " %d " , & choice ) ; } while ( choice = = 1 ) ; printf ( " \n Enter the data to find it's occurrence : " ) ; scanf ( " %d " , & key ) ; count = occurence ( head ) ; printf ( " %d occured %d times in the list " , key , count ) ; return 0 ; } int occurence ( node * temp ) { if ( temp = = NULL ) return c ; else { if ( temp-> data = = key ) c = c + 1 ; occurence ( temp-> next ) ; } }
#include <stdio.h> int main ( ) { int n , k ; printf ( " enter a 32 bit number\n  " ) ; scanf ( " %d " , & k ) ; printf ( " enter the bit no to check...\n  " ) ; printf ( " bit-no 0-indexed & 0 starts from LSB...\n  " ) ; scanf ( " %d " , & n ) ; if ( n> 32 ) { printf ( " enter between 0-31\n  " ) ; return ; } k = k> > n ; if ( k & 1 = = 1 ) printf ( " %d th bit is set\n  " , n ) ; else printf ( " %d th bit not set\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n1 , n2 ; printf ( " enter two numbers\n  " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " before swapping...\n  " ) ; printf ( " first no is %d , second no %d\n  " , n1 , n2 ) ; n1 = n1^n2 ; n2 = n1^n2 ; n1 = n1^n2 ; printf ( " after swapping...\n  " ) ; printf ( " first no is %d , second no %d\n  " , n1 , n2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int first , second , pos ; printf ( " enter first & second no : \n  " ) ; scanf ( " %d %d " , & first , & second ) ; printf ( " enter specified position ( 0-indexed ) \n  " ) ; scanf ( " %d " , & pos ) ; int temp = ( second> > pos ) & 1 ; if ( temp = = 1 ) { temp = temp < <pos ; first| = temp ; } else { int flag = 255 ; temp = 1 < <pos ; flag = flag^temp ; first & = flag ; } printf ( " converted no %d\n  " , first ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " enter no : " ) ; scanf ( " %d " , & n ) ; if ( n & 1 = = 1 ) printf ( " it's odd no " ) ; else printf ( " it's even no " ) ; return 0 ; }
#include <stdio.h> #define SIZE 8 int main ( ) { unsigned int n ; printf ( " enter the no ( max range 255 ) \n  " ) ; scanf ( " %d " , & n ) ; int c [ SIZE ] = { 0 } ; int i = SIZE-1 ; printf ( " binary representation is : " ) ; while ( n! = 0 ) { c [ i-- ] = n & 1 ; n = n> > 1 ; } for ( int j = 0 ; j <SIZE ; j + + ) printf ( " %d " , c [ j ] ) ; printf ( " \n  " ) ; for ( int j = 0 , k = SIZE-1 ; j <k ; j + + , k-- ) { if ( c [ j ] ! = c [ k ] ) { printf ( " Not palindrome\n  " ) ; return 0 ; } } printf ( " it's palindrome\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; int count = 0 ; while ( n! = 0 ) { if ( n & 1 = = 1 ) { count + + ; } n = n> > 1 ; } printf ( " no of bits those are 1 " ) ; printf ( " in its binary representation : %d\n  " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { int temp = n & 1 ; if ( temp = = 0 ) { printf ( " all bits are not set\n  " ) ; return 0 ; } n = n> > 1 ; } printf ( " all bits are set " ) ; printf ( " in its binary representation\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; int count = 0 , store = -1 ; while ( n! = 0 ) { if ( n & 1 = = 1 ) store = count ; n = n> > 1 ; count + + ; } if ( store = = -1 ) { printf ( " No bit is set\n  " ) ; return 0 ; } printf ( " Highest bit set " ) ; printf ( " in its binary representation : %d \n  " , store ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned int n ; printf ( " enter the integer\n  " ) ; scanf ( " %d " , & n ) ; int count = 0 ; while ( n! = 0 ) { if ( n & 1 = = 1 ) break ; n = n> > 1 ; count + + ; } printf ( " no of trailing zero " ) ; printf ( " in its binary representation : %d \n  " , count ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <limits.h> int max ( int a , int b ) { return ( a> b ) ?a : b ; } int findBigRec ( int * a , int n ) { if ( n = = 0 ) return INT_MIN ; return max ( a [ n-1 ] , findBigRec ( a , n-1 ) ) ; } int main ( ) { int n ; printf ( " Enter array length : " ) ; scanf ( " %d " , & n ) ; int * a = ( int * ) ( malloc ( sizeof ( int ) * n ) ) ; printf ( " enter elements...\n  " ) ; for ( int i = 0 ; i <n ; i + + ) scanf ( " %d " , & a [ i ] ) ; int big = findBigRec ( a , n ) ; printf ( " The biggest element in the array is : %d\n  " , big ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int binSearch ( int * a , int first , int last , int t ) { int mid = ( first + last ) / 2 ; if ( a [ mid ] = = t ) return mid + 1 ; else if ( t> a [ mid ] & first! = last ) return binSearch ( a , mid + 1 , last , t ) ; else if ( t <a [ mid ] & first! = last ) return binSearch ( a , first , mid-1 , t ) ; else return 0 ; } int main ( ) { int n , t ; printf ( " enter number of array elements : " ) ; scanf ( " %d " , & n ) ; int * a = ( int * ) ( malloc ( sizeof ( int ) * n ) ) ; printf ( " enter elements : \n  " ) ; for ( int i = 0 ; i <n ; i + + ) scanf ( " %d " , & a [ i ] ) ; printf ( " enter element to search\n  " ) ; scanf ( " %d " , & t ) ; if ( binSearch ( a , 0 , n-1 , t ) ) printf ( " \n  %d found at position %d\n  " , t , binSearch ( a , 0 , n-1 , t ) ) ; else printf ( " \n  %d not found\n  " , t ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void print ( int * a , int n ) { printf ( " printing ........\n  " ) ; for ( int i = 0 ; i <n ; i + + ) printf ( " %d " , a [ i ] ) ; printf ( " \n  " ) ; } int * cyclicallyPermute ( int * a , int n ) { int temp = a [ 0 ] ; for ( int i = 0 ; i <n ; i + + ) { if ( i = = n-1 ) a [ i ] = temp ; else a [ i ] = a [ i + 1 ] ; } return a ; } int main ( ) { int n ; printf ( " enter array length , n : " ) ; scanf ( " %d " , & n ) ; int * a = ( int * ) ( malloc ( sizeof ( int ) * n ) ) ; printf ( " enter elements : \n  " ) ; for ( int i = 0 ; i <n ; i + + ) scanf ( " %d " , & a [ i ] ) ; printf ( " array before permutation\n  " ) ; print ( a , n ) ; a = cyclicallyPermute ( a , n ) ; printf ( " array after permutation\n  " ) ; print ( a , n ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <limits.h> void findTwoMin ( int * a , int n ) { int min = a [ 0 ] ; int sec_min = INT_MAX , temp = 0 ; for ( int i = 0 ; i <n ; i + + ) { if ( a [ i ] <min ) { sec_min = min ; min = a [ i ] ; } else if ( a [ i ] < sec_min & & a [ i ] > min ) sec_min = a [ i ] ; } if ( sec_min = = INT_MAX ) printf ( " only one smallest element : %d " , min ) ; else printf ( " First smallest element : %d & second smallest element : %d " , min , sec_min ) ; } int main ( ) { int n ; printf ( " enter no of elements\n  " ) ; scanf ( " %d " , & n ) ; int * a = ( int * ) malloc ( sizeof ( int ) * n ) ; printf ( " enter the elements........\n  " ) ; for ( int i = 0 ; i <n ; i + + ) scanf ( " %d " , & a [ i ] ) ; findTwoMin ( a , n ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define LEN 10 void myMemSet ( void * str , char ch , size_t n ) { int i ; char * s = ( char * ) str ; for ( i = 0 ; i <n ; i + + ) s [ i ] = ch ; } int main ( void ) { char arr [ LEN ] ; int loop ; printf ( " Array elements are ( before myMemSet ( ) ) : \n  " ) ; for ( loop = 0 ; loop <LEN ; loop + + ) printf ( " %d " , arr [ loop ] ) ; printf ( " \n  " ) ; myMemSet ( arr , 0 , LEN ) ; printf ( " Array elements are ( after myMemSet ( ) ) : \n  " ) ; for ( loop = 0 ; loop <LEN ; loop + + ) printf ( " %d " , arr [ loop ] ) ; printf ( " \n  " ) ; myMemSet ( arr , -1 , 3 ) ; myMemSet ( arr + 3 , -2 , 3 ) ; myMemSet ( arr + 6 , -3 , 3 ) ; printf ( " Array elements are ( after myMemSet ( ) ) : \n  " ) ; for ( loop = 0 ; loop <LEN ; loop + + ) printf ( " %d " , arr [ loop ] ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define LEN 10 int main ( void ) { char arr [ LEN ] ; int loop ; printf ( " Array elements are ( before memset ( ) ) : \n  " ) ; for ( loop = 0 ; loop <LEN ; loop + + ) printf ( " %d " , arr [ loop ] ) ; printf ( " \n  " ) ; memset ( arr , 0 , LEN ) ; printf ( " Array elements are ( after memset ( ) ) : \n  " ) ; for ( loop = 0 ; loop <LEN ; loop + + ) printf ( " %d " , arr [ loop ] ) ; printf ( " \n  " ) ; memset ( arr , -1 , 3 ) ; memset ( arr + 3 , -2 , 3 ) ; memset ( arr + 6 , -3 , 3 ) ; printf ( " Array elements are ( after memset ( ) ) : \n  " ) ; for ( loop = 0 ; loop <LEN ; loop + + ) printf ( " %d " , arr [ loop ] ) ; printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_CHAR 50 void myMemCpy ( void * target , void * source , size_t n ) { int i ; char * t = ( char * ) target ; char * s = ( char * ) source ; for ( i = 0 ; i <n ; i + + ) t [ i ] = s [ i ] ; } int main ( ) { char str1 [ MAX_CHAR ] = " Hello Wold! " ; char str2 [ MAX_CHAR ] = " Nothing is impossible " ; printf ( " Before copying...\n  " ) ; printf ( " str1 : %s\n  " , str1 ) ; printf ( " str2 : %s\n  " , str2 ) ; myMemCpy ( str1 , str2 , strlen ( str2 ) ) ; printf ( " After copying...\n  " ) ; printf ( " str1 : %s\n  " , str1 ) ; printf ( " str2 : %s\n  " , str2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAXLEN 11 void printArray ( unsigned char str [ ] , int length ) { int i ; for ( i = 0 ; i <length ; i + + ) printf ( " %02X " , str [ i ] ) ; printf ( " \n  " ) ; } void myMemCpy ( void * target , void * source , size_t n ) { int i ; char * t = ( char * ) target ; char * s = ( char * ) source ; for ( i = 0 ; i <n ; i + + ) t [ i ] = s [ i ] ; } int main ( ) { unsigned char arr1 [ MAXLEN ] = { 0x10 , 0x20 , 0x30 , 0x40 , 0x50 , 0x60 , 0x70 , 0x80 , 0x90 , 0x95 } ; unsigned char arr2 [ MAXLEN ] = { 0 } ; printf ( " Before copying...\n  " ) ; printf ( " arr1 : " ) ; printArray ( arr1 , strlen ( arr1 ) ) ; printf ( " arr2 : " ) ; printArray ( arr2 , strlen ( arr2 ) ) ; myMemCpy ( arr2 , arr1 , 5 ) ; printf ( " After copying...\n  " ) ; printf ( " arr1 : " ) ; printArray ( arr1 , strlen ( arr1 ) ) ; printf ( " arr2 : " ) ; printArray ( arr2 , strlen ( arr2 ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_CHAR 50 int main ( void ) { char str1 [ MAX_CHAR ] = " Hello World! " ; char str2 [ MAX_CHAR ] = " Nothing is impossible " ; printf ( " Before copying...\n  " ) ; printf ( " str1 : %s\n  " , str1 ) ; printf ( " str2 : %s\n  " , str2 ) ; memcpy ( str1 , str2 , strlen ( str2 ) ) ; printf ( " After copying...\n  " ) ; printf ( " str1 : %s\n  " , str1 ) ; printf ( " str2 : %s\n  " , str2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAXLEN 11 void printArray ( unsigned char str [ ] , int length ) { int i ; for ( i = 0 ; i <length ; i + + ) printf ( " %02X " , str [ i ] ) ; printf ( " \n  " ) ; } int main ( void ) { unsigned char arr1 [ MAXLEN ] = { 0x10 , 0x20 , 0x30 , 0x40 , 0x50 , 0x60 , 0x70 , 0x80 , 0x90 , 0x95 } ; unsigned char arr2 [ MAXLEN ] = { 0 } ; printf ( " Before copying...\n  " ) ; printf ( " arr1 : " ) ; printArray ( arr1 , strlen ( arr1 ) ) ; printf ( " arr2 : " ) ; printArray ( arr2 , strlen ( arr2 ) ) ; memcpy ( arr2 , arr1 , 5 ) ; printf ( " After copying...\n  " ) ; printf ( " arr1 : " ) ; printArray ( arr1 , strlen ( arr1 ) ) ; printf ( " arr2 : " ) ; printArray ( arr2 , strlen ( arr2 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello world\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a = 'H' , b = 'e' , c = 'l' , d = 'o' ; char e = 'w' , f = 'r' , g = 'd' ; printf ( " %c %c %c %c %c %c %c %c %c %c " , a , b , c , c , d , e , d , f , c , g ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = { 'H' , 'e' , 'l' , 'l' , 'o' , ' ' , 'w' , 'o' , 'r' , 'l' , 'd' , '\0' } ; printf ( " %s\n  " , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c , n ; printf ( " How many times you want to display it?\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) printf ( " Hello world!\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { while ( 1 )
#include <stdio.h> int main ( ) { int a ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & a ) ; printf ( " The integer is %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 100 ; c + + ) printf ( " %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char n [ 1000 ] ; printf ( " Input an integer\n  " ) ; scanf ( " %s " , n ) ; printf ( " %s " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two numbers to add\n  " ) ; scanf ( " %d %d " , & a , & b ) ; c = a + b ; printf ( " Sum of the numbers = %d\n  " , c ) ; return 0 ; }
#include <stdio.h> main ( ) { int a = 1 , b = 2 ; a = a + b ; printf ( " Sum of a and b = %d\n  " , a ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; char ch ; while ( 1 ) { printf ( " Inut two integers\n  " ) ; scanf ( " %d %d " , & a , & b ) ; getchar ( ) ; c = a + b ; printf ( " ( %d ) + ( %d ) = ( %d ) \n  " , a , b , c ) ; printf ( " Do you wish to add more numbers ( y / n ) \n  " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) continue ; else break ; } return 0 ; }
#include <stdio.h> long addition ( long , long ) ; main ( ) { long first , second , sum ; scanf ( " %ld %ld " , & first , & second ) ; sum = addition ( first , second ) ; printf ( " %ld\n  " , sum ) ; return 0 ; } long addition ( long a , long b ) { long result ; result = a + b ; return result ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( n %2 = = 0 ) printf ( " Even\n  " ) ; else printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( n & 1 = = 1 ) printf ( " Odd\n  " ) ; else printf ( " Even\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; n %2 = = 0 ? printf ( " Even\n  " ) : printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; if ( ( n / 2 ) * 2 = = n ) printf ( " Even\n  " ) ; else printf ( " Odd\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int first , second , add , subtract , multiply ; float divide ; printf ( " Enter two integers\n  " ) ; scanf ( " %d %d " , & first , & second ) ; add = first + second ; subtract = first - second ; multiply = first * second ; divide = first / ( float ) second ;
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter a character\n  " ) ; scanf ( " %c " , & ch ) ;
#include <stdio.h> int main ( ) { char ch ; printf ( " Input a character\n  " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : case 'A' : case 'e' : case 'E' : case 'i' : case 'I' : case 'o' : case 'O' : case 'u' : case 'U' : printf ( " %c is a vowel.\n  " , ch ) ; break ; default : printf ( " %c isn't a vowel.\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Input a character\n  " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { if ( ch = = 'a' || ch = = 'A' || ch = = 'e' || ch = = 'E' || ch = = 'i' || ch = = 'I' || ch = = 'o' || ch = = 'O' || ch = = 'u' || ch = = 'U' ) printf ( " %c is a vowel.\n  " , ch ) ; else printf ( " %c is a consonant.\n  " , ch ) ; } else printf ( " %c is neither a vowel nor a consonant.\n  " , ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter a year to check if it is a leap year\n  " ) ; scanf ( " %d " , & year ) ; if ( year %400 = = 0 )
#include <stdio.h> int main ( ) { int n , t , sum = 0 , remainder ; printf ( " Enter an integer\n  " ) ; scanf ( " %d " , & n ) ; t = n ; while ( t ! = 0 ) { remainder = t % 10 ; sum = sum + remainder ; t = t / 10 ; } printf ( " Sum of digits of %d = %d\n  " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c , sum , t ; char n [ 1000 ] ; printf ( " Input an integer\n  " ) ; scanf ( " %s " , n ) ; sum = c = 0 ; while ( n [ c ] ! = '\0' ) { t = n [ c ] - '0' ;
#include <stdio.h> int add_digits ( int ) ; int main ( ) { int n , result ; scanf ( " %d " , & n ) ; result = add_digits ( n ) ; printf ( " %d\n  " , result ) ; return 0 ; } int add_digits ( int n ) { static int sum = 0 ; if ( n = = 0 ) { return 0 ; } sum = n %10 + add_digits ( n / 10 ) ; return sum ; }
#include <stdio.h> int main ( ) { int c , n , fact = 1 ; printf ( " Enter a number to calculate its factorial\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) fact = fact * c ; printf ( " Factorial of %d = %d\n  " , n , fact ) ; return 0 ; }
#include <stdio.h> long factorial ( int ) ; int main ( ) { int n ; long f ; printf ( " Enter an integer to find its factorial\n  " ) ; scanf ( " %d " , & n ) ; if ( n < 0 ) printf ( " Factorial of negative integers isn't defined.\n  " ) ; else { f = factorial ( n ) ; printf ( " %d! = %ld\n  " , n , f ) ; } return 0 ; } long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; }
#include <stdio.h> long factorial ( int ) ; int main ( ) { int number ; long fact = 1 ; printf ( " Enter a number to calculate its factorial\n  " ) ; scanf ( " %d " , & number ) ; printf ( " %d! = %ld\n  " , number , factorial ( number ) ) ; return 0 ; } long factorial ( int n ) { int c ; long result = 1 ; for ( c = 1 ; c < = n ; c + + ) result = result * c ; return result ; }
#include <stdio.h> int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( " Enter two integers\n  " ) ; scanf ( " %d %d " , & x , & y ) ; a = x ; b = y ; while ( b ! = 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( " Greatest common divisor of %d and %d = %d\n  " , x , y , gcd ) ; printf ( " Least common multiple of %d and %d = %d\n  " , x , y , lcm ) ; return 0 ; }
#include <stdio.h> long gcd ( long , long ) ; int main ( ) { long x , y , hcf , lcm ; printf ( " Enter two integers\n  " ) ; scanf ( " %ld %ld " , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( " Greatest common divisor of %ld and %ld = %ld\n  " , x , y , hcf ) ; printf ( " Least common multiple of %ld and %ld = %ld\n  " , x , y , lcm ) ; return 0 ; } long gcd ( long a , long b ) { if ( b = = 0 ) { return a ; } else { return gcd ( b , a % b ) ; } }
#include <stdio.h> long gcd ( long , long ) ; int main ( ) { long x , y , hcf , lcm ; printf ( " Enter two integers\n  " ) ; scanf ( " %ld %ld " , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( " Greatest common divisor of %ld and %ld = %ld\n  " , x , y , hcf ) ; printf ( " Least common multiple of %ld and %ld = %ld\n  " , x , y , lcm ) ; return 0 ; } long gcd ( long x , long y ) { if ( x = = 0 ) { return y ; } while ( y ! = 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }
#include <stdio.h> int main ( ) { int n , c , k ; printf ( " Enter an integer in decimal number system\n  " ) ; scanf ( " %d " , & n ) ; printf ( " %d in binary number system is : \n  " , n ) ; for ( c = 31 ; c > = 0 ; c-- ) { k = n > > c ; if ( k & 1 ) printf ( " 1 " ) ; else printf ( " 0 " ) ; } printf ( " \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> char * decimal_to_binary ( int ) ; main ( ) { int n , c , k ; char * pointer ; printf ( " Enter an integer in decimal number system\n  " ) ; scanf ( " %d " , & n ) ; pointer = decimal_to_binary ( n ) ; printf ( " Binary string of %d is : %s\n  " , n , t ) ; free ( pointer ) ; return 0 ; } char * decimal_to_binary ( int n ) { int c , d , count ; char * pointer ; count = 0 ; pointer = ( char * ) malloc ( 32 + 1 ) ; if ( pointer = = NULL ) exit ( EXIT_FAILURE ) ; for ( c = 31 ; c > = 0 ; c-- ) { d = n > > c ; if ( d & 1 ) * ( pointer + count ) = 1 + '0' ; else * ( pointer + count ) = 0 + '0' ; count + + ; } * ( pointer + count ) = '\0' ; return pointer ; }
#include <stdio.h> long factorial ( int ) ; long find_ncr ( int , int ) ; long find_npr ( int , int ) ; int main ( ) { int n , r ; long ncr , npr ; printf ( " Enter the value of n and r\n  " ) ; scanf ( " %d %d " , & n , & r ) ; ncr = find_ncr ( n , r ) ; npr = find_npr ( n , r ) ; printf ( " %dC %d = %ld\n  " , n , r , ncr ) ; printf ( " %dP %d = %ld\n  " , n , r , npr ) ; return 0 ; } long find_ncr ( int n , int r ) { long result ; result = factorial ( n ) / ( factorial ( r ) * factorial ( n-r ) ) ; return result ; } long find_npr ( int n , int r ) { long result ; result = factorial ( n ) / factorial ( n-r ) ; return result ; } long factorial ( int n ) { int c ; long result = 1 ; for ( c = 1 ; c < = n ; c + + ) result = result * c ; return result ; }
#include <stdio.h> #define ll long long void find_ncr_npr ( int , int , ll * , ll * ) ; ll find_npr ( int , int ) ; ll factorial ( int ) ; int main ( ) { int n , r ; ll ncr , npr ; printf ( " Input n and r\n  " ) ; scanf ( " %d %d " , & n , & r ) ; find_ncr_npr ( n , r , & npr , & ncr ) ; printf ( " %dC %d = %lld\n  " , n , r , ncr ) ; printf ( " %dP %d = %lld\n  " , n , r , npr ) ; return 0 ; } void find_ncr_npr ( int n , int r , ll * npr , ll * ncr ) { * npr = find_npr ( n , r ) ; * ncr = * npr / factorial ( r ) ; } ll find_npr ( int n , int r ) { ll result = 1 ; int c = 1 ; while ( c < = r ) { result = result * ( n - r + c ) ; c + + ; } return result ; } ll factorial ( int n ) { int c ; ll result = 1 ; for ( c = 1 ; c < = n ; c + + ) result = result * c ; return result ; }
#include <stdio.h> int main ( ) { int n , sum = 0 , c , value ; printf ( " How many numbers you want to add?\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n  " , n ) ; for ( c = 1 ; c < = n ; c + + ) { scanf ( " %d " , & value ) ; sum = sum + value ; } printf ( " Sum of the integers = %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , sum = 0 , c , array [ 100 ] ; scanf ( " %d " , & n ) ; for ( c = 0 ; c < n ; c + + ) { scanf ( " %d " , & array [ c ] ) ; sum = sum + array [ c ] ; } printf ( " Sum = %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> long calculate_sum ( int [ ] , int ) ; int main ( ) { int n , c , array [ 100 ] ; long result ; scanf ( " %d " , & n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; result = calculate_sum ( array , n ) ; printf ( " Sum = %ld\n  " , result ) ; return 0 ; } long calculate_sum ( int a [ ] , int n ) { static long sum = 0 ; if ( n = = 0 ) return sum ; sum = sum + a [ n-1 ] ; return calculate_sum ( a , --n ) ; }
#include <stdio.h> int main ( ) { int x , y , t ; printf ( " Enter two integers\n  " ) ; scanf ( " %d %d " , & x , & y ) ; printf ( " Before Swapping\n First integer = %d\n Second integer = %d\n  " , x , y ) ; t = x ; x = y ; y = t ; printf ( " After Swapping\n First integer = %d\n Second integer = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " Input two integers ( a & b ) to swap\n  " ) ; scanf ( " %d %d " , & a , & b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " a = %d\n b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> void swap ( int * , int * ) ;
#include <stdio.h> int main ( ) { int x , y , * a , * b , temp ; printf ( " Enter the value of x and y\n  " ) ; scanf ( " %d %d " , & x , & y ) ; printf ( " Before Swapping\n x = %d\n y = %d\n  " , x , y ) ; a = & x ; b = & y ; temp = * b ; * b = * a ; * a = temp ; printf ( " After Swapping\n x = %d\n y = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x , y ; scanf ( " %d %d " , & x , & y ) ; printf ( " x = %d\n y = %d\n  " , x , y ) ; x = x ^ y ; y = x ^ y ; x = x ^ y ; printf ( " x = %d\n y = %d\n  " , x , y ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , reverse = 0 ; printf ( " Enter a number to reverse\n  " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { reverse = reverse * 10 ; reverse = reverse + n %10 ; n = n / 10 ; } printf ( " Reverse of entered number is = %d\n  " , reverse ) ; return 0 ; }
#include <stdio.h> long reverse ( long ) ; int main ( ) { long n , r ; scanf ( " %ld " , & n ) ; r = reverse ( n ) ; printf ( " %ld\n  " , r ) ; return 0 ; } long reverse ( long n ) { static long r = 0 ; if ( n = = 0 ) return 0 ; r = r * 10 ; r = r + n % 10 ; reverse ( n / 10 ) ; return r ; }
#include <stdio.h> int main ( ) { int n , reverse = 0 , t ; printf ( " Enter a number to check if it is a palindrome or not\n  " ) ; scanf ( " %d " , & n ) ; t = n ; while ( t ! = 0 ) { reverse = reverse * 10 ; reverse = reverse + t %10 ; t = t / 10 ; } if ( n = = reverse ) printf ( " %d is a palindrome number.\n  " , n ) ; else printf ( " %d isn't a palindrome number.\n  " , n ) ; return 0 ; }
#include <stdio.h> int main ( ) { int row , c , n , s ; printf ( " Enter the number of rows in pyramid of stars you wish to see\n  " ) ; scanf ( " %d " , & n ) ; s = n ; for ( row = 1 ; row < = n ; row + + )
#include <stdio.h> int main ( ) { int n , c , k ; printf ( " Enter number of rows\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 1 ; c < = n ; c + + ) { for ( k = 1 ; k < = c ; k + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , c , k , space , count = 1 ; printf ( " Enter number of rows\n  " ) ; scanf ( " %d " , & n ) ; space = n ; for ( c = 1 ; c < = n ; c + + ) { for ( k = 1 ; k < space ; k + + ) printf ( " " ) ; for ( k = 1 ; k < = c ; k + + ) { printf ( " * " ) ; if ( c > 1 & & count < c ) { printf ( " A " ) ; count + + ; } } printf ( " \n  " ) ; space-- ; count = 1 ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , c , row , num = 1 , space ; scanf ( " %d " , & n ) ; space = n - 1 ; for ( row = 1 ; row < = n ; row + + ) { num = row ; for ( c = 1 ; c < = space ; c + + ) printf ( " " ) ; space-- ; for ( c = 1 ; c < = row ; c + + ) { printf ( " %d " , num ) ; num + + ; } num = num - 2 ; for ( c = 1 ; c < row ; c + + ) { printf ( " %d " , num ) ; num-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , c , k , space = 1 ; printf ( " Enter number of rows\n  " ) ; scanf ( " %d " , & n ) ; space = n - 1 ; for ( k = 1 ; k < = n ; k + + ) { for ( c = 1 ; c < = space ; c + + ) printf ( " " ) ; space-- ; for ( c = 1 ; c < = 2 * k-1 ; c + + ) printf ( " * " ) ; printf ( " \n  " ) ; } space = 1 ; for ( k = 1 ; k < = n - 1 ; k + + ) { for ( c = 1 ; c < = space ; c + + ) printf ( " " ) ; space + + ; for ( c = 1 ; c < = 2 * ( n-k ) -1 ; c + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> void print ( int ) ; int main ( ) { int rows ; scanf ( " %d " , & rows ) ; print ( rows ) ; return 0 ; } void print ( int r ) { int c , space ; static int stars = -1 ; if ( r < = 0 ) return ; space = r - 1 ; stars + = 2 ; for ( c = 0 ; c < space ; c + + ) printf ( " " ) ; for ( c = 0 ; c < stars ; c + + ) printf ( " * " ) ; printf ( " \n  " ) ; print ( --r ) ; space = r + 1 ; stars - = 2 ; for ( c = 0 ; c < space ; c + + ) printf ( " " ) ; for ( c = 0 ; c < stars ; c + + ) printf ( " * " ) ; printf ( " \n  " ) ; }
#include <stdio.h> int main ( ) { int n , i = 3 , count , c ; printf ( " Enter the number of prime numbers required\n  " ) ; scanf ( " %d " , & n ) ; if ( n > = 1 ) { printf ( " First %d prime numbers are : \n  " , n ) ; printf ( " 2\n  " ) ; } for ( count = 2 ; count < = n ; ) { for ( c = 2 ; c < = i - 1 ; c + + ) { if ( i %c = = 0 ) break ; } if ( c = = i ) { printf ( " %d\n  " , i ) ; count + + ; } i + + ; } return 0 ; }
#include <stdio.h> main ( ) { int n , c = 2 ; printf ( " Enter a number to check if it is prime\n  " ) ; scanf ( " %d " , & n ) ; for ( c = 2 ; c < = n - 1 ; c + + ) { if ( n %c = = 0 ) { printf ( " %d isn't prime.\n  " , n ) ; break ; } } if ( c = = n ) printf ( " %d is prime.\n  " , n ) ; return 0 ; }
#include <stdio.h> int check_prime ( int ) ; main ( ) { int n , result ; printf ( " Enter an integer to check whether it is prime or not.\n  " ) ; scanf ( " %d " , & n ) ; result = check_prime ( n ) ; if ( result = = 1 ) printf ( " %d is prime.\n  " , n ) ; else printf ( " %d isn't prime.\n  " , n ) ; return 0 ; } int check_prime ( int a ) { int c ; for ( c = 2 ; c < = a - 1 ; c + + ) { if ( a %c = = 0 ) return 0 ; } if ( c = = a ) return 1 ; }
#include <stdio.h> int power ( int , int ) ; int main ( ) { int n , sum = 0 , temp , remainder , digits = 0 ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & n ) ; temp = n ;
#include <stdio.h> int check_armstrong ( long long ) ; long long power ( int , int ) ; int main ( ) { long long n ; printf ( " Input a number\n  " ) ; scanf ( " %lld " , & n ) ; if ( check_armstrong ( n ) = = 1 ) printf ( " %lld is an armstrong number.\n  " , n ) ; else printf ( " %lld isn't an armstrong number.\n  " , n ) ; return 0 ; } int check_armstrong ( long long n ) { long long sum = 0 , temp ; int remainder , digits = 0 ; temp = n ; while ( temp ! = 0 ) { digits + + ; temp = temp / 10 ; } temp = n ; while ( temp ! = 0 ) { remainder = temp %10 ; sum = sum + power ( remainder , digits ) ; temp = temp / 10 ; } if ( n = = sum ) return 1 ; else return 0 ; } long long power ( int n , int r ) { int c ; long long p = 1 ; for ( c = 1 ; c < = r ; c + + ) p = p * n ; return p ; }
#include <stdio.h> int check_armstrong ( int ) ; int power ( int , int ) ; int main ( ) { int c , a , b ; printf ( " Input two integers\n  " ) ; scanf ( " %d %d " , & a , & b ) ; for ( c = a ; c < = b ; c + + ) { if ( check_armstrong ( c ) = = 1 ) printf ( " %d\n  " , c ) ; } return 0 ; } int check_armstrong ( int n ) { long long sum = 0 , temp ; int remainder , digits = 0 ; temp = n ; while ( temp ! = 0 ) { digits + + ; temp = temp / 10 ; } temp = n ; while ( temp ! = 0 ) { remainder = temp %10 ; sum = sum + power ( remainder , digits ) ; temp = temp / 10 ; } if ( n = = sum ) return 1 ; else return 0 ; } int power ( int n , int r ) { int c , p = 1 ; for ( c = 1 ; c < = r ; c + + ) p = p * n ; return p ; }
#include <stdio.h> int main ( ) { int n , first = 0 , second = 1 , next , c ; printf ( " Enter the number of terms\n  " ) ; scanf ( " %d " , & n ) ; printf ( " First %d terms of Fibonacci series are : \n  " , n ) ; for ( c = 0 ; c < n ; c + + ) { if ( c < = 1 ) next = c ; else { next = first + second ; first = second ; second = next ; } printf ( " %d\n  " , next ) ; } return 0 ; }
#include <stdio.h> int f ( int ) ; int main ( ) { int n , i = 0 , c ; scanf ( " %d " , & n ) ; printf ( " Fibonacci series terms are : \n  " ) ; for ( c = 1 ; c < = n ; c + + ) { printf ( " %d\n  " , f ( i ) ) ; i + + ; } return 0 ; } int f ( int n ) { if ( n = = 0 || n = = 1 ) return n ; else return ( f ( n-1 ) + f ( n-2 ) ) ; }
#include <stdio.h> int main ( ) { int n , i , c , a = 1 ; printf ( " Enter the number of rows of Floyd's triangle to print\n  " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( c = 1 ; c < = i ; c + + ) { printf ( " %d " , a ) ; a + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> void print_floyd ( int ) ; int main ( ) { int n , i , c , a = 1 ; printf ( " Input number of rows of Floyd's triangle to print\n  " ) ; scanf ( " %d " , & n ) ; print_floyd ( n ) ; return 0 ; } void print_floyd ( int n ) { static int row = 1 , c = 1 ; int d ; if ( n < = 0 ) return ; for ( d = 1 ; d < = row ; + + d ) printf ( " %d " , c + + ) ; printf ( " \n  " ) ; row + + ; print_floyd ( --n ) ; }
#include <stdio.h> long factorial ( int ) ; int main ( ) { int i , n , c ; printf ( " Enter the number of rows you wish to see in pascal triangle\n  " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) { for ( c = 0 ; c < = ( n - i - 2 ) ; c + + ) printf ( " " ) ; for ( c = 0 ; c < = i ; c + + ) printf ( " %ld " , factorial ( i ) / ( factorial ( c ) * factorial ( i-c ) ) ) ; printf ( " \n  " ) ; } return 0 ; } long factorial ( int n ) { int c ; long result = 1 ; for ( c = 1 ; c < = n ; c + + ) result = result * c ; return result ; }
#include <stdio.h> int main ( ) { int first , second , * p , * q , sum ; printf ( " Enter two integers to add\n  " ) ; scanf ( " %d %d " , & first , & second ) ; p = & first ; q = & second ; sum = * p + * q ; printf ( " Sum of the numbers = %d\n  " , sum ) ; return 0 ; }
#include <stdio.h> long add ( long * , long * ) ; int main ( ) { long first , second , * p , * q , sum ; printf ( " Input two integers to add\n  " ) ; scanf ( " %ld %ld " , & first , & second ) ; sum = add ( & first , & second ) ; printf ( " ( %ld ) + ( %ld ) = ( %ld ) \n  " , first , second , sum ) ; return 0 ; } long add ( long * x , long * y ) { long sum ; sum = * x + * y ; return sum ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , maximum , size , c , location = 1 ; printf ( " Enter the number of elements in array\n  " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d integers\n  " , size ) ; for ( c = 0 ; c < size ; c + + ) scanf ( " %d " , & array [ c ] ) ; maximum = array [ 0 ] ; for ( c = 1 ; c < size ; c + + ) { if ( array [ c ] > maximum ) { maximum = array [ c ] ; location = c + 1 ; } } printf ( " Maximum element is present at location %d and it's value is %d.\n  " , location , maximum ) ; return 0 ; }
#include <stdio.h> int find_maximum ( int [ ] , int ) ; int main ( ) { int c , array [ 100 ] , size , location , maximum ; printf ( " Input number of elements in array\n  " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d integers\n  " , size ) ; for ( c = 0 ; c < size ; c + + ) scanf ( " %d " , & array [ c ] ) ; location = find_maximum ( array , size ) ; maximum = array [ location ] ; printf ( " Maximum element location = %d and value = %d.\n  " , location + 1 , maximum ) ; return 0 ; } int find_maximum ( int a [ ] , int n ) { int c , max , index ; max = a [ 0 ] ; index = 0 ; for ( c = 1 ; c < n ; c + + ) { if ( a [ c ] > max ) { index = c ; max = a [ c ] ; } } return index ; }
#include <stdio.h> int main ( ) { long array [ 100 ] , * maximum , size , c , location = 1 ; printf ( " Enter the number of elements in array\n  " ) ; scanf ( " %ld " , & size ) ; printf ( " Enter %ld integers\n  " , size ) ; for ( c = 0 ; c < size ; c + + ) scanf ( " %ld " , & array [ c ] ) ; maximum = array ; * maximum = * array ; for ( c = 1 ; c < size ; c + + ) { if ( * ( array + c ) > * maximum ) { * maximum = * ( array + c ) ; location = c + 1 ; } } printf ( " Maximum element found at location %ld and it's value is %ld.\n  " , location , * maximum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , minimum , size , c , location = 1 ; printf ( " Enter number of elements in array\n  " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d integers\n  " , size ) ; for ( c = 0 ; c < size ; c + + ) scanf ( " %d " , & array [ c ] ) ; minimum = array [ 0 ] ; for ( c = 1 ; c < size ; c + + ) { if ( array [ c ] < minimum ) { minimum = array [ c ] ; location = c + 1 ; } } printf ( " Minimum element is present at location %d and it's value is %d.\n  " , location , minimum ) ; return 0 ; }
#include <stdio.h> int find_minimum ( int [ ] , int ) ; int main ( ) { int c , array [ 100 ] , size , location , minimum ; printf ( " Input number of elements in array\n  " ) ; scanf ( " %d " , & size ) ; printf ( " Input %d integers\n  " , size ) ; for ( c = 0 ; c < size ; c + + ) scanf ( " %d " , & array [ c ] ) ; location = find_minimum ( array , size ) ; minimum = array [ location ] ; printf ( " Minimum element location = %d and value = %d.\n  " , location + 1 , minimum ) ; return 0 ; } int find_minimum ( int a [ ] , int n ) { int c , min , index ; min = a [ 0 ] ; index = 0 ; for ( c = 1 ; c < n ; c + + ) { if ( a [ c ] < min ) { index = c ; min = a [ c ] ; } } return index ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , * minimum , size , c , location = 1 ; printf ( " Enter the number of elements in array\n  " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d integers\n  " , size ) ; for ( c = 0 ; c < size ; c + + ) scanf ( " %d " , & array [ c ] ) ; minimum = array ; * minimum = * array ; for ( c = 1 ; c < size ; c + + ) { if ( * ( array + c ) < * minimum ) { * minimum = * ( array + c ) ; location = c + 1 ; } } printf ( " Minimum element found at location %d and it's value is %d.\n  " , location , * minimum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , search , c , n ; printf ( " Enter number of elements in array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integer ( s ) \n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " Enter a number to search\n  " ) ; scanf ( " %d " , & search ) ; for ( c = 0 ; c < n ; c + + ) { if ( array [ c ] = = search ) { printf ( " %d is present at location %d.\n  " , search , c + 1 ) ; break ; } } if ( c = = n ) printf ( " %d isn't present in the array.\n  " , search ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , search , c , n , count = 0 ; printf ( " Enter number of elements in array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d numbers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " Enter a number to search\n  " ) ; scanf ( " %d " , & search ) ; for ( c = 0 ; c < n ; c + + ) { if ( array [ c ] = = search ) { printf ( " %d is present at location %d.\n  " , search , c + 1 ) ; count + + ; } } if ( count = = 0 ) printf ( " %d isn't present in the array.\n  " , search ) ; else printf ( " %d is present %d times in the array.\n  " , search , count ) ; return 0 ; }
#include <stdio.h> long linear_search ( long [ ] , long , long ) ; int main ( ) { long array [ 100 ] , search , c , n , position ; printf ( " Input number of elements in array\n  " ) ; scanf ( " %ld " , & n ) ; printf ( " Input %d numbers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %ld " , & array [ c ] ) ; printf ( " Input a number to search\n  " ) ; scanf ( " %ld " , & search ) ; position = linear_search ( array , n , search ) ; if ( position = = -1 ) printf ( " %d isn't present in the array.\n  " , search ) ; else printf ( " %d is present at location %d.\n  " , search , position + 1 ) ; return 0 ; } long linear_search ( long a [ ] , long n , long find ) { long c ; for ( c = 0 ; c < n ; c + + ) { if ( a [ c ] = = find ) return c ; } return -1 ; }
#include <stdio.h> int main ( ) { int c , first , last , middle , n , search , array [ 100 ] ; printf ( " Enter number of elements\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " Enter value to find\n  " ) ; scanf ( " %d " , & search ) ; first = 0 ; last = n - 1 ; middle = ( first + last ) / 2 ; while ( first < = last ) { if ( array [ middle ] < search ) first = middle + 1 ; else if ( array [ middle ] = = search ) { printf ( " %d found at location %d.\n  " , search , middle + 1 ) ; break ; } else last = middle - 1 ; middle = ( first + last ) / 2 ; } if ( first > last ) printf ( " Not found! %d isn't present in the list.\n  " , search ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , c , d , a [ 100 ] , b [ 100 ] ; printf ( " Enter the number of elements in array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter array elements\n  " ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & a [ c ] ) ; for ( c = n - 1 , d = 0 ; c > = 0 ; c-- , d + + ) b [ d ] = a [ c ] ; for ( c = 0 ; c < n ; c + + ) a [ c ] = b [ c ] ; printf ( " Reverse array is\n  " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %d\n  " , a [ c ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , n , c , t , end ; scanf ( " %d " , & n ) ; end = n - 1 ; for ( c = 0 ; c < n ; c + + ) { scanf ( " %d " , & array [ c ] ) ; } for ( c = 0 ; c < n / 2 ; c + + ) { t = array [ c ] ; array [ c ] = array [ end ] ; array [ end ] = t ; end-- ; } printf ( " Reversed array elements are : \n  " ) ; for ( c = 0 ; c < n ; c + + ) { printf ( " %d\n  " , array [ c ] ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> void reverse_array ( int * , int ) ; int main ( ) { int n , c , * pointer ; scanf ( " %d " , & n ) ; pointer = ( int * ) malloc ( sizeof ( int ) * n ) ; if ( pointer = = NULL ) exit ( EXIT_FAILURE ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , ( pointer + c ) ) ; reverse_array ( pointer , n ) ; printf ( " Original array on reversal is\n  " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %d\n  " , * ( pointer + c ) ) ; free ( pointer ) ; return 0 ; } void reverse_array ( int * pointer , int n ) { int * s , c , d ; s = ( int * ) malloc ( sizeof ( int ) * n ) ; if ( s = = NULL ) exit ( EXIT_FAILURE ) ; for ( c = n - 1 , d = 0 ; c > = 0 ; c-- , d + + ) * ( s + d ) = * ( pointer + c ) ; for ( c = 0 ; c < n ; c + + ) * ( pointer + c ) = * ( s + c ) ; free ( s ) ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , position , c , n , value ; printf ( " Enter number of elements in array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " Enter the location where you wish to insert an element\n  " ) ; scanf ( " %d " , & position ) ; printf ( " Enter the value to insert\n  " ) ; scanf ( " %d " , & value ) ; for ( c = n - 1 ; c > = position - 1 ; c-- ) array [ c + 1 ] = array [ c ] ; array [ position-1 ] = value ; printf ( " Resultant array is\n  " ) ; for ( c = 0 ; c < = n ; c + + ) printf ( " %d\n  " , array [ c ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , position , c , n ; printf ( " Enter number of elements in array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " Enter the location where you wish to delete element\n  " ) ; scanf ( " %d " , & position ) ; if ( position > = n + 1 ) printf ( " Deletion not possible.\n  " ) ; else { for ( c = position - 1 ; c < n - 1 ; c + + ) array [ c ] = array [ c + 1 ] ; printf ( " Resultant array : \n  " ) ; for ( c = 0 ; c < n - 1 ; c + + ) printf ( " %d\n  " , array [ c ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , n , c , d , swap ; printf ( " Enter number of elements\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; for ( c = 0 ; c < n - 1 ; c + + ) { for ( d = 0 ; d < n - c - 1 ; d + + ) { if ( array [ d ] > array [ d + 1 ] ) { swap = array [ d ] ; array [ d ] = array [ d + 1 ] ; array [ d + 1 ] = swap ; } } } printf ( " Sorted list in ascending order : \n  " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %d\n  " , array [ c ] ) ; return 0 ; }
#include <stdio.h> void bubble_sort ( long [ ] , long ) ; int main ( ) { long array [ 100 ] , n , c , d , swap ; printf ( " Enter number of elements\n  " ) ; scanf ( " %ld " , & n ) ; printf ( " Enter %ld integers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %ld " , & array [ c ] ) ; bubble_sort ( array , n ) ; printf ( " Sorted list in ascending order : \n  " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %ld\n  " , array [ c ] ) ; return 0 ; } void bubble_sort ( long list [ ] , long n ) { long c , d , t ; for ( c = 0 ; c < n - 1 ; c + + ) { for ( d = 0 ; d < n - c - 1 ; d + + ) { if ( list [ d ] > list [ d + 1 ] ) { t = list [ d ] ; list [ d ] = list [ d + 1 ] ; list [ d + 1 ] = t ; } } } }
#include <stdio.h> int main ( ) { int n , array [ 1000 ] , c , d , t ; printf ( " Enter number of elements\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; for ( c = 1 ; c < = n - 1 ; c + + ) { d = c ; while ( d > 0 & & array [ d-1 ] > array [ d ] ) { t = array [ d ] ; array [ d ] = array [ d-1 ] ; array [ d-1 ] = t ; d-- ; } } printf ( " Sorted list in ascending order : \n  " ) ; for ( c = 0 ; c < = n - 1 ; c + + ) { printf ( " %d\n  " , array [ c ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , n , c , d , position , swap ; printf ( " Enter number of elements\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; for ( c = 0 ; c < ( n - 1 ) ; c + + ) { position = c ; for ( d = c + 1 ; d < n ; d + + ) { if ( array [ position ] > array [ d ] ) position = d ; } if ( position ! = c ) { swap = array [ c ] ; array [ c ] = array [ position ] ; array [ position ] = swap ; } } printf ( " Sorted list in ascending order : \n  " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %d\n  " , array [ c ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int m , n , c , d , first [ 10 ] [ 10 ] , second [ 10 ] [ 10 ] , sum [ 10 ] [ 10 ] ; printf ( " Enter the number of rows and columns of matrix\n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the elements of first matrix\n  " ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) scanf ( " %d " , & first [ c ] [ d ] ) ; printf ( " Enter the elements of second matrix\n  " ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) scanf ( " %d " , & second [ c ] [ d ] ) ; printf ( " Sum of entered matrices : -\n  " ) ; for ( c = 0 ; c < m ; c + + ) { for ( d = 0 ; d < n ; d + + ) { sum [ c ] [ d ] = first [ c ] [ d ] + second [ c ] [ d ] ; printf ( " %d\t " , sum [ c ] [ d ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int m , n , c , d , first [ 10 ] [ 10 ] , second [ 10 ] [ 10 ] , difference [ 10 ] [ 10 ] ; printf ( " Enter the number of rows and columns of matrix\n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter the elements of first matrix\n  " ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) scanf ( " %d " , & first [ c ] [ d ] ) ; printf ( " Enter the elements of second matrix\n  " ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) scanf ( " %d " , & second [ c ] [ d ] ) ; printf ( " Difference of entered matrices : -\n  " ) ; for ( c = 0 ; c < m ; c + + ) { for ( d = 0 ; d < n ; d + + ) { difference [ c ] [ d ] = first [ c ] [ d ] - second [ c ] [ d ] ; printf ( " %d\t " , difference [ c ] [ d ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int m , n , c , d , matrix [ 10 ] [ 10 ] , transpose [ 10 ] [ 10 ] ; printf ( " Enter the number of rows and columns of matrix\n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter elements of the matrix\n  " ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) scanf ( " %d " , & matrix [ c ] [ d ] ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) transpose [ d ] [ c ] = matrix [ c ] [ d ] ; printf ( " Transpose of the matrix : \n  " ) ; for ( c = 0 ; c < n ; c + + ) { for ( d = 0 ; d < m ; d + + ) printf ( " %d\t " , transpose [ c ] [ d ] ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int m , n , p , q , c , d , k , sum = 0 ; int first [ 10 ] [ 10 ] , second [ 10 ] [ 10 ] , multiply [ 10 ] [ 10 ] ; printf ( " Enter number of rows and columns of first matrix\n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " Enter elements of first matrix\n  " ) ; for ( c = 0 ; c < m ; c + + ) for ( d = 0 ; d < n ; d + + ) scanf ( " %d " , & first [ c ] [ d ] ) ; printf ( " Enter number of rows and columns of second matrix\n  " ) ; scanf ( " %d %d " , & p , & q ) ; if ( n ! = p ) printf ( " The matrices can't be multiplied with each other.\n  " ) ; else { printf ( " Enter elements of second matrix\n  " ) ; for ( c = 0 ; c < p ; c + + ) for ( d = 0 ; d < q ; d + + ) scanf ( " %d " , & second [ c ] [ d ] ) ; for ( c = 0 ; c < m ; c + + ) { for ( d = 0 ; d < q ; d + + ) { for ( k = 0 ; k < p ; k + + ) { sum = sum + first [ c ] [ k ] * second [ k ] [ d ] ; } multiply [ c ] [ d ] = sum ; sum = 0 ; } } printf ( " Product of the matrices : \n  " ) ; for ( c = 0 ; c < m ; c + + ) { for ( d = 0 ; d < q ; d + + ) printf ( " %d\t " , multiply [ c ] [ d ] ) ; printf ( " \n  " ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { char z [ 100 ] = " I am learning C programming language. " ; printf ( " %s " , z ) ;
#include <stdio.h> int main ( ) { char array [ 100 ] ; printf ( " Enter a string\n  " ) ; scanf ( " %s " , array ) ; printf ( " Your string : %s\n  " , array ) ; return 0 ; }
#include <stdio.h> int main ( ) { char z [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( z ) ; printf ( " The string : %s\n  " , z ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 100 ] ; int c = 0 ; gets ( s ) ; while ( s [ c ] ! = '\0' ) { printf ( " %c " , s [ c ] ) ; c + + ; } return 0 ; }
#include <stdio.h> void print ( char * ) ; int main ( ) { char s [ 100 ] ; gets ( s ) ; print ( s ) ; return 0 ; } void print ( char * t ) { if ( * t = = '\0' ) return ; printf ( " %c " , * t ) ; print ( + + t ) ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] ; int length ; printf ( " Enter a string to calculate it's length\n  " ) ; gets ( a ) ; length = strlen ( a ) ; printf ( " Length of the string = %d\n  " , length ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] ; int c = 0 ; printf ( " Input a string\n  " ) ; gets ( s ) ; while ( s [ c ] ! = '\0' ) c + + ; printf ( " Length of the string : %d\n  " , c ) ; return 0 ; }
#include <stdio.h> int string_length ( char * ) ; int main ( ) { char s [ 100 ] ; gets ( s ) ; printf ( " Length = %d\n  " , string_length ( s ) ) ; return 0 ; } int string_length ( char * s ) { static int c = 0 ; while ( s [ c ] ! = '\0' ) { c + + ; string_length ( s + 1 ) ; } return c ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] , b [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( a ) ; printf ( " Enter a string\n  " ) ; gets ( b ) ; if ( strcmp ( a , b ) = = 0 ) printf ( " The strings are equal.\n  " ) ; else printf ( " The strings are not equal.\n  " ) ; return 0 ; }
#include <stdio.h> int compare_strings ( char [ ] , char [ ] ) ; int main ( ) { char a [ 1000 ] , b [ 1000 ] ; printf ( " Input a string\n  " ) ; gets ( a ) ; printf ( " Input a string\n  " ) ; gets ( b ) ; if ( compare_strings ( a , b ) = = 0 ) printf ( " Equal strings.\n  " ) ; else printf ( " Unequal strings.\n  " ) ; return 0 ; } int compare_strings ( char a [ ] , char b [ ] ) { int c = 0 ; while ( a [ c ] = = b [ c ] ) { if ( a [ c ] = = '\0' || b [ c ] = = '\0' ) break ; c + + ; } if ( a [ c ] = = '\0' & & b [ c ] = = '\0' ) return 0 ; else return -1 ; }
#include <stdio.h> int compare_string ( char * , char * ) ; int main ( ) { char first [ 1000 ] , second [ 1000 ] : int result ; printf ( " Input a string\n  " ) ; gets ( first ) ; printf ( " Input a string\n  " ) ; gets ( second ) ; result = compare_string ( first , second ) ; if ( result = = 0 ) printf ( " The strings are same.\n  " ) ; else printf ( " The strings are different.\n  " ) ; return 0 ; } int compare_string ( char * first , char * second ) { while ( * first = = * second ) { if ( * first = = '\0' || * second = = '\0' ) break ; first + + ; second + + ; } if ( * first = = '\0' & & * second = = '\0' ) return 0 ; else return -1 ; }
#include <stdio.h> #include <string.h> int main ( ) { char source [ 1000 ] , destination [ 1000 ] ; printf ( " Input a string\n  " ) ; gets ( source ) ; strcpy ( destination , source ) ; printf ( " Source string : %s\n  " , source ) ; printf ( " Destination string : %s\n  " , destination ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c = 0 ; char s [ 1000 ] , d [ 1000 ] = " What can I say about my programming skills? " ; printf ( " Before copying , the string : %s\n  " , d ) ; printf ( " Input a string to copy\n  " ) ; gets ( s ) ; while ( s [ c ] ! = '\0' ) { d [ c ] = s [ c ] ; c + + ; } d [ c ] = '\0' ; printf ( " After copying , the string : %s\n  " , d ) ; return 0 ; }
#include <stdio.h> void copy_string ( char [ ] , char [ ] ) ; int main ( ) { char s [ 1000 ] , d [ 1000 ] ; printf ( " Input a string\n  " ) ; gets ( s ) ; copy_string ( d , s ) ; printf ( " The string : %s\n  " , d ) ; return 0 ; } void copy_string ( char d [ ] , char s [ ] ) { int c = 0 ; while ( s [ c ] ! = '\0' ) { d [ c ] = s [ c ] ; c + + ; } d [ c ] = '\0' ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 1000 ] , b [ 1000 ] ; printf ( " Enter the first string\n  " ) ; gets ( a ) ; printf ( " Enter the second string\n  " ) ; gets ( b ) ; strcat ( a , b ) ; printf ( " String obtained on concatenation : %s\n  " , a ) ; return 0 ; }
#include <stdio.h> void concatenate ( char [ ] , char [ ] ) ; int main ( ) { char p [ 100 ] , q [ 100 ] ; printf ( " Input a string\n  " ) ; gets ( p ) ; printf ( " Input a string to concatenate\n  " ) ; gets ( q ) ; concatenate ( p , q ) ; printf ( " String obtained on concatenation : \ " %s\ " \n  " , p ) ; return 0 ; } void concatenate ( char p [ ] , char q [ ] ) { int c , d ; c = 0 ; while ( p [ c ] ! = '\0' ) { c + + ; } d = 0 ; while ( q [ d ] ! = '\0' ) { p [ c ] = q [ d ] ; d + + ; c + + ; } p [ c ] = '\0' ; }
#include <stdio.h> void concatenate_string ( char * , char * ) ; int main ( ) { char original [ 100 ] , add [ 100 ] ; printf ( " Enter source string\n  " ) ; gets ( original ) ; printf ( " Enter string to concatenate\n  " ) ; gets ( add ) ; concatenate_string ( original , add ) ; printf ( " String after concatenation : \ " %s\ " \n  " , original ) ; return 0 ; } void concatenate_string ( char * original , char * add ) { while ( * original ) original + + ; while ( * add ) { * original = * add ; add + + ; original + + ; } * original = '\0' ; }
#include <stdio.h> #include <string.h> int main ( ) { char arr [ 100 ] ; printf ( " Enter a string to reverse\n  " ) ; gets ( arr ) ; strrev ( arr ) ; printf ( " Reverse of the string is \n  %s\n  " , arr ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ 1000 ] , r [ 1000 ] ; int begin , end , count = 0 ; printf ( " Input a string\n  " ) ; gets ( s ) ;
#include <stdio.h> #include <string.h> void reverse ( char * , int , int ) ; int main ( ) { char a [ 100 ] ; gets ( a ) ; reverse ( a , 0 , strlen ( a ) -1 ) ; printf ( " %s\n  " , a ) ; return 0 ; } void reverse ( char * x , int begin , int end ) { char c ; if ( begin > = end ) return ; c = * ( x + begin ) ; * ( x + begin ) = * ( x + end ) ; * ( x + end ) = c ; reverse ( x , + + begin , --end ) ; }
#include <stdio.h> int string_length ( char * ) ; void reverse ( char * ) ; main ( ) { char s [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( s ) ; reverse ( s ) ; printf ( " Reverse of the string is \ " %s\ " .\n  " , s ) ; return 0 ; } void reverse ( char * s ) { int length , c ; char * begin , * end , temp ; length = string_length ( s ) ; begin = s ; end = s ; for ( c = 0 ; c < length - 1 ; c + + ) end + + ; for ( c = 0 ; c < length / 2 ; c + + ) { temp = * end ; * end = * begin ; * begin = temp ; begin + + ; end-- ; } } int string_length ( char * pointer ) { int c = 0 ; while ( * ( pointer + c ) ! = '\0' ) c + + ; return c ; }
#include <stdio.h> #include <string.h> int main ( ) { char a [ 100 ] , b [ 100 ] ; printf ( " Enter a string to check if it is a palindrome\n  " ) ; gets ( a ) ; strcpy ( b , a ) ;
#include <stdio.h> int main ( ) { char text [ 100 ] ; int begin , middle , end , length = 0 ; gets ( text ) ; while ( text [ length ] ! = '\0' ) length + + ; end = length - 1 ; middle = length / 2 ; for ( begin = 0 ; begin < middle ; begin + + ) { if ( text [ begin ] ! = text [ end ] ) { printf ( " Not a palindrome.\n  " ) ; break ; } end-- ; } if ( begin = = middle ) printf ( " Palindrome.\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , r = 0 , t ; printf ( " Enter an integer to check if it is palindrome or not\n  " ) ; scanf ( " %d " , & n ) ; t = n ; while ( t ! = 0 ) { r = r * 10 ; r = r + t %10 ; t = t / 10 ; } if ( n = = r ) printf ( " %d is a palindrome number.\n  " , n ) ; else printf ( " %d isn't a palindrome number.\n  " , n ) ; return 0 ; }
#include <stdio.h> #include <string.h> int check_vowel ( char ) ; int main ( ) { char s [ 100 ] , t [ 100 ] ; int c , d = 0 ; printf ( " Enter a string to delete vowels\n  " ) ; gets ( s ) ; for ( c = 0 ; s [ c ] ! = '\0' ; c + + ) { if ( check_vowel ( s [ c ] ) = = 0 ) {
#include <stdio.h> #include <stdlib.h> #include <string.h> int check_vowel ( char ) ; main ( ) { char string [ 100 ] , * temp , * pointer , ch , * start ; printf ( " Enter a string\n  " ) ; gets ( string ) ; temp = string ; pointer = ( char * ) malloc ( 100 ) ; if ( pointer = = NULL ) { printf ( " Unable to allocate memory.\n  " ) ; exit ( EXIT_FAILURE ) ; } start = pointer ; while ( * temp ) { ch = * temp ; if ( !check_vowel ( ch ) ) { * pointer = ch ; pointer + + ; } temp + + ; } * pointer = '\0' ; pointer = start ; strcpy ( string , pointer ) ; free ( pointer ) ; printf ( " String after removing vowel ( s ) : \ " %s\ " \n  " , string ) ; return 0 ; } int check_vowel ( char a ) { if ( a = = 'a' || a = = 'e' || a = = 'i' || a = = 'o' || a = = 'u' ) return 1 ; else if ( a = = 'A' || a = = 'E' || a = = 'I' || a = = 'O' || a = = 'U' ) return 1 ; else return 0 ; }
#include <stdio.h> int main ( ) { char string [ 1000 ] , sub [ 1000 ] ; int position , length , c = 0 ; printf ( " Input a string\n  " ) ; gets ( string ) ; printf ( " Enter the position and length of substring\n  " ) ; scanf ( " %d %d " , & position , & length ) ; while ( c < length ) { sub [ c ] = string [ position + c-1 ] ; c + + ; } sub [ c ] = '\0' ; printf ( " Required substring is \ " %s\ " \n  " , sub ) ; return 0 ; }
#include <stdio.h> void substring ( char [ ] , char [ ] , int , int ) ; int main ( ) { char string [ 1000 ] , sub [ 1000 ] ; int position , length , c = 0 ; printf ( " Input a string\n  " ) ; gets ( string ) ; printf ( " Enter the position and length of substring\n  " ) ; scanf ( " %d %d " , & position , & length ) ; substring ( string , sub , position , length ) ; printf ( " Required substring is \ " %s\ " \n  " , sub ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> char * substring ( char * , int , int ) ; int main ( ) { char string [ 100 ] , * pointer ; int position , length ; printf ( " Input a string\n  " ) ; gets ( string ) ; printf ( " Enter the position and length of substring\n  " ) ; scanf ( " %d %d " , & position , & length ) ; pointer = substring ( string , position , length ) ; printf ( " Required substring is \ " %s\ " \n  " , pointer ) ; free ( pointer ) ; return 0 ; } char * substring ( char * string , int position , int length ) { char * pointer ; int c ; pointer = malloc ( length + 1 ) ; if ( pointer = = NULL ) { printf ( " Unable to allocate memory.\n  " ) ; exit ( 1 ) ; } for ( c = 0 ; c < length ; c + + ) { * ( pointer + c ) = * ( string + position-1 ) ; string + + ; } * ( pointer + c ) = '\0' ; return pointer ; }
#include <stdio.h> #include <string.h> #include <malloc.h> char * substring ( char * , int , int ) ; int main ( ) { char string [ 100 ] , * pointer ; int position = 1 , length = 1 , temp , string_length ; printf ( " Enter a string\n  " ) ; gets ( string ) ; temp = string_length = strlen ( string ) ; printf ( " Substring of \ " %s\ " are\n  " , string ) ; while ( position < = string_length ) { while ( length < = temp ) { pointer = substring ( string , position , length ) ; printf ( " %s\n  " , pointer ) ; free ( pointer ) ; length + + ; } temp-- ; position + + ; length = 1 ; } return 0 ; }
#include <stdio.h> #include <string.h> int check_subsequence ( char [ ] , char [ ] ) ; int main ( ) { int flag ; char s1 [ 1000 ] , s2 [ 1000 ] ; printf ( " Input first string\n  " ) ; gets ( s1 ) ; printf ( " Input second string\n  " ) ; gets ( s2 ) ; if ( strlen ( s1 ) < strlen ( s2 ) ) flag = check_subsequence ( s1 , s2 ) ; else flag = check_subsequence ( s2 , s1 ) ; if ( flag ) printf ( " YES\n  " ) ; else printf ( " NO\n  " ) ; return 0 ; } int check_subsequence ( char a [ ] , char b [ ] ) { int c , d ; c = d = 0 ; while ( a [ c ] ! = '\0' ) { while ( ( a [ c ] ! = b [ d ] ) & & b [ d ] ! = '\0' ) { d + + ; } if ( b [ d ] = = '\0' ) break ; d + + ; c + + ; } if ( a [ c ] = = '\0' ) return 1 ; else return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> int main ( ) { char ch , input [ 100 ] , output [ 100 ] ; int no [ 26 ] = { 0 } , n , c , t , x ; printf ( " Enter some text\n  " ) ; scanf ( " %s " , input ) ; n = strlen ( input ) ; for ( c = 0 ; c < n ; c + + ) { ch = input [ c ] - 'a' ; no [ ch ] + + ; } t = 0 ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { x = ch - 'a' ; for ( c = 0 ; c < no [ x ] ; c + + ) { output [ t ] = ch ; t + + ; } } output [ t ] = '\0' ; printf ( " %s\n  " , output ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> void sort_string ( char * ) ; int main ( ) { char string [ 100 ] ; printf ( " Enter some text\n  " ) ; gets ( string ) ; sort_string ( string ) ; printf ( " %s\n  " , string ) ; return 0 ; } void sort_string ( char * s ) { int c , d = 0 , length ; char * pointer , * result , ch ; length = strlen ( s ) ; result = ( char * ) malloc ( length + 1 ) ; pointer = s ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { for ( c = 0 ; c < length ; c + + ) { if ( * pointer = = ch ) { * ( result + d ) = * pointer ; d + + ; } pointer + + ; } pointer = s ; } * ( result + d ) = '\0' ; strcpy ( s , result ) ; free ( result ) ; }
#include <stdio.h> int main ( ) { char text [ 1000 ] , blank [ 1000 ] ; int c = 0 , d = 0 ; printf ( " Enter some text\n  " ) ; gets ( text ) ; while ( text [ c ] ! = '\0' ) { if ( text [ c ] = = ' ' ) { int temp = c + 1 ; if ( text [ temp ] ! = '\0' ) { while ( text [ temp ] = = ' ' & & text [ temp ] ! = '\0' ) { if ( text [ temp ] = = ' ' ) { c + + ; } temp + + ; } } } blank [ d ] = text [ c ] ; c + + ; d + + ; } blank [ d ] = '\0' ; printf ( " Text after removing blanks\n  %s\n  " , blank ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> #define SPACE ' ' char * process ( char * ) ; int main ( ) { char text [ 1000 ] , * r ; printf ( " Enter a string\n  " ) ; gets ( text ) ; r = process ( text ) ; printf ( " \ " %s\ " \n  " , r ) ; free ( r ) ; return 0 ; } char * process ( char * text ) { int length , c , d ; char * start ; c = d = 0 ; length = strlen ( text ) ; start = ( char * ) malloc ( length + 1 ) ; if ( start = = NULL ) exit ( EXIT_FAILURE ) ; while ( * ( text + c ) ! = '\0' ) { if ( * ( text + c ) = = ' ' ) { int temp = c + 1 ; if ( * ( text + temp ) ! = '\0' ) { while ( * ( text + temp ) = = ' ' & & * ( text + temp ) ! = '\0' ) { if ( * ( text + temp ) = = ' ' ) { c + + ; } temp + + ; } } } * ( start + d ) = * ( text + c ) ; c + + ; d + + ; } * ( start + d ) = '\0' ; return start ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to lower case\n  " ) ; gets ( string ) ; printf ( " The string in lower case : %s\n  " , strlwr ( string ) ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 1000 ] ; printf ( " Input a string to convert to upper case\n  " ) ; gets ( string ) ; printf ( " The string in upper case : %s\n  " , strupr ( string ) ) ; return 0 ; }
#include <stdio.h> void upper_string ( char [ ] ) ; int main ( ) { char string [ 100 ] ; printf ( " Enter a string to convert it into upper case\n  " ) ; gets ( string ) ; upper_string ( string ) ; printf ( " The string in upper case : %s\n  " , string ) ; return 0 ; } void upper_string ( char s [ ] ) { int c = 0 ; while ( s [ c ] ! = '\0' ) { if ( s [ c ] > = 'a' & & s [ c ] < = 'z' ) { s [ c ] = s [ c ] - 32 ; } c + + ; } }
#include <stdio.h> void lower_string ( char [ ] ) ; int main ( ) { char string [ 100 ] ; printf ( " Enter a string to convert it into lower case\n  " ) ; gets ( string ) ; lower_string ( string ) ; printf ( " The string in lower case : %s\n  " , string ) ; return 0 ; } void lower_string ( char s [ ] ) { int c = 0 ; while ( s [ c ] ! = '\0' ) { if ( s [ c ] > = 'A' & & s [ c ] < = 'Z' ) { s [ c ] = s [ c ] + 32 ; } c + + ; } }
#include <stdio.h> int main ( ) { int c = 0 ; char ch , s [ 1000 ] ; printf ( " Input a string\n  " ) ; gets ( s ) ; while ( s [ c ] ! = '\0' ) { ch = s [ c ] ; if ( ch > = 'A' & & ch < = 'Z' ) s [ c ] = s [ c ] + 32 ; else if ( ch > = 'a' & & ch < = 'z' ) s [ c ] = s [ c ] - 32 ; c + + ; } printf ( " %s\n  " , s ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char first [ 100 ] , second [ 100 ] , temp [ 100 ] ; printf ( " Enter first string\n  " ) ; gets ( first ) ; printf ( " Enter second string\n  " ) ; gets ( second ) ; printf ( " \n Before Swapping\n  " ) ; printf ( " First string : %s\n  " , first ) ; printf ( " Second string : %s\n \n  " , second ) ; strcpy ( temp , first ) ; strcpy ( first , second ) ; strcpy ( second , temp ) ; printf ( " After Swapping\n  " ) ; printf ( " First string : %s\n  " , first ) ; printf ( " Second string : %s\n  " , second ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char string [ 100 ] ; int c = 0 , count [ 26 ] = { 0 } , x ; printf ( " Enter a string\n  " ) ; gets ( string ) ; while ( string [ c ] ! = '\0' ) { if ( string [ c ] > = 'a' & & string [ c ] < = 'z' ) { x = string [ c ] - 'a' ; count [ x ] + + ; } c + + ; } for ( c = 0 ; c < 26 ; c + + ) printf ( " %c occurs %d times in the string.\n  " , c + 'a' , count [ c ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> void find_frequency ( char [ ] , int [ ] ) ; int main ( ) { char string [ 100 ] ; int c , count [ 26 ] = { 0 } ; printf ( " Input a string\n  " ) ; gets ( string ) ; find_frequency ( string , count ) ; printf ( " Character Count\n  " ) ; for ( c = 0 ; c < 26 ; c + + ) printf ( " %c \t %d\n  " , c + 'a' , count [ c ] ) ; return 0 ; } void find_frequency ( char s [ ] , int count [ ] ) { int c = 0 ; while ( s [ c ] ! = '\0' ) { if ( s [ c ] > = 'a' & & s [ c ] < = 'z' ) count [ s [ c ] -'a' ] + + ; c + + ; } }
#include <stdio.h> int check_anagram ( char [ ] , char [ ] ) ; int main ( ) { char a [ 100 ] , b [ 100 ] ; printf ( " Enter a string\n  " ) ; gets ( a ) ; printf ( " Enter a string\n  " ) ; gets ( b ) ; if ( check_anagram ( a , b ) = = 1 ) printf ( " The strings are anagrams.\n  " ) ; else printf ( " The strings aren't anagrams.\n  " ) ; return 0 ; } int check_anagram ( char a [ ] , char b [ ] ) { int first [ 26 ] = { 0 } , second [ 26 ] = { 0 } , c = 0 ;
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch , file_name [ 25 ] ; FILE * fp ; printf ( " Enter name of a file you wish to see\n  " ) ; gets ( file_name ) ; fp = fopen ( file_name , " r " ) ;
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch , source_file [ 20 ] , target_file [ 20 ] ; FILE * source , * target ; printf ( " Enter name of file to copy\n  " ) ; gets ( source_file ) ; source = fopen ( source_file , " r " ) ; if ( source = = NULL ) { printf ( " Press any key to exit...\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " Enter name of target file\n  " ) ; gets ( target_file ) ; target = fopen ( target_file , " w " ) ; if ( target = = NULL ) { fclose ( source ) ; printf ( " Press any key to exit...\n  " ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( source ) ) ! = EOF ) fputc ( ch , target ) ; printf ( " File copied successfully.\n  " ) ; fclose ( source ) ; fclose ( target ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fs1 , * fs2 , * ft ; char ch , file1 [ 20 ] , file2 [ 20 ] , file3 [ 20 ] ; printf ( " Enter name of first file\n  " ) ; gets ( file1 ) ; printf ( " Enter name of second file\n  " ) ; gets ( file2 ) ; printf ( " Enter name of file which will store contents of the two files\n  " ) ; gets ( file3 ) ; fs1 = fopen ( file1 , " r " ) ; fs2 = fopen ( file2 , " r " ) ; if ( fs1 = = NULL || fs2 = = NULL ) { perror ( " Error " ) ; printf ( " Press any key to exit...\n  " ) ; exit ( EXIT_FAILURE ) ; } ft = fopen ( file3 , " w " ) ;
#include <stdio.h> #include <conio.h> #include <dir.h> int main ( ) { int done ; struct ffblk a ; printf ( " Press any key to view the files in the current directory\n  " ) ; getch ( ) ; done = findfirst ( " * . * " , & a , 0 ) ;
#include <stdio.h> int main ( ) { int status ; char file_name [ 25 ] ; printf ( " Enter name of a file you wish to delete\n  " ) ; gets ( file_name ) ; status = remove ( file_name ) ; if ( status = = 0 ) printf ( " %s file deleted successfully.\n  " , file_name ) ; else { printf ( " Unable to delete the file\n  " ) ; perror ( " Following error occurred " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int c , n ; printf ( " Ten random numbers in [ 1 , 100 ] \n  " ) ; for ( c = 1 ; c < = 10 ; c + + ) { n = rand ( ) % 100 + 1 ; printf ( " %d\n  " , n ) ; } return 0 ; }
#include <stdio.h> #include <conio.h> #include <stdlib.h> int main ( ) { int n , max , num , c ; printf ( " Enter the number of random numbers you want\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter the maximum value of random number\n  " ) ; scanf ( " %d " , & max ) ; printf ( " %d random numbers from 0 to %d are : \n  " , n , max ) ; randomize ( ) ; for ( c = 1 ; c < = n ; c + + ) { num = random ( max ) ; printf ( " %d\n  " , num ) ; } getch ( ) ; return 0 ; }
#include <stdio.h> struct complex { int real , img ; } ; int main ( ) { struct complex a , b , c ; printf ( " Enter a and b where a + ib is the first complex number.\n  " ) ; scanf ( " %d %d " , & a.real , & a.img ) ; printf ( " Enter c and d where c + id is the second complex number.\n  " ) ; scanf ( " %d %d " , & b.real , & b.img ) ; c.real = a.real + b.real ; c.img = a.img + b.img ; printf ( " Sum of the complex numbers : ( %d ) + ( %di ) \n  " , c.real , c.img ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <dos.h> int main ( ) { struct date d ; getdate ( & d ) ; printf ( " Current system date : %d / %d / %d " , d.da_day , d.da_mon , d.da_year ) ; getch ( ) ; return 0 ; }
#include <stdlib.h> int main ( ) { system ( " C : \\Windows\\System32\\ipconfig " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { system ( " C : \\WINDOWS\\System32\\shutdown / s " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char ch ; printf ( " Do you want to shutdown your computer now ( y / n ) \n  " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'y' || ch = = 'Y' ) system ( " C : \\WINDOWS\\System32\\shutdown -s " ) ; return 0 ; }
#include <stdio.h> int main ( ) { system ( " shutdown -P now " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello World\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x ; printf ( " Input an integer\n  " ) ; scanf ( " %d " , & x ) ;
#include <stdio.h> int main ( ) { int x = 1 ; if ( x = = 1 ) printf ( " x is equal to one.\n  " ) ; else printf ( " For comparison use ' = = ' as ' = ' is the assignment operator.\n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c = 1 ;
#include <stdio.h> int main ( ) { int n , c ; printf ( " Enter a number\n  " ) ; scanf ( " %d " , & n ) ; if ( n = = 2 ) printf ( " Prime number.\n  " ) ; else { for ( c = 2 ; c < = n - 1 ; c + + ) { if ( n % c = = 0 ) break ; } if ( c ! = n ) printf ( " Not prime.\n  " ) ; else printf ( " Prime number.\n  " ) ; } return 0 ; }
#include <stdio.h> int main ( int argc , char * argv [ ] ) { int c ; printf ( " Number of command line arguments passed : %d\n  " , argc ) ; for ( c = 0 ; c < argc ; c + + ) printf ( " %d argument is %s\n  " , c + 1 , argv [ c ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 100 ] , n , c ; printf ( " Enter number of elements in array\n  " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " The array elements are : \n  " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %d\n  " , array [ c ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> struct game { char game_name [ 50 ] ; int number_of_players ; } ;
#include <stdio.h> int main ( ) { int n , first = 0 , second = 1 , next , c ; printf ( " Enter the number of terms\n  " ) ; scanf ( " %d " , & n ) ; printf ( " First %d terms of Fibonacci series are : \n  " , n ) ; for ( c = 0 ; c < n ; c + + ) { if ( c < = 1 ) next = c ; else { next = first + second ; first = second ; second = next ; } printf ( " %d\n  " , next ) ; } return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtextxy ( 10 , 20 , " Graphics programming is fun! " ) ; circle ( 200 , 200 , 50 ) ; setcolor ( BLUE ) ; line ( 350 , 250 , 450 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> int main ( ) { int c ; for ( c = 1 ; c < = 10 ; c + + ) printf ( " %d\n  " , c ) ; getch ( ) ; return 0 ; }
#include <stdio.h> int main ( ) { int c ; for ( c = 1 ; c < = 10 ; c + + ) printf ( " %d\n  " , c ) ; return 0 ; }
#include <graphics.h> int main ( ) { int gd = DETECT , gm ; int x = 320 , y = 240 , radius ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( radius = 25 ; radius < = 125 ; radius = radius + 20 ) circle ( x , y , radius ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <dos.h> int main ( ) { int i , j = 0 , gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; settextstyle ( DEFAULT_FONT , HORIZ_DIR , 2 ) ; outtextxy ( 25 , 240 , " Press any key to view the moving car " ) ; getch ( ) ; for ( i = 0 ; i < = 420 ; i = i + 10 , j + + ) { rectangle ( 50 + i , 275 , 150 + i , 400 ) ; rectangle ( 150 + i , 350 , 200 + i , 400 ) ; circle ( 75 + i , 410 , 10 ) ; circle ( 175 + i , 410 , 10 ) ; setcolor ( j ) ; delay ( 100 ) ; if ( i = = 420 ) break ; if ( j = = 15 ) j = 2 ; cleardevice ( ) ;
#include <stdio.h> #include <string.h> void reverse_string ( char * ) ; void reverse_words ( char * ) ; int main ( ) { char a [ 100 ] ; gets ( a ) ; reverse_words ( a ) ; printf ( " %s\n  " , a ) ; return 0 ; } void reverse_words ( char * s ) { char b [ 100 ] , * t , * z ; int c = 0 ; t = s ; while ( * t ) {
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; arc ( 100 , 100 , 0 , 135 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bar ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bar3d ( 100 , 100 , 200 , 200 , 20 , 1 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 100 , 100 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to clear the screen. " ) ; getch ( ) ; cleardevice ( ) ; outtext ( " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to close the graphics mode... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , points [ ] = { 320 , 150 , 420 , 300 , 250 , 300 , 320 , 150 } ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drawpoly ( 4 , points ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; ellipse ( 100 , 100 , 0 , 360 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; fillellipse ( 100 , 100 , 50 , 25 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , points [ ] = { 320 , 150 , 440 , 340 , 230 , 340 , 320 , 150 } ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; fillpoly ( 4 , points ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( RED ) ; circle ( 100 , 100 , 50 ) ; floodfill ( 100 , 100 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> #include <stdio.h> main ( ) { int gd = DETECT , gm ; struct arccoordstype a ; char arr [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; arc ( 250 , 200 , 0 , 90 , 100 ) ; getarccoords ( & a ) ; sprintf ( arr , " ( %d , %d ) " , a.xstart , a.ystart ) ; outtextxy ( 360 , 195 , arr ) ; sprintf ( arr , " ( %d , %d ) " , a.xend , a.yend ) ; outtextxy ( 245 , 85 , arr ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , bkcolor ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; bkcolor = getbkcolor ( ) ; sprintf ( a , " Current background color = %d " , bkcolor ) ; outtextxy ( 10 , 10 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , drawing_color ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drawing_color = getcolor ( ) ; sprintf ( a , " Current drawing color = %d " , drawing_color ) ; outtextxy ( 10 , 10 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char * drivername ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; drivername = getdrivername ( ) ; outtextxy ( 200 , 200 , drivername ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , max_colors ; char a [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; max_colors = getmaxcolor ( ) ; sprintf ( a , " Maximum number of colors for current graphics mode and driver = %d " , max_colors + 1 ) ; outtextxy ( 0 , 40 , a ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , max_x ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; max_x = getmaxx ( ) ; sprintf ( array , " Maximum X coordinate for current graphics mode and driver = %d. " , max_x ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , max_y ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; max_y = getmaxy ( ) ; sprintf ( array , " Maximum Y coordinate for current graphics mode and driver is = %d. " , max_y ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , color ; char array [ 50 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; color = getpixel ( 0 , 0 ) ; sprintf ( array , " color of pixel at ( 0 , 0 ) = %d " , color ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sprintf ( array , " Current position of x = %d " , getx ( ) ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , y ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; y = gety ( ) ; sprintf ( array , " Current position of y = %d " , y ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( RED ) ; setbkcolor ( YELLOW ) ; circle ( 250 , 250 , 50 ) ; getch ( ) ; graphdefaults ( ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <stdlib.h> #include <conio.h> main ( ) { int gd , gm , errorcode ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; errorcode = graphresult ( ) ; if ( errorcode ! = grOk ) { printf ( " Graphics error : %s\n  " , grapherrormsg ( errorcode ) ) ; printf ( " Press any key to exit. " ) ; getch ( ) ; exit ( 1 ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , bytes ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 200 , 200 , 50 ) ; line ( 150 , 200 , 250 , 200 ) ; line ( 200 , 150 , 200 , 250 ) ; bytes = imagesize ( 150 , 150 , 250 , 250 ) ; sprintf ( array , " Number of bytes required to store required area = %d " , bytes ) ; outtextxy ( 10 , 280 , array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; line ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 100 , 100 ) ; lineto ( 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 250 , 250 ) ; linerel ( 100 , -100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; char msg [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sprintf ( msg , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( msg ) ; moveto ( 50 , 50 ) ; sprintf ( msg , " X = %d , Y = %d " , getx ( ) , gety ( ) ) ; outtext ( msg ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , x , y ; char message [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; moveto ( 100 , 100 ) ; moverel ( 100 , -100 ) ; x = getx ( ) ; y = gety ( ) ; sprintf ( message , " Current x position = %d and y position = %d " , x , y ) ; outtextxy ( 10 , 10 , message ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " To display text at a particular position on the screen use outtextxy " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtextxy ( 100 , 100 , " Outtextxy function " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; pieslice ( 200 , 200 , 0 , 135 , 100 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; putpixel ( 25 , 25 , RED ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; rectangle ( 100 , 100 , 200 , 200 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; sector ( 100 , 100 , 0 , 135 , 25 , 35 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; outtext ( " Press any key to change the background color to GREEN. " ) ; getch ( ) ; setbkcolor ( GREEN ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; circle ( 100 , 100 , 50 ) ; setcolor ( RED ) ; circle ( 200 , 200 , 50 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setfillstyle ( XHATCH_FILL , RED ) ; circle ( 100 , 100 , 50 ) ; floodfill ( 100 , 100 , WHITE ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> main ( ) { int gd = DETECT , gm , c , x = 100 , y = 50 ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( c = 0 ; c < 5 ; c + + ) { setlinestyle ( c , 0 , 2 ) ; line ( x , y , x + 200 , y ) ; y = y + 25 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , x = 25 , y = 25 , font = 0 ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; for ( font = 0 ; font < = 10 ; font + + ) { settextstyle ( font , HORIZ_DIR , 1 ) ; outtextxy ( x , y , " Text with different fonts " ) ; y = y + 25 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , midx , midy ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; midx = getmaxx ( ) / 2 ; midy = getmaxy ( ) / 2 ; setviewport ( midx - 50 , midy - 50 , midx + 50 , midy + 50 , 1 ) ; circle ( 50 , 50 , 55 ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , height ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; height = textheight ( " C programming " ) ; sprintf ( array , " Textheight = %d " , height ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm , width ; char array [ 100 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; width = textwidth ( " C programming " ) ; sprintf ( array , " Textwidth = %d " , width ) ; outtext ( array ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm , left = 100 , top = 100 , right = 200 , bottom = 200 , x = 300 , y = 150 , radius = 50 ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; rectangle ( left , top , right , bottom ) ; circle ( x , y , radius ) ; bar ( left + 300 , top , right + 300 , bottom ) ; line ( left - 10 , top + 150 , left + 410 , top + 150 ) ; ellipse ( x , y + 200 , 0 , 360 , 100 , 50 ) ; outtextxy ( left + 100 , top + 325 , " My first C graphics program " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( YELLOW ) ; rectangle ( 0 , 30 , 639 , 450 ) ; settextstyle ( SANS_SERIF_FONT , HORIZ_DIR , 2 ) ; setcolor ( WHITE ) ; outtextxy ( 275 , 0 , " Bar Chart " ) ; setlinestyle ( SOLID_LINE , 0 , 2 ) ; line ( 100 , 420 , 100 , 60 ) ; line ( 100 , 420 , 600 , 420 ) ; line ( 90 , 70 , 100 , 60 ) ; line ( 110 , 70 , 100 , 60 ) ; line ( 590 , 410 , 600 , 420 ) ; line ( 590 , 430 , 600 , 420 ) ; outtextxy ( 95 , 35 , " Y " ) ; outtextxy ( 610 , 405 , " X " ) ; outtextxy ( 85 , 415 , " O " ) ; setfillstyle ( LINE_FILL , BLUE ) ; bar ( 150 , 100 , 200 , 419 ) ; setfillstyle ( XHATCH_FILL , RED ) ; bar ( 225 , 150 , 275 , 419 ) ; setfillstyle ( WIDE_DOT_FILL , GREEN ) ; bar ( 300 , 200 , 350 , 419 ) ; setfillstyle ( INTERLEAVE_FILL , MAGENTA ) ; bar ( 375 , 125 , 425 , 419 ) ; setfillstyle ( HATCH_FILL , BROWN ) ; bar ( 450 , 175 , 500 , 419 ) ; getch ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm , midx , midy ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( MAGENTA ) ; rectangle ( 0 , 40 , 639 , 450 ) ; settextstyle ( SANS_SERIF_FONT , HORIZ_DIR , 2 ) ; setcolor ( WHITE ) ; outtextxy ( 275 , 10 , " Pie Chart " ) ; midx = getmaxx ( ) / 2 ; midy = getmaxy ( ) / 2 ; setfillstyle ( LINE_FILL , BLUE ) ; pieslice ( midx , midy , 0 , 75 , 100 ) ; outtextxy ( midx + 100 , midy - 75 , " 20.83 % " ) ; setfillstyle ( XHATCH_FILL , RED ) ; pieslice ( midx , midy , 75 , 225 , 100 ) ; outtextxy ( midx-175 , midy - 75 , " 41.67 % " ) ; setfillstyle ( WIDE_DOT_FILL , GREEN ) ; pieslice ( midx , midy , 225 , 360 , 100 ) ; outtextxy ( midx + 75 , midy + 75 , " 37.50 % " ) ; getch ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> int main ( ) { int gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( YELLOW ) ; rectangle ( 0 , 30 , 639 , 450 ) ; settextstyle ( SANS_SERIF_FONT , HORIZ_DIR , 2 ) ; setcolor ( WHITE ) ; outtextxy ( 275 , 0 , " Bar Chart " ) ; setlinestyle ( SOLID_LINE , 0 , 2 ) ; line ( 100 , 420 , 100 , 60 ) ; line ( 100 , 420 , 600 , 420 ) ; line ( 90 , 70 , 100 , 60 ) ; line ( 110 , 70 , 100 , 60 ) ; line ( 590 , 410 , 600 , 420 ) ; line ( 590 , 430 , 600 , 420 ) ; outtextxy ( 95 , 35 , " Y " ) ; outtextxy ( 610 , 405 , " X " ) ; outtextxy ( 85 , 415 , " O " ) ; setfillstyle ( LINE_FILL , BLUE ) ; bar ( 150 , 100 , 200 , 419 ) ; setfillstyle ( XHATCH_FILL , RED ) ; bar ( 225 , 150 , 275 , 419 ) ; setfillstyle ( WIDE_DOT_FILL , GREEN ) ; bar ( 300 , 200 , 350 , 419 ) ; setfillstyle ( INTERLEAVE_FILL , MAGENTA ) ; bar ( 375 , 125 , 425 , 419 ) ; setfillstyle ( HATCH_FILL , BROWN ) ; bar ( 450 , 175 , 500 , 419 ) ; getch ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> #include <stdlib.h> main ( ) { int gd = DETECT , gm , area , temp1 , temp2 , left = 25 , top = 75 ; void * p ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; setcolor ( YELLOW ) ; circle ( 50 , 100 , 25 ) ; setfillstyle ( SOLID_FILL , YELLOW ) ; floodfill ( 50 , 100 , YELLOW ) ; setcolor ( BLACK ) ; setfillstyle ( SOLID_FILL , BLACK ) ; fillellipse ( 44 , 85 , 2 , 6 ) ; fillellipse ( 56 , 85 , 2 , 6 ) ; ellipse ( 50 , 100 , 205 , 335 , 20 , 9 ) ; ellipse ( 50 , 100 , 205 , 335 , 20 , 10 ) ; ellipse ( 50 , 100 , 205 , 335 , 20 , 11 ) ; area = imagesize ( left , top , left + 50 , top + 50 ) ; p = malloc ( area ) ; setcolor ( WHITE ) ; settextstyle ( SANS_SERIF_FONT , HORIZ_DIR , 2 ) ; outtextxy ( 155 , 451 , " Smiling Face Animation " ) ; setcolor ( BLUE ) ; rectangle ( 0 , 0 , 639 , 449 ) ; while ( !kbhit ( ) ) { temp1 = 1 + random ( 588 ) ; temp2 = 1 + random ( 380 ) ; getimage ( left , top , left + 50 , top + 50 , p ) ; putimage ( left , top , p , XOR_PUT ) ; putimage ( temp1 , temp2 , p , XOR_PUT ) ; delay ( 100 ) ; left = temp1 ; top = temp2 ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdlib.h> #include <dos.h> #include <graphics.h> main ( ) { int i = 0 , key , num , midx , gd = DETECT , gm ; char a [ 10 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; midx = getmaxx ( ) / 2 ; settextstyle ( SCRIPT_FONT , HORIZ_DIR , 5 ) ; settextjustify ( CENTER_TEXT , CENTER_TEXT ) ; setcolor ( GREEN ) ; outtextxy ( midx , 20 , " CAPTCHA " ) ; settextstyle ( SCRIPT_FONT , HORIZ_DIR , 2 ) ; outtextxy ( midx , 125 , " Press any key to change the generated random code \ " captcha\ " " ) ; outtextxy ( midx , 150 , " Press escape key to exit... " ) ; setcolor ( WHITE ) ; setviewport ( 100 , 200 , 600 , 400 , 1 ) ; setcolor ( RED ) ; randomize ( ) ; while ( 1 ) { while ( i <6 ) { num = random ( 3 ) ; if ( num = = 0 ) a [ i ] = 65 + random ( 26 ) ; else if ( num = = 1 ) a [ i ] = 97 + random ( 26 ) ; else a [ i ] = 48 + random ( 10 ) ; i + + ; } a [ i ] = '\0' ; outtextxy ( 210 , 100 , a ) ; key = getch ( ) ; if ( key = = 27 ) exit ( 0 ) ; clearviewport ( ) ; i = 0 ; } }
#include <graphics.h> #include <conio.h> #include <dos.h> main ( ) { int gd = DETECT , gm , x , y , color , angle = 0 ; struct arccoordstype a , b ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; delay ( 2000 ) ; while ( angle < = 360 ) { setcolor ( BLACK ) ; arc ( getmaxx ( ) / 2 , getmaxy ( ) / 2 , angle , angle + 2 , 100 ) ; setcolor ( RED ) ; getarccoords ( & a ) ; circle ( a.xstart , a.ystart , 25 ) ; setcolor ( BLACK ) ; arc ( getmaxx ( ) / 2 , getmaxy ( ) / 2 , angle , angle + 2 , 150 ) ; getarccoords ( & a ) ; setcolor ( GREEN ) ; circle ( a.xstart , a.ystart , 25 ) ; angle = angle + 5 ; delay ( 50 ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <dos.h> #include <conio.h> int main ( ) { int gd = DETECT , gm , i ; char a [ 5 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; settextjustify ( CENTER_TEXT , CENTER_TEXT ) ; settextstyle ( DEFAULT_FONT , HORIZ_DIR , 3 ) ; setcolor ( RED ) ; for ( i = 30 ; i > = 0 ; i-- ) { sprintf ( a , " %d " , i ) ; outtextxy ( getmaxx ( ) / 2 , getmaxy ( ) / 2 , a ) ; delay ( 1000 ) ; if ( i = = 0 ) break ; cleardevice ( ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <dos.h> #include <graphics.h> #include <stdlib.h> union REGS i , o ; int left = 265 , top = 250 ; void initialize_graphics_mode ( ) { int gd = DETECT , gm , error ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; error = graphresult ( ) ; if ( error ! = grOk ) { perror ( " Error " ) ; printf ( " Press any key to exit...\n  " ) ; getch ( ) ; exit ( EXIT_FAILURE ) ; } } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0x33 , & i , & o ) ; } void hidemouseptr ( ) { i.x.ax = 2 ; int86 ( 0x33 , & i , & o ) ; } void getmousepos ( int * x , int * y ) { i.x.ax = 3 ; int86 ( 0x33 , & i , & o ) ; * x = o.x.cx ; * y = o.x.dx ; } void draw_bar ( ) { hidemouseptr ( ) ; setfillstyle ( SOLID_FILL , CYAN ) ; bar ( 190 , 180 , 450 , 350 ) ; showmouseptr ( ) ; } void draw_button ( int x , int y ) { hidemouseptr ( ) ; setfillstyle ( SOLID_FILL , MAGENTA ) ; bar ( x , y , x + 100 , y + 30 ) ; moveto ( x + 5 , y ) ; setcolor ( YELLOW ) ; outtext ( " Press me " ) ; showmouseptr ( ) ; } void draw ( ) { settextstyle ( SANS_SERIF_FONT , HORIZ_DIR , 2 ) ; outtextxy ( 155 , 451 , " <a href = " http :
#include <graphics.h> #include <conio.h> #include <dos.h> #include <stdlib.h> main ( ) { int gd = DETECT , gm , midx , midy ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; midx = getmaxx ( ) / 2 ; midy = getmaxy ( ) / 2 ; setcolor ( RED ) ; settextstyle ( SCRIPT_FONT , HORIZ_DIR , 3 ) ; settextjustify ( CENTER_TEXT , CENTER_TEXT ) ; outtextxy ( midx , midy-10 , " Traffic Light Simulation " ) ; outtextxy ( midx , midy + 10 , " Press any key to start " ) ; getch ( ) ; cleardevice ( ) ; setcolor ( WHITE ) ; settextstyle ( DEFAULT_FONT , HORIZ_DIR , 1 ) ; rectangle ( midx-30 , midy-80 , midx + 30 , midy + 80 ) ; circle ( midx , midy-50 , 22 ) ; setfillstyle ( SOLID_FILL , RED ) ; floodfill ( midx , midy-50 , WHITE ) ; setcolor ( BLUE ) ; outtextxy ( midx , midy-50 , " STOP " ) ; delay ( 2000 ) ; graphdefaults ( ) ; cleardevice ( ) ; setcolor ( WHITE ) ; rectangle ( midx-30 , midy-80 , midx + 30 , midy + 80 ) ; circle ( midx , midy , 20 ) ; setfillstyle ( SOLID_FILL , YELLOW ) ; floodfill ( midx , midy , WHITE ) ; setcolor ( BLUE ) ; outtextxy ( midx-18 , midy-3 , " READY " ) ; delay ( 2000 ) ; cleardevice ( ) ; setcolor ( WHITE ) ; rectangle ( midx-30 , midy-80 , midx + 30 , midy + 80 ) ; circle ( midx , midy + 50 , 22 ) ; setfillstyle ( SOLID_FILL , GREEN ) ; floodfill ( midx , midy + 50 , WHITE ) ; setcolor ( BLUE ) ; outtextxy ( midx-7 , midy + 48 , " GO " ) ; setcolor ( RED ) ; settextstyle ( SCRIPT_FONT , HORIZ_DIR , 4 ) ; outtextxy ( midx-150 , midy + 100 , " Press any key to exit... " ) ; getch ( ) ; closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <conio.h> #include <dos.h> #include <stdlib.h> #include <math.h> union REGS i , o ; int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void hidemopuseptr ( ) { i.x.ax = 2 ; int86 ( 0X33 , & i , & o ) ; } void getmousepos ( int * x , int * y ) { i.x.ax = 3 ; int86 ( 0X33 , & i , & o ) ; * x = o.x.cx ; * y = o.x.dx ; } void movemouseptr ( int x , int y ) { i.x.ax = 4 ; i.x.cx = x ; i.x.dx = y ; int86 ( 0X33 , & i , & o ) ; } main ( ) { int gd = DETECT , gm , midx , midy , radius , x , y , tempx , tempy ; radius = 100 ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; if ( !initmouse ( ) ) { closegraph ( ) ; exit ( 1 ) ; } midx = getmaxx ( ) / 2 ; midy = getmaxy ( ) / 2 ; showmouseptr ( ) ; movemouseptr ( midx , midy ) ; circle ( midx , midy , radius ) ; x = tempx = midx ; y = tempy = midy ; while ( !kbhit ( ) ) { getmousepos ( & x , & y ) ; if ( ( pow ( x-midx , 2 ) + pow ( y-midy , 2 ) -pow ( radius , 2 ) ) > 0 ) { movemouseptr ( tempx , tempy ) ; x = tempx ; y = tempy ; } tempx = x ; tempy = y ; } closegraph ( ) ; return 0 ; }
#include <graphics.h> #include <dos.h> #include <conio.h> main ( ) { int i , j = 0 , gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; settextstyle ( DEFAULT_FONT , HORIZ_DIR , 2 ) ; outtextxy ( 25 , 240 , " Press any key to view the moving car " ) ; getch ( ) ; setviewport ( 0 , 0 , 639 , 440 , 1 ) ; for ( i = 0 ; i < = 420 ; i = i + 10 , j + + ) { rectangle ( 50 + i , 275 , 150 + i , 400 ) ; rectangle ( 150 + i , 350 , 200 + i , 400 ) ; circle ( 75 + i , 410 , 10 ) ; circle ( 175 + i , 410 , 10 ) ; setcolor ( j ) ; delay ( 100 ) ; if ( i = = 420 ) break ; clearviewport ( ) ; } getch ( ) ; closegraph ( ) ; return 0 ; }
#include <stdio.h> void print ( int ) ; int main ( ) { int n ; scanf ( " %d " , & n ) ; print ( n ) ; return 0 ; } void print ( int n ) { static int c = 1 ; if ( c = = n + 1 ) return ; printf ( " %d\n  " , c ) ; c + + ; print ( n ) ; }
#include <stdio.h> int main ( ) { int n , c = 1 ; scanf ( " %d " , & n ) ;
#include <stdio.h> #include <math.h> int main ( ) { long n , t , r = 0 , c , d ; printf ( " Enter an integer\n  " ) ; scanf ( " %ld " , & n ) ; while ( 1 ) { n + + ; t = n ;
#include <stdio.h> #include <string.h> int match ( char [ ] , char [ ] ) ; int main ( ) { char a [ 100 ] , b [ 100 ] ; int position ; printf ( " Enter some text\n  " ) ; gets ( a ) ; printf ( " Enter a string to find\n  " ) ; gets ( b ) ; position = match ( a , b ) ; if ( position ! = -1 ) { printf ( " Found at location : %d\n  " , position + 1 ) ; } else { printf ( " Not found.\n  " ) ; } return 0 ; } int match ( char text [ ] , char pattern [ ] ) { int c , d , e , text_length , pattern_length , position = -1 ; text_length = strlen ( text ) ; pattern_length = strlen ( pattern ) ; if ( pattern_length > text_length ) { return -1 ; } for ( c = 0 ; c < = text_length - pattern_length ; c + + ) { position = e = c ; for ( d = 0 ; d < pattern_length ; d + + ) { if ( pattern [ d ] = = text [ e ] ) { e + + ; } else { break ; } } if ( d = = pattern_length ) { return position ; } } return -1 ; }
#include <stdio.h> int match ( char * , char * ) ; int main ( ) { char a [ 100 ] , b [ 100 ] ; int position ; printf ( " Enter some text\n  " ) ; gets ( a ) ; printf ( " Enter a string to find\n  " ) ; gets ( b ) ; position = match ( a , b ) ; if ( position! = -1 ) printf ( " Found at location %d\n  " , position + 1 ) ; else printf ( " Not found.\n  " ) ; return 0 ; } int match ( char * a , char * b ) { int c ; int position = 0 ; char * x , * y ; x = a ; y = b ; while ( * a ) { while ( * x = = * y ) { x + + ; y + + ; if ( * x = = '\0'|| * y = = '\0' ) break ; } if ( * y = = '\0' ) break ; a + + ; position + + ; x = a ; y = b ; } if ( * a ) return position ; else return -1 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> void insert_substring ( char * , char * , int ) ; char * substring ( char * , int , int ) ; int main ( ) { char text [ 100 ] , substring [ 100 ] ; int position ; printf ( " Enter some text\n  " ) ; gets ( text ) ; printf ( " Enter a string to insert\n  " ) ; gets ( substring ) ; printf ( " Enter the position to insert\n  " ) ; scanf ( " %d " , & position ) ; insert_substring ( text , substring , position ) ; printf ( " %s\n  " , text ) ; return 0 ; } void insert_substring ( char * a , char * b , int position ) { char * f , * e ; int length ; length = strlen ( a ) ; f = substring ( a , 1 , position - 1 ) ; e = substring ( a , position , length-position + 1 ) ; strcpy ( a , " " ) ; strcat ( a , f ) ; free ( f ) ; strcat ( a , b ) ; strcat ( a , e ) ; free ( e ) ; } char * substring ( char * string , int position , int length ) { char * pointer ; int c ; pointer = malloc ( length + 1 ) ; if ( pointer = = NULL ) exit ( EXIT_FAILURE ) ; for ( c = 0 ; c < length ; c + + ) * ( pointer + c ) = * ( ( string + position-1 ) + c ) ; * ( pointer + c ) = '\0' ; return pointer ; }
#include <dos.h> #include <conio.h> int initmouse ( ) ; union REGS i , o ; main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else printf ( " Mouse support available.\n  " ) ; getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; }
#include <dos.h> #include <conio.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; main ( ) { int status ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else showmouseptr ( ) ; getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <graphics.h> #include <conio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; union REGS i , o ; main ( ) { int status , gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else showmouseptr ( ) ; getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; }
#include <graphics.h> #include <conio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; void hidemouseptr ( ) ; union REGS i , o ; main ( ) { int status , count = 1 , gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else { showmouseptr ( ) ; while ( count < = 10 ) { getch ( ) ; count + + ; if ( count %2 = = 0 ) hidemouseptr ( ) ; else showmouseptr ( ) ; } } getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void hidemouseptr ( ) { i.x.ax = 2 ;
#include <graphics.h> #include <conio.h> #include <stdio.h> #include <dos.h> int initmouse ( ) ; void showmouseptr ( ) ; void hidemouseptr ( ) ; void getmousepos ( int * , int * , int * ) ; union REGS i , o ; main ( ) { int gd = DETECT , gm , status , button , x , y , tempx , tempy ; char array [ 50 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; settextstyle ( DEFAULT_FONT , 0 , 2 ) ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else { showmouseptr ( ) ; getmousepos ( & button , & x , & y ) ; tempx = x ; tempy = y ; while ( !kbhit ( ) ) { getmousepos ( & button , & x , & y ) ; if ( x = = tempx & & y = = tempy ) { } else { cleardevice ( ) ; sprintf ( array , " X = %d , Y = %d " , x , y ) ; outtext ( array ) ; tempx = x ; tempy = y ; } } } getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void getmousepos ( int * button , int * x , int * y ) { i.x.ax = 3 ; int86 ( 0X33 , & i , & o ) ; * button = o.x.bx ; * x = o.x.cx ; * y = o.x.dx ; }
#include <graphics.h> #include <conio.h> #include <dos.h> union REGS i , o ; int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void getmousepos ( int * button , int * x , int * y ) { i.x.ax = 3 ; int86 ( 0X33 , & i , & o ) ; * button = o.x.bx ; * x = o.x.cx ; * y = o.x.dx ; } main ( ) { int gd = DETECT , gm , status , button , x , y ; char array [ 50 ] ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; settextstyle ( DEFAULT_FONT , 0 , 2 ) ; status = initmouse ( ) ; if ( status = = 0 ) printf ( " Mouse support not available.\n  " ) ; else { showmouseptr ( ) ; getmousepos ( & button , & x , & y ) ; while ( !kbhit ( ) ) { getmousepos ( & button , & x , & y ) ; if ( button = = 1 ) { button = -1 ; cleardevice ( ) ; sprintf ( array , " Left Button clicked x = %d y = %d " , x , y ) ; outtext ( array ) ; } else if ( button = = 2 ) { button = -1 ; cleardevice ( ) ; sprintf ( array , " Right Button clicked x = %d y = %d " , x , y ) ; outtext ( array ) ; } } } getch ( ) ; return 0 ; }
#include <dos.h> #include <graphics.h> #include <conio.h> int initmouse ( ) ; void showmouseptr ( ) ; void hidemouseptr ( ) ; void restrictmouseptr ( int , int , int , int ) ; union REGS i , o ; main ( ) { int status , gd = DETECT , gm ; initgraph ( & gd , & gm , " C : \\TC\\BGI " ) ; settextstyle ( DEFAULT_FONT , 0 , 2 ) ; status = initmouse ( ) ; if ( status = = 0 ) outtext ( " Mouse support not available.\n  " ) ; else { showmouseptr ( ) ; rectangle ( 120 , 70 , 520 , 410 ) ; restrictmouseptr ( 120 , 70 , 520 , 410 ) ; } getch ( ) ; return 0 ; } int initmouse ( ) { i.x.ax = 0 ; int86 ( 0X33 , & i , & o ) ; return ( o.x.ax ) ; } void showmouseptr ( ) { i.x.ax = 1 ; int86 ( 0X33 , & i , & o ) ; } void restrictmouseptr ( int x1 , int y1 , int x2 , int y2 ) { i.x.ax = 7 ; i.x.cx = x1 ; i.x.dx = x2 ; int86 ( 0X33 , & i , & o ) ; i.x.ax = 8 ; i.x.cx = y1 ; i.x.dx = y2 ; int86 ( 0X33 , & i , & o ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { printf ( " Press any key to clear the screen.\n  " ) ; getch ( ) ; clrscr ( ) ; printf ( " This appears after clearing the screen.\n  " ) ; printf ( " Press any key to exit...\n  " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " This line will be deleted when you press a key. " ) ; getch ( ) ; delline ( ) ; printf ( " Line deleted successfully. " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " Waiting for a character to be pressed from the keyboard to exit.\n  " ) ; getch ( ) ; return 0 ; }
#include <iostream.h> #include <conio.h> main ( ) { cout < < " Enter a character " ; getch ( ) ; }
#include <stdio.h> main ( ) { int c ; c = getchar ( ) ; putchar ( c ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { printf ( " Waiting for a character to be pressed from the keyboard to exit. " ) ; getche ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { while ( !kbhit ( ) ) printf ( " You haven't pressed a key.\n  " ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { int x ; printf ( " Hello " ) ; x = wherex ( ) ; printf ( " Horizontal cursor position from where this text appears = %d\n  " , x ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { int y ; printf ( " Hello\n  " ) ; y = wherey ( ) ; printf ( " Vertical cursor position from where this text appears = %d " , y ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <conio.h> main ( ) { textcolor ( RED ) ; cprintf ( " C programming " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { textcolor ( MAGENTA + BLINK ) ; cprintf ( " C programming " ) ; getch ( ) ; return 0 ; }
#include <stdio.h> #include <conio.h> main ( ) { textbackground ( RED ) ; cprintf ( " C program to change background color. " ) ; getch ( ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <math.h> int main ( ) { int n , result ; printf ( " Enter an integer to calculate it's absolute value\n  " ) ; scanf ( " %d " , & n ) ; result = abs ( n ) ; printf ( " Absolute value of %d = %d\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to round it up\n  " ) ; scanf ( " %lf " , & n ) ; result = ceil ( n ) ; printf ( " Original number = %.2lf\n  " , n ) ; printf ( " Number rounded up = %.2lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double result , x = 1.0471 ; result = cos ( x ) ; printf ( " cos ( %.4lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to round it down\n  " ) ; scanf ( " %lf " , & n ) ; result = floor ( n ) ; printf ( " Original number = %.2lf\n  " , n ) ; printf ( " Number rounded down = %.2lf\n  " , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's natural log ( base is e ) \n  " ) ; scanf ( " %lf " , & n ) ; result = log ( n ) ; printf ( " Natural log of %.2lf = %lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's log ( base is 10 ) \n  " ) ; scanf ( " %lf " , & n ) ; result = log10 ( n ) ; printf ( " Common log of %.2lf = %.2lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double c , d , result ; printf ( " Enter c and d to calculate c^d\n  " ) ; scanf ( " %lf %lf " , & c , & d ) ; result = pow ( c , d ) ; printf ( " %.2lf raised to %.2lf = %.2lf\n  " , c , d , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int x = 5 ; double result ; result = pow10 ( x ) ; printf ( " Ten raised to %d is %lf\n  " , x , result ) ; return 0 ; } eval ( ez_write_tag ( [ [ 728 , 90 ] , 'programmingsimplified_com-box-3' , 'ezslot_1' ] ) ) ;
#include <stdio.h> #include <math.h> int main ( ) { double result , x = M_PI / 6 ; result = sin ( x ) ; printf ( " The sin ( %lf ) = %.2lf\n  " , x , result ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double n , result ; printf ( " Enter a number to calculate it's square root\n  " ) ; scanf ( " %lf " , & n ) ; result = sqrt ( n ) ; printf ( " Square root of %.2lf = %.2lf\n  " , n , result ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num ; printf ( " \n Hello world!\n Welcome to Studytonight : Best place to learn\n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num1 , num2 ; float fraction ; char character ; printf ( " Enter two numbers number\n  " ) ; scanf ( " %d %i " , & num1 , & num2 ) ; printf ( " \n \n The two numbers You have entered are %d and %i\n \n  " , num1 , num2 ) ; printf ( " \n \n Enter a Decimal number\n  " ) ; scanf ( " %f " , & fraction ) ; printf ( " \n \n The float or fraction that you have entered is %f " , fraction ) ; printf ( " \n \n Enter a Character\n  " ) ; scanf ( " %c " , & character ) ; printf ( " \n \n The character that you have entered is %c " , character ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char str [ 50 ] ; printf ( " Enter your complete name : \n \n \n  " ) ; gets ( str ) ; printf ( " \n \n Welcome to Studytonight %s\n \n \n  " , str ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int number ; printf ( " Please enter a number : \n  " ) ; scanf ( " %d " , & number ) ; if ( number < 100 ) printf ( " Number is less than 100!\n  " ) ; else if ( number = = 100 ) printf ( " Number is 100!\n  " ) ; else printf ( " Number is greater than 100!\n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char grade ; printf ( " Enter your grade : \n  " ) ; scanf ( " %c " , & grade ) ; switch ( grade ) { case 'A' : printf ( " Excellent\n  " ) ; break ; case 'B' : printf ( " Keep it up!\n \n  " ) ; break ; case 'C' : printf ( " Well done\n break keyword takes execution to exit the switch case\n \n  " ) ; break ; case 'D' : printf ( " You passed\n  " ) ; break ; case 'F' : printf ( " Better luck next time\n  " ) ; break ; default : printf ( " Invalid grade\n  " ) ; } printf ( " Your grade is %c\n  " , grade ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char grade ; printf ( " Enter your grade : \n  " ) ; scanf ( " %c " , & grade ) ; switch ( grade ) { case 'A' : printf ( " Excellent\n  " ) ; case 'B' : printf ( " \n \n \n Keep it up!\n \n No break statement\n \n Hence all the case following this ( but not the ones above this ) except the default case will get executed !\n \n  " ) ; case 'C' : printf ( " \n \n \t\tCase C : Well done !\n \n  " ) ; case 'D' : printf ( " \t\tCase D : You passed!\n \n  " ) ; case 'F' : printf ( " \t\tCase E : Better luck next time\n \n \n  " ) ; default : printf ( " \t\tDefault Case : Invalid grade\n \n \n  " ) ; } printf ( " Your grade is %c\n  " , grade ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char alphabet ; printf ( " Enter an alphabet : " ) ; putchar ( '\n ' ) ; alphabet = getchar ( ) ; printf ( " \n \n Reverse case of %c is : " , alphabet ) ; if ( islower ( alphabet ) ) putchar ( toupper ( alphabet ) ) ; else printf ( " %c " , tolower ( alphabet ) ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 10 , y = 15 , temp ; temp = x ; x = y ; y = temp ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 10 , y = 15 ; x = x + y - ( y = x ) ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 6 , y = 4 ; x = x^y ; y = x^y ; x = x^y ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int x = 6 , y = 4 ; x = x * y ; y = x / y ; x = x / y ; printf ( " x = %d and y = %d " , x , y ) ; getch ( ) ; }
#include <stdio.h> int a , b ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; printf ( " \n \n Enter the two values to find the greatest and smallest number : \n  " ) ; scanf ( " %d %d " , & a , & b ) ; if ( a = = b ) printf ( " Both are equal\n  " ) ; else if ( a < b ) { printf ( " \n \n The largest number is %03d\n  " , b ) ; printf ( " \n The smallest number is %03d\n  " , a ) ; printf ( " \n The largest number is %03d\n  " , b ) ; } else { printf ( " The largest number is %03d\n  " , a ) ; printf ( " The smallest number is %03d\n  " , b ) ; } printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int i = 0 ; for ( i = 0 ; i < 10 ; i + + ) { printf ( " i = %d\n  " , i ) ; } printf ( " \n \The value of i after exiting the loop is %d\n \n  " , i ) ; printf ( " \n Remember that the loop condition checks the conditional statement before it loops again.\n \n  " ) ; printf ( " Consequently , when i equals 10 , the loop breaks.\n \n  " ) ; printf ( " i is updated before the condition is checked- hence the value of i after exiting the loop is 10 .\n \n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int i = 0 ; printf ( " \n Printing numbers using while loop from 0 to 9\n \n  " ) ; while ( i <10 ) { printf ( " %d\n  " , i ) ; i + + ; } printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int fact , i , n ; fact = 1 ; printf ( " Enter the number\t " ) ; scanf ( " %d " , & n ; ) ; for ( i = 1 ; i < = n ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is %d " , n , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void fibonacci ( int num ) ; void main ( ) { int num = 0 ; clrscr ( ) ; printf ( " Enter number of terms\t " ) ; scanf ( " %d " , & num ) ; fibonacci ( num ) ; getch ( ) ; } void fibonacci ( int num ) { int a , b , c , i = 3 ; a = 0 ; b = 1 ; if ( num = = 1 ) printf ( " %d " , a ) ; if ( num > = 2 ) printf ( " %d\t %d " , a , b ) ; while ( i < = num ) { c = a + b ; printf ( " \t %d " , c ) ; a = b ; b = c ; i + + ; } }
#include <stdio.h> #include <conio.h> void main ( ) { int a , b , c , s = 0 ; clrscr ( ) ; printf ( " Enter a number : \t " ) ; scanf ( " %d " , & a ; ) ; c = a ; while ( a > 0 ) { b = a %10 ; s = ( s * 10 ) + b ; a = a / 10 ; } if ( s = = c ) { printf ( " The number %d is a palindrome " , c ) ; } else { printf ( " The number %d is not a palindrome " , c ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , sum = 0 , c , remainder ; printf ( " Enter the number you want to add digits of : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { remainder = n %10 ; sum + = remainder ; n = n / 10 ; } printf ( " \n \n Sum of the digits of the entered number is = %d\n \n  " , sum ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void main ( ) { int i , j , k ; char str [ 100 ] ; char rev [ 100 ] ; printf ( " Enter a string : \t " ) ; scanf ( " %s " , str ) ; printf ( " The original string is %s\n  " , str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) ; { k = i-1 ; } for ( j = 0 ; j < = i-1 ; j + + ) { rev [ j ] = str [ k ] ; k-- ; } printf ( " The reverse string is %s\n  " , rev ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , i ; float sum = 0 , x ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n \n Enter %d elements\n \n  " , n ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %f " , & x ) ; sum + = x ; } printf ( " \n \n \n Average of the entered numbers is = %f " , ( sum / n ) ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , sum , i , t , a ; printf ( " \n \n \n The Armstrong numbers in between 1 to 500 are : \n \n \n  " ) ; for ( i = 1 ; i < = 500 ; i + + ) { t = i ; sum = 0 ; while ( t ! = 0 ) { a = t %10 ; sum + = a * a * a ; t = t / 10 ; } if ( sum = = i ) printf ( " \n \t\t\t %d " , i ) ; } printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , sum = 0 , c , t , a ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; t = n ; while ( n ! = 0 ) { a = n %10 ; sum + = a * a * a ; n = n / 10 ; } printf ( " \n \n \n \t\t\tsum = %d " , sum ) ; if ( sum = = t ) printf ( " \n \n \t\t %d is an armstrong number\n  " , t ) ; else printf ( " \n \n \t\t %d is not an armstrong number\n  " , t ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int x ; for ( x = 0 ; x < = 10 ; x + + ) { if ( x & 1 ) printf ( " \t\t\t %d is odd\n  " , x ) ; else if ( ! ( x & 1 ) ) printf ( " \t\t\t %d is even\n  " , x ) ; } printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; if ( ( n / 2 ) * 2 = = n ) printf ( " \n \n \t\t %d is Even\n  " , n ) ; else printf ( " \n \n \t\t %d is Odd\n  " , n ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num , i ; printf ( " Enter the number to find the factors of : " ) ; scanf ( " %d " , & num ) ; printf ( " \n \n \n Factors of %d are \n \n  " , num ) ; for ( i = 1 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) printf ( " \t\t\t %d\n  " , i ) ; } printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , sum = 0 , c , value ; printf ( " \n \n Enter the number of integers you want to add : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d integers\n \n  " , n ) ; for ( c = 1 ; c < = n ; c + + ) { scanf ( " %d " , & value ) ; sum + = value ; } printf ( " \n \n \n sum of entered numbers = %d " , sum ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , i = 3 , count , c ; printf ( " \n Enter the number of prime numbers required : " ) ; scanf ( " %d " , & n ) ; if ( n > = 1 ) { printf ( " \n \n First %d prime numbers are : " , n ) ; printf ( " 2 " ) ; } for ( count = 2 ; count < = n ; i + + ) { for ( c = 2 ; c < i ; c + + ) { if ( i %c = = 0 ) break ; } if ( c = = i ) { printf ( " %d " , i ) ; count + + ; } } printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , i ; float c , big ; printf ( " \n \n Enter the number of elements you wish to find the greatest element of : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter %d numbers : \n  " , n ) ; printf ( " \n \n \t\t\tElement 1 : " ) ; scanf ( " %f " , & big ) ; for ( i = 2 ; i < = n ; i + + ) { printf ( " \n \t\t\tElement %d : " , i ) ; scanf ( " %f " , & c ) ; if ( big < c ) big = c ; } printf ( " \n \n \n The largest of the %d numbers is %f " , n , big ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , exp , exp1 ; long long int value = 1 ; printf ( " Enter the number and its exponential : \n \n  " ) ; scanf ( " %d %d " , & n , & exp ) ; exp1 = exp ; while ( exp-- > 0 ) { value * = n ; } printf ( " \n \n  %d^ %d = %lld\n \n  " , n , exp1 , value ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> #include <string.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char number [ 10 ] ; int flag = 0 ; int length , i = 0 ; printf ( " \n \n Enter a number : " ) ; scanf ( " %s " , number ) ; length = strlen ( number ) ; while ( number [ i + + ] ! = '\0' ) { if ( number [ i ] = = '.' ) { flag = 1 ; break ; } } if ( flag ) printf ( " \n \n \n \tEntered Number is a Floating point Number\n \n  " ) ; else printf ( " \n \n \n \tEntered Number is a integer Number\n \n  " ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , i ; printf ( " Enter an integer you need to print the table of : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n \n  " ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " \n \t\t\t %d * %d = %d \n  " , n , i , n * i ) ; } printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int array [ 100 ] , position , c , n , value ; printf ( " \n \n Enter number of elements in array : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter %d elements\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " \n \n Enter the location where you want to insert new element : " ) ; scanf ( " %d " , & position ) ; printf ( " \n \n Enter the value to insert : " ) ; scanf ( " %d " , & value ) ; for ( c = n-1 ; c > = position-1 ; c-- ) array [ c + 1 ] = array [ c ] ; array [ position - 1 ] = value ; printf ( " \n \n Resultant array is : " ) ; for ( c = 0 ; c < = n ; c + + ) printf ( " %d " , array [ c ] ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int array [ 100 ] , position , c , n ; printf ( " \n \n Enter number of elements in array : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter %d elements\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " \n \n Enter the location where you want to delete element from : " ) ; scanf ( " %d " , & position ) ; if ( position > = n + 1 ) printf ( " \n \n Deletion not possible\n \n  " ) ; else for ( c = position-1 ; c < n-1 ; c + + ) array [ c ] = array [ c + 1 ] ; printf ( " \n \n Resultant array is : " ) ; for ( c = 0 ; c < n-1 ; c + + ) printf ( " %d " , array [ c ] ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int array [ 10 ] , element , c , n , pos ; int found = 0 ; printf ( " \n \n Enter number of elements in array : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter %d elements\n  " , n ) ; for ( c = 0 ; c < n ; c + + ) scanf ( " %d " , & array [ c ] ) ; printf ( " \n \n The input array is : " ) ; for ( c = 0 ; c < n ; c + + ) printf ( " %d " , array [ c ] ) ; printf ( " \n \n Enter the element to be deleted : " ) ; scanf ( " %d " , & element ) ; for ( c = 0 ; c < n ; c + + ) { if ( array [ c ] = = element ) { found = 1 ; pos = c ; break ; } } if ( found = = 1 ) { for ( c = pos ; c < n-1 ; c + + ) array [ c ] = array [ c + 1 ] ; } else printf ( " \n \n Element %d is not found in the array\n \n  " , element ) ; printf ( " \n \n Resultant array is : " ) ; for ( c = 0 ; c < n-1 ; c + + ) printf ( " %d " , array [ c ] ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int a [ 50 ] , size , i , big , small ; printf ( " \n Enter the size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " \n \n Enter the %d elements of the array : \n \n  " , size ) ; for ( i = 0 ; i < size ; i + + ) scanf ( " %d " , & a [ i ] ) ; big = a [ 0 ] ; for ( i = 1 ; i < size ; i + + ) { if ( big < a [ i ] ) { big = a [ i ] ; } } printf ( " \n \n The largest element is : %d " , big ) ; small = a [ 0 ] ; for ( i = 1 ; i < size ; i + + ) { if ( small> a [ i ] ) { small = a [ i ] ; } } printf ( " \n \n The smallest element is : %d " , small ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , sum = 0 , c , array [ 100 ] ; printf ( " Enter the number of integers you want to add : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n Enter %d integers \n \n  " , n ) ; for ( c = 0 ; c < n ; c + + ) { scanf ( " %d " , & array [ c ] ) ; sum + = array [ c ] ; } printf ( " \n \n Sum = %d\n \n  " , sum ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <conio.h> void sorting ( int * x , int y ) ; void main ( ) { int a [ 20 ] , i , c , n ; clrscr ( ) ; printf ( " Enter number of elements you want to sort : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; i < n ; i + + ) scanf ( " %d " , & a [ i ] ) ; sorting ( a , n ) ; for ( i = 0 ; i <n ; i + + ) printf ( " %d\t " , a [ i ] ) ; getch ( ) ; } void sorting ( int * x , int y ) { int i , j , temp ; for ( i = 1 ; i < = y-1 ; i + + ) { for ( j = 0 ; j < y-i ; j + + ) { if ( * ( x + j ) > * ( x + j + 1 ) ) { temp = * ( x + j ) ; * ( x + j ) = * ( x + j + 1 ) ; * ( x + j + 1 ) = temp ; } } } }
#include <stdio.h> #include <conio.h> void main ( ) { int a [ 20 ] , i , j , k , n ; clrscr ( ) ; printf ( " \n Enter array size : " ) ; scanf ( " %d " , & n ; ) ; printf ( " \n Enter %d array element : " , n ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , & a ; [ i ] ) ; } printf ( " \n Original array is : " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d " , a [ i ] ) ; } printf ( " \n New array is : " ) ; for ( i = 0 ; i < n ; i + + ) { for ( j = i + 1 ; j < n ; ) { if ( a [ j ] = = a [ i ] ) { for ( k = j ; k < n ; k + + ) { a [ k ] = a [ k + 1 ] ; } n-- ; } else { j + + ; } } } for ( i = 0 ; i < n ; i + + ) { printf ( " %d " , a [ i ] ) ; } getch ( ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , m , c , d , matrix [ 10 ] [ 10 ] ; int counter = 0 ; printf ( " \n Enter the number of rows and columns of the matrix \n \n  " ) ; scanf ( " %d %d " , & m , & n ) ; printf ( " \n Enter the %d elements of the matrix \n \n  " , m * n ) ; for ( c = 0 ; c < m ; c + + ) { for ( d = 0 ; d < n ; d + + ) { scanf ( " %d " , & matrix [ c ] [ d ] ) ; if ( matrix [ c ] [ d ] = = 0 ) counter + + ; } } printf ( " \n \n The entered matrix is : \n \n  " ) ; for ( c = 0 ; c < m ; c + + ) { for ( d = 0 ; d < n ; d + + ) { printf ( " %d\t " , matrix [ c ] [ d ] ) ; } printf ( " \n  " ) ; } if ( counter > ( m * n ) / 2 ) printf ( " \n \n The entered matrix is a sparse matrix\n \n  " ) ; else printf ( " \n \n The entered matrix is not a sparse matrix\n \n  " ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int a [ 2 ] [ 2 ] , i , j ; long determinant ; printf ( " \n \n Enter the 4 elements of the array\n  " ) ; for ( i = 0 ; i < 2 ; i + + ) for ( j = 0 ; j < 2 ; j + + ) scanf ( " %d " , & a [ i ] [ j ] ) ; printf ( " \n \n The entered matrix is : \n \n  " ) ; for ( i = 0 ; i < 2 ; i + + ) { for ( j = 0 ; j < 2 ; j + + ) { printf ( " %d\t " , a [ i ] [ j ] ) ; } printf ( " \n  " ) ; } determinant = a [ 0 ] [ 0 ] * a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] * a [ 0 ] [ 1 ] ; printf ( " \n \n Dterminant of 2x2 matrix is : %d - %d = %d " , a [ 0 ] [ 0 ] * a [ 1 ] [ 1 ] , a [ 1 ] [ 0 ] * a [ 0 ] [ 1 ] , determinant ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int i , j , n , aj [ 10 ] [ 10 ] , sum = 0 , sum1 = 0 , a = 0 , normal ; printf ( " \n Enter the number of rows ( columns ) of the matrix : \n \n  " ) ; scanf ( " %d " , & n ) ; printf ( " \n Enter the %d elements of the first matrix : \n \n  " , n * n ) ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j < n ; j + + ) { scanf ( " %d " , & aj [ i ] [ j ] ) ; a = aj [ i ] [ j ] * aj [ i ] [ j ] ; sum1 + = a ; } } normal = sqrt ( ( double ) sum1 ) ; printf ( " \n \n The normal of the given matrix is : %d " , normal ) ; for ( i = 0 ; i < n ; i + + ) { sum = sum + aj [ i ] [ i ] ; } printf ( " \n \n The Trace of the given matrix is : %d " , sum ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int var = 24 ; int * p ; p = & var ; printf ( " \n \n Address of var variable is : %x \n \n  " , & var ) ; printf ( " \n \n Address stored in pointer variable p is : %x " , p ) ; printf ( " \n \n Value of var variable or the value stored at address p is %d " , * p ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , i , * ptr , sum = 0 ; printf ( " \n \n Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " \n \n Error! Memory not allocated\n  " ) ; return 0 ; } printf ( " \n \n Enter elements of array : \n \n  " ) ; for ( i = 0 ; i < n ; i + + ) { scanf ( " %d " , ptr + i ) ; sum = sum + * ( ptr + i ) ; } printf ( " \n \n The elements of the array are : " ) ; for ( i = 0 ; i < n ; i + + ) { printf ( " %d " , ptr [ i ] ) ; } free ( ptr ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> const int MAX = 3 ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int var [ ] = { 100 , 200 , 300 } ; int i , * ptr ; ptr = var ; for ( i = 0 ; i < MAX ; i + + ) { printf ( " \n \n \n Address of var [ %d ] = %x " , i , ptr ) ; printf ( " \n Value of var [ %d ] = %d " , i , * ptr ) ; ptr + + ; } printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> const int MAX = 3 ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int var [ ] = { 100 , 200 , 300 } ; int i , * ptr ; ptr = & var [ MAX-1 ] ; for ( i = MAX ; i > 0 ; i-- ) { printf ( " \n \n \n Address of var [ %d ] = %x " , i , ptr ) ; printf ( " \n Value of var [ %d ] = %d " , i , * ptr ) ; ptr-- ; } printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int * ptrA , * ptrB ; ptrA = ( int * ) 1 ; ptrB = ( int * ) 2 ; if ( ptr2 > ptr1 ) printf ( " PtrB is greater than ptrA " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { int * ptrA ; float * ptrB ; ptrA = ( int * ) 1000 ; ptrB = ( float * ) 2000 ; if ( ptrB > ptrA ) printf ( " PtrB is greater than ptrA " ) ; return ( 0 ) ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int var ; int * ptr ; int * * pptr ; var = 50 ; ptr = & var ; pptr = & ptr ; printf ( " \n \n Value of var = %d\n \n  " , var ) ; printf ( " \n \n Value available at * ptr = %d\n \n  " , * ptr ) ; printf ( " \n \n Value available at * * pptr = %d\n \n  " , * * pptr ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; char str [ 100 ] ; char rev [ 100 ] ; char * sptr = str ; char * rptr = rev ; int i = -1 ; printf ( " \n \n Enter a string : " ) ; scanf ( " %s " , str ) ; while ( * sptr ) { sptr + + ; i + + ; } while ( i > = 0 ) { sptr-- ; * rptr = * sptr ; rptr + + ; i-- ; } * rptr = '\0' ; rptr = rev ; while ( * rptr ) { * sptr = * rptr ; sptr + + ; rptr + + ; } printf ( " \n \n Reverse of the string is : %s " , str ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int a , b ; int * ptra , * ptrb ; int temp ; printf ( " Enter value for a : " ) ; scanf ( " %d " , & a ) ; printf ( " \n \n Enter value for b : " ) ; scanf ( " %d " , & b ) ; printf ( " \n \n The values before swapping are : a = %d b = %d " , a , b ) ; ptra = & a ; ptrb = & b ; temp = * ptra ; * ptra = * ptrb ; * ptrb = temp ; printf ( " \n \n The values after swapping are : a = %d b = %d " , a , b ) ; printf ( " \n \n \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int func ( int a , int b ) { printf ( " \n \n  a = %d \n  " , a ) ; printf ( " \n \n  b = %d \n  " , b ) ; } int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int ( * fptr ) ( int , int ) ; fptr = func ; func ( 2 , 3 ) ; fptr ( 2 , 3 ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int * ptr = NULL ; printf ( " \n \n  The value of ptr is : %x " , ptr ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int y ; int add ( int m , int n ) { if ( n = = 0 ) return m ; y = add ( m , n-1 ) + 1 ; return y ; } int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int a , b , r ; printf ( " Enter the two numbers : \n  " ) ; scanf ( " %d %d " , & a , & b ) ; r = add ( a , b ) ; printf ( " \n \n Sum of two numbers is : %d\n \n  " , r ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; }
#include <stdio.h> int fact ( int ) ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num , f ; printf ( " \n \n Enter a number : " ) ; scanf ( " %d " , & num ) ; f = fact ( num ) ; printf ( " \n \n Factorial of %d is %d\n \n  " , num , f ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int fact ( int aj ) { if ( aj = = 1 || aj = = 0 ) return 1 ; else return ( aj * fact ( aj-1 ) ) ; }
#include <stdio.h> void printFibo ( int ) ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int k , n ; long int i = 0 , j = 1 ; printf ( " Enter the length of the Fibonacci series : " ) ; scanf ( " %d " , & n ) ; printf ( " \n \n first %d terms of Fibonacci series are : \n \n \n  " , n ) ; printf ( " %d " , 1 ) ; printFibo ( n ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } void printFibo ( int aj ) { static long int first = 0 , second = 1 , sum ; if ( aj > 1 ) { sum = first + second ; first = second ; second = sum ; printf ( " %ld " , sum ) ; printFibo ( aj-1 ) ; } else { printf ( " \n \n \n  " ) ; } }
#include <stdio.h> int getSum ( int ) ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int n , sum ; printf ( " \n \n Enter the range of n : " ) ; scanf ( " %d " , & n ) ; sum = getSum ( n ) ; printf ( " \n \n The sum of first %d numbers is %d\n  " , n , sum ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int getSum ( int aj ) { static int sum = 0 ; if ( aj > 0 ) { sum = sum + aj ; getSum ( aj-1 ) ; } return sum ; }
#include <stdio.h> int isPal ( int ) ; int n ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int palindrome ; printf ( " \n \n Enter a number to check for Palindrome : " ) ; scanf ( " %d " , & n ) ; palindrome = isPal ( n ) ; if ( palindrome = = 1 ) printf ( " \n \n \n  %d is palindrome\n \n  " , n ) ; else printf ( " \n \n \n  %d is not palindrome\n \n  " , n ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int isPal ( int aj ) { static int sum = 0 ; if ( aj ! = 0 ) { sum = sum * 10 + aj %10 ; isPal ( aj / 10 ) ; } else if ( sum = = n ) return 1 ; else return 0 ; }
#include <stdio.h> int power ( int n1 , int n2 ) ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int base , exp ; printf ( " Enter base number : " ) ; scanf ( " %d " , & base ) ; printf ( " \n \n Enter Power factor : " ) ; scanf ( " %d " , & exp ) ; printf ( " \n \n \n \t\t\t %d^ %d = %d " , base , exp , power ( base , exp ) ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int power ( int b , int e ) { if ( e = = 0 ) return 1 ; return ( b * power ( b , e-1 ) ) ; }
#include <stdio.h> #define MAX 100 int getMaxElement ( int [ ] ) ; int size ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int arr [ MAX ] , max , i ; printf ( " \n \n Enter the size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " \n \n Enter %d elements\n \n  " , size ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } max = getMaxElement ( arr ) ; printf ( " \n \n Largest element of the array is %d\n \n  " , max ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int getMaxElement ( int a [ ] ) { static int i = 0 , max = - 9999 ; if ( i < size ) { if ( max < a [ i ] ) max = a [ i ] ; i + + ; getMaxElement ( a ) ; } return max ; }
#include <stdio.h> int isPrime ( int , int ) ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int num , prime ; printf ( " Enter a positive number to check if Prime : " ) ; scanf ( " %d " , & num ) ; prime = isPrime ( num , num / 2 ) ; if ( prime = = 1 ) { printf ( " \n \n  %d is a prime number\n \n  " , num ) ; } else { printf ( " \n \n  %d is a Composite number\n \n  " , num ) ; } printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int isPrime ( int n , int i ) { if ( i = = 1 ) return 1 ; else { if ( n %i = = 0 ) return 0 ; else isPrime ( n , i-1 ) ; } }
#include <stdio.h> int find_lcm ( int , int ) ; int main ( ) { printf ( " \n \n \t\tStudytonight - Best place to learn\n \n \n  " ) ; int a , b , lcm ; printf ( " \n \n Enter 2 integers to find LCM of : \n  " ) ; scanf ( " %d %d " , & a , & b ) ; lcm = find_lcm ( a , b ) ; printf ( " \n \n  LCM of %d and %d is : %d\n \n  " , a , b , lcm ) ; printf ( " \n \n \t\t\tCoding is Fun !\n \n \n  " ) ; return 0 ; } int find_lcm ( int a , int b ) { static int temp = 1 ; if ( temp %a = = 0 & & temp %b = = 0 ) { return temp ; } else { temp + + ; find_lcm ( a , b ) ; return temp ; } }
#include <stdio.h> int main ( ) { printf ( " Hello World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { char c ; c = 'A' ; printf ( " value of c is %c " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; i = 123 ; printf ( " value of i is %d " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { float f ; f = 12.001234 ; printf ( " value of f is %f " , f ) ; return 0 ; }
#include <stdio.h> int main ( ) { double d ; d = 12.001234 ; printf ( " value of d is %e " , d ) ; return 0 ; }
#include <stdio.h> int main ( ) { int op1 , op2 , sum ; op1 = 5 ; op2 = 3 ; sum = op1 + op2 ; printf ( " sum of %d and %d is %d " , op1 , op2 , sum ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , sub ; op1 = 5 ; op2 = 3 ; sub = op1 - op2 ; printf ( " Output of %d − %d is %d " , op1 , op2 , sub ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , mul ; op1 = 5 ; op2 = 3 ; mul = op1 * op2 ; printf ( " Output of %d multiplied by %d is %d " , op1 , op2 , mul ) ; }
#include <stdio.h> int main ( ) { int op1 , op2 , div ; op1 = 6 ; op2 = 3 ; div = 6 / 3 ; printf ( " Output of %d divide by %d is %d " , op1 , op2 , div ) ; }
#include <stdio.h> int main ( ) { int a , b ; a = 11 ; b = 99 ; if ( a > b ) printf ( " a is greater than b " ) ; else printf ( " a is not greater than b " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 11 ; b = 22 ; c = 33 ; if ( a > b & & a > c ) printf ( " %d is the largest. " , a ) ; else if ( b > a & & b > c ) printf ( " %d is the largest. " , b ) ; else if ( c > a & & c > b ) printf ( " %d is the largest. " , c ) ; else printf ( " Values are not unique " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int even = 24 ; int odd = 31 ; if ( even % 2 = = 0 ) printf ( " %d is even\n  " , even ) ; if ( odd % 2 ! = 0 ) printf ( " %d is odd\n  " , odd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int number = -2 ; if ( number > = 0 ) printf ( " %d is positive\n  " , number ) ; else printf ( " %d is negative\n  " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; year = 2016 ; if ( ( ( year % 4 = = 0 ) & & ( year % 100! = 0 ) ) || ( year %400 = = 0 ) ) printf ( " %d is a leap year " , year ) ; else printf ( " %d is not a leap year " , year ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , temp ; a = 11 ; b = 99 ; printf ( " Values before swapping - \n  a = %d , b = %d \n \n  " , a , b ) ; temp = a ; a = b ; b = temp ; printf ( " Values after swapping - \n  a = %d , b = %d \n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int a , b ; a = 11 ; b = 99 ; printf ( " Values before swapping - \n  a = %d , b = %d \n \n  " , a , b ) ; a = a + b ; b = a - b ; a = a - b ; printf ( " Values after swapping - \n  a = %d , b = %d \n  " , a , b ) ; }
#include <stdio.h> int main ( ) { int i , start , end ; start = 1 ; end = 10 ; for ( i = start ; i < = end ; i + + ) printf ( " %2d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = i ; j < = 100 ; j + = 10 ) printf ( " %3d " , j ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; n = 3 ; j = 1 ; for ( i = n ; i < = ( n * 10 ) ; i + = n ) { printf ( " %3d x %2d = %3d\n  " , n , j , i ) ; j + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count ; int start , end ; start = 2 , end = 10 ; for ( i = start ; i < = end ; i + + ) { count = i ; for ( j = 1 ; j < = 10 ; j + + ) { printf ( " %3d " , count * j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; start = 1 ; end = 10 ; for ( i = end ; i > = start ; i-- ) printf ( " %2d\n  " , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i %2 = = 0 ) printf ( " %2d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i %2 ! = 0 ) printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = n-i ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 1 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < i ; j + + ) printf ( " " ) ; for ( j = i ; j < = n ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 1 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; j <i ; j + + ) printf ( " " ) ; for ( j = i ; j < n ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j ; n = 5 ; for ( i = n ; i > = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , i , j , k = 1 ; n = 5 ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) printf ( " %3d " , k + + ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int factorial ( int n ) { int f ; for ( f = 1 ; n > 1 ; n-- ) f * = n ; return f ; } int ncr ( int n , int r ) { return factorial ( n ) / ( factorial ( n-r ) * factorial ( r ) ) ; } int main ( ) { int n , i , j ; n = 5 ; for ( i = 0 ; i < = n ; i + + ) { for ( j = 0 ; j < = n-i ; j + + ) printf ( " " ) ; for ( j = 0 ; j < = i ; j + + ) printf ( " %3d " , ncr ( i , j ) ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop ; for ( loop = 0 ; loop < 10 ; loop + + ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop ; for ( loop = 9 ; loop > = 0 ; loop-- ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int sum , loop ; sum = 0 ; for ( loop = 9 ; loop > = 0 ; loop-- ) { sum = sum + array [ loop ] ; } printf ( " Sum of array is %d. " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int sum , loop ; float avg ; sum = avg = 0 ; for ( loop = 0 ; loop < 10 ; loop + + ) { sum = sum + array [ loop ] ; } avg = ( float ) sum / loop ; printf ( " Average of array values is %.2f " , avg ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop , largest ; largest = array [ 0 ] ; for ( loop = 1 ; loop < 10 ; loop + + ) { if ( largest < array [ loop ] ) largest = array [ loop ] ; } printf ( " Largest element of array is %d " , largest ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 101 , 11 , 3 , 4 , 50 , 69 , 7 , 8 , 9 , 0 } ; int loop , largest , second ; if ( array [ 0 ] > array [ 1 ] ) { largest = array [ 0 ] ; second = array [ 1 ] ; } else { largest = array [ 1 ] ; second = array [ 0 ] ; } for ( loop = 2 ; loop < 10 ; loop + + ) { if ( largest < array [ loop ] ) { second = largest ; largest = array [ loop ] ; } else if ( second < array [ loop ] ) { second = array [ loop ] ; } } printf ( " Largest - %d \n Second - %d \n  " , largest , second ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int loop , smallest ; smallest = array [ 0 ] ; for ( loop = 1 ; loop < 10 ; loop + + ) { if ( smallest > array [ loop ] ) smallest = array [ loop ] ; } printf ( " Smallest element of array is %d " , smallest ) ; return 0 ; }
#include <stdio.h> int main ( ) { int original [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int copied [ 10 ] ; int loop ; for ( loop = 0 ; loop < 10 ; loop + + ) { copied [ loop ] = original [ loop ] ; } printf ( " original -> copied \n  " ) ; for ( loop = 0 ; loop < 10 ; loop + + ) { printf ( " %2d %2d\n  " , original [ loop ] , copied [ loop ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int original [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; int copied [ 10 ] ; int loop , count ; count = 9 ; for ( loop = 0 ; loop < 10 ; loop + + ) { copied [ count ] = original [ loop ] ; count-- ; } printf ( " original -> copied \n  " ) ; for ( loop = 0 ; loop < 10 ; loop + + ) { printf ( " %2d %2d\n  " , original [ loop ] , copied [ loop ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; int even [ 10 ] , odd [ 10 ] ; int loop , e , d ; e = d = 0 ; for ( loop = 0 ; loop < 10 ; loop + + ) { if ( array [ loop ] %2 = = 0 ) { even [ e ] = array [ loop ] ; e + + ; } else { odd [ d ] = array [ loop ] ; d + + ; } } printf ( " original -> " ) ; for ( loop = 0 ; loop < 10 ; loop + + ) printf ( " %d " , array [ loop ] ) ; printf ( " \n  even -> " ) ; for ( loop = 0 ; loop < e ; loop + + ) printf ( " %d " , even [ loop ] ) ; printf ( " \n  odd -> " ) ; for ( loop = 0 ; loop < d ; loop + + ) printf ( " %d " , odd [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { int array [ 10 ] ; int even [ 5 ] = { 0 , 2 , 4 , 6 , 8 } ; int odd [ 5 ] = { 1 , 3 , 5 , 7 , 9 } ; int loop , index , e_len , o_len ; e_len = o_len = 5 ; index = 0 ; for ( loop = 0 ; loop < e_len ; loop + + ) { array [ index ] = even [ loop ] ; index + + ; } for ( loop = 0 ; loop < o_len ; loop + + ) { array [ index ] = odd [ loop ] ; index + + ; } printf ( " \n Even -> " ) ; for ( loop = 0 ; loop < e_len ; loop + + ) printf ( " %d " , even [ loop ] ) ; printf ( " \n Odd -> " ) ; for ( loop = 0 ; loop < o_len ; loop + + ) printf ( " %d " , odd [ loop ] ) ; printf ( " \n Concat -> " ) ; for ( loop = 0 ; loop < 10 ; loop + + ) printf ( " %d " , array [ loop ] ) ; return 0 ; }
#include <stdio.h> int main ( ) { char str [ ] = " Hello World " ; printf ( " %s\n  " , str ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; int i = 0 ; while ( s1 [ i ] ! = '\0' ) { i + + ; } printf ( " Length of string ' %s' is %d " , s1 , i ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = " TajMahal " ; char ch = 'a' ; int i = 0 ; int count = 0 ; while ( s [ i ] ! = '\0' ) { if ( s [ i ] = = ch ) count + + ; i + + ; } if ( count > 0 ) { if ( count = = 1 ) printf ( " %c appears %d time in ' %s' " , ch , count , s ) ; else printf ( " %c appears %d times in ' %s' " , ch , count , s ) ; } else printf ( " %c did not appear in %s " , ch , s ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s [ ] = " TajMahal " ; int i = 0 ; int vowels = 0 ; int consonants = 0 ; while ( s [ i + + ] ! = '\0' ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'o' || s [ i ] = = 'u' ) vowels + + ; else consonants + + ; } printf ( " ' %s' contains %d vowels and %d consonants. " , s , vowels , consonants ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char string [ ] = " simplyeasylearning " ; char temp ; int i , j ; int n = strlen ( string ) ; printf ( " String before sorting - %s \n  " , string ) ; for ( i = 0 ; i < n-1 ; i + + ) { for ( j = i + 1 ; j < n ; j + + ) { if ( string [ i ] > string [ j ] ) { temp = string [ i ] ; string [ i ] = string [ j ] ; string [ j ] = temp ; } } } printf ( " String after sorting - %s \n  " , string ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; char s2 [ 8 ] ; int length = 0 ; while ( s1 [ length ] ! = '\0' ) { s2 [ length ] = s1 [ length ] ; length + + ; } s2 [ length ] = '\0' ; printf ( " Value in s1 = %s \n  " , s1 ) ; printf ( " Value in s2 = %s \n  " , s2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; char s2 [ 8 ] ; int length = 0 ; int loop = 0 ; while ( s1 [ length ] ! = '\0' ) { length + + ; } printf ( " \n Printing in reverse - " ) ; for ( loop = --length ; loop> = 0 ; loop-- ) printf ( " %c " , s1 [ loop ] ) ; loop = 0 ; printf ( " \n Storing in reverse - " ) ; while ( length > = 0 ) { s2 [ length ] = s1 [ loop ] ; length-- ; loop + + ; } s1 [ loop ] = '\0' ; printf ( " %s\n  " , s2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char s1 [ ] = " Beauty is in the eye of the beholder " ; char s2 [ ] = " the " ; int n = 0 ; int m = 0 ; int times = 0 ; int len = strlen ( s2 ) ; while ( s1 [ n ] ! = '\0' ) { if ( s1 [ n ] = = s2 [ m ] ) { while ( s1 [ n ] = = s2 [ m ] & & s1 [ n ] ! = '\0' ) { n + + ; m + + ; } if ( m = = len & & ( s1 [ n ] = = ' ' || s1 [ n ] = = '\0' ) ) { times + + ; } } else { while ( s1 [ n ] ! = ' ' ) { n + + ; if ( s1 [ n ] = = '\0' ) break ; } } n + + ; m = 0 ; } if ( times > 0 ) { printf ( " ' %s' appears %d time ( s ) \n  " , s2 , times ) ; } else { printf ( " ' %s' does not appear in the sentence.\n  " , s2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char s1 [ ] = " TajMahal " ; char s2 [ ] = " Dazzling " ; char ch ; int index = 0 ; printf ( " Before Swapping - \n  " ) ; printf ( " Value of s1 - %s \n  " , s1 ) ; printf ( " Value of s2 - %s \n  " , s2 ) ; while ( s1 [ index ] ! = '\0' ) { ch = s1 [ index ] ; s1 [ index ] = s2 [ index ] ; s2 [ index ] = ch ; index + + ; } printf ( " After Swapping - \n  " ) ; printf ( " Value of s1 - %s \n  " , s1 ) ; printf ( " Value of s2 - %s \n  " , s2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( void ) { char s1 [ ] = " recitals " ; char s2 [ ] = " articles " ; char temp ; int i , j ; int n = strlen ( s1 ) ; int n1 = strlen ( s2 ) ; if ( n ! = n1 ) { printf ( " %s and %s are not anagrams! \n  " , s1 , s2 ) ; return 0 ; } for ( i = 0 ; i < n-1 ; i + + ) { for ( j = i + 1 ; j < n ; j + + ) { if ( s1 [ i ] > s1 [ j ] ) { temp = s1 [ i ] ; s1 [ i ] = s1 [ j ] ; s1 [ j ] = temp ; } if ( s2 [ i ] > s2 [ j ] ) { temp = s2 [ i ] ; s2 [ i ] = s2 [ j ] ; s2 [ j ] = temp ; } } } for ( i = 0 ; i <n ; i + + ) { if ( s1 [ i ] ! = s2 [ i ] ) { printf ( " Strings are not anagrams! \n  " , s1 , s2 ) ; return 0 ; } } printf ( " Strings are anagrams! \n  " ) ; return 0 ; }
#include <stdio.h> #include <string.h> int string_length ( char s [ ] ) { int i = 0 ; while ( s [ i ] ! = '\0' ) i + + ; return i ; } void string_reverse ( char st [ ] ) { int i , j , len ; char ch ; j = len = string_length ( st ) - 1 ; i = 0 ; while ( i < j ) { ch = st [ j ] ; st [ j ] = st [ i ] ; st [ i ] = ch ; i + + ; j-- ; } } int main ( void ) { char line [ ] = " Taj Mahal is one of the seven wonders of the world " ; char reverse [ 100 ] = " " , temp [ 50 ] ; int i , j , n ; n = string_length ( line ) ; for ( i = 0 ; i < n ; i + + ) { for ( j = 0 ; i < n & & line [ i ] ! = ' ' ; + + i , + + j ) { temp [ j ] = line [ i ] ; } temp [ j ] = '\0' ; string_reverse ( temp ) ; strcat ( reverse , temp ) ; strcat ( reverse , " " ) ; } printf ( " Original - %s\n  " , line ) ; printf ( " Reversed - %s\n  " , reverse ) ; return 0 ; }
#include <stdio.h> #include <string.h> int string_length ( char s [ ] ) { int i = 0 ; while ( s [ i ] ! = '\0' ) i + + ; return i ; } void string_reverse ( char st [ ] ) { int i , j , len ; char ch ; j = len = string_length ( st ) - 1 ; i = 0 ; while ( i < j ) { ch = st [ j ] ; st [ j ] = st [ i ] ; st [ i ] = ch ; i + + ; j-- ; } } int main ( void ) { char line [ ] = " Taj Mahal is one of the seven wonders of the world " ; char reverse [ 100 ] = " " , temp [ 50 ] ; int i , j , n ; n = string_length ( line ) ; for ( i = n-1 ; i > = 0 ; --i ) { for ( j = 0 ; i > = 0 & & line [ i ] ! = ' ' ; --i , + + j ) temp [ j ] = line [ i ] ; temp [ j ] = '\0' ; string_reverse ( temp ) ; strcat ( reverse , temp ) ; strcat ( reverse , " " ) ; } printf ( " Original - %s\n  " , line ) ; printf ( " Reversed - %s\n  " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arms = 153 ; int check , rem , sum = 0 ; check = arms ; while ( check ! = 0 ) { rem = check % 10 ; sum = sum + ( rem * rem * rem ) ; check = check / 10 ; } if ( sum = = arms ) printf ( " %d is an armstrong number. " , arms ) ; else printf ( " %d is not an armstrong number. " , arms ) ; return 0 ; }
#include <stdio.h> int main ( ) { int loop , number ; int prime = 1 ; number = 11 ; for ( loop = 2 ; loop < number ; loop + + ) { if ( ( number % loop ) = = 0 ) { prime = 0 ; } } if ( prime = = 1 ) printf ( " %d is prime number. " , number ) ; else printf ( " %d is not a prime number. " , number ) ; return 0 ; }
#include <stdio.h> int main ( ) { int loop ; int factorial = 1 ; int number = 5 ; for ( loop = 1 ; loop < = number ; loop + + ) { factorial = factorial * loop ; } printf ( " Factorial of %d = %d \n  " , number , factorial ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , i , n ; n = 4 ; a = b = 1 ; printf ( " %d %d " , a , b ) ; for ( i = 1 ; i < = n-2 ; i + + ) { c = a + b ; printf ( " %d " , c ) ; a = b ; b = c ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , total ; int a [ ] = { 0 , 6 , 9 , 2 , 7 } ; int n = 5 ; total = 0 ; for ( i = 0 ; i < n ; i + + ) { total + = a [ i ] ; } printf ( " Average = %f\n  " , total / ( float ) n ) ; return 0 ; }
#include <stdio.h> int main ( ) { float percentage ; int total_marks = 1200 ; int scored = 1122 ; percentage = ( float ) scored / total_marks * 100.0 ; printf ( " Percentage = %.2f % % " , percentage ) ; return 0 ; }
#include <stdio.h> int main ( ) { float mean ; int sum , i ; int n = 5 ; int a [ ] = { 2 , 6 , 7 , 4 , 9 } ; sum = 0 ; for ( i = 0 ; i < n ; i + + ) { sum + = a [ i ] ; } printf ( " Mean = %f " , sum / ( float ) n ) ; return 0 ; }
#include <stdio.h> void swap ( int * p , int * q ) { int t ; t = * p ; * p = * q ; * q = t ; } void sort ( int a [ ] , int n ) { int i , j , temp ; for ( i = 0 ; i < n-1 ; i + + ) { for ( j = 0 ; j < n-i-1 ; j + + ) { if ( a [ j ] > a [ j + 1 ] ) swap ( & a [ j ] , & a [ j + 1 ] ) ; } } } int main ( ) { int a [ ] = { 6 , 3 , 8 , 5 , 1 } ; int n = 5 ; int sum , i ; sort ( a , n ) ; n = ( n + 1 ) / 2 - 1 ; printf ( " Median = %d " , a [ n ] ) ; return 0 ; }
#include <stdio.h> int mode ( int a [ ] , int n ) { int maxValue = 0 , maxCount = 0 , i , j ; for ( i = 0 ; i < n ; + + i ) { int count = 0 ; for ( j = 0 ; j < n ; + + j ) { if ( a [ j ] = = a [ i ] ) + + count ; } if ( count > maxCount ) { maxCount = count ; maxValue = a [ i ] ; } } return maxValue ; } int main ( ) { int n = 5 ; int a [ ] = { 0 , 6 , 7 , 2 , 7 } ; printf ( " Mode = %d " , mode ( a , n ) ) ; return 0 ; }
#include <stdio.h> double squareRoot ( double n ) { double i , precision = 0.00001 ; for ( i = 1 ; i * i < = n ; + + i ) ; for ( --i ; i * i < n ; i + = precision ) ; return i ; } int main ( ) { int n = 24 ; printf ( " Square root of %d = %lf " , n , squareRoot ( n ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n = 5 ; printf ( " Cube of %d = %d " , n , ( n * n * n ) ) ; return 0 ; }
#include <stdio.h> double cubeRoot ( double n ) { double i , precision = 0.000001 ; for ( i = 1 ; ( i * i * i ) < = n ; + + i ) ; for ( --i ; ( i * i * i ) < n ; i + = precision ) ; return i ; } int main ( ) { int n = 125 ; printf ( " Cube root of %d = %lf " , n , cubeRoot ( n ) ) ; return 0 ; }
#include <stdio.h> int factorial ( int n ) { int f ; for ( f = 1 ; n > 1 ; n-- ) f * = n ; return f ; } int npr ( int n , int r ) { return factorial ( n ) / factorial ( n-r ) ; } int main ( ) { int n , r ; n = 4 ; r = 3 ; printf ( " %dp %d = %d \n  " , n , r , npr ( n , r ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , i , hcf ; a = 12 ; b = 16 ; for ( i = 1 ; i < = a || i < = b ; i + + ) { if ( a %i = = 0 & & b %i = = 0 ) hcf = i ; } printf ( " HCF = %d " , hcf ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , max , step , lcm ; a = 3 ; b = 4 ; lcm = 0 ; if ( a > b ) max = step = a ; else max = step = b ; while ( 1 ) { if ( max %a = = 0 & & max %b = = 0 ) { lcm = max ; break ; } max + = step ; } printf ( " LCM is %d " , lcm ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct node * head = NULL ; struct node * current = NULL ; void printList ( ) { struct node * ptr = head ; printf ( " \n  [ head ] = > " ) ; while ( ptr ! = NULL ) { printf ( " %d = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " [ null ] \n  " ) ; } void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> next = head ; head = link ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; printList ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct node * head = NULL ; struct node * current = NULL ; void reverse_print ( struct node * list ) { if ( list = = NULL ) { printf ( " [ null ] = > " ) ; return ; } reverse_print ( list-> next ) ; printf ( " %d = > " , list-> data ) ; } void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; reverse_print ( head ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct node * head = NULL ; struct node * current = NULL ; void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; } void find_data ( int item ) { int pos = 0 ; if ( head = = NULL ) { printf ( " Linked List not initialized " ) ; return ; } current = head ; while ( current-> next! = NULL ) { if ( current-> data = = item ) { printf ( " %d found at position %d\n  " , item , pos ) ; return ; } current = current-> next ; pos + + ; } printf ( " %d does not exist in the list " , item ) ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; find_data ( 40 ) ; find_data ( 44 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct node * head = NULL ; struct node * current = NULL ; void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; } void display ( ) { struct node * ptr = head ; printf ( " \n  [ head ] = > " ) ; while ( ptr ! = NULL ) { printf ( " %d = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " [ null ] \n  " ) ; } void update_data ( int old , int new ) { int pos = 0 ; if ( head = = NULL ) { printf ( " Linked List not initialized " ) ; return ; } current = head ; while ( current-> next! = NULL ) { if ( current-> data = = old ) { current-> data = new ; printf ( " \n  %d found at position %d , replaced with %d\n  " , old , pos , new ) ; return ; } current = current-> next ; pos + + ; } printf ( " %d does not exist in the list\n  " , old ) ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; display ( ) ; update_data ( 40 , 44 ) ; display ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct node * even = NULL ; struct node * odd = NULL ; struct node * list = NULL ; void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; struct node * current ; link-> data = data ; link-> next = NULL ; if ( data %2 = = 0 ) { if ( even = = NULL ) { even = link ; return ; } else { current = even ; while ( current-> next ! = NULL ) current = current-> next ; current-> next = link ; } } else { if ( odd = = NULL ) { odd = link ; return ; } else { current = odd ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; } } } void display ( struct node * head ) { struct node * ptr = head ; printf ( " [ head ] = > " ) ; while ( ptr ! = NULL ) { printf ( " %d = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " [ null ] \n  " ) ; } void combine ( ) { struct node * link ; list = even ; link = list ; while ( link-> next! = NULL ) { link = link-> next ; } link-> next = odd ; } int main ( ) { int i ; for ( i = 1 ; i < = 10 ; i + + ) insert ( i ) ; printf ( " Even : " ) ; display ( even ) ; printf ( " Odd : " ) ; display ( odd ) ; combine ( ) ; printf ( " Combined List : \n  " ) ; display ( list ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } ; struct node * head = NULL ; struct node * current = NULL ; void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> next = NULL ; if ( head = = NULL ) { head = link ; head-> next = link ; return ; } current = head ; while ( current-> next ! = head ) current = current-> next ; current-> next = link ; link-> next = head ; } void reverse_print ( struct node * list ) { if ( list-> next = = head ) { printf ( " %d = > " , list-> data ) ; return ; } reverse_print ( list-> next ) ; printf ( " %d = > " , list-> data ) ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; reverse_print ( head ) ; printf ( " [ head ] \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * prev ; struct node * next ; } ; struct node * head = NULL ; struct node * last = NULL ; struct node * current = NULL ; void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> prev = NULL ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; last = link ; link-> prev = current ; } void printList ( ) { struct node * ptr = head ; printf ( " \n  [ head ] < = > " ) ; while ( ptr-> next ! = NULL ) { printf ( " %d < = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " %d < = > " , ptr-> data ) ; printf ( " [ head ] \n  " ) ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; printList ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * prev ; struct node * next ; } ; struct node * head = NULL ; struct node * last = NULL ; struct node * current = NULL ; void printList ( ) { struct node * ptr = head ; printf ( " \n  [ head ] < = > " ) ; while ( ptr ! = NULL ) { printf ( " %d < = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " [ last ] \n  " ) ; } void print_backward ( ) { struct node * ptr = last ; printf ( " \n  [ head ] < = > " ) ; while ( ptr ! = NULL ) { printf ( " %d < = > " , ptr-> data ) ; ptr = ptr-> prev ; } printf ( " [ last ] \n  " ) ; } void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> prev = NULL ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; last = link ; link-> prev = current ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; printList ( ) ; print_backward ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * prev ; struct node * next ; } ; struct node * head = NULL ; struct node * last = NULL ; struct node * current = NULL ; void printList ( ) { struct node * ptr = head ; printf ( " \n  [ head ] < = > " ) ; while ( ptr ! = NULL ) { printf ( " %d < = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " [ last ] \n  " ) ; } void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> prev = NULL ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; last = link ; link-> prev = current ; } void sizeof_list ( ) { int size = 0 ; struct node * link ; if ( head = = NULL ) { printf ( " \n  Size of list is %d\n  " , size ) ; return ; } link = head ; while ( link ! = NULL ) { link = link-> next ; size + + ; } printf ( " \n  Size of list is %d\n  " , size ) ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; printList ( ) ; sizeof_list ( ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * prev ; struct node * next ; } ; struct node * head = NULL ; struct node * last = NULL ; struct node * current = NULL ; void printList ( ) { struct node * ptr = head ; printf ( " \n  [ head ] < = > " ) ; while ( ptr ! = NULL ) { printf ( " %d < = > " , ptr-> data ) ; ptr = ptr-> next ; } printf ( " [ last ] \n  " ) ; } void insert ( int data ) { struct node * link = ( struct node * ) malloc ( sizeof ( struct node ) ) ; link-> data = data ; link-> prev = NULL ; link-> next = NULL ; if ( head = = NULL ) { head = link ; return ; } current = head ; while ( current-> next! = NULL ) current = current-> next ; current-> next = link ; last = link ; link-> prev = current ; } void search ( int data ) { int pos = 0 ; if ( head = = NULL ) { printf ( " Linked List not initialized " ) ; return ; } current = head ; while ( current! = NULL ) { pos + + ; if ( current-> data = = data ) { printf ( " %d found at position %d\n  " , data , pos ) ; return ; } if ( current-> next ! = NULL ) current = current-> next ; else break ; } printf ( " %d does not exist in the list\n  " , data ) ; } int main ( ) { insert ( 10 ) ; insert ( 20 ) ; insert ( 30 ) ; insert ( 1 ) ; insert ( 40 ) ; insert ( 56 ) ; printList ( ) ; search ( 56 ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include " myfile.h " #include void printValue ( ) { printf ( " Global variable : %d " , global_variable ) ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " You\n are\n learning\n \'c\' language\n \ " Do you know C language\ " " ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; PI = 4.5 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter three numbers? " ) ; scanf ( " %d %d %d " , & a ; , & b ; , & c ; ) ; if ( a> b & & a> c ) { printf ( " %d is largest " , a ) ; } if ( b> a & & b > c ) { printf ( " %d is largest " , b ) ; } if ( c> a & & c> b ) { printf ( " %d is largest " , c ) ; } if ( a = = b & & a = = c ) { printf ( " All are equal " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } else { printf ( " %d is odd number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age? " ) ; scanf ( " %d " , & age ; ) ; if ( age> = 18 ) { printf ( " You are eligible to vote... " ) ; } else { printf ( " Sorry ... you can't vote " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number = = 10 ) { printf ( " number is equals to 10 " ) ; } else if ( number = = 50 ) { printf ( " number is equal to 50 " ) ; } else if ( number = = 100 ) { printf ( " number is equal to 100 " ) ; } else { printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int marks ; printf ( " Enter your marks? " ) ; scanf ( " %d " , & marks ; ) ; if ( marks > 85 & & marks < = 100 ) { printf ( " Congrats ! you scored grade A ... " ) ; } else if ( marks > 60 & & marks < = 85 ) { printf ( " You scored grade B + ... " ) ; } else if ( marks > 40 & & marks < = 60 ) { printf ( " You scored grade B ... " ) ; } else if ( marks > 30 & & marks < = 40 ) { printf ( " You scored grade C ... " ) ; } else { printf ( " Sorry you are fail ... " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equals to 10 " ) ; break ; case 50 : printf ( " number is equal to 50 " ) ; break ; case 100 : printf ( " number is equal to 100 " ) ; break ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 5 ; switch ( x> y & & x + y> 0 ) { case 1 : printf ( " hi " ) ; break ; case 0 : printf ( " bye " ) ; break ; default : printf ( " Hello bye " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equal to 10\n  " ) ; case 50 : printf ( " number is equal to 50\n  " ) ; case 100 : printf ( " number is equal to 100\n  " ) ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int j = 20 ; switch ( i ) { case 10 : printf ( " the value of i evaluated in outer switch : %d\n  " , i ) ; case 20 : switch ( j ) { case 20 : printf ( " The value of j evaluated in nested switch : %d\n  " , j ) ; } } printf ( " Exact value of i is : %d\n  " , i ) ; printf ( " Exact value of j is : %d\n  " , j ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { char c ; int choice , dummy ; do { printf ( " \n 1. Print Hello\n 2. Print Javatpoint\n 3. Exit\n  " ) ; scanf ( " %d " , & choice ; ) ; switch ( choice ) { case 1 : printf ( " Hello " ) ; break ; case 2 : printf ( " Javatpoint " ) ; break ; case 3 : exit ( 0 ) ; break ; default : printf ( " please enter valid choice " ) ; } printf ( " do you want to enter more? " ) ; scanf ( " %d " , & dummy ; ) ; scanf ( " %c " , & c ; ) ; } while ( c = = 'y' ) ; }
#include int main ( ) { int i = 1 ; do { printf ( " %d \n  " , i ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; do { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d \n  " , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 , b = 9 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( i < = 10 ) { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } return 0 ; }
#include <stdio.h> void main ( ) { int j = 1 ; while ( j + = 2 , j < = 10 ) { printf ( " %d " , j ) ; } printf ( " %d " , j ) ; }
#include <stdio.h> void main ( ) { while ( ) { printf ( " hello Javatpoint " ) ; } }
#include <stdio.h> void main ( ) { int x = 10 , y = 2 ; while ( x + y-1 ) { printf ( " %d %d " , x-- , y-- ) ; } }
#include int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , ( number * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; for ( a = 0 , b = 12 , c = 23 ; a <2 ; a + + ) { printf ( " %d " , a + b + c ) ; } }
#include <stdio.h> int main ( ) { int i = 1 ; for ( ; i <5 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 , j = 0 , k = 0 ; i <4 , k <8 , j <10 ; i + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; j + = 2 ; k + = 3 ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { int i = 0 , j = 2 ; for ( i = 0 ; i <5 ; i + + , j = j + 2 ) { printf ( " %d %d\n  " , i , j ) ; } }
#include <stdio.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { int i = 20 ; printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { for ( ; ; ) { printf ( " welcome to javatpoint " ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; if ( i = = 5 ) break ; } printf ( " came outside of loop i = %d " , i ) ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { printf ( " %d & d\n  " , i , j ) ; if ( i = = 2 & & j = = 2 ) { break ; } } return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( 1 ) { printf ( " %d " , i ) ; i + + ; if ( i = = 10 ) break ; } printf ( " came out of while loop " ) ; }
#include <stdio.h> void main ( ) { int n = 2 , i , choice ; do { i = 1 ; while ( i < = 10 ) { printf ( " %d X %d = %d\n  " , n , i , n * i ) ; i + + ; } printf ( " do you want to continue with the table of %d , enter any non-zero value to continue. " , n + 1 ) ; scanf ( " %d " , & choice ; ) ; if ( choice = = 0 ) { break ; } n + + ; } while ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( i! = 10 ) { printf ( " %d " , i ) ; continue ; i + + ; } }
#include int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i = = 5 ) { continue ; } printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { if ( i = = 2 & & j = = 2 ) { continue ; } printf ( " %d %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int num , i = 1 ; printf ( " Enter the number whose table you want to print? " ) ; scanf ( " %d " , & num ; ) ; table : printf ( " %d x %d = %d\n  " , num , i , num * i ) ; i + + ; if ( i < = 10 ) goto table ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 ; i <10 ; i + + ) { for ( j = 0 ; j <5 ; j + + ) { for ( k = 0 ; k <3 ; k + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; if ( j = = 3 ) { goto out ; } } } } out : printf ( " came out of the loop " ) ; }
#include int main ( ) { float f = ( float ) 9 / 4 ; printf ( " f : %f\n  " , f ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include <stdio.h> void printName ( ) ; void main ( ) { printf ( " Hello " ) ; printName ( ) ; } void printName ( ) { printf ( " Javatpoint " ) ; }
#include <stdio.h> void sum ( ) ; void main ( ) { printf ( " \n Going to calculate the sum of two numbers : " ) ; sum ( ) ; } void sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; printf ( " The sum is %d " , a + b ) ; }
#include <stdio.h> int sum ( ) ; void main ( ) { int result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; result = sum ( ) ; printf ( " %d " , result ) ; } int sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include <stdio.h> int sum ( ) ; void main ( ) { printf ( " Going to calculate the area of the square\n  " ) ; float area = square ( ) ; printf ( " The area of the square : %f\n  " , area ) ; } int square ( ) { float side ; printf ( " Enter the length of the side in meters : " ) ; scanf ( " %f " , & side ; ) ; return side * side ; }
#include <stdio.h> void sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; sum ( a , b ) ; } void sum ( int a , int b ) { printf ( " \n The sum is %d " , a + b ) ; }
#include <stdio.h> void average ( int , int , int , int , int ) ; void main ( ) { int a , b , c , d , e ; printf ( " \n Going to calculate the average of five numbers : " ) ; printf ( " \n Enter five numbers : " ) ; scanf ( " %d %d %d %d %d " , & a ; , & b ; , & c ; , & d ; , & e ; ) ; average ( a , b , c , d , e ) ; } void average ( int a , int b , int c , int d , int e ) { float avg ; avg = ( a + b + c + d + e ) / 5 ; printf ( " The average of given five numbers : %f " , avg ) ; }
#include <stdio.h> int sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; result = sum ( a , b ) ; printf ( " \n The sum is : %d " , result ) ; } int sum ( int a , int b ) { return a + b ; }
#include <stdio.h> int even_odd ( int ) ; void main ( ) { int n , flag = 0 ; printf ( " \n Going to check whether a number is even or odd " ) ; printf ( " \n Enter the number : " ) ; scanf ( " %d " , & n ; ) ; flag = even_odd ( n ) ; if ( flag = = 0 ) { printf ( " \n The number is odd " ) ; } else { printf ( " \n The number is even " ) ; } } int even_odd ( int n ) { if ( n %2 = = 0 ) { return 1 ; } else { return 0 ; } }
#include void change ( int num ) { printf ( " Before adding value inside function num = %d \n  " , num ) ; num = num + 100 ; printf ( " After adding value inside function num = %d \n  " , num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include <stdio.h> void swap ( int , int ) ; int main ( ) { int a = 10 ; int b = 20 ; printf ( " Before swapping the values in main a = %d , b = %d\n  " , a , b ) ; swap ( a , b ) ; printf ( " After swapping values in main a = %d , b = %d\n  " , a , b ) ; } void swap ( int a , int b ) { int temp ; temp = a ; a = b ; b = temp ; printf ( " After swapping values in function a = %d , b = %d\n  " , a , b ) ; }
#include void change ( int * num ) { printf ( " Before adding value inside function num = %d \n  " , * num ) ; ( * num ) + = 100 ; printf ( " After adding value inside function num = %d \n  " , * num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( & x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include <stdio.h> void swap ( int * , int * ) ; int main ( ) { int a = 10 ; int b = 20 ; printf ( " Before swapping the values in main a = %d , b = %d\n  " , a , b ) ; swap ( & a ; , & b ; ) ; printf ( " After swapping values in main a = %d , b = %d\n  " , a , b ) ; } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; printf ( " After swapping values in function a = %d , b = %d\n  " , * a , * b ) ; }
#include <stdio.h> int fact ( int ) ; int main ( ) { int n , f ; printf ( " Enter the number whose factorial you want to calculate? " ) ; scanf ( " %d " , & n ; ) ; f = fact ( n ) ; printf ( " factorial = %d " , f ) ; } int fact ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return n * fact ( n-1 ) ; } }
#include <stdio.h> int fibonacci ( int ) ; void main ( ) { int n , f ; printf ( " Enter the value of n? " ) ; scanf ( " %d " , & n ; ) ; f = fibonacci ( n ) ; printf ( " %d " , f ) ; } int fibonacci ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return fibonacci ( n-1 ) + fibonacci ( n-2 ) ; } }
#include <stdio.h> int main ( ) { int a ; char b ; float c ; printf ( " %d %c %f " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , i ; printf ( " %d " , + + a ) ; { int a = 20 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %d " , a ) ; } } printf ( " %d " , a ) ; }
#include <stdio.h> static char c ; static int i ; static float f ; static char s [ 100 ] ; void main ( ) { printf ( " %d %d %f %s " , c , i , f ) ; }
#include void sum ( ) { static int a = 10 ; static int b = 24 ; printf ( " %d %d \n  " , a , b ) ; a + + ; b + + ; } void main ( ) { int i ; for ( i = 0 ; i < 3 ; i + + ) { sum ( ) ; } }
#include <stdio.h> int main ( ) { register int a ; printf ( " %d " , a ) ; }
#include <stdio.h> int main ( ) { register int a = 0 ; printf ( " %u " , & a ; ) ; }
#include <stdio.h> int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a = 0 ; printf ( " %d " , a ) ; }
#include int main ( ) { extern int a ; printf ( " %d " , a ) ; } int a = 20 ;
#include <stdio.h> int main ( ) { int i = 0 ; int marks [ 5 ] ; marks [ 0 ] = 80 ; marks [ 1 ] = 60 ; marks [ 2 ] = 70 ; marks [ 3 ] = 85 ; marks [ 4 ] = 75 ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include int main ( ) { int i = 0 ; int marks [ 5 ] = { 20 , 30 , 40 , 50 , 60 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include <stdio.h> void main ( ) { int i , j , temp ; int a [ 10 ] = { 10 , 9 , 7 , 101 , 23 , 44 , 12 , 78 , 34 , 23 } ; for ( i = 0 ; i <10 ; i + + ) { for ( j = i + 1 ; j <10 ; j + + ) { if ( a [ j ] > a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( " Printing Sorted Element List ...\n  " ) ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d\n  " , a [ i ] ) ; } }
#include <stdio.h> void main ( ) { int arr [ 100 ] , i , n , largest , sec_largest ; printf ( " Enter the size of the array? " ) ; scanf ( " %d " , & n ; ) ; printf ( " Enter the elements of the array? " ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr ; [ i ] ) ; } largest = arr [ 0 ] ; sec_largest = arr [ 1 ] ; for ( i = 0 ; i <n ; i + + ) { if ( arr [ i ] > largest ) { sec_largest = largest ; largest = arr [ i ] ; } else if ( arr [ i ] > sec_largest & & arr [ i ] ! = largest ) { sec_largest = arr [ i ] ; } } printf ( " largest = %d , second largest = %d " , largest , sec_largest ) ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; int arr [ 4 ] [ 3 ] = { { 1 , 2 , 3 } , { 2 , 3 , 4 } , { 3 , 4 , 5 } , { 4 , 5 , 6 } } ; for ( i = 0 ; i <4 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " arr [ %d ] [ %d ] = %d \n  " , i , j , arr [ i ] [ j ] ) ; } } return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 3 ] [ 3 ] , i , j ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " Enter a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & arr ; [ i ] [ j ] ) ; } } printf ( " \n  printing the elements ....\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j <3 ; j + + ) { printf ( " %d\t " , arr [ i ] [ j ] ) ; } } }
#include int minarray ( int arr [ ] , int size ) { int min = arr [ 0 ] ; int i = 0 ; for ( i = 1 ; iarr [ i ] ) { min = arr [ i ] ; } } return min ; } int main ( ) { int i = 0 , min = 0 ; int numbers [ ] = { 4 , 5 , 7 , 3 , 8 , 9 } ; min = minarray ( numbers , 6 ) ; printf ( " minimum number is %d \n  " , min ) ; return 0 ; }
#include <stdio.h> void Bubble_Sort ( int [ ] ) ; void main ( ) { int arr [ 10 ] = { 10 , 9 , 7 , 101 , 23 , 44 , 12 , 78 , 34 , 23 } ; Bubble_Sort ( arr ) ; } void Bubble_Sort ( int a [ ] ) { int i , j , temp ; for ( i = 0 ; i <10 ; i + + ) { for ( j = i + 1 ; j <10 ; j + + ) { if ( a [ j ] < a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( " Printing Sorted Element List ...\n  " ) ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d\n  " , a [ i ] ) ; } }
#include <stdio.h> int * Bubble_Sort ( int [ ] ) ; void main ( ) { int arr [ 10 ] = { 10 , 9 , 7 , 101 , 23 , 44 , 12 , 78 , 34 , 23 } ; int * p = Bubble_Sort ( arr ) , i ; printf ( " printing sorted elements ...\n  " ) ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d\n  " , * ( p + i ) ) ; } } int * Bubble_Sort ( int a [ ] ) { int i , j , temp ; for ( i = 0 ; i <10 ; i + + ) { for ( j = i + 1 ; j <10 ; j + + ) { if ( a [ j ] < a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } return a ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of p variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " value of number is %d , address of number is %u " , number , & number ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 , * p1 = & a , * p2 = & b ; printf ( " Before swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; * p1 = * p1 + * p2 ; * p2 = * p1- * p2 ; * p1 = * p1- * p2 ; printf ( " \n After swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 ; int * p ; int * * pp ; p = & a ; pp = & p ; printf ( " address of a : %x\n  " , p ) ; printf ( " address of p : %x\n  " , pp ) ; printf ( " value stored at p : %d\n  " , * p ) ; printf ( " value stored at pp : %d\n  " , * * pp ) ; }
#include int main ( ) { int number = 50 ; int * p ; int * * p2 ; p = & number ; p2 = & p ; printf ( " Address of number variable is %x \n  " , & number ) ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of * p variable is %d \n  " , * p ) ; printf ( " Address of p2 variable is %x \n  " , p2 ) ; printf ( " Value of * * p2 variable is %d \n  " , * p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int a [ 10 ] = { 100 , 206 , 300 , 409 , 509 , 601 } ; int * p [ ] = { a , a + 1 , a + 2 , a + 3 , a + 4 , a + 5 } ; int * * pp = p ; pp + + ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; * pp + + ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; + + * pp ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; + + * * pp ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 1 ; printf ( " After increment : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * p = arr ; int i ; printf ( " printing array elements...\n  " ) ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " %d " , * ( p + i ) ) ; } }
#include void main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-1 ; printf ( " After decrement : Address of p variable is %u \n  " , p ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 3 ; printf ( " After adding 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-3 ; printf ( " After subtracting 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 100 ; int * p = & i ; int * temp ; temp = p ; p = p + 3 ; printf ( " Pointer Subtraction : %d - %d = %d " , p , temp , p-temp ) ; }
#include <stdio.h> int addition ( ) ; int main ( ) { int result ; int ( * ptr ) ( ) ; ptr = & addition ; result = ( * ptr ) ( ) ; printf ( " The sum is %d " , result ) ; } int addition ( ) { int a , b ; printf ( " Enter two numbers? " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include <stdio.h> int show ( ) ; int showadd ( int ) ; int ( * arr [ 3 ] ) ( ) ; int ( * ( * ptr ) [ 3 ] ) ( ) ; int main ( ) { int result1 ; arr [ 0 ] = show ; arr [ 1 ] = showadd ; ptr = & arr ; result1 = ( * * ptr ) ( ) ; printf ( " printing the value returned by show : %d " , result1 ) ; ( * ( * ptr + 1 ) ) ( result1 ) ; } int show ( ) { int a = 65 ; return a + + ; } int showadd ( int b ) { printf ( " \n Adding 90 to the value returned by show : %d " , b + 90 ) ; }
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { char ch [ 11 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 11 ] = " javatpoint " ; printf ( " Char Array Value is : %s\n  " , ch ) ; printf ( " String Literal Value is : %s\n  " , ch2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( i <11 ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( s [ i ] ! = NULL ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " %s " , s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " % [ ^\n  ] s " , s ) ; printf ( " You entered %s " , s ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; char * p = s ; printf ( " %s " , p ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " String p : %s\n  " , p ) ; char * q ; printf ( " copying the content of p into q...\n  " ) ; q = p ; printf ( " String q : %s\n  " , q ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " Before assigning : %s\n  " , p ) ; p = " hello " ; printf ( " After assigning : %s\n  " , p ) ; }
#include void main ( ) { char s [ 30 ] ; printf ( " Enter the string? " ) ; gets ( s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char str [ 20 ] ; printf ( " Enter the string? " ) ; fgets ( str , 20 , stdin ) ; printf ( " %s " , str ) ; }
#include #include int main ( ) { char name [ 50 ] ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Your name is : " ) ; puts ( name ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 20 ] ; strcpy ( ch2 , ch ) ; printf ( " Value of second string is : %s " , ch2 ) ; return 0 ; }
#include #include int main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; return 0 ; }
#include #include int main ( ) { char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter 1st string : " ) ; gets ( str1 ) ; printf ( " Enter 2nd string : " ) ; gets ( str2 ) ; if ( strcmp ( str1 , str2 ) = = 0 ) printf ( " Strings are equal " ) ; else printf ( " Strings are not equal " ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Reverse String is : %s " , strrev ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Lower String is : %s " , strlwr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Upper String is : %s " , strupr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; sub = strstr ( str , " java " ) ; printf ( " \n Substring is : %s " , sub ) ; return 0 ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include int main ( ) { printf ( " \n  %f " , ceil ( 3.6 ) ) ; printf ( " \n  %f " , ceil ( 3.3 ) ) ; printf ( " \n  %f " , floor ( 3.6 ) ) ; printf ( " \n  %f " , floor ( 3.2 ) ) ; printf ( " \n  %f " , sqrt ( 16 ) ) ; printf ( " \n  %f " , sqrt ( 7 ) ) ; printf ( " \n  %f " , pow ( 2 , 4 ) ) ; printf ( " \n  %f " , pow ( 3 , 3 ) ) ; printf ( " \n  %d " , abs ( -12 ) ) ; return 0 ; }
#include <stdio.h> void main ( ) { char names [ 2 ] [ 10 ] , dummy ; int roll_numbers [ 2 ] , i ; float marks [ 2 ] ; for ( i = 0 ; i <3 ; i + + ) { printf ( " Enter the name , roll number , and marks of the student %d " , i + 1 ) ; scanf ( " %s %d %f " , & names ; [ i ] , & roll ; _numbers [ i ] , & marks ; [ i ] ) ; scanf ( " %c " , & dummy ; ) ; } printf ( " Printing the Student details ...\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %s %d %f\n  " , names [ i ] , roll_numbers [ i ] , marks [ i ] ) ; } }
#include #include struct employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include #include struct employee { int id ; char name [ 50 ] ; float salary ; } e1 , e2 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; e1.salary = 56000 ; e2.id = 102 ; strcpy ( e2.name , " James Bond " ) ; e2.salary = 126000 ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; printf ( " employee 1 salary : %f\n  " , e1.salary ) ; printf ( " employee 2 id : %d\n  " , e2.id ) ; printf ( " employee 2 name : %s\n  " , e2.name ) ; printf ( " employee 2 salary : %f\n  " , e2.salary ) ; return 0 ; }
#include struct student { char name [ 20 ] ; int id ; float marks ; } ; void main ( ) { struct student s1 , s2 , s3 ; int dummy ; printf ( " Enter the name , id , and marks of student 1 " ) ; scanf ( " %s %d %f " , s1.name , & s1.id ; , & s1.marks ; ) ; scanf ( " %c " , & dummy ; ) ; printf ( " Enter the name , id , and marks of student 2 " ) ; scanf ( " %s %d %f " , s2.name , & s2.id ; , & s2.marks ; ) ; scanf ( " %c " , & dummy ; ) ; printf ( " Enter the name , id , and marks of student 3 " ) ; scanf ( " %s %d %f " , s3.name , & s3.id ; , & s3.marks ; ) ; scanf ( " %c " , & dummy ; ) ; printf ( " Printing the details....\n  " ) ; printf ( " %s %d %f\n  " , s1.name , s1.id , s1.marks ) ; printf ( " %s %d %f\n  " , s2.name , s2.id , s2.marks ) ; printf ( " %s %d %f\n  " , s3.name , s3.id , s3.marks ) ; }
#include #include struct student { int rollno ; char name [ 10 ] ; } ; int main ( ) { int i ; struct student st [ 5 ] ; printf ( " Enter Records of 5 students " ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " \n Enter Rollno : " ) ; scanf ( " %d " , & st [ i ] .rollno ) ; printf ( " \n Enter Name : " ) ; scanf ( " %s " , & st [ i ] .name ) ; } printf ( " \n Student Information List : " ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " \n Rollno : %d , Name : %s " , st [ i ] .rollno , st [ i ] .name ) ; } return 0 ; }
#include <stdio.h> struct address { char city [ 20 ] ; int pin ; char phone [ 14 ] ; } ; struct employee { char name [ 20 ] ; struct address add ; } ; void main ( ) { struct employee emp ; printf ( " Enter employee information?\n  " ) ; scanf ( " %s %s %d %s " , emp.name , emp.add.city , & emp.add.pin ; , emp.add.phone ) ; printf ( " Printing the employee information....\n  " ) ; printf ( " name : %s\n City : %s\n Pincode : %d\n Phone : %s " , emp.name , emp.add.city , emp.add.pin , emp.add.phone ) ; }
#include #include struct Employee { int id ; char name [ 20 ] ; struct Date { int dd ; int mm ; int yyyy ; } doj ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; e1.doj.dd = 10 ; e1.doj.mm = 11 ; e1.doj.yyyy = 2014 ; printf ( " employee id : %d\n  " , e1.id ) ; printf ( " employee name : %s\n  " , e1.name ) ; printf ( " employee date of joining ( dd / mm / yyyy ) : %d / %d / %d\n  " , e1.doj.dd , e1.doj.mm , e1.doj.yyyy ) ; return 0 ; }
#include <stdio.h> struct address { char city [ 20 ] ; int pin ; char phone [ 14 ] ; } ; struct employee { char name [ 20 ] ; struct address add ; } ; void display ( struct employee ) ; void main ( ) { struct employee emp ; printf ( " Enter employee information?\n  " ) ; scanf ( " %s %s %d %s " , emp.name , emp.add.city , & emp.add.pin ; , emp.add.phone ) ; display ( emp ) ; } void display ( struct employee emp ) { printf ( " Printing the details....\n  " ) ; printf ( " %s %s %d %s " , emp.name , emp.add.city , emp.add.pin , emp.add.phone ) ; }
#include #include union employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include <stdio.h> void main ( ) { FILE * fp ; char ch ; fp = fopen ( " file_handle.c " , " r " ) ; while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) break ; printf ( " %c " , ch ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file.txt " , " w " ) ; fprintf ( fp , " Hello file by fprintf...\n  " ) ; fclose ( fp ) ; }
#include main ( ) { FILE * fp ; char buff [ 255 ] ; fp = fopen ( " file.txt " , " r " ) ; while ( fscanf ( fp , " %s " , buff ) ! = EOF ) { printf ( " %s " , buff ) ; } fclose ( fp ) ; }
#include void main ( ) { FILE * fptr ; int id ; char name [ 30 ] ; float salary ; fptr = fopen ( " emp.txt " , " w + " ) ; if ( fptr = = NULL ) { printf ( " File does not exists \n  " ) ; return ; } printf ( " Enter the id\n  " ) ; scanf ( " %d " , & id ; ) ; fprintf ( fptr , " Id = %d\n  " , id ) ; printf ( " Enter the name \n  " ) ; scanf ( " %s " , name ) ; fprintf ( fptr , " Name = %s\n  " , name ) ; printf ( " Enter the salary\n  " ) ; scanf ( " %f " , & salary ; ) ; fprintf ( fptr , " Salary = %.2f\n  " , salary ) ; fclose ( fptr ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file1.txt " , " w " ) ; fputc ( 'a' , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " myfile.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " w " ) ; fputs ( " hello c programming " , fp ) ; fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; char text [ 300 ] ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " r " ) ; printf ( " %s " , fgets ( text , 200 , fp ) ) ; fclose ( fp ) ; getch ( ) ; }
#include void main ( ) { FILE * fp ; fp = fopen ( " myfile.txt " , " w + " ) ; fputs ( " This is javatpoint " , fp ) ; fseek ( fp , 7 , SEEK_SET ) ; fputs ( " sonoo jaiswal " , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } rewind ( fp ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; int length ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fclose ( fp ) ; printf ( " Size of file : %d bytes " , length ) ; getch ( ) ; }
#include int main ( ) { printf ( " File : %s\n  " , __FILE__ ) ; printf ( " Date : %s\n  " , __DATE__ ) ; printf ( " Time : %s\n  " , __TIME__ ) ; printf ( " Line : %d\n  " , __LINE__ ) ; printf ( " STDC : %d\n  " , __STDC__ ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include #define PI 3.14 main ( ) { printf ( " %f " , PI ) ; }
#include #define MIN ( a , b ) ( ( a ) < ( b ) ? ( a ) : ( b ) ) void main ( ) { printf ( " Minimum between 10 and 20 is : %d\n  " , MIN ( 10 , 20 ) ) ; }
#include #define PI 3.14 #undef PI main ( ) { printf ( " %f " , PI ) ; }
#include #define number 15 int square = number * number ; #undef number main ( ) { printf ( " %d " , square ) ; }
#include #include #define NOINPUT void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define INPUT void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define NUMBER 0 void main ( ) { #if ( NUMBER = = 0 ) printf ( " Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { clrscr ( ) ; #if ( NUMBER = = 0 ) printf ( " 1 Value of Number is : %d " , NUMBER ) ; #endif #if ( NUMBER = = 1 ) printf ( " 2 Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { #if NUMBER = = 0 printf ( " Value of Number is : %d " , NUMBER ) ; #else print ( " Value of Number is non-zero " ) ; #endif getch ( ) ; }
#include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include void func ( ) ; #pragma startup func #pragma exit func void main ( ) { printf ( " \n I am in main " ) ; getch ( ) ; } void func ( ) { printf ( " \n I am in func " ) ; getch ( ) ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include void main ( int argc , char * argv [ ] ) { printf ( " Program name is : %s\n  " , argv [ 0 ] ) ; if ( argc < 2 ) { printf ( " No argument passed through command line.\n  " ) ; } else { printf ( " First argument is : %s\n  " , argv [ 1 ] ) ; } }
#include int main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include void printFibonacci ( int n ) { static int n1 = 0 , n2 = 1 , n3 ; if ( n> 0 ) { n3 = n1 + n2 ; n1 = n2 ; n2 = n3 ; printf ( " %d " , n3 ) ; printFibonacci ( n-1 ) ; } } int main ( ) { int n ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : " ) ; printf ( " %d %d " , 0 , 1 ) ; printFibonacci ( n-2 ) ; return 0 ; }
#include int main ( ) { int n , i , m = 0 , flag = 0 ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; return 0 ; }
#include int main ( ) { int i , fact = 1 , number ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; return 0 ; }
#include <stdio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; return 0 ; }
#include int main ( ) { int n , sum = 0 , m ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { m = n %10 ; sum = sum + m ; n = n / 10 ; } printf ( " Sum is = %d " , sum ) ; return 0 ; }
#include int main ( ) { int n , reverse = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include #include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a * b ; b = a / b ; a = a / b ; system ( " cls " ) ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include int main ( ) { if ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { switch ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { while ( !printf ( " hello world " ) ) { } return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 , b = 20 , c ; asm { mov ax , a mov bx , b add ax , bx mov c , ax } printf ( " c = %d " , c ) ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include #include int main ( ) { int a [ 10 ] [ 10 ] , b [ 10 ] [ 10 ] , mul [ 10 ] [ 10 ] , r , c , i , j , k ; system ( " cls " ) ; printf ( " enter the number of row = " ) ; scanf ( " %d " , & r ; ) ; printf ( " enter the number of column = " ) ; scanf ( " %d " , & c ; ) ; printf ( " enter the first matrix element = \n  " ) ; for ( i = 0 ; i
#include #include int main ( ) { int a [ 10 ] , n , i ; system ( " cls " ) ; printf ( " Enter the number to convert : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; n> 0 ; i + + ) { a [ i ] = n %2 ; n = n / 2 ; } printf ( " \n Binary of Given Number is = " ) ; for ( i = i-1 ; i> = 0 ; i-- ) { printf ( " %d " , a [ i ] ) ; } return 0 ; }
#include #include int main ( ) { long int n , sum = 0 , r ; system ( " cls " ) ; printf ( " enter the number = " ) ; scanf ( " %ld " , & n ) ; while ( n> 0 ) { r = n %10 ; sum = sum * 10 + r ; n = n / 10 ; } n = sum ; while ( n> 0 ) { r = n %10 ; switch ( r ) { case 1 : printf ( " one " ) ; break ; case 2 : printf ( " two " ) ; break ; case 3 : printf ( " three " ) ; break ; case 4 : printf ( " four " ) ; break ; case 5 : printf ( " five " ) ; break ; case 6 : printf ( " six " ) ; break ; case 7 : printf ( " seven " ) ; break ; case 8 : printf ( " eight " ) ; break ; case 9 : printf ( " nine " ) ; break ; case 0 : printf ( " zero " ) ; break ; default : printf ( " tttt " ) ; break ; } n = n / 10 ; } return 0 ; }
#include #include int main ( ) { int ch = 65 ; int i , j , k , m ; system ( " cls " ) ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 5 ; j> = i ; j-- ) printf ( " " ) ; for ( k = 1 ; k < = i ; k + + ) printf ( " %c " , ch + + ) ; ch-- ; for ( m = 1 ; m
#include #include int main ( ) { int i , j , k , l , n ; system ( " cls " ) ; printf ( " enter the range = " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = n-i ; j + + ) { printf ( " " ) ; } for ( k = 1 ; k < = i ; k + + ) { printf ( " %d " , k ) ; } for ( l = i-1 ; l> = 1 ; l-- ) { printf ( " %d " , l ) ; } printf ( " \n  " ) ; } return 0 ; }
#include #include int main ( ) { int a = 0 , b = 1 , i , c , n , j ; system ( " cls " ) ; printf ( " Enter the limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { a = 0 ; b = 1 ; printf ( " %d\t " , b ) ; for ( j = 1 ; j
#include <stdio.h> void change ( int , int ) ; int main ( ) { int a = 10 , b = 20 ; change ( a , b ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int x , int y ) { x = 13 ; y = 17 ; }
#include <stdio.h> void change ( int * , int * ) ; int main ( ) { int a = 10 , b = 20 ; change ( & a ; , & b ; ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int * x , int * y ) { * x = 13 ; * y = 17 ; }
#include <stdio.h> int calculate_fact ( int ) ; int main ( ) { int n = 5 , f ; f = calculate_fact ( n ) ; printf ( " factorial of a number is %d " , f ) ; return 0 ; } int calculate_fact ( int a ) { if ( a = = 1 ) { return 1 ; } else return a * calculate_fact ( a-1 ) ; }
#include <stdio.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i <5 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int a = 5 ; p = & a ; printf ( " Address value of 'a' variable is %u " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; ptr = NULL ; }
#include <stdio.h> int main ( ) { int a = 10 ; int * ptr , * * pptr ; ptr = & a ; pptr = & ptr ; printf ( " value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " value of * ptr is : %d " , * ptr ) ; printf ( " \n  " ) ; printf ( " value of * * pptr is : %d " , * * pptr ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 10 ] ; int age ; } s1 ; int main ( ) { printf ( " Enter the name " ) ; scanf ( " %s " , s1.name ) ; printf ( " \n  " ) ; printf ( " Enter the age " ) ; scanf ( " %d " , & s1.age ; ) ; printf ( " \n  " ) ; printf ( " Name and age of a student : %s , %d " , s1.name , s1.age ) ; return 0 ; }
#include <stdio.h> union data { int a ; float b ; char ch ; } ; int main ( ) { union data d ; d.a = 3 ; d.b = 5.6 ; d.ch = 'a' ; printf ( " value of a is %d " , d.a ) ; printf ( " \n  " ) ; printf ( " value of b is %f " , d.b ) ; printf ( " \n  " ) ; printf ( " value of ch is %c " , d.ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 20 ] ; int n = sprintf ( a , " javaToint " ) ; printf ( " value of n is %d " , n ) ; return 0 ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char ch ; printf ( " Enter a character " ) ; ch = getch ( ) ; printf ( " \n value of ch is %c " , ch ) ; printf ( " \n Enter a character again " ) ; ch = getche ( ) ; printf ( " \n value of ch is %c " , ch ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " hello world " ) ) { } }
#include <stdio.h> #include <conio.h> main ( ) { int a = 10 , b = 20 ; clrscr ( ) ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; getch ( ) ; }
#include #include void main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ; ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include <stdio.h> #include <conio.h> void printFibonacci ( int n ) { static int n1 = 0 , n2 = 1 , n3 ; if ( n> 0 ) { n3 = n1 + n2 ; n1 = n2 ; n2 = n3 ; printf ( " %d " , n3 ) ; printFibonacci ( n-1 ) ; } } void main ( ) { int n ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ; ) ; printf ( " Fibonacci Series : " ) ; printf ( " %d %d " , 0 , 1 ) ; printFibonacci ( n-2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int n , i , m = 0 , flag = 0 ; clrscr ( ) ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ; ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; getch ( ) ; }
#include #include main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; getch ( ) ; }
#include #include void main ( ) { int i , fact = 1 , number ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , reverse = 0 , rem ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ; ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; getch ( ) ; }
#include int main ( ) { printf ( " Hello C Programming\n  " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C Language " ) ; return 0 ; }
#include " myfile.h " #include void printValue ( ) { printf ( " Global variable : %d " , global_variable ) ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " You\n are\n learning\n \'c\' language\n \ " Do you know C language\ " " ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { const float PI = 3.14 ; PI = 4.5 ; printf ( " The value of PI is : %f " , PI ) ; return 0 ; }
#include int main ( ) { int number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter three numbers? " ) ; scanf ( " %d %d %d " , & a ; , & b ; , & c ; ) ; if ( a> b & & a> c ) { printf ( " %d is largest " , a ) ; } if ( b> a & & b > c ) { printf ( " %d is largest " , b ) ; } if ( c> a & & c> b ) { printf ( " %d is largest " , c ) ; } if ( a = = b & & a = = c ) { printf ( " All are equal " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number %2 = = 0 ) { printf ( " %d is even number " , number ) ; } else { printf ( " %d is odd number " , number ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age? " ) ; scanf ( " %d " , & age ; ) ; if ( age> = 18 ) { printf ( " You are eligible to vote... " ) ; } else { printf ( " Sorry ... you can't vote " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; if ( number = = 10 ) { printf ( " number is equals to 10 " ) ; } else if ( number = = 50 ) { printf ( " number is equal to 50 " ) ; } else if ( number = = 100 ) { printf ( " number is equal to 100 " ) ; } else { printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int marks ; printf ( " Enter your marks? " ) ; scanf ( " %d " , & marks ; ) ; if ( marks > 85 & & marks < = 100 ) { printf ( " Congrats ! you scored grade A ... " ) ; } else if ( marks > 60 & & marks < = 85 ) { printf ( " You scored grade B + ... " ) ; } else if ( marks > 40 & & marks < = 60 ) { printf ( " You scored grade B ... " ) ; } else if ( marks > 30 & & marks < = 40 ) { printf ( " You scored grade C ... " ) ; } else { printf ( " Sorry you are fail ... " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equals to 10 " ) ; break ; case 50 : printf ( " number is equal to 50 " ) ; break ; case 100 : printf ( " number is equal to 100 " ) ; break ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 5 ; switch ( x> y & & x + y> 0 ) { case 1 : printf ( " hi " ) ; break ; case 0 : printf ( " bye " ) ; break ; default : printf ( " Hello bye " ) ; } }
#include int main ( ) { int number = 0 ; printf ( " enter a number : " ) ; scanf ( " %d " , & number ) ; switch ( number ) { case 10 : printf ( " number is equal to 10\n  " ) ; case 50 : printf ( " number is equal to 50\n  " ) ; case 100 : printf ( " number is equal to 100\n  " ) ; default : printf ( " number is not equal to 10 , 50 or 100 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 10 ; int j = 20 ; switch ( i ) { case 10 : printf ( " the value of i evaluated in outer switch : %d\n  " , i ) ; case 20 : switch ( j ) { case 20 : printf ( " The value of j evaluated in nested switch : %d\n  " , j ) ; } } printf ( " Exact value of i is : %d\n  " , i ) ; printf ( " Exact value of j is : %d\n  " , j ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void main ( ) { char c ; int choice , dummy ; do { printf ( " \n 1. Print Hello\n 2. Print Javatpoint\n 3. Exit\n  " ) ; scanf ( " %d " , & choice ; ) ; switch ( choice ) { case 1 : printf ( " Hello " ) ; break ; case 2 : printf ( " Javatpoint " ) ; break ; case 3 : exit ( 0 ) ; break ; default : printf ( " please enter valid choice " ) ; } printf ( " do you want to enter more? " ) ; scanf ( " %d " , & dummy ; ) ; scanf ( " %c " , & c ; ) ; } while ( c = = 'y' ) ; }
#include int main ( ) { int i = 1 ; do { printf ( " %d \n  " , i ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; do { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } while ( i < = 10 ) ; return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 10 ) { printf ( " %d \n  " , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 , b = 9 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; while ( i < = 10 ) { printf ( " %d \n  " , ( number * i ) ) ; i + + ; } return 0 ; }
#include <stdio.h> void main ( ) { int j = 1 ; while ( j + = 2 , j < = 10 ) { printf ( " %d " , j ) ; } printf ( " %d " , j ) ; }
#include <stdio.h> void main ( ) { while ( ) { printf ( " hello Javatpoint " ) ; } }
#include <stdio.h> void main ( ) { int x = 10 , y = 2 ; while ( x + y-1 ) { printf ( " %d %d " , x-- , y-- ) ; } }
#include int main ( ) { int i = 0 ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , number = 0 ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d \n  " , ( number * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; for ( a = 0 , b = 12 , c = 23 ; a <2 ; a + + ) { printf ( " %d " , a + b + c ) ; } }
#include <stdio.h> int main ( ) { int i = 1 ; for ( ; i <5 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 4 ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 , j = 0 , k = 0 ; i <4 , k <8 , j <10 ; i + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; j + = 2 ; k + = 3 ; } }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; ; i + + ) { printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { int i = 0 , j = 2 ; for ( i = 0 ; i <5 ; i + + , j = j + 2 ) { printf ( " %d %d\n  " , i , j ) ; } }
#include <stdio.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { int i = 20 ; printf ( " %d " , i ) ; } }
#include <stdio.h> void main ( ) { for ( ; ; ) { printf ( " welcome to javatpoint " ) ; } }
#include <stdio.h> #include <stdlib.h> void main ( ) { int i ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d " , i ) ; if ( i = = 5 ) break ; } printf ( " came outside of loop i = %d " , i ) ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { printf ( " %d & d\n  " , i , j ) ; if ( i = = 2 & & j = = 2 ) { break ; } } return 0 ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( 1 ) { printf ( " %d " , i ) ; i + + ; if ( i = = 10 ) break ; } printf ( " came out of while loop " ) ; }
#include <stdio.h> void main ( ) { int n = 2 , i , choice ; do { i = 1 ; while ( i < = 10 ) { printf ( " %d X %d = %d\n  " , n , i , n * i ) ; i + + ; } printf ( " do you want to continue with the table of %d , enter any non-zero value to continue. " , n + 1 ) ; scanf ( " %d " , & choice ; ) ; if ( choice = = 0 ) { break ; } n + + ; } while ( 1 ) ; }
#include <stdio.h> void main ( ) { int i = 0 ; while ( i! = 10 ) { printf ( " %d " , i ) ; continue ; i + + ; } }
#include int main ( ) { int i = 1 ; for ( i = 1 ; i < = 10 ; i + + ) { if ( i = = 5 ) { continue ; } printf ( " %d \n  " , i ) ; } return 0 ; }
#include int main ( ) { int i = 1 , j = 1 ; for ( i = 1 ; i < = 3 ; i + + ) { for ( j = 1 ; j < = 3 ; j + + ) { if ( i = = 2 & & j = = 2 ) { continue ; } printf ( " %d %d\n  " , i , j ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int num , i = 1 ; printf ( " Enter the number whose table you want to print? " ) ; scanf ( " %d " , & num ; ) ; table : printf ( " %d x %d = %d\n  " , num , i , num * i ) ; i + + ; if ( i < = 10 ) goto table ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 0 ; i <10 ; i + + ) { for ( j = 0 ; j <5 ; j + + ) { for ( k = 0 ; k <3 ; k + + ) { printf ( " %d %d %d\n  " , i , j , k ) ; if ( j = = 3 ) { goto out ; } } } } out : printf ( " came out of the loop " ) ; }
#include int main ( ) { float f = ( float ) 9 / 4 ; printf ( " f : %f\n  " , f ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include <stdio.h> void printName ( ) ; void main ( ) { printf ( " Hello " ) ; printName ( ) ; } void printName ( ) { printf ( " Javatpoint " ) ; }
#include <stdio.h> void sum ( ) ; void main ( ) { printf ( " \n Going to calculate the sum of two numbers : " ) ; sum ( ) ; } void sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; printf ( " The sum is %d " , a + b ) ; }
#include <stdio.h> int sum ( ) ; void main ( ) { int result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; result = sum ( ) ; printf ( " %d " , result ) ; } int sum ( ) { int a , b ; printf ( " \n Enter two numbers " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include <stdio.h> int sum ( ) ; void main ( ) { printf ( " Going to calculate the area of the square\n  " ) ; float area = square ( ) ; printf ( " The area of the square : %f\n  " , area ) ; } int square ( ) { float side ; printf ( " Enter the length of the side in meters : " ) ; scanf ( " %f " , & side ; ) ; return side * side ; }
#include <stdio.h> void sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; sum ( a , b ) ; } void sum ( int a , int b ) { printf ( " \n The sum is %d " , a + b ) ; }
#include <stdio.h> void average ( int , int , int , int , int ) ; void main ( ) { int a , b , c , d , e ; printf ( " \n Going to calculate the average of five numbers : " ) ; printf ( " \n Enter five numbers : " ) ; scanf ( " %d %d %d %d %d " , & a ; , & b ; , & c ; , & d ; , & e ; ) ; average ( a , b , c , d , e ) ; } void average ( int a , int b , int c , int d , int e ) { float avg ; avg = ( a + b + c + d + e ) / 5 ; printf ( " The average of given five numbers : %f " , avg ) ; }
#include <stdio.h> int sum ( int , int ) ; void main ( ) { int a , b , result ; printf ( " \n Going to calculate the sum of two numbers : " ) ; printf ( " \n Enter two numbers : " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; result = sum ( a , b ) ; printf ( " \n The sum is : %d " , result ) ; } int sum ( int a , int b ) { return a + b ; }
#include <stdio.h> int even_odd ( int ) ; void main ( ) { int n , flag = 0 ; printf ( " \n Going to check whether a number is even or odd " ) ; printf ( " \n Enter the number : " ) ; scanf ( " %d " , & n ; ) ; flag = even_odd ( n ) ; if ( flag = = 0 ) { printf ( " \n The number is odd " ) ; } else { printf ( " \n The number is even " ) ; } } int even_odd ( int n ) { if ( n %2 = = 0 ) { return 1 ; } else { return 0 ; } }
#include void change ( int num ) { printf ( " Before adding value inside function num = %d \n  " , num ) ; num = num + 100 ; printf ( " After adding value inside function num = %d \n  " , num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include <stdio.h> void swap ( int , int ) ; int main ( ) { int a = 10 ; int b = 20 ; printf ( " Before swapping the values in main a = %d , b = %d\n  " , a , b ) ; swap ( a , b ) ; printf ( " After swapping values in main a = %d , b = %d\n  " , a , b ) ; } void swap ( int a , int b ) { int temp ; temp = a ; a = b ; b = temp ; printf ( " After swapping values in function a = %d , b = %d\n  " , a , b ) ; }
#include void change ( int * num ) { printf ( " Before adding value inside function num = %d \n  " , * num ) ; ( * num ) + = 100 ; printf ( " After adding value inside function num = %d \n  " , * num ) ; } int main ( ) { int x = 100 ; printf ( " Before function call x = %d \n  " , x ) ; change ( & x ) ; printf ( " After function call x = %d \n  " , x ) ; return 0 ; }
#include <stdio.h> void swap ( int * , int * ) ; int main ( ) { int a = 10 ; int b = 20 ; printf ( " Before swapping the values in main a = %d , b = %d\n  " , a , b ) ; swap ( & a ; , & b ; ) ; printf ( " After swapping values in main a = %d , b = %d\n  " , a , b ) ; } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; printf ( " After swapping values in function a = %d , b = %d\n  " , * a , * b ) ; }
#include <stdio.h> int fact ( int ) ; int main ( ) { int n , f ; printf ( " Enter the number whose factorial you want to calculate? " ) ; scanf ( " %d " , & n ; ) ; f = fact ( n ) ; printf ( " factorial = %d " , f ) ; } int fact ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return n * fact ( n-1 ) ; } }
#include <stdio.h> int fibonacci ( int ) ; void main ( ) { int n , f ; printf ( " Enter the value of n? " ) ; scanf ( " %d " , & n ; ) ; f = fibonacci ( n ) ; printf ( " %d " , f ) ; } int fibonacci ( int n ) { if ( n = = 0 ) { return 0 ; } else if ( n = = 1 ) { return 1 ; } else { return fibonacci ( n-1 ) + fibonacci ( n-2 ) ; } }
#include <stdio.h> int main ( ) { int a ; char b ; float c ; printf ( " %d %c %f " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , i ; printf ( " %d " , + + a ) ; { int a = 20 ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %d " , a ) ; } } printf ( " %d " , a ) ; }
#include <stdio.h> static char c ; static int i ; static float f ; static char s [ 100 ] ; void main ( ) { printf ( " %d %d %f %s " , c , i , f ) ; }
#include void sum ( ) { static int a = 10 ; static int b = 24 ; printf ( " %d %d \n  " , a , b ) ; a + + ; b + + ; } void main ( ) { int i ; for ( i = 0 ; i < 3 ; i + + ) { sum ( ) ; } }
#include <stdio.h> int main ( ) { register int a ; printf ( " %d " , a ) ; }
#include <stdio.h> int main ( ) { register int a = 0 ; printf ( " %u " , & a ; ) ; }
#include <stdio.h> int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a ; printf ( " %d " , a ) ; }
#include int a ; int main ( ) { extern int a = 0 ; printf ( " %d " , a ) ; }
#include int main ( ) { extern int a ; printf ( " %d " , a ) ; } int a = 20 ;
#include <stdio.h> int main ( ) { int i = 0 ; int marks [ 5 ] ; marks [ 0 ] = 80 ; marks [ 1 ] = 60 ; marks [ 2 ] = 70 ; marks [ 3 ] = 85 ; marks [ 4 ] = 75 ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include int main ( ) { int i = 0 ; int marks [ 5 ] = { 20 , 30 , 40 , 50 , 60 } ; for ( i = 0 ; i <5 ; i + + ) { printf ( " %d \n  " , marks [ i ] ) ; } return 0 ; }
#include <stdio.h> void main ( ) { int i , j , temp ; int a [ 10 ] = { 10 , 9 , 7 , 101 , 23 , 44 , 12 , 78 , 34 , 23 } ; for ( i = 0 ; i <10 ; i + + ) { for ( j = i + 1 ; j <10 ; j + + ) { if ( a [ j ] > a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( " Printing Sorted Element List ...\n  " ) ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d\n  " , a [ i ] ) ; } }
#include <stdio.h> void main ( ) { int arr [ 100 ] , i , n , largest , sec_largest ; printf ( " Enter the size of the array? " ) ; scanf ( " %d " , & n ; ) ; printf ( " Enter the elements of the array? " ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr ; [ i ] ) ; } largest = arr [ 0 ] ; sec_largest = arr [ 1 ] ; for ( i = 0 ; i <n ; i + + ) { if ( arr [ i ] > largest ) { sec_largest = largest ; largest = arr [ i ] ; } else if ( arr [ i ] > sec_largest & & arr [ i ] ! = largest ) { sec_largest = arr [ i ] ; } } printf ( " largest = %d , second largest = %d " , largest , sec_largest ) ; }
#include <stdio.h> int main ( ) { int i = 0 , j = 0 ; int arr [ 4 ] [ 3 ] = { { 1 , 2 , 3 } , { 2 , 3 , 4 } , { 3 , 4 , 5 } , { 4 , 5 , 6 } } ; for ( i = 0 ; i <4 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " arr [ %d ] [ %d ] = %d \n  " , i , j , arr [ i ] [ j ] ) ; } } return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 3 ] [ 3 ] , i , j ; for ( i = 0 ; i <3 ; i + + ) { for ( j = 0 ; j <3 ; j + + ) { printf ( " Enter a [ %d ] [ %d ] : " , i , j ) ; scanf ( " %d " , & arr ; [ i ] [ j ] ) ; } } printf ( " \n  printing the elements ....\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { printf ( " \n  " ) ; for ( j = 0 ; j <3 ; j + + ) { printf ( " %d\t " , arr [ i ] [ j ] ) ; } } }
#include int minarray ( int arr [ ] , int size ) { int min = arr [ 0 ] ; int i = 0 ; for ( i = 1 ; iarr [ i ] ) { min = arr [ i ] ; } } return min ; } int main ( ) { int i = 0 , min = 0 ; int numbers [ ] = { 4 , 5 , 7 , 3 , 8 , 9 } ; min = minarray ( numbers , 6 ) ; printf ( " minimum number is %d \n  " , min ) ; return 0 ; }
#include <stdio.h> void Bubble_Sort ( int [ ] ) ; void main ( ) { int arr [ 10 ] = { 10 , 9 , 7 , 101 , 23 , 44 , 12 , 78 , 34 , 23 } ; Bubble_Sort ( arr ) ; } void Bubble_Sort ( int a [ ] ) { int i , j , temp ; for ( i = 0 ; i <10 ; i + + ) { for ( j = i + 1 ; j <10 ; j + + ) { if ( a [ j ] < a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( " Printing Sorted Element List ...\n  " ) ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d\n  " , a [ i ] ) ; } }
#include <stdio.h> int * Bubble_Sort ( int [ ] ) ; void main ( ) { int arr [ 10 ] = { 10 , 9 , 7 , 101 , 23 , 44 , 12 , 78 , 34 , 23 } ; int * p = Bubble_Sort ( arr ) , i ; printf ( " printing sorted elements ...\n  " ) ; for ( i = 0 ; i <10 ; i + + ) { printf ( " %d\n  " , * ( p + i ) ) ; } } int * Bubble_Sort ( int a [ ] ) { int i , j , temp ; for ( i = 0 ; i <10 ; i + + ) { for ( j = i + 1 ; j <10 ; j + + ) { if ( a [ j ] < a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } return a ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of p variable is %d \n  " , * p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; printf ( " value of number is %d , address of number is %u " , number , & number ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 , * p1 = & a , * p2 = & b ; printf ( " Before swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; * p1 = * p1 + * p2 ; * p2 = * p1- * p2 ; * p1 = * p1- * p2 ; printf ( " \n After swap : * p1 = %d * p2 = %d " , * p1 , * p2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 ; int * p ; int * * pp ; p = & a ; pp = & p ; printf ( " address of a : %x\n  " , p ) ; printf ( " address of p : %x\n  " , pp ) ; printf ( " value stored at p : %d\n  " , * p ) ; printf ( " value stored at pp : %d\n  " , * * pp ) ; }
#include int main ( ) { int number = 50 ; int * p ; int * * p2 ; p = & number ; p2 = & p ; printf ( " Address of number variable is %x \n  " , & number ) ; printf ( " Address of p variable is %x \n  " , p ) ; printf ( " Value of * p variable is %d \n  " , * p ) ; printf ( " Address of p2 variable is %x \n  " , p2 ) ; printf ( " Value of * * p2 variable is %d \n  " , * p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int a [ 10 ] = { 100 , 206 , 300 , 409 , 509 , 601 } ; int * p [ ] = { a , a + 1 , a + 2 , a + 3 , a + 4 , a + 5 } ; int * * pp = p ; pp + + ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; * pp + + ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; + + * pp ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; + + * * pp ; printf ( " %d %d %d\n  " , pp-p , * pp - a , * * pp ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 1 ; printf ( " After increment : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; int * p = arr ; int i ; printf ( " printing array elements...\n  " ) ; for ( i = 0 ; i < 5 ; i + + ) { printf ( " %d " , * ( p + i ) ) ; } }
#include void main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-1 ; printf ( " After decrement : Address of p variable is %u \n  " , p ) ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p + 3 ; printf ( " After adding 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include int main ( ) { int number = 50 ; int * p ; p = & number ; printf ( " Address of p variable is %u \n  " , p ) ; p = p-3 ; printf ( " After subtracting 3 : Address of p variable is %u \n  " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int i = 100 ; int * p = & i ; int * temp ; temp = p ; p = p + 3 ; printf ( " Pointer Subtraction : %d - %d = %d " , p , temp , p-temp ) ; }
#include <stdio.h> int addition ( ) ; int main ( ) { int result ; int ( * ptr ) ( ) ; ptr = & addition ; result = ( * ptr ) ( ) ; printf ( " The sum is %d " , result ) ; } int addition ( ) { int a , b ; printf ( " Enter two numbers? " ) ; scanf ( " %d %d " , & a ; , & b ; ) ; return a + b ; }
#include <stdio.h> int show ( ) ; int showadd ( int ) ; int ( * arr [ 3 ] ) ( ) ; int ( * ( * ptr ) [ 3 ] ) ( ) ; int main ( ) { int result1 ; arr [ 0 ] = show ; arr [ 1 ] = showadd ; ptr = & arr ; result1 = ( * * ptr ) ( ) ; printf ( " printing the value returned by show : %d " , result1 ) ; ( * ( * ptr + 1 ) ) ( result1 ) ; } int show ( ) { int a = 65 ; return a + + ; } int showadd ( int b ) { printf ( " \n Adding 90 to the value returned by show : %d " , b + 90 ) ; }
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { int n , i , * ptr , sum = 0 ; printf ( " Enter number of elements : " ) ; scanf ( " %d " , & n ) ; ptr = ( int * ) calloc ( n , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Sorry! unable to allocate memory " ) ; exit ( 0 ) ; } printf ( " Enter elements of array : " ) ; for ( i = 0 ; i
#include #include int main ( ) { char ch [ 11 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 11 ] = " javatpoint " ; printf ( " Char Array Value is : %s\n  " , ch ) ; printf ( " String Literal Value is : %s\n  " , ch2 ) ; return 0 ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( i <11 ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; int i = 0 ; int count = 0 ; while ( s [ i ] ! = NULL ) { if ( s [ i ] = = 'a' || s [ i ] = = 'e' || s [ i ] = = 'i' || s [ i ] = = 'u' || s [ i ] = = 'o' ) { count + + ; } i + + ; } printf ( " The number of vowels %d " , count ) ; }
#include <stdio.h> void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " %s " , s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char s [ 20 ] ; printf ( " Enter the string? " ) ; scanf ( " % [ ^\n  ] s " , s ) ; printf ( " You entered %s " , s ) ; }
#include <stdio.h> void main ( ) { char s [ 11 ] = " javatpoint " ; char * p = s ; printf ( " %s " , p ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " String p : %s\n  " , p ) ; char * q ; printf ( " copying the content of p into q...\n  " ) ; q = p ; printf ( " String q : %s\n  " , q ) ; }
#include <stdio.h> void main ( ) { char * p = " hello javatpoint " ; printf ( " Before assigning : %s\n  " , p ) ; p = " hello " ; printf ( " After assigning : %s\n  " , p ) ; }
#include void main ( ) { char s [ 30 ] ; printf ( " Enter the string? " ) ; gets ( s ) ; printf ( " You entered %s " , s ) ; }
#include void main ( ) { char str [ 20 ] ; printf ( " Enter the string? " ) ; fgets ( str , 20 , stdin ) ; printf ( " %s " , str ) ; }
#include #include int main ( ) { char name [ 50 ] ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Your name is : " ) ; puts ( name ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; printf ( " Length of string is : %d " , strlen ( ch ) ) ; return 0 ; }
#include #include int main ( ) { char ch [ 20 ] = { 'j' , 'a' , 'v' , 'a' , 't' , 'p' , 'o' , 'i' , 'n' , 't' , '\0' } ; char ch2 [ 20 ] ; strcpy ( ch2 , ch ) ; printf ( " Value of second string is : %s " , ch2 ) ; return 0 ; }
#include #include int main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; return 0 ; }
#include #include int main ( ) { char str1 [ 20 ] , str2 [ 20 ] ; printf ( " Enter 1st string : " ) ; gets ( str1 ) ; printf ( " Enter 2nd string : " ) ; gets ( str2 ) ; if ( strcmp ( str1 , str2 ) = = 0 ) printf ( " Strings are equal " ) ; else printf ( " Strings are not equal " ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Reverse String is : %s " , strrev ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Lower String is : %s " , strlwr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 20 ] ; printf ( " Enter string : " ) ; gets ( str ) ; printf ( " String is : %s " , str ) ; printf ( " \n Upper String is : %s " , strupr ( str ) ) ; return 0 ; }
#include #include int main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; sub = strstr ( str , " java " ) ; printf ( " \n Substring is : %s " , sub ) ; return 0 ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include int main ( ) { printf ( " \n  %f " , ceil ( 3.6 ) ) ; printf ( " \n  %f " , ceil ( 3.3 ) ) ; printf ( " \n  %f " , floor ( 3.6 ) ) ; printf ( " \n  %f " , floor ( 3.2 ) ) ; printf ( " \n  %f " , sqrt ( 16 ) ) ; printf ( " \n  %f " , sqrt ( 7 ) ) ; printf ( " \n  %f " , pow ( 2 , 4 ) ) ; printf ( " \n  %f " , pow ( 3 , 3 ) ) ; printf ( " \n  %d " , abs ( -12 ) ) ; return 0 ; }
#include <stdio.h> void main ( ) { char names [ 2 ] [ 10 ] , dummy ; int roll_numbers [ 2 ] , i ; float marks [ 2 ] ; for ( i = 0 ; i <3 ; i + + ) { printf ( " Enter the name , roll number , and marks of the student %d " , i + 1 ) ; scanf ( " %s %d %f " , & names ; [ i ] , & roll ; _numbers [ i ] , & marks ; [ i ] ) ; scanf ( " %c " , & dummy ; ) ; } printf ( " Printing the Student details ...\n  " ) ; for ( i = 0 ; i <3 ; i + + ) { printf ( " %s %d %f\n  " , names [ i ] , roll_numbers [ i ] , marks [ i ] ) ; } }
#include #include struct employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include #include struct employee { int id ; char name [ 50 ] ; float salary ; } e1 , e2 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; e1.salary = 56000 ; e2.id = 102 ; strcpy ( e2.name , " James Bond " ) ; e2.salary = 126000 ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; printf ( " employee 1 salary : %f\n  " , e1.salary ) ; printf ( " employee 2 id : %d\n  " , e2.id ) ; printf ( " employee 2 name : %s\n  " , e2.name ) ; printf ( " employee 2 salary : %f\n  " , e2.salary ) ; return 0 ; }
#include struct student { char name [ 20 ] ; int id ; float marks ; } ; void main ( ) { struct student s1 , s2 , s3 ; int dummy ; printf ( " Enter the name , id , and marks of student 1 " ) ; scanf ( " %s %d %f " , s1.name , & s1.id ; , & s1.marks ; ) ; scanf ( " %c " , & dummy ; ) ; printf ( " Enter the name , id , and marks of student 2 " ) ; scanf ( " %s %d %f " , s2.name , & s2.id ; , & s2.marks ; ) ; scanf ( " %c " , & dummy ; ) ; printf ( " Enter the name , id , and marks of student 3 " ) ; scanf ( " %s %d %f " , s3.name , & s3.id ; , & s3.marks ; ) ; scanf ( " %c " , & dummy ; ) ; printf ( " Printing the details....\n  " ) ; printf ( " %s %d %f\n  " , s1.name , s1.id , s1.marks ) ; printf ( " %s %d %f\n  " , s2.name , s2.id , s2.marks ) ; printf ( " %s %d %f\n  " , s3.name , s3.id , s3.marks ) ; }
#include #include struct student { int rollno ; char name [ 10 ] ; } ; int main ( ) { int i ; struct student st [ 5 ] ; printf ( " Enter Records of 5 students " ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " \n Enter Rollno : " ) ; scanf ( " %d " , & st [ i ] .rollno ) ; printf ( " \n Enter Name : " ) ; scanf ( " %s " , & st [ i ] .name ) ; } printf ( " \n Student Information List : " ) ; for ( i = 0 ; i <5 ; i + + ) { printf ( " \n Rollno : %d , Name : %s " , st [ i ] .rollno , st [ i ] .name ) ; } return 0 ; }
#include <stdio.h> struct address { char city [ 20 ] ; int pin ; char phone [ 14 ] ; } ; struct employee { char name [ 20 ] ; struct address add ; } ; void main ( ) { struct employee emp ; printf ( " Enter employee information?\n  " ) ; scanf ( " %s %s %d %s " , emp.name , emp.add.city , & emp.add.pin ; , emp.add.phone ) ; printf ( " Printing the employee information....\n  " ) ; printf ( " name : %s\n City : %s\n Pincode : %d\n Phone : %s " , emp.name , emp.add.city , emp.add.pin , emp.add.phone ) ; }
#include #include struct Employee { int id ; char name [ 20 ] ; struct Date { int dd ; int mm ; int yyyy ; } doj ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; e1.doj.dd = 10 ; e1.doj.mm = 11 ; e1.doj.yyyy = 2014 ; printf ( " employee id : %d\n  " , e1.id ) ; printf ( " employee name : %s\n  " , e1.name ) ; printf ( " employee date of joining ( dd / mm / yyyy ) : %d / %d / %d\n  " , e1.doj.dd , e1.doj.mm , e1.doj.yyyy ) ; return 0 ; }
#include <stdio.h> struct address { char city [ 20 ] ; int pin ; char phone [ 14 ] ; } ; struct employee { char name [ 20 ] ; struct address add ; } ; void display ( struct employee ) ; void main ( ) { struct employee emp ; printf ( " Enter employee information?\n  " ) ; scanf ( " %s %s %d %s " , emp.name , emp.add.city , & emp.add.pin ; , emp.add.phone ) ; display ( emp ) ; } void display ( struct employee emp ) { printf ( " Printing the details....\n  " ) ; printf ( " %s %s %d %s " , emp.name , emp.add.city , emp.add.pin , emp.add.phone ) ; }
#include #include union employee { int id ; char name [ 50 ] ; } e1 ; int main ( ) { e1.id = 101 ; strcpy ( e1.name , " Sonoo Jaiswal " ) ; printf ( " employee 1 id : %d\n  " , e1.id ) ; printf ( " employee 1 name : %s\n  " , e1.name ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include <stdio.h> void main ( ) { FILE * fp ; char ch ; fp = fopen ( " file_handle.c " , " r " ) ; while ( 1 ) { ch = fgetc ( fp ) ; if ( ch = = EOF ) break ; printf ( " %c " , ch ) ; } fclose ( fp ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file.txt " , " w " ) ; fprintf ( fp , " Hello file by fprintf...\n  " ) ; fclose ( fp ) ; }
#include main ( ) { FILE * fp ; char buff [ 255 ] ; fp = fopen ( " file.txt " , " r " ) ; while ( fscanf ( fp , " %s " , buff ) ! = EOF ) { printf ( " %s " , buff ) ; } fclose ( fp ) ; }
#include void main ( ) { FILE * fptr ; int id ; char name [ 30 ] ; float salary ; fptr = fopen ( " emp.txt " , " w + " ) ; if ( fptr = = NULL ) { printf ( " File does not exists \n  " ) ; return ; } printf ( " Enter the id\n  " ) ; scanf ( " %d " , & id ; ) ; fprintf ( fptr , " Id = %d\n  " , id ) ; printf ( " Enter the name \n  " ) ; scanf ( " %s " , name ) ; fprintf ( fptr , " Name = %s\n  " , name ) ; printf ( " Enter the salary\n  " ) ; scanf ( " %f " , & salary ; ) ; fprintf ( fptr , " Salary = %.2f\n  " , salary ) ; fclose ( fptr ) ; }
#include main ( ) { FILE * fp ; fp = fopen ( " file1.txt " , " w " ) ; fputc ( 'a' , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " myfile.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " w " ) ; fputs ( " hello c programming " , fp ) ; fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; char text [ 300 ] ; clrscr ( ) ; fp = fopen ( " myfile2.txt " , " r " ) ; printf ( " %s " , fgets ( text , 200 , fp ) ) ; fclose ( fp ) ; getch ( ) ; }
#include void main ( ) { FILE * fp ; fp = fopen ( " myfile.txt " , " w + " ) ; fputs ( " This is javatpoint " , fp ) ; fseek ( fp , 7 , SEEK_SET ) ; fputs ( " sonoo jaiswal " , fp ) ; fclose ( fp ) ; }
#include #include void main ( ) { FILE * fp ; char c ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } rewind ( fp ) ; while ( ( c = fgetc ( fp ) ) ! = EOF ) { printf ( " %c " , c ) ; } fclose ( fp ) ; getch ( ) ; }
#include #include void main ( ) { FILE * fp ; int length ; clrscr ( ) ; fp = fopen ( " file.txt " , " r " ) ; fseek ( fp , 0 , SEEK_END ) ; length = ftell ( fp ) ; fclose ( fp ) ; printf ( " Size of file : %d bytes " , length ) ; getch ( ) ; }
#include int main ( ) { printf ( " File : %s\n  " , __FILE__ ) ; printf ( " Date : %s\n  " , __DATE__ ) ; printf ( " Time : %s\n  " , __TIME__ ) ; printf ( " Line : %d\n  " , __LINE__ ) ; printf ( " STDC : %d\n  " , __STDC__ ) ; return 0 ; }
#include int main ( ) { printf ( " Hello C " ) ; return 0 ; }
#include #define PI 3.14 main ( ) { printf ( " %f " , PI ) ; }
#include #define MIN ( a , b ) ( ( a ) < ( b ) ? ( a ) : ( b ) ) void main ( ) { printf ( " Minimum between 10 and 20 is : %d\n  " , MIN ( 10 , 20 ) ) ; }
#include #define PI 3.14 #undef PI main ( ) { printf ( " %f " , PI ) ; }
#include #define number 15 int square = number * number ; #undef number main ( ) { printf ( " %d " , square ) ; }
#include #include #define NOINPUT void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifdef NOINPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define INPUT void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include void main ( ) { int a = 0 ; #ifndef INPUT a = 2 ; #else printf ( " Enter a : " ) ; scanf ( " %d " , & a ; ) ; #endif printf ( " Value of a : %d\n  " , a ) ; getch ( ) ; }
#include #include #define NUMBER 0 void main ( ) { #if ( NUMBER = = 0 ) printf ( " Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { clrscr ( ) ; #if ( NUMBER = = 0 ) printf ( " 1 Value of Number is : %d " , NUMBER ) ; #endif #if ( NUMBER = = 1 ) printf ( " 2 Value of Number is : %d " , NUMBER ) ; #endif getch ( ) ; }
#include #include #define NUMBER 1 void main ( ) { #if NUMBER = = 0 printf ( " Value of Number is : %d " , NUMBER ) ; #else print ( " Value of Number is non-zero " ) ; #endif getch ( ) ; }
#include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include #ifndef __MATH_H #error First include then compile #else void main ( ) { float a ; a = sqrt ( 7 ) ; printf ( " %f " , a ) ; } #endif
#include #include void func ( ) ; #pragma startup func #pragma exit func void main ( ) { printf ( " \n I am in main " ) ; getch ( ) ; } void func ( ) { printf ( " \n I am in func " ) ; getch ( ) ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include void main ( int argc , char * argv [ ] ) { printf ( " Program name is : %s\n  " , argv [ 0 ] ) ; if ( argc < 2 ) { printf ( " No argument passed through command line.\n  " ) ; } else { printf ( " First argument is : %s\n  " , argv [ 1 ] ) ; } }
#include int main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include void printFibonacci ( int n ) { static int n1 = 0 , n2 = 1 , n3 ; if ( n> 0 ) { n3 = n1 + n2 ; n1 = n2 ; n2 = n3 ; printf ( " %d " , n3 ) ; printFibonacci ( n-1 ) ; } } int main ( ) { int n ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ) ; printf ( " Fibonacci Series : " ) ; printf ( " %d %d " , 0 , 1 ) ; printFibonacci ( n-2 ) ; return 0 ; }
#include int main ( ) { int n , i , m = 0 , flag = 0 ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; return 0 ; }
#include int main ( ) { int i , fact = 1 , number ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; return 0 ; }
#include <stdio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; return 0 ; }
#include int main ( ) { int n , r , sum = 0 , temp ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; return 0 ; }
#include int main ( ) { int n , sum = 0 , m ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n> 0 ) { m = n %10 ; sum = sum + m ; n = n / 10 ; } printf ( " Sum is = %d " , sum ) ; return 0 ; }
#include int main ( ) { int n , reverse = 0 , rem ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; return 0 ; }
#include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include #include int main ( ) { int a = 10 , b = 20 ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a * b ; b = a / b ; a = a / b ; system ( " cls " ) ; printf ( " \n After swap a = %d b = %d " , a , b ) ; return 0 ; }
#include int main ( ) { if ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { switch ( printf ( " hello world " ) ) { } return 0 ; }
#include int main ( ) { while ( !printf ( " hello world " ) ) { } return 0 ; }
#include <stdio.h> void main ( ) { int a = 10 , b = 20 , c ; asm { mov ax , a mov bx , b add ax , bx mov c , ax } printf ( " c = %d " , c ) ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include #include int main ( ) { int a [ 10 ] [ 10 ] , b [ 10 ] [ 10 ] , mul [ 10 ] [ 10 ] , r , c , i , j , k ; system ( " cls " ) ; printf ( " enter the number of row = " ) ; scanf ( " %d " , & r ; ) ; printf ( " enter the number of column = " ) ; scanf ( " %d " , & c ; ) ; printf ( " enter the first matrix element = \n  " ) ; for ( i = 0 ; i
#include #include int main ( ) { int a [ 10 ] , n , i ; system ( " cls " ) ; printf ( " Enter the number to convert : " ) ; scanf ( " %d " , & n ) ; for ( i = 0 ; n> 0 ; i + + ) { a [ i ] = n %2 ; n = n / 2 ; } printf ( " \n Binary of Given Number is = " ) ; for ( i = i-1 ; i> = 0 ; i-- ) { printf ( " %d " , a [ i ] ) ; } return 0 ; }
#include #include int main ( ) { long int n , sum = 0 , r ; system ( " cls " ) ; printf ( " enter the number = " ) ; scanf ( " %ld " , & n ) ; while ( n> 0 ) { r = n %10 ; sum = sum * 10 + r ; n = n / 10 ; } n = sum ; while ( n> 0 ) { r = n %10 ; switch ( r ) { case 1 : printf ( " one " ) ; break ; case 2 : printf ( " two " ) ; break ; case 3 : printf ( " three " ) ; break ; case 4 : printf ( " four " ) ; break ; case 5 : printf ( " five " ) ; break ; case 6 : printf ( " six " ) ; break ; case 7 : printf ( " seven " ) ; break ; case 8 : printf ( " eight " ) ; break ; case 9 : printf ( " nine " ) ; break ; case 0 : printf ( " zero " ) ; break ; default : printf ( " tttt " ) ; break ; } n = n / 10 ; } return 0 ; }
#include #include int main ( ) { int ch = 65 ; int i , j , k , m ; system ( " cls " ) ; for ( i = 1 ; i < = 5 ; i + + ) { for ( j = 5 ; j> = i ; j-- ) printf ( " " ) ; for ( k = 1 ; k < = i ; k + + ) printf ( " %c " , ch + + ) ; ch-- ; for ( m = 1 ; m
#include #include int main ( ) { int i , j , k , l , n ; system ( " cls " ) ; printf ( " enter the range = " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = n-i ; j + + ) { printf ( " " ) ; } for ( k = 1 ; k < = i ; k + + ) { printf ( " %d " , k ) ; } for ( l = i-1 ; l> = 1 ; l-- ) { printf ( " %d " , l ) ; } printf ( " \n  " ) ; } return 0 ; }
#include #include int main ( ) { int a = 0 , b = 1 , i , c , n , j ; system ( " cls " ) ; printf ( " Enter the limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { a = 0 ; b = 1 ; printf ( " %d\t " , b ) ; for ( j = 1 ; j
#include #include int main ( ) { printf ( " \n  Result : %f " , ceil ( 1.44 ) ) ; printf ( " \n  Result : %f " , ceil ( 1.66 ) ) ; printf ( " \n  Result : %f " , floor ( 1.44 ) ) ; printf ( " \n  Result : %f " , floor ( 1.66 ) ) ; return 0 ; }
#include int main ( ) { int x ; for ( x = -1 ; x < = 10 ; x + + ) { if ( x < 5 ) continue ; else break ; printf ( " javaTpoint " ) ; } return 0 ; }
#include int main ( ) { int i = 1 ; while ( i < = 155 ) { printf ( " %c %d\n  " , i , i ) ; i + + ; } return 0 ; }
#include int main ( ) { int i = 8 , j = 24 ; if ( i = 8 ) & & if ( j = 24 ) printf ( " Welcome Programmer " ) ; return 0 ; }
#include int main ( ) { int j = 1 ; switch ( j ) { printf ( " Hello programmer! " ) ; case 1 : printf ( " Case1 " ) ; break ; case 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include int main ( ) { int j = 1 ; while ( ) { printf ( " %d\n  " , j + + ) ; if ( j> 5 ) break ; } return 0 ; }
#include main ( ) { int j ; char s [ ] = " javaTpoint " ; for ( j = 0 ; s [ j ] ; + + j ) ; printf ( " %d \n  " , j ) ; j = 0 ; while ( s [ j + + ] ) ; printf ( " %d " , j ) ; }
#include main ( ) float a = 3.14 ; double b = 3.14 ;
#include int main ( ) { int P = 10 ; switch ( P ) { case 10 : printf ( " Case 1 " ) ; case 20 : printf ( " Case 2 " ) ; break ; case P : printf ( " Case 2 " ) ; break ; } return 0 ; }
#include int main ( ) { int i = 1 ; switch ( i ) { case 1 : printf ( " Case1 " ) ; break ; case 1 * 2 + 2 : printf ( " Case2 " ) ; break ; } return 0 ; }
#include int main ( ) { int x = 100 , y = 100 %80 , j ; for ( j = 1 ; j <10 ; j + + ) if ( x ! = y ) ; printf ( " x = %d y = %d\n  " , x , y ) ; return 0 ; }
#include int main ( ) { short int i = 0 ; for ( i < = 5 & & i> = -1 ; + + i ; i> 0 ) printf ( " %u , " , i ) ; return 0 ; }
#include int main ( ) { int a = 5 ; do { printf ( " %d\n  " , a ) ; a = -1 ; } while ( a> 0 ) ; return 0 ; }
#include int function1 ( int ) ; int main ( ) { int k = 30 ; k = function1 ( k = function1 ( k = function1 ( k ) ) ) ; printf ( " k = %d\n  " , k ) ; return 0 ; } int function1 ( int k ) { k + + ; return k ; }
#include void fun ( char * * ) ; int main ( ) { char * argmntv [ ] = { " gh " , " ef " , " cd " , " ab " } ; fun ( argmntv ) ; return 0 ; } void fun ( char * * x ) { char * y ; y = ( x + = sizeof ( int ) ) [ -1 ] ; printf ( " %s\n  " , y ) ; }
#include int main ( ) { int b = 15 ; void f1 ( ) ; b = f1 ( ) ; printf ( " %d\n  " , b ) ; return 0 ; } void f1 ( ) { printf ( " Hello " ) ; }
#include int main ( ) { printf ( " %p\n  " , main ( ) ) ; return 0 ; }
#include int mul ( int , int ) ; int main ( ) { int x = 5 , y = 4 , z ; z = mul ( x , y ) ; printf ( " z = %d\n  " , z ) ; return 0 ; } int mul ( int x , int y ) { return ( x * y ) ; return ( x - y ) ; } Output : z = 20
#include int chk ( int , int ) ; int main ( ) { int x ; x = check ( 10 , 20 ) ; printf ( " x = %d\n  " , x ) ; return 0 ; } int check ( int a , int b ) { int * y , * z ; y = & a ; z = & b ; a> = 45 ? return ( * y ) : return ( * z ) ; }
#include int j ; int function ( ) ; int main ( ) { while ( j ) { function ( ) ; main ( ) ; } printf ( " Hi\n  " ) ; return 0 ; } int function ( ) { printf ( " Hello " ) ; }
#include main ( ) { char x [ ] = " javaTpoint " , y [ ] = " javaTpoint " ; if ( x = = y ) { printf ( " Strings are Equal " ) ; } }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include main ( ) { int x [ ] = { 100 , 200 , 300 } ; printf ( " %d " , * x + 1 ) ; }
#include void main ( ) { char a [ ] = " C + + " ; printf ( " %s " , a ) ; a + + ; printf ( " %s " , a ) ; }
#include int main ( ) { int size , j ; scanf ( " %d " , & size ; ) ; int arr [ size ] ; for ( j = 1 ; j < = size ; j + + ) { scanf ( " %d " , arr [ j ] ) ; printf ( " %d " , arr [ j ] ) ; } return 0 ; }
#include int main ( ) { int arr [ 2 ] = { 20 } ; printf ( " %d\n  " , 0 [ arr ] ) ; return 0 ; }
#include int main ( ) { int arr [ ] = { 10 , 11 , 12 , 15 , 23 } ; printf ( " %u , %u\n  " , arr , & arr ; ) ; return 0 ; }
#include int main ( ) { typedef char ( * ( * arrfptr [ 4 ] ) ( ) ) [ 20 ] ; arrfptr y ; return 0 ; }
#include main ( ) { struct { int y ; } var = { 4 } , * a = & var ; printf ( " %d %d %d " , var.y , a-> y , ( * a ) .y ) ; }
#include main ( ) { int a [ 3 ] = { 1 , , 2 } ; printf ( " %d " , a [ a [ 0 ] ] ) ; }
#include main ( ) { int j ; char s [ ] = " javaTpoint " ; for ( j = 0 ; s [ j ] ; + + j ) ; printf ( " %d \n  " , j ) ; j = 0 ; while ( s [ j + + ] ) ; printf ( " %d " , j ) ; }
#include #include int main ( ) { int j , k ; char * z = " Hello " ; k = strlen ( z ) ; * z = z [ k ] ; for ( j = 0 ; j < = k ; j + + ) { printf ( " %s " , z ) ; z + + ; } printf ( " \n  " , z ) ; return 0 ; }
#include int main ( ) { int * i ; void fun ( int * * ) ; fun ( & i ; ) ; return 0 ; } void fun ( int * * j ) { int b = 10 ; }
#include int main ( ) { float j = 12 , * i ; void * a ; a = & j ; i = a ; printf ( " %f\n  " , * i ) ; return 0 ; }
#include main ( ) { int * a , * * b ; printf ( " %u\n  " , sizeof ( a ) ) ; printf ( " %u\n  " , sizeof ( b ) ) ; }
#include void main ( ) { char * a = " C + + " ; printf ( " %s " , a ) ; a + + ; printf ( " %s " , a ) ; }
#include main ( ) { char * x = NULL ; printf ( " %c " , * x ) ; }
#include int main ( ) { int b = 10 , * i ; void * p ; i = p = & b ; i + + ; p + + ; printf ( " %u %u\n  " , i , p ) ; return 0 ; }
#include int main ( ) { int j = 10 ; int * i = & j ; return 0 ; }
#include main ( ) { char * p = " Xyz " ; while ( * p ) printf ( " %c " , * p + + ) ; }
#include int main ( ) { char a [ ] = " %d\n  " ; a [ 1 ] = 'b' ; printf ( a , 65 ) ; return 0 ; }
#include #include int main ( ) { printf ( " %d\n  " , strlen ( " javaTpoint " ) ) ; return 0 ; }
#include int main ( ) { char stri [ 20 ] , * p ; printf ( " Enter the string\n  : " ) ; scanf ( " %s " , stri ) ; p = stri ; while ( * p ! = '\0' ) { if ( * p > = 97 & & * p < = 122 ) * p = * p-32 ; p + + ; } printf ( " %s " , stri ) ; return 0 ; }
#include #include int main ( ) { char stri [ ] = " Java\0\Tpoint\0 " ; printf ( " %s\n  " , stri ) ; return 0 ; }
#include void main ( ) { char ch [ 10 ] = { 'h' , 'e' , 'l' , 'l' , 'o' , '\0' } ; char ch2 [ 10 ] = { 'c' , '\0' } ; strcat ( ch , ch2 ) ; printf ( " Value of first string is : %s " , ch ) ; }
#include #include #include void main ( ) { char str [ 100 ] = " this is javatpoint with c and java " ; char * sub ; clrscr ( ) ; sub = strstr ( str , " java " ) ; printf ( " \n  %s " , sub ) ; getch ( ) ; }
#include main ( ) { char x [ ] = " Hi\0Hello " ; printf ( " %d %d " , strlen ( x ) , sizeof ( x ) ) ; }
#include int main ( ) { char * stri [ ] = { " Java " , " C " , " Android " , " Embedded " , " JS " } ; printf ( " %d , %d " , sizeof ( stri ) , strlen ( stri [ 0 ] ) ) ; return 0 ; }
#include #include int main ( ) { printf ( " %c\n  " , " javatpoint " [ 5 ] ) ; return 0 ; }
#include int main ( ) { printf ( " %u %s\n  " , & " Welcome " , & " Programming " ) ; return 0 ; }
#include main ( ) { union abc { int a ; char cha ; } var ; var.cha = 'A' ; printf ( " %d " , var.a ) ; }
#include int main ( ) { union b { int j ; char ch [ 2 ] ; } ; union b un ; un.ch [ 0 ] = 3 ; un.ch [ 1 ] = 2 ; printf ( " %d , %d , %d\n  " , un.ch [ 0 ] , un.ch [ 1 ] , un.j ) ; return 0 ; }
#include int main ( ) { enum months { JAN = -1 , FEB , MARCH = 6 , APRIL , MAY , JUNE } ; printf ( " %d , %d , %d , %d , %d , %d\n  " , + + JAN , FEB , MARCH , APRIL , MAY , JUNE ) ; return 0 ; }
#include int main ( ) { struct employ { char name [ 22 ] ; int age ; float bs ; } ; struct employ e ; e.name = " Nakul " ; e.age = 22 ; printf ( " %s %d\n  " , e.name , e.age ) ; return 0 ; }
#include main ( ) { enum { GREAT , is = 7 , india } ; printf ( " %d %d " , GREAT , india ) ; }
#include union xyz { char x , y , z , a , b , c , d , e ; int i ; } xyz ; main ( ) { printf ( " %d " , sizeof ( xyz ) ) ; }
#include main ( ) { struct { int y ; } var = { 4 } , * a = & var ; printf ( " %d %d %d " , var.y , a-> y , ( * a ) .y ) ; }
#include union Pointer { unsigned int a : 4 ; unsigned int b : 4 ; int res ; } ; int main ( ) { union Pointer pt ; pt.a = 2 ; pt.b = 6 ; pt.res = pt.b ; printf ( " \n  The value of res is : %d " , pt.res ) ; return 0 ; }
#include int main ( ) { struct values { int bit1 : 1 ; int bit3 : 3 ; int bit4 : 4 ; } bit ; printf ( " %d \n  " , sizeof ( bit ) ) ; return 0 ; }
#include #define SWAP ( x , y ) int t ; t = x , x = y , y = t ; int main ( ) { int x = 10 , y = 20 ; SWAP ( x , y ) ; printf ( " x = %d , y = %d\n  " , x , y ) ; return 0 ; }
#include #define DEF int main ( ) { int j = 3 ; #ifdef DEF printf ( " square of j = %d\n  " , j * j ) ; #else printf ( " j = %d\n  " , j ) ; #endif return 0 ; }
#include #define IT 0.1 #define HRA 0.2 #define DA 0.3 int main ( ) { float bas_sal , net_sal ; bas_sal = 1000 ; net_sal = bas_sal * ( 1 + HRA + DA-IT ) ; printf ( " Gross salary = %f\n  " , net_sal ) ; return 0 ; }
#include int main ( ) { int j ; #if A printf ( " Enter the number : " ) ; scanf ( " %d " , & j ; ) ; #elif B printf ( " The number is even " ) ; return 0 ; }
#include #define MEAN ( p , q , r , s , t ) ( p + q + r + s + t ) / 5 int main ( ) { int p = 1 , q = 2 , r = 3 , s = 4 , t = 5 , mn ; mn = MEAN ( p , q , r , s , t ) ; printf ( " Mean of 5 numbers = %d\n  " , mn ) ; return 0 ; }
#include int main ( ) { int p = 1 , q = 2 , r = 3 , s = 4 , t = 5 , mn ; m = ( p + q + r + s + t ) / 5 ; printf ( " Mean of 5 numbers = %d\n  " , mn ) ; return 0 ; }
#include #define MAX ( x , y ) ( x > y ? x : y ) int main ( ) { int a ; a = MAX ( 3 + 1 , 2 + 4 ) ; printf ( " %d\n  " , a ) ; return 0 ; }
#include <stdio.h> void change ( int , int ) ; int main ( ) { int a = 10 , b = 20 ; change ( a , b ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int x , int y ) { x = 13 ; y = 17 ; }
#include <stdio.h> void change ( int * , int * ) ; int main ( ) { int a = 10 , b = 20 ; change ( & a ; , & b ; ) ; printf ( " Value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " Value of b is : %d " , b ) ; return 0 ; } void change ( int * x , int * y ) { * x = 13 ; * y = 17 ; }
#include <stdio.h> int calculate_fact ( int ) ; int main ( ) { int n = 5 , f ; f = calculate_fact ( n ) ; printf ( " factorial of a number is %d " , f ) ; return 0 ; } int calculate_fact ( int a ) { if ( a = = 1 ) { return 1 ; } else return a * calculate_fact ( a-1 ) ; }
#include <stdio.h> int main ( ) { int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i <5 ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int * p ; int a = 5 ; p = & a ; printf ( " Address value of 'a' variable is %u " , p ) ; return 0 ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; }
#include <stdio.h> void main ( ) { int * ptr = malloc ( constant value ) ; free ( ptr ) ; ptr = NULL ; }
#include <stdio.h> int main ( ) { int a = 10 ; int * ptr , * * pptr ; ptr = & a ; pptr = & ptr ; printf ( " value of a is : %d " , a ) ; printf ( " \n  " ) ; printf ( " value of * ptr is : %d " , * ptr ) ; printf ( " \n  " ) ; printf ( " value of * * pptr is : %d " , * * pptr ) ; return 0 ; }
#include <stdio.h> struct student { char name [ 10 ] ; int age ; } s1 ; int main ( ) { printf ( " Enter the name " ) ; scanf ( " %s " , s1.name ) ; printf ( " \n  " ) ; printf ( " Enter the age " ) ; scanf ( " %d " , & s1.age ; ) ; printf ( " \n  " ) ; printf ( " Name and age of a student : %s , %d " , s1.name , s1.age ) ; return 0 ; }
#include <stdio.h> union data { int a ; float b ; char ch ; } ; int main ( ) { union data d ; d.a = 3 ; d.b = 5.6 ; d.ch = 'a' ; printf ( " value of a is %d " , d.a ) ; printf ( " \n  " ) ; printf ( " value of b is %f " , d.b ) ; printf ( " \n  " ) ; printf ( " value of ch is %c " , d.ch ) ; return 0 ; }
#include <stdio.h> int main ( ) { char a [ 20 ] ; int n = sprintf ( a , " javaToint " ) ; printf ( " value of n is %d " , n ) ; return 0 ; }
#include #define start main void start ( ) { printf ( " Hello " ) ; }
#include <stdio.h> #include <conio.h> int main ( ) { char ch ; printf ( " Enter a character " ) ; ch = getch ( ) ; printf ( " \n value of ch is %c " , ch ) ; printf ( " \n Enter a character again " ) ; ch = getche ( ) ; printf ( " \n value of ch is %c " , ch ) ; return 0 ; }
#include <stdio.h> void main ( ) { if ( printf ( " hello world " ) ) { } }
#include <stdio.h> #include <conio.h> main ( ) { int a = 10 , b = 20 ; clrscr ( ) ; printf ( " Before swap a = %d b = %d " , a , b ) ; a = a + b ; b = a-b ; a = a-b ; printf ( " \n After swap a = %d b = %d " , a , b ) ; getch ( ) ; }
#include #include void main ( ) { int n1 = 0 , n2 = 1 , n3 , i , number ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & number ; ) ; printf ( " \n  %d %d " , n1 , n2 ) ; for ( i = 2 ; i
#include <stdio.h> #include <conio.h> void printFibonacci ( int n ) { static int n1 = 0 , n2 = 1 , n3 ; if ( n> 0 ) { n3 = n1 + n2 ; n1 = n2 ; n2 = n3 ; printf ( " %d " , n3 ) ; printFibonacci ( n-1 ) ; } } void main ( ) { int n ; clrscr ( ) ; printf ( " Enter the number of elements : " ) ; scanf ( " %d " , & n ; ) ; printf ( " Fibonacci Series : " ) ; printf ( " %d %d " , 0 , 1 ) ; printFibonacci ( n-2 ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> void main ( ) { int n , i , m = 0 , flag = 0 ; clrscr ( ) ; printf ( " Enter the number to check prime : " ) ; scanf ( " %d " , & n ; ) ; m = n / 2 ; for ( i = 2 ; i < = m ; i + + ) { if ( n %i = = 0 ) { printf ( " Number is not prime " ) ; flag = 1 ; break ; } } if ( flag = = 0 ) printf ( " Number is prime " ) ; getch ( ) ; }
#include #include main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = ( sum * 10 ) + r ; n = n / 10 ; } if ( temp = = sum ) printf ( " palindrome number " ) ; else printf ( " not palindrome " ) ; getch ( ) ; }
#include #include void main ( ) { int i , fact = 1 , number ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; for ( i = 1 ; i < = number ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d is : %d " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> long factorial ( int n ) { if ( n = = 0 ) return 1 ; else return ( n * factorial ( n-1 ) ) ; } void main ( ) { int number ; long fact ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & number ; ) ; fact = factorial ( number ) ; printf ( " Factorial of %d is %ld\n  " , number , fact ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , r , sum = 0 , temp ; clrscr ( ) ; printf ( " enter the number = " ) ; scanf ( " %d " , & n ; ) ; temp = n ; while ( n> 0 ) { r = n %10 ; sum = sum + ( r * r * r ) ; n = n / 10 ; } if ( temp = = sum ) printf ( " armstrong number " ) ; else printf ( " not armstrong number " ) ; getch ( ) ; }
#include <stdio.h> #include <conio.h> main ( ) { int n , reverse = 0 , rem ; clrscr ( ) ; printf ( " Enter a number : " ) ; scanf ( " %d " , & n ; ) ; while ( n! = 0 ) { rem = n %10 ; reverse = reverse * 10 + rem ; n / = 10 ; } printf ( " Reversed Number : %d " , reverse ) ; getch ( ) ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { char grade ; printf ( " Enter student grade : " ) ; grade = getchar ( ) ; putchar ( grade ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d\n  " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int sum , sub , mult , mod ; float div ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; sub = num1 - num2 ; mult = num1 * num2 ; div = ( float ) num1 / num2 ; mod = num1 % num2 ; printf ( " SUM = %d\n  " , sum ) ; printf ( " DIFFERENCE = %d\n  " , sub ) ; printf ( " PRODUCT = %d\n  " , mult ) ; printf ( " QUOTIENT = %f\n  " , div ) ; printf ( " MODULUS = %d " , mod ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , perimeter ; printf ( " Enter length of the rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of the rectangle : " ) ; scanf ( " %f " , & width ) ; perimeter = 2 * ( length + width ) ; printf ( " Perimeter of rectangle = %f units " , perimeter ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , area ; printf ( " Enter length of rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of rectangle : " ) ; scanf ( " %d " , & width ) ; area = length * width ; printf ( " Area of rectangle = %f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * 3.14 * radius ; area = 3.14 * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * M_PI * radius ; area = M_PI * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float cm , meter , km ; printf ( " Enter length in centimeter : " ) ; scanf ( " %f " , & cm ) ; meter = cm / 100.0 ; km = cm / 100000.0 ; printf ( " Length in Meter = %.2f m \n  " , meter ) ; printf ( " Length in Kilometer = %.2f km " , km ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( celsius * 9 / 5 ) + 32 ; printf ( " %.2f Celsius = %.2f Fahrenheit " , celsius , fahrenheit ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fahrenheit ) ; celsius = ( fahrenheit - 32 ) * 5 / 9 ; printf ( " %.2f Fahrenheit = %.2f Celsius " , fahrenheit , celsius ) ; return 0 ; }
#include <stdio.h> int main ( ) { int days , years , weeks ; printf ( " Enter days : " ) ; scanf ( " %d " , & days ) ; years = ( days / 365 ) ; weeks = ( days % 365 ) / 7 ; days = days - ( ( years * 365 ) + ( weeks * 7 ) ) ; printf ( " YEARS : %d\n  " , years ) ; printf ( " WEEKS : %d\n  " , weeks ) ; printf ( " DAYS : %d " , days ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , expo , power ; printf ( " Enter base : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %lf " , & expo ) ; power = pow ( base , expo ) ; printf ( " %.2lf ^ %.2lf = %.2lf " , base , expo , power ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num , root ; printf ( " Enter any number to find square root : " ) ; scanf ( " %lf " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2lf = %.2lf " , num , root ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two angles of triangle : " ) ; scanf ( " %d %d " , & a , & b ) ; c = 180 - ( a + b ) ; printf ( " Third angle of the triangle = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float base , height , area ; printf ( " Enter base of the triangle : " ) ; scanf ( " %f " , & base ) ; printf ( " Enter height of the triangle : " ) ; scanf ( " %f " , & height ) ; area = ( base * height ) / 2 ; printf ( " Area of the triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float side , area ; printf ( " Enter side of an equilateral triangle : " ) ; scanf ( " %f " , & side ) ; area = ( sqrt ( 3 ) / 4 ) * ( side * side ) ; printf ( " Area of equilateral triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float eng , phy , chem , math , comp ; float total , average , percentage ; printf ( " Enter marks of five subjects : \n  " ) ; scanf ( " %f %f %f %f %f " , & eng , & phy , & chem , & math , & comp ) ; total = eng + phy + chem + math + comp ; average = total / 5.0 ; percentage = ( total / 500.0 ) * 100 ; printf ( " Total marks = %.2f\n  " , total ) ; printf ( " Average marks = %.2f\n  " , average ) ; printf ( " Percentage = %.2f " , percentage ) ; return 0 ; }
#include <stdio.h> int main ( ) { float principle , time , rate , SI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; SI = ( principle * time * rate ) / 100 ; printf ( " Simple Interest = %f " , SI ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float principle , rate , time , CI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; CI = principle * ( pow ( ( 1 + rate / 100 ) , time ) ) ; printf ( " Compound Interest = %f " , CI ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float principle , rate , time , CI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; CI = principle * ( pow ( ( 1 + rate / 100 ) , time ) ) ; printf ( " Compound Interest = %f " , CI ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } if ( num2 > num1 ) { printf ( " %d is maximum " , num2 ) ; } if ( num1 = = num2 ) { printf ( " Both are equal " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } else { printf ( " %d is maximum " , num2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) max = num1 ; else max = num2 ; printf ( " %d is maximum. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Learn at Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 10 ; b = + + a ; c = a + + printf ( " a = %d , b = %d , c = %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; int max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum is %d. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible to vote in India. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " First number is maximum. " ) ; } else { printf ( " Second number is maximum. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num < 0 ) { printf ( " NUMBER IS NEGATIVE. " ) ; } else if ( num = = 0 ) { printf ( " NUMBER IS ZERO. " ) ; } else { printf ( " NUMBER IS POSITIVE. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { printf ( " Num1 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } else { if ( num2 > num3 ) { printf ( " Num2 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; switch ( week ) { case 1 : printf ( " Its Monday.\n  " ) ; printf ( " Its a busy day. " ) ; break ; case 2 : printf ( " Its Tuesday. " ) ; break ; case 3 : printf ( " Its Wednesday. " ) ; break ; case 4 : printf ( " Its Thursday.\n  " ) ; printf ( " Feeling bit relaxed. " ) ; break ; case 5 : printf ( " Its Friday. " ) ; break ; case 6 : printf ( " Its Saturday.\n  " ) ; printf ( " It is weekend. " ) ; break ; case 7 : printf ( " Its Sunday.\n  " ) ; printf ( " Hurray! Its holiday. " ) ; break ; default : printf ( " Um! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int count ; for ( count = 1 ; count < = 10 ; count + + ) { printf ( " %d " , count ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; while ( n < = 10 ) { printf ( " %d " , n ) ; n + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; do { printf ( " %d " , n ) ; n + + ; } while ( n < = 10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 5 ; j + + ) { printf ( " %d\t " , ( i * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , isPrime , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; isPrime = 1 ; for ( i = 2 ; i <num ; i + + ) { if ( num % i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " Number is prime number. " ) ; } else { printf ( " Number is composite number. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Even numbers between 1 to 100 : \n  " ) ; for ( num = 1 ; num < = 100 ; num + + ) { if ( num % 2 = = 1 ) continue ; printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i = 1 ; start : goto print ; print : printf ( " %d " , i ) ; goto next ; increment : i + + ; goto print ; next : if ( i < 10 ) goto increment ; else goto exit ; printf ( " I cannot execute. " ) ; exit : return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 10 ; j + + ) { k = 1 ; while ( k < = 10 ) { if ( j = = 5 & & k = = 5 ) { goto out_of_loop ; } printf ( " %d " , k ) ; k + + ; } } } out_of_loop : return 0 ; }
#include <stdio.h> int add ( int num1 , int num2 ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = add ( n1 , n2 ) ; printf ( " Sum = %d " , sum ) ; return 0 ; } int add ( int num1 , int num2 ) { int s = num1 + num2 ; return s ; }
#include <stdio.h> void swap ( int num1 , int num2 ) { int temp ; printf ( " In Function values before swapping : %d %d\n  " , num1 , num2 ) ; temp = num1 ; num1 = num2 ; num2 = temp ; printf ( " In Function values after swapping : %d %d\n \n  " , num1 , num2 ) ; } int main ( ) { int n1 , n2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " In Main values before swapping : %d %d\n \n  " , n1 , n2 ) ; swap ( n1 , n2 ) ; printf ( " In Main values after swapping : %d %d " , n1 , n2 ) ; return 0 ; }
#include <stdio.h> void swap ( int * num1 , int * num2 ) { int temp ; printf ( " In Function values before swapping : %d %d\n  " , * num1 , * num2 ) ; temp = * num1 ; * num1 = * num2 ; * num2 = temp ; printf ( " In Function values after swapping : %d %d\n \n  " , * num1 , * num2 ) ; } int main ( ) { int n1 , n2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " In Main values before swapping : %d %d\n \n  " , n1 , n2 ) ; swap ( & n1 , & n2 ) ; printf ( " In Main values after swapping : %d %d " , n1 , n2 ) ; return 0 ; }
#include <stdio.h> int max ( int num1 , int num2 ) ; int main ( ) { int num1 , num2 , maximum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; maximum = max ( num1 , num2 ) ; printf ( " Maximum = %d " , maximum ) ; return 0 ; } int max ( int num1 , int num2 ) { int maximum ; if ( num1 > num2 ) maximum = num1 ; else maximum = num2 ; return maximum ; }
#include <stdio.h> void generateFibo ( ) ; int main ( ) { generateFibo ( ) ; return 0 ; } void generateFibo ( ) { int a , b , c , i , terms ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & terms ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; for ( i = 1 ; i < = terms ; i + + ) { printf ( " %d , " , c ) ; a = b ; b = c ; c = a + b ; } }
#include <stdio.h> void printNaturalNumbers ( int start , int end ) ; int main ( ) { int s , e ; printf ( " Enter lower range to print natural numbers : " ) ; scanf ( " %d " , & s ) ; printf ( " Enter upper limit to print natural numbers : " ) ; scanf ( " %d " , & e ) ; printNaturalNumbers ( s , e ) ; return 0 ; } void printNaturalNumbers ( int start , int end ) { printf ( " Natural numbers from %d to %d are : \n  " , start , end ) ; while ( start < = end ) { printf ( " %d , " , start ) ; start + + ; } }
#include <stdio.h> #include <stdlib.h> int randPrime ( ) ; int main ( ) { int i ; printf ( " Random 5 prime numbers are : \n  " ) ; for ( i = 1 ; i < = 5 ; i + + ) { printf ( " %d\n  " , randPrime ( ) ) ; } return 0 ; } int randPrime ( ) { int i , n , isPrime ; isPrime = 0 ; while ( !isPrime ) { n = rand ( ) ; isPrime = 1 ; for ( i = 2 ; i < = n / 2 ; i + + ) { if ( n %i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { return n ; } } }
#include <stdio.h> int evenOdd ( int num ) ; int main ( ) { int num , isEven ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; isEven = evenOdd ( num ) ; if ( isEven = = 0 ) printf ( " The given number is EVEN. " ) ; else printf ( " The given number is ODD. " ) ; return 0 ; } int evenOdd ( int num ) { if ( num % 2 = = 0 ) return 0 ; else return 1 ; }
#include <stdio.h> void print ( int n ) ; int main ( ) { print ( 5 ) ; return 0 ; } void print ( int n ) { printf ( " %d " , n ) ; if ( n < = 1 ) { return ; } print ( n - 1 ) ; }
#include <stdio.h> #include <stdarg.h> #include <limits.h> int maximum ( int num , ... ) ; int main ( ) { printf ( " Max ( 10 , 2 ) = %d\n  " , maximum ( 2 , 10 , 2 ) ) ; printf ( " Max ( 4 , 2 , 3 , 0 ) = %d\n  " , maximum ( 4 , 4 , 2 , 3 , 0 ) ) ; printf ( " Max ( 1 , 2 , 3 , 4 , 10 , 20 , 30 ) = %d\n  " , maximum ( 7 , 1 , 2 , 3 , 4 , 10 , 20 , 30 ) ) ; printf ( " Max ( 100 , 10 , 0 , 1 , 2 , 3 , 4 , 10 , 20 , 12 ) = %d\n  " , maximum ( 10 , 100 , 10 , 0 , 1 , 2 , 3 , 4 , 10 , 20 , 12 ) ) ; return 0 ; } int maximum ( int num , ... ) { int max = INT_MIN ; int count ; int value ; va_list list ; va_start ( list , num ) ; for ( count = 1 ; count < = num ; count + + ) { value = va_arg ( list , int ) ; if ( value > max ) max = value ; } va_end ( list ) ; return max ; }
#include <stdio.h> int main ( ) { int outervariable = 10 ; { printf ( " I can access outervariable in inner block = %d\n  " , outervariable ) ; } printf ( " I can also access outervariable in same block = %d " , outervariable ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " 'num' is accessible within same block = %d\n  " , num ) ; { int num = 20 ; printf ( " Inner block 'num' shadows outer block 'num' = %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; printf ( " 'num1 = %d' and 'num2 = %d' declared in outer block is accessible within same block.\n  " , num1 , num2 ) ; { int sum = num1 + num2 ; printf ( " sum = %d\n  " , sum ) ; } return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 ; static int n2 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> int num ; void display ( ) { int i ; for ( i = 1 ; i < = num ; i + + ) { printf ( " num = %d\n  " , i ) ; } }
#include <stdio.h> #define SIZE 10 int main ( ) { int marks [ SIZE ] ; int index , sum ; float avg ; printf ( " Enter marks of %d students : " , SIZE ) ; for ( index = 0 ; index <SIZE ; index + + ) { scanf ( " %d " , & marks [ index ] ) ; } sum = 0 ; for ( index = 0 ; index <SIZE ; index + + ) { sum = sum + marks [ index ] ; } avg = ( float ) sum / SIZE ; printf ( " Average marks = %f " , avg ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int array [ SIZE ] ; int index ; for ( index = 0 ; index < = SIZE ; index + + ) { scanf ( " %d " , & array [ index ] ) ; } return 0 ; }
#include <stdio.h> #define ROW_SIZE 4 #define COL_SIZE 3 int main ( ) { int matrix [ ROW_SIZE ] [ COL_SIZE ] ; int row , col ; printf ( " Enter elements in matrix of size %dx %d \n  " , ROW_SIZE , COL_SIZE ) ; for ( row = 0 ; row <ROW_SIZE ; row + + ) { for ( col = 0 ; col <COL_SIZE ; col + + ) { scanf ( " %d " , & matrix [ row ] [ col ] ) ; } } printf ( " \n Elements in matrix are : \n  " ) ; for ( row = 0 ; row <ROW_SIZE ; row + + ) { for ( col = 0 ; col <COL_SIZE ; col + + ) { printf ( " %d " , matrix [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE1 2 #define SIZE2 2 #define SIZE3 3 int main ( ) { int arr [ SIZE1 ] [ SIZE2 ] [ SIZE3 ] ; int i , j , k ; printf ( " Enter elements in three-dimensional array of size %dx %dx %d \n  " , SIZE1 , SIZE2 , SIZE3 ) ; for ( i = 0 ; i < SIZE1 ; i + + ) { for ( j = 0 ; j < SIZE2 ; j + + ) { for ( k = 0 ; k < SIZE3 ; k + + ) { scanf ( " %d " , & arr [ i ] [ j ] [ k ] ) ; } } } printf ( " \n Elements in three-dimensional array are : \n  " ) ; for ( i = 0 ; i < SIZE1 ; i + + ) { for ( j = 0 ; j < SIZE2 ; j + + ) { for ( k = 0 ; k < SIZE3 ; k + + ) { printf ( " %d\n  " , arr [ i ] [ j ] [ k ] ) ; } } } return 0 ; }
#include <stdio.h> int * getArray ( ) { int num [ ] = { 1 , 2 , 3 , 4 , 5 } ; int i ; printf ( " Array inside function : " ) ; for ( i = 0 ; i < 5 ; + + i ) { printf ( " %d\n  " , num [ i ] ) ; } return num ; } int main ( ) { int i ; int * num ; num = getArray ( ) ; printf ( " Array outside function : \n  " ) ; for ( i = 0 ; i < 5 ; + + i ) { printf ( " %d\n  " , num [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 10 void getArray ( int arr [ ] , int size ) ; int main ( ) { int arr [ MAX_SIZE ] ; int i ; getArray ( arr , MAX_SIZE ) ; printf ( " \n \n Array outside function : \n  " ) ; for ( i = 0 ; i < MAX_SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; } void getArray ( int arr [ ] , int size ) { int i ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n \n Array inside function : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void printMatrix ( int mat [ ] [ COLS ] ) ; int main ( ) { int mat [ ROWS ] [ COLS ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; printMatrix ( mat ) ; return 0 ; } void printMatrix ( int mat [ ] [ COLS ] ) { int i , j ; printf ( " Elements in matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { printf ( " %d " , mat [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void inputMatrix ( int ( * mat ) [ COLS ] ) ; void printMatrix ( int mat [ ] [ COLS ] ) ; int main ( ) { int mat [ ROWS ] [ COLS ] ; inputMatrix ( mat ) ; printMatrix ( mat ) ; return 0 ; } void inputMatrix ( int ( * mat ) [ COLS ] ) { int i , j ; printf ( " Enter elements in 2D matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { scanf ( " %d " , ( * ( mat + i ) + j ) ) ; } } } void printMatrix ( int ( * mat ) [ COLS ] ) { int i , j ; printf ( " Elements in matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { printf ( " %d " , * ( * ( mat + i ) + j ) ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void matrixAddition ( int mat1 [ ] [ COLS ] , int mat2 [ ] [ COLS ] , int res [ ] [ COLS ] ) ; void printMatrix ( int mat [ ] [ COLS ] ) ; int main ( ) { int mat1 [ ROWS ] [ COLS ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int mat2 [ ROWS ] [ COLS ] = { { 1 , 1 , 1 } , { 2 , 2 , 2 } , { 3 , 3 , 3 } } ; int res [ ROWS ] [ COLS ] ; matrixAddition ( mat1 , mat2 , res ) ; printMatrix ( res ) ; return 0 ; } void matrixAddition ( int mat1 [ ] [ COLS ] , int mat2 [ ] [ COLS ] , int res [ ] [ COLS ] ) { int i , j ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { res [ i ] [ j ] = mat1 [ i ] [ j ] + mat2 [ i ] [ j ] ; } } } void printMatrix ( int mat [ ] [ COLS ] ) { int i , j ; printf ( " Elements in matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { printf ( " %d " , mat [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Address of num in hexadecimal = %x " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , * ( & num ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 1 ; int * ptr = & num ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Address of num = %x \n \n  " , & num ) ; printf ( " Value of ptr = %x \n  " , ptr ) ; printf ( " Address of ptr = %x \n  " , & ptr ) ; printf ( " Value pointed by ptr = %d \n \n  " , * ptr ) ; num = 10 ; printf ( " After changing value of num directly. \n  " ) ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n \n  " , * ptr ) ; * ptr = 100 ; printf ( " After changing value pointed by ptr. \n  " ) ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ptr ) ; ptr + + ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ( ptr + count ) ) ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr = & arr [ 0 ] ; printf ( " Accessing array elements using pointer \n  " ) ; while ( ptr < & arr [ SIZE ] ) { printf ( " %d \n  " , * ptr ) ; ptr + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; int * ptr = & num ; int * * dPtr = & ptr ; num = 10 ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; printf ( " Value pointed by dPtr = %d \n \n  " , * * dPtr ) ; * ptr = 100 ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; printf ( " Value pointed by dPtr = %d \n \n  " , * * dPtr ) ; * * dPtr = 1000 ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; printf ( " Value pointed by dPtr = %d \n \n  " , * * dPtr ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int arr [ SIZE ] ; int * ptr = arr ; int i ; printf ( " Enter %d array elements : " , SIZE ) ; while ( ptr < & arr [ SIZE ] ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Elements in array are : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int * const const_ptr = & num1 ; * const_ptr = 10 ; const_ptr = & num2 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * const_ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; const int * ptr_const ; ptr_const = & num ; num = 20 ; * ptr_const = 100 ; printf ( " Num = %d\n  " , num ) ; printf ( " Num = %d\n  " , * ptr_const ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; const int * const ptr = & num1 ; ptr = & num2 ; * ptr = 100 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( void * vPtr , int size , int type ) ; int main ( ) { int num [ SIZE ] = { 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 } ; float fractional [ SIZE ] = { 1.1f , 1.2f , 1.3f , 1.4f , 1.5f , 1.6f , 1.7f , 1.8f , 1.9f , 2.0f } ; char characters [ SIZE ] = { 'C' , 'o' , 'd' , 'e' , 'f' , 'o' , 'r' , 'w' , 'i' , 'n' } ; printf ( " \n Elements of integer array : " ) ; printArray ( & num , SIZE , 1 ) ; printf ( " \n Elements of float array : " ) ; printArray ( & fractional , SIZE , 2 ) ; printf ( " \n Elements of character array : " ) ; printArray ( & characters , SIZE , 3 ) ; return 0 ; } void printArray ( void * vPtr , int size , int type ) { int i ; for ( i = 0 ; i <size ; i + + ) { switch ( type ) { case 1 : printf ( " %d , " , * ( ( int * ) vPtr + i ) ) ; break ; case 2 : printf ( " %f , " , * ( ( float * ) vPtr + i ) ) ; break ; case 3 : printf ( " %c , " , * ( ( char * ) vPtr + i ) ) ; break ; } } }
#include <stdio.h> int add ( int , int ) ; int sub ( int , int ) ; int main ( ) { int sum , diff ; int ( * arith ) ( int , int ) ; arith = add ; sum = arith ( 10 , 20 ) ; arith = sub ; diff = arith ( 100 , 30 ) ; printf ( " 10 + 20 = > %d\n  " , sum ) ; printf ( " 100-30 = > %d\n  " , diff ) ; return 0 ; } int add ( int num1 , int num2 ) { return ( num1 + num2 ) ; } int sub ( int num1 , int num2 ) { return ( num1 - num2 ) ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 10 void printArray ( int * , int ) ; int sort_ascending ( const void * , const void * ) ; int sort_descending ( const void * , const void * ) ; int main ( ) { int array [ SIZE ] = { 20 , 80 , 100 , 50 , 40 , 30 , 60 , 90 , 70 , 10 } ; int ( * compare ) ( const void * , const void * ) ; printf ( " Unsorted array " ) ; printArray ( array , SIZE ) ; compare = sort_ascending ; qsort ( array , SIZE , sizeof ( int ) , compare ) ; printf ( " \n \n Ascending sorted array " ) ; printArray ( array , SIZE ) ; compare = sort_descending ; qsort ( array , SIZE , sizeof ( int ) , compare ) ; printf ( " \n \n Descending sorted array " ) ; printArray ( array , SIZE ) ; return 0 ; } int sort_ascending ( const void * num1 , const void * num2 ) { return ( * ( int * ) num1 ) - ( * ( int * ) num2 ) ; } int sort_descending ( const void * num1 , const void * num2 ) { return ( * ( int * ) num2 ) - ( * ( int * ) num1 ) ; } void printArray ( int * array , int size ) { int i ; printf ( " \n Array elements are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d , " , * ( array + i ) ) ; } }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) malloc ( max * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < max ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) calloc ( max , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < max ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max , newSize ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) calloc ( max , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Enter new size of the array : " ) ; scanf ( " %d " , & newSize ) ; ptr = ( int * ) realloc ( ptr , ( newSize * sizeof ( int ) ) ) ; printf ( " \n Enter %d elements : \n  " , ( newSize - max ) ) ; for ( i = max ; i < newSize ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < newSize ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> struct student { char name [ 40 ] ; int age ; unsigned long long mobile ; } ; int main ( ) { struct student student1 ; struct student * student2 ; student2 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; printf ( " Enter student name : " ) ; fgets ( student1.name , 40 , stdin ) ; printf ( " Enter student age : " ) ; scanf ( " %d " , & student1.age ) ; printf ( " Enter student mobile : " ) ; scanf ( " %llu " , & student1.mobile ) ; getchar ( ) ; printf ( " \n Student using simple structure variable.\n  " ) ; printf ( " Student name : %s\n  " , student1.name ) ; printf ( " Student age : %d\n  " , student1.age ) ; printf ( " Student mobile : %llu\n \n  " , student1.mobile ) ; printf ( " Enter student name : " ) ; fgets ( student2-> name , 40 , stdin ) ; printf ( " Enter student age : " ) ; scanf ( " %d " , & student2-> age ) ; printf ( " Enter student mobile : " ) ; scanf ( " %llu " , & student2-> mobile ) ; printf ( " Student using pointer to structure variable.\n  " ) ; printf ( " Student name : %s\n  " , student2-> name ) ; printf ( " Student age : %d\n  " , student2-> age ) ; printf ( " Student mobile : %llu\n  " , student2-> mobile ) ; free ( student2 ) ; return 0 ; }
#include <stdio.h> struct color_rgb { unsigned char r ; unsigned char g ; unsigned char b ; } ; struct color_rgba { unsigned char r ; unsigned char g ; unsigned char b ; float a ; } ; union color { struct color_rgb rgb ; struct color_rgba rgba ; unsigned int value ; char name [ 20 ] ; } ; int main ( ) { union color console_color ; printf ( " Size of color variable = %d\n \n  " , sizeof ( console_color ) ) ; printf ( " Enter space separated rgb color value : " ) ; scanf ( " %d %d %d " , & console_color.rgb.r , & console_color.rgb.g , & console_color.rgb.b ) ; printf ( " Color in rgb format : %d %d %d\n \n  " , console_color.rgb.r , console_color.rgb.g , console_color.rgb.b ) ; printf ( " Enter space separated rgba color value : " ) ; scanf ( " %d %d %d %f " , & console_color.rgba.r , & console_color.rgba.g , & console_color.rgba.b , & console_color.rgba.a ) ; printf ( " Color in rgba format : %d %d %d %.2f\n \n  " , console_color.rgba.r , console_color.rgba.g , console_color.rgba.b , console_color.rgba.a ) ; printf ( " Enter integer color value : " ) ; scanf ( " %d " , & console_color.value ) ; printf ( " Color in integer format : %d\n \n  " , console_color.value ) ; printf ( " Enter string color value : " ) ; getchar ( ) ; gets ( console_color.name ) ; printf ( " Color in string format : %s\n \n  " , console_color.name ) ; return 0 ; }
#include <stdio.h> typedef struct point { int x ; int y ; } Point ; typedef int ( * Fptr ) ( const void * , const void * ) ; int main ( ) { typedef int Integer ; typedef char CharArray [ 100 ] ; Fptr functionPointer ; Point point = { 10 , 20 } ; Integer num = 100 ; CharArray name = " Codeforwin " ; printf ( " Point x = %d , y = %d\n  " , point.x , point.y ) ; printf ( " num = %d\n  " , num ) ; printf ( " name = %s\n  " , name ) ; return 0 ; }
#include <stdio.h> #include " main.h " #include " win / display.c "
#include <stdio.h> #define COUNTRY " INDIA " #define TRUE 1 #define FALSE 0 #define SUM ( 10 + 20 ) int main ( ) { printf ( " COUNTRY : %s\n  " , COUNTRY ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; printf ( " SUM ( 10 + 20 ) : %d\n  " , SUM ) ; return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( ) { printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; #undef TRUE #undef FALSE #define TRUE 0 #define FALSE 1 printf ( " \n Macro values are redefinition\n  " ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { return ( a + b ) ; } #define SUM ( a , b ) ( a + b ) int main ( ) { printf ( " SUM using function : %d\n  " , sum ( 100 , 200 ) ) ; printf ( " SUM using macro : %d\n  " , SUM ( 100 , 200 ) ) ; return 0 ; }
#include <stdio.h> #define COUNTRY " INDIA " int main ( ) { #ifdef COUNTRY printf ( " Country is defined\n  " ) ; #endif #ifndef STATE printf ( " State is not defined. Defining state. \n  " ) ; #define STATE " PATNA " #endif printf ( " State is : %s\n  " , STATE ) ; return 0 ; }
#include <stdio.h> #define IND 1 #define USA 2 #define UK 3 #define COUNTRY IND int main ( ) { #if COUNTRY = = IND printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #elif COUNTRY = = USA printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #else printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #endif return 0 ; }
#include <stdio.h> #define PRINT ( msg ) #msg int main ( ) { printf ( PRINT ( C Programming in Codeforwin ) ) ; return 0 ; }
#include <stdio.h> #define CONCAT ( a , b ) a##b int main ( ) { printf ( " CONCAT ( 10 , 20 ) = %d\n  " , CONCAT ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) printf ( " LSB of %d is set ( 1 ) . " , num ) ; else printf ( " LSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> #define BITS sizeof ( int ) * 8 int main ( ) { int num , msb ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( BITS - 1 ) ; if ( num & msb ) printf ( " MSB of %d is set ( 1 ) . " , num ) ; else printf ( " MSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , bitStatus ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to check ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; bitStatus = ( num > > n ) & 1 ; printf ( " The %d bit is set to %d " , n , bitStatus ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , newNum ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to set ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; newNum = ( 1 < < n ) | num ; printf ( " Bit set successfully.\n \n  " ) ; printf ( " Number before setting %d bit : %d ( in decimal ) \n  " , n , num ) ; printf ( " Number after setting %d bit : %d ( in decimal ) \n  " , n , newNum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , newNum ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to clear ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; newNum = num & ( ~ ( 1 < < n ) ) ; printf ( " Bit cleared successfully.\n \n  " ) ; printf ( " Number before clearing %d bit : %d ( in decimal ) \n  " , n , num ) ; printf ( " Number after clearing %d bit : %d ( in decimal ) \n  " , n , newNum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , newNum ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to toggle ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; newNum = num ^ ( 1 < < n ) ; printf ( " Bit toggled successfully.\n \n  " ) ; printf ( " Number before toggling %d bit : %d ( in decimal ) \n  " , n , num ) ; printf ( " Number after toggling %d bit : %d ( in decimal ) \n  " , n , newNum ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order = -1 , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) order = i ; } if ( order ! = -1 ) printf ( " Highest order set bit in %d is %d " , num , order ) ; else printf ( " 0 has no set bits. " ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; order = INT_SIZE - 1 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) { order = i ; break ; } } printf ( " Lowest order set bit in %d is %d " , num , order ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num > > i ) & 1 ) { break ; } count + + ; } printf ( " Total number of trailing zeros in %d is %d. " , num , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( ! ( num & 1 ) ) { count + + ; num > > = 1 ; } printf ( " Total number of trailing zeros = %d. " , count ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , msb , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( INT_SIZE - 1 ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num < < i ) & msb ) { break ; } count + + ; } printf ( " Total number of leading zeros in %d is %d " , num , count ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { int num , count ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; while ( ! ( num & ( ~INT_MAX ) ) ) { count + + ; num < < = 1 ; } printf ( " Total number of leading zeros = %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , flippedNumber ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; flippedNumber = ~num ; printf ( " Original number = %d ( in decimal ) \n  " , num ) ; printf ( " Number after bits are flipped = %d ( in decimal ) " , flippedNumber ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , zeros , ones , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; zeros = 0 ; ones = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( num & 1 ) ones + + ; else zeros + + ; num > > = 1 ; } printf ( " Total zero bit is %d\n  " , zeros ) ; printf ( " Total one bit is %d " , ones ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) #define INT_BITS INT_SIZE * 8 - 1 int rotateLeft ( int num , unsigned int rotation ) ; int rotateRight ( int num , unsigned int rotation ) ; int main ( ) { int num ; unsigned int rotation ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter number of rotation : " ) ; scanf ( " %u " , & rotation ) ; printf ( " %d left rotated %u times = %d\n \n  " , num , rotation , rotateLeft ( num , rotation ) ) ; printf ( " %d right rotated %u times = %d\n  " , num , rotation , rotateRight ( num , rotation ) ) ; return 0 ; } int rotateLeft ( int num , unsigned int rotation ) { int DROPPED_MSB ; rotation % = INT_BITS ; while ( rotation-- ) { DROPPED_MSB = ( num > > INT_BITS ) & 1 ; num = ( num < < 1 ) | DROPPED_MSB ; } return num ; } int rotateRight ( int num , unsigned int rotation ) { int DROPPED_LSB ; rotation % = INT_BITS ; while ( rotation-- ) { DROPPED_LSB = num & 1 ; num = ( num > > 1 ) & ( ~ ( 1 < < INT_BITS ) ) ; num = num | ( DROPPED_LSB < < INT_BITS ) ; } return num ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , index , i ; int bin [ INT_SIZE ] ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; index = INT_SIZE - 1 ; while ( index > = 0 ) { bin [ index ] = num & 1 ; index-- ; num > > = 1 ; } printf ( " Converted binary : " ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { printf ( " %d " , bin [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Original value of num1 = %d\n  " , num1 ) ; printf ( " Original value of num2 = %d\n  " , num2 ) ; num1 ^ = num2 ; num2 ^ = num1 ; num1 ^ = num2 ; printf ( " Num1 after swapping = %d\n  " , num1 ) ; printf ( " Num2 after swapping = %d\n  " , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) { printf ( " %d is odd. " , num ) ; } else { printf ( " %d is even. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; ( num & 1 ) ? printf ( " %d is odd. " , num ) : printf ( " %d is even. " , num ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 1000 void printArray ( int arr [ ] , int len ) ; int main ( ) { int arr [ MAX_SIZE ] ; int even [ MAX_SIZE ] , odd [ MAX_SIZE ] ; int evenCount , oddCount ; int i , size ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } evenCount = 0 ; oddCount = 0 ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] & 1 ) { odd [ oddCount ] = arr [ i ] ; oddCount + + ; } else { even [ evenCount ] = arr [ i ] ; evenCount + + ; } } printf ( " \n Elements of even array : \n  " ) ; printArray ( even , evenCount ) ; printf ( " \n Elements of odd array : \n  " ) ; printArray ( odd , oddCount ) ; return 0 ; } void printArray ( int arr [ ] , int len ) { int i ; printf ( " Elements in the array : " ) ; for ( i = 0 ; i <len ; i + + ) { printf ( " %d " , arr [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> int main ( ) { int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; switch ( week ) { case 1 : printf ( " Monday " ) ; break ; case 2 : printf ( " Tuesday " ) ; break ; case 3 : printf ( " Wednesday " ) ; break ; case 4 : printf ( " Thursday " ) ; break ; case 5 : printf ( " Friday " ) ; break ; case 6 : printf ( " Saturday " ) ; break ; case 7 : printf ( " Sunday " ) ; break ; default : printf ( " Invalid input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; switch ( month ) { case 1 : printf ( " 31 days " ) ; break ; case 2 : printf ( " 28 / 29 days " ) ; break ; case 3 : printf ( " 31 days " ) ; break ; case 4 : printf ( " 30 days " ) ; break ; case 5 : printf ( " 31 days " ) ; break ; case 6 : printf ( " 30 days " ) ; break ; case 7 : printf ( " 31 days " ) ; break ; case 8 : printf ( " 31 days " ) ; break ; case 9 : printf ( " 30 days " ) ; break ; case 10 : printf ( " 31 days " ) ; break ; case 11 : printf ( " 30 days " ) ; break ; case 12 : printf ( " 31 days " ) ; break ; default : printf ( " Invalid input! Please enter month number between 1-12 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; switch ( month ) { case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : printf ( " 31 days " ) ; break ; case 4 : case 6 : case 9 : case 11 : printf ( " 30 days " ) ; break ; case 2 : printf ( " 28 / 29 days " ) ; break ; default : printf ( " Invalid input! Please enter month number between 1-12 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any alphabet : " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : printf ( " Vowel " ) ; break ; case 'e' : printf ( " Vowel " ) ; break ; case 'i' : printf ( " Vowel " ) ; break ; case 'o' : printf ( " Vowel " ) ; break ; case 'u' : printf ( " Vowel " ) ; break ; case 'A' : printf ( " Vowel " ) ; break ; case 'E' : printf ( " Vowel " ) ; break ; case 'I' : printf ( " Vowel " ) ; break ; case 'O' : printf ( " Vowel " ) ; break ; case 'U' : printf ( " Vowel " ) ; break ; default : printf ( " Consonant " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : printf ( " Vowel " ) ; break ; default : printf ( " Consonant " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers to find maximum : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; switch ( num1 > num2 ) { case 0 : printf ( " %d is maximum " , num2 ) ; break ; case 1 : printf ( " %d is maximum " , num1 ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; switch ( num % 2 ) { case 0 : printf ( " Number is Even " ) ; break ; case 1 : printf ( " Number is Odd " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; switch ( num > 0 ) { case 1 : printf ( " %d is positive. " , num ) ; break ; case 0 : switch ( num < 0 ) { case 1 : printf ( " %d is negative. " , num ) ; break ; case 0 : printf ( " %d is zero. " , num ) ; break ; } break ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , b , c ; float root1 , root2 , imaginary ; float discriminant ; printf ( " Enter values of a , b , c of quadratic equation ( aX^2 + bX + c ) : " ) ; scanf ( " %f %f %f " , & a , & b , & c ) ; discriminant = ( b * b ) - ( 4 * a * c ) ; switch ( discriminant > 0 ) { case 1 : root1 = ( -b + sqrt ( discriminant ) ) / ( 2 * a ) ; root2 = ( -b - sqrt ( discriminant ) ) / ( 2 * a ) ; printf ( " Two distinct and real roots exists : %.2f and %.2f " , root1 , root2 ) ; break ; case 0 : switch ( discriminant < 0 ) { case 1 : root1 = root2 = -b / ( 2 * a ) ; imaginary = sqrt ( -discriminant ) / ( 2 * a ) ; printf ( " Two distinct complex roots exists : %.2f + i %.2f and %.2f - i %.2f " , root1 , imaginary , root2 , imaginary ) ; break ; case 0 : root1 = root2 = -b / ( 2 * a ) ; printf ( " Two equal and real roots exists : %.2f and %.2f " , root1 , root2 ) ; break ; } } return 0 ; }
#include <stdio.h> int main ( ) { char op ; float num1 , num2 , result = 0.0f ; printf ( " WELCOME TO SIMPLE CALCULATOR\n  " ) ; printf ( " ----------------------------\n  " ) ; printf ( " Enter [ number 1 ] [ + - * / ] [ number 2 ] \n  " ) ; scanf ( " %f %c %f " , & num1 , & op , & num2 ) ; switch ( op ) { case ' + ' : result = num1 + num2 ; break ; case '-' : result = num1 - num2 ; break ; case ' * ' : result = num1 * num2 ; break ; case ' / ' : result = num1 / num2 ; break ; default : printf ( " Invalid operator " ) ; } printf ( " %.2f %c %.2f = %.2f " , num1 , op , num2 , result ) ; return 0 ; }
#include <stdio.h> float add ( float num1 , float num2 ) ; float sub ( float num1 , float num2 ) ; float mult ( float num1 , float num2 ) ; float div ( float num1 , float num2 ) ; int main ( ) { char op ; float num1 , num2 , result = 0.0f ; printf ( " WELCOME TO SIMPLE CALCULATOR\n  " ) ; printf ( " ----------------------------\n  " ) ; printf ( " Enter [ number 1 ] [ + - * / ] [ number 2 ] \n  " ) ; scanf ( " %f %c %f " , & num1 , & op , & num2 ) ; switch ( op ) { case ' + ' : result = add ( num1 , num2 ) ; break ; case '-' : result = sub ( num1 , num2 ) ; break ; case ' * ' : result = mult ( num1 , num2 ) ; break ; case ' / ' : result = div ( num1 , num2 ) ; break ; default : printf ( " Invalid operator " ) ; } printf ( " %.2f %c %.2f = %.2f " , num1 , op , num2 , result ) ; return 0 ; } float add ( float num1 , float num2 ) { return num1 + num2 ; } float sub ( float num1 , float num2 ) { return num1 - num2 ; } float mult ( float num1 , float num2 ) { return num1 * num2 ; } float div ( float num1 , float num2 ) { return num1 / num2 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum between %d and %d is %d " , num1 , num2 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = N ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = columns ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = N || i = = j || j = = ( N - i + 1 ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = rows ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = columns ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = columns ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , M , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & M ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = M ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1|| j = = N ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , M , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & M ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = M ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = M || j = = 1|| j = = N ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j = = 1 || j = = i || i = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { if ( i = = rows || j = = 1 || j = = i ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { if ( i = = 1 || j = = i || j = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = rows ; j + + ) { if ( j = = i || j = = rows || i = = 1 ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( 2 * i-1 ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( 2 * i-1 ) ; j + + ) { if ( i = = rows || j = = 1 || j = = ( 2 * i-1 ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( rows * 2 - ( 2 * i-1 ) ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( rows * 2 - ( 2 * i-1 ) ) ; j + + ) { if ( i = = 1 || j = = 1 || j = = ( rows * 2 - ( 2 * i - 1 ) ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , columns ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & N ) ; columns = 1 ; for ( i = 1 ; i <N * 2 ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } if ( i < N ) { columns + + ; } else { columns-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int star , spaces ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & N ) ; spaces = N-1 ; star = 1 ; for ( i = 1 ; i <N * 2 ; i + + ) { for ( j = 1 ; j < = spaces ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = star ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; if ( i < N ) { star + + ; spaces-- ; } else { star-- ; spaces + + ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; int stars , spaces ; printf ( " Enter rows to print : " ) ; scanf ( " %d " , & rows ) ; stars = 1 ; spaces = rows - 1 ; for ( i = 1 ; i <rows * 2 ; i + + ) { for ( j = 1 ; j < = spaces ; j + + ) printf ( " " ) ; for ( j = 1 ; j <stars * 2 ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; if ( i <rows ) { spaces-- ; stars + + ; } else { spaces + + ; stars-- ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } for ( j = 1 ; j < = ( 2 * i-2 ) ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } for ( j = ( 2 * i-2 ) ; j < ( 2 * n-2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i <n ; i + + ) { for ( j = 1 ; j < = ( 2 * i-2 ) ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = ( 2 * n - 2 * i ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i <n ; i + + ) { for ( j = 1 ; j < = ( n-i ) ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = ( N * 2 - 1 ) ; i + + ) { if ( i = = N ) { for ( j = 1 ; j < = ( N * 2 - 1 ) ; j + + ) { printf ( " + " ) ; } } else { for ( j = 1 ; j < = N-1 ; j + + ) { printf ( " " ) ; } printf ( " + " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int count ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; count = N * 2 - 1 ; for ( i = 1 ; i < = count ; i + + ) { for ( j = 1 ; j < = count ; j + + ) { if ( j = = i || ( j = = count - i + 1 ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , size ; printf ( " Enter size : " ) ; scanf ( " %d " , & size ) ; for ( i = 1 ; i <size * 2 ; i + + ) { for ( j = 1 ; j < = size ; j + + ) { if ( ( i = = 1 & & ( j = = 1 || j = = size ) ) || ( i = = size & & ( j = = 1 || j = = size ) ) || ( i = = size * 2-1 & & ( j = = 1 || j = = size ) ) ) { printf ( " " ) ; } else if ( i = = 1 || i = = size || i = = ( size * 2 ) -1 || j = = 1 || j = = size ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = n / 2 ; i < = n ; i + = 2 ) { for ( j = 1 ; j <n-i ; j + = 2 ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } for ( j = 1 ; j < = n-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = n ; i> = 1 ; i-- ) { for ( j = i ; j <n ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 ) -1 ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int i , j , n ; char name [ 50 ] ; int len ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; len = strlen ( name ) ; for ( i = n / 2 ; i < = n ; i + = 2 ) { for ( j = 1 ; j <n-i ; j + = 2 ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } for ( j = 1 ; j < = n-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = n ; i> = 1 ; i-- ) { for ( j = i ; j <n ; j + + ) { printf ( " " ) ; } if ( i = = n ) { for ( j = 1 ; j < = ( n * 2-len ) / 2 ; j + + ) { printf ( " * " ) ; } printf ( " %s " , name ) ; for ( j = 1 ; j < ( n * 2-len ) / 2 ; j + + ) { printf ( " * " ) ; } } else { for ( j = 1 ; j < = ( i * 2 ) -1 ; j + + ) { printf ( " * " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> long long fact ( int n ) ; int main ( ) { int n , k , num , i ; long long term ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & num ) ; for ( n = 0 ; n <num ; n + + ) { for ( i = n ; i < = num ; i + + ) printf ( " %3c " , ' ' ) ; for ( k = 0 ; k < = n ; k + + ) { term = fact ( n ) / ( fact ( k ) * fact ( n-k ) ) ; printf ( " %6lld " , term ) ; } printf ( " \n  " ) ; } return 0 ; } long long fact ( int n ) { long long factorial = 1ll ; while ( n> = 1 ) { factorial * = n ; n-- ; } return factorial ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( i %2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ( i %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( j %2 = = 1 ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ! ( j %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = cols ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; int centerRow , centerCol ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; centerRow = ( rows + 1 ) / 2 ; centerCol = ( cols + 1 ) / 2 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( centerCol = = j & & centerRow = = i ) { printf ( " 0 " ) ; } else if ( cols %2 = = 0 & & centerCol + 1 = = j ) { if ( centerRow = = i || ( rows %2 = = 0 & & centerRow + 1 = = i ) ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } else if ( rows %2 = = 0 & & centerRow + 1 = = i ) { if ( centerCol = = j || ( cols %2 = = 0 & & centerCol + 1 = = j ) ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } else { printf ( " 1 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j , k ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; k = 1 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( k = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } k * = -1 ; } if ( cols % 2 = = 0 ) { k * = -1 ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; int centerRow , centerCol ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; centerRow = ( rows + 1 ) / 2 ; centerCol = ( cols + 1 ) / 2 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( centerCol = = j || centerRow = = i ) { printf ( " 0 " ) ; } else if ( ( cols %2 = = 0 & & centerCol + 1 = = j ) || ( rows %2 = = 0 & & centerRow + 1 = = i ) ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( i = = j || ( j = = ( cols + 1 ) - i ) ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , cols ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( ( i = = 1 || i = = rows ) & & ( j = = 1 || j = = cols ) ) { printf ( " 0 " ) ; } else if ( i = = 1 || i = = rows || j = = 1 || j = = cols ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < i + cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j , k ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; k = 1 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + , k + + ) { printf ( " %-3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = cols ; j> cols-i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = cols-i ; j + + ) { printf ( " %d " , ( rows - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = rows ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i-1 ; j + + ) { printf ( " %d " , i ) ; } for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = cols ; j> = i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = i-1 ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i-1 ; j + + ) { printf ( " %d " , i ) ; } for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , cols ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = rows ; i> = 1 ; i-- ) { for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , cols ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( N-i + 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = ( N-i + 1 ) ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , i ) ; } for ( j = i + 1 ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i <N ; i + + ) { for ( j = N ; j> i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , i + 1 ) ; } for ( j = i + 1 ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int i , j , N ; int board [ SIZE ] [ SIZE ] ; int left , top ; left = 0 ; top = SIZE - 1 ; N = 1 ; for ( i = 1 ; i < = SIZE / 2 ; i + + , left + + , top-- ) { for ( j = left ; j < = top ; j + + , N + + ) { board [ left ] [ j ] = N ; } for ( j = left + 1 ; j < = top ; j + + , N + + ) { board [ j ] [ top ] = N ; } for ( j = top-1 ; j> = left ; j-- , N + + ) { board [ top ] [ j ] = N ; } for ( j = top-1 ; j> = left + 1 ; j-- , N + + ) { board [ j ] [ left ] = N ; } } for ( i = 0 ; i <SIZE ; i + + ) { for ( j = 0 ; j <SIZE ; j + + ) { printf ( " %-5d " , board [ i ] [ j ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> i ; j-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N-1 ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( j & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( i & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( k % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( k & 1 ) ) ; k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = i ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( ( N-i ) * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { if ( i & 1 ) k = 1 ; else k = 2 ; for ( j = 1 ; j < = i ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2 ) -1 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2-1 ; j> = 1 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 ) -1 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2-1 ; j> = 1 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 2 ; j < = i * 2 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2 ; j> = 2 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 2 ; j < = i * 2 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2 ; j> = 2 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { value = i + 1 ; for ( j = 3 ; j < = i ; j + + ) { printf ( " %d " , value ) ; value + + ; } for ( j = ( i * 2 ) -1 ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { if ( i & 1 ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } } else { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , colCount , value ; colCount = 1 ; value = 1 ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = colCount ; j + + ) { if ( value = = 10 ) value = 1 ; printf ( " %d " , value ) ; value + + ; } printf ( " \n  " ) ; colCount * = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i * 2 ; j <N * 2 ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { diff = N-1 ; value = i ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; diff = 1 ; value = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; count = 0 ; for ( i = 1 ; i < = N ; i + + ) { value = ( i & 1 ) ? ( count + 1 ) : ( count + i ) ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; if ( i & 1 ) value + + ; else value-- ; count + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i < = ( N / 2 ) ) { printf ( " %d " , i ) ; } else { printf ( " %d " , ( N - i + 1 ) ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { printf ( " %d\n  " , num ) ; num = num / 10 ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , firstDigit , digits , placeValue ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num > 0 ) { printf ( " %d\n  " , num ) ; digits = ( int ) log10 ( num ) ; placeValue = ( int ) ceil ( pow ( 10 , digits ) ) ; firstDigit = ( int ) ( num / placeValue ) ; num = num - ( placeValue * firstDigit ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = N-1 ; j> = i ; j-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = ( i * 2 ) ; j < ( N * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = ( i * 2 ) ; j < ( N * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } printf ( " %d " , i ) ; for ( j = 1 ; j < = ( ( N - i ) * 2 - 1 ) ; j + + ) { printf ( " " ) ; } if ( i ! = N ) printf ( " %d " , i ) ; printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } printf ( " %d " , i ) ; for ( j = 1 ; j < = ( ( N - i ) * 2 - 1 ) ; j + + ) { printf ( " " ) ; } printf ( " %d " , i ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> double cube ( double num ) ; int main ( ) { int num ; double c ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; c = cube ( num ) ; printf ( " Cube of %d is %.2f " , num , c ) ; return 0 ; } double cube ( double num ) { return ( num * num * num ) ; }
#include <stdio.h> #include <math.h> double getDiameter ( double radius ) ; double getCircumference ( double radius ) ; double getArea ( double radius ) ; int main ( ) { float radius , dia , circ , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; dia = getDiameter ( radius ) ; circ = getCircumference ( radius ) ; area = getArea ( radius ) ; printf ( " Diameter of the circle = %.2f units\n  " , dia ) ; printf ( " Circumference of the circle = %.2f units\n  " , circ ) ; printf ( " Area of the circle = %.2f sq. units " , area ) ; return 0 ; } double getDiameter ( double radius ) { return ( 2 * radius ) ; } double getCircumference ( double radius ) { return ( 2 * M_PI * radius ) ; } double getArea ( double radius ) { return ( M_PI * radius * radius ) ; }
#include <stdio.h> int max ( int num1 , int num2 ) ; int min ( int num1 , int num2 ) ; int main ( ) { int num1 , num2 , maximum , minimum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; maximum = max ( num1 , num2 ) ; minimum = min ( num1 , num2 ) ; printf ( " \n Maximum = %d\n  " , maximum ) ; printf ( " Minimum = %d " , minimum ) ; return 0 ; } int max ( int num1 , int num2 ) { return ( num1 > num2 ) ? num1 : num2 ; } int min ( int num1 , int num2 ) { return ( num1 > num2 ) ? num2 : num1 ; }
#include <stdio.h> #include <limits.h> #include <stdarg.h> int max ( int args , ... ) ; int min ( int args , ... ) ; int main ( ) { printf ( " Maximum of three numbers : ( 10 , 30 , 20 ) = %d\n  " , max ( 3 , 10 , 30 , 20 ) ) ; printf ( " Maximum of five numbers : ( 5 , -45 , 4 , 60 , 100 ) = %d\n  " , max ( 5 , -45 , 4 , 60 , 100 ) ) ; printf ( " Minimum of four numbers : ( -5 , 0 , 10 , 50 ) = %d\n  " , min ( 4 , -5 , 0 , 10 , 50 ) ) ; printf ( " Minimum of two numbers : ( 10 , 20 ) = %d " , min ( 2 , 10 , 20 ) ) ; return 0 ; } int max ( int args , ... ) { int i , max , cur ; va_list valist ; va_start ( valist , args ) ; max = INT_MIN ; for ( i = 0 ; i <args ; i + + ) { cur = va_arg ( valist , int ) ; if ( max < cur ) max = cur ; } va_end ( valist ) ; return max ; } int min ( int args , ... ) { int i , min , cur ; va_list valist ; va_start ( valist , args ) ; min = INT_MAX ; for ( i = 0 ; i <args ; i + + ) { cur = va_arg ( valist , int ) ; if ( min > cur ) min = cur ; } va_end ( valist ) ; return min ; }
#include <stdio.h> int isEven ( int num ) { return ! ( num & 1 ) ; } int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isEven ( num ) ) { printf ( " The number is even. " ) ; } else { printf ( " The number is odd. " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int isPrime ( int num ) ; int isArmstrong ( int num ) ; int isPerfect ( int num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isPrime ( num ) ) { printf ( " %d is Prime number.\n  " , num ) ; } else { printf ( " %d is not Prime number.\n  " , num ) ; } if ( isArmstrong ( num ) ) { printf ( " %d is Armstrong number.\n  " , num ) ; } else { printf ( " %d is not Armstrong number.\n  " , num ) ; } if ( isPerfect ( num ) ) { printf ( " %d is Perfect number.\n  " , num ) ; } else { printf ( " %d is not Perfect number.\n  " , num ) ; } return 0 ; } int isPrime ( int num ) { int i ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) { return 0 ; } } return 1 ; } int isArmstrong ( int num ) { int lastDigit , sum , originalNum , digits ; sum = 0 ; originalNum = num ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + round ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } return ( originalNum = = sum ) ; } int isPerfect ( int num ) { int i , sum , n ; sum = 0 ; n = num ; for ( i = 1 ; i <n ; i + + ) { if ( n %i = = 0 ) { sum + = i ; } } return ( num = = sum ) ; }
#include <stdio.h> int isPrime ( int num ) ; void printPrimes ( int lowerLimit , int upperLimit ) ; int main ( ) { int lowerLimit , upperLimit ; printf ( " Enter the lower and upper limit to list primes : " ) ; scanf ( " %d %d " , & lowerLimit , & upperLimit ) ; printPrimes ( lowerLimit , upperLimit ) ; return 0 ; } void printPrimes ( int lowerLimit , int upperLimit ) { printf ( " All prime number between %d to %d are : " , lowerLimit , upperLimit ) ; while ( lowerLimit < = upperLimit ) { if ( isPrime ( lowerLimit ) ) { printf ( " %d , " , lowerLimit ) ; } lowerLimit + + ; } } int isPrime ( int num ) { int i ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num % i = = 0 ) { return 0 ; } } return 1 ; }
#include <stdio.h> long long fact ( int num ) ; void printStrongNumbers ( int start , int end ) ; int main ( ) { int start , end ; printf ( " Enter the lower limit to find strong number : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter the upper limit to find strong number : " ) ; scanf ( " %d " , & end ) ; printf ( " All strong numbers between %d to %d are : \n  " , start , end ) ; printStrongNumbers ( start , end ) ; return 0 ; } void printStrongNumbers ( int start , int end ) { long long sum ; int num ; while ( start ! = end ) { sum = 0 ; num = start ; while ( num ! = 0 ) { sum + = fact ( num % 10 ) ; num / = 10 ; } if ( start = = sum ) { printf ( " %d , " , start ) ; } start + + ; } } long long fact ( int num ) { if ( num = = 0 ) return 1 ; else return ( num * fact ( num-1 ) ) ; }
#include <stdio.h> int isArmstrong ( int num ) ; void printArmstrong ( int start , int end ) ; int main ( ) { int start , end ; printf ( " Enter lower limit to print armstrong numbers : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit to print armstrong numbers : " ) ; scanf ( " %d " , & end ) ; printf ( " All armstrong numbers between %d to %d are : \n  " , start , end ) ; printArmstrong ( start , end ) ; return 0 ; } int isArmstrong ( int num ) { int temp , lastDigit , sum ; temp = num ; sum = 0 ; while ( temp ! = 0 ) { lastDigit = temp % 10 ; sum + = lastDigit * lastDigit * lastDigit ; temp / = 10 ; } if ( num = = sum ) return 1 ; else return 0 ; } void printArmstrong ( int start , int end ) { while ( start < = end ) { if ( isArmstrong ( start ) ) { printf ( " %d , " , start ) ; } start + + ; } }
#include <stdio.h> int isPerfect ( int num ) ; void printPerfect ( int start , int end ) ; int main ( ) { int start , end ; printf ( " Enter lower limit to print perfect numbers : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit to print perfect numbers : " ) ; scanf ( " %d " , & end ) ; printf ( " All perfect numbers between %d to %d are : \n  " , start , end ) ; printPerfect ( start , end ) ; return 0 ; } int isPerfect ( int num ) { int i , sum ; sum = 0 ; for ( i = 1 ; i <num ; i + + ) { if ( num % i = = 0 ) { sum + = i ; } } if ( sum = = num ) return 1 ; else return 0 ; } void printPerfect ( int start , int end ) { while ( start < = end ) { if ( isPerfect ( start ) ) { printf ( " %d , " , start ) ; } start + + ; } }
#include <stdio.h> double pow ( double base , int expo ) ; int main ( ) { double base , power ; int expo ; printf ( " Enter base : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %d " , & expo ) ; power = pow ( base , expo ) ; printf ( " %.2lf ^ %d = %f " , base , expo , power ) ; return 0 ; } double pow ( double base , int expo ) { if ( expo = = 0 ) return 1 ; else if ( expo > 0 ) return base * pow ( base , expo - 1 ) ; else return 1 / pow ( base , -expo ) ; }
#include <stdio.h> void printNaturalNumbers ( int lowerLimit , int upperLimit ) ; int main ( ) { int lowerLimit , upperLimit ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & lowerLimit ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & upperLimit ) ; printf ( " All natural numbers from %d to %d are : " , lowerLimit , upperLimit ) ; printNaturalNumbers ( lowerLimit , upperLimit ) ; return 0 ; } void printNaturalNumbers ( int lowerLimit , int upperLimit ) { if ( lowerLimit > upperLimit ) return ; printf ( " %d , " , lowerLimit ) ; printNaturalNumbers ( lowerLimit + 1 , upperLimit ) ; }
#include <stdio.h> void printEvenOdd ( int cur , int limit ) ; int main ( ) { int lowerLimit , upperLimit ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & lowerLimit ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & upperLimit ) ; printf ( " Even / odd Numbers from %d to %d are : " , lowerLimit , upperLimit ) ; printEvenOdd ( lowerLimit , upperLimit ) ; return 0 ; } void printEvenOdd ( int cur , int limit ) { if ( cur > limit ) return ; printf ( " %d , " , cur ) ; printEvenOdd ( cur + 2 , limit ) ; }
#include <stdio.h> int sumOfNaturalNumbers ( int start , int end ) ; int main ( ) { int start , end , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; sum = sumOfNaturalNumbers ( start , end ) ; printf ( " Sum of natural numbers from %d to %d = %d " , start , end , sum ) ; return 0 ; } int sumOfNaturalNumbers ( int start , int end ) { if ( start = = end ) return start ; else return start + sumOfNaturalNumbers ( start + 1 , end ) ; }
#include <stdio.h> int sumOfEvenOdd ( int start , int end ) ; int main ( ) { int start , end , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Sum of even / odd numbers between %d to %d = %d\n  " , start , end , sumOfEvenOdd ( start , end ) ) ; return 0 ; } int sumOfEvenOdd ( int start , int end ) { if ( start > end ) return 0 ; else return ( start + sumOfEvenOdd ( start + 2 , end ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int main ( ) { int num , rev ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; rev = reverse ( num ) ; printf ( " Reverse of %d = %d " , num , rev ) ; return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int main ( ) { int num , rev , numIsNegative ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; numIsNegative = ( num < 0 ) ; if ( numIsNegative ) num * = -1 ; rev = reverse ( num ) ; if ( numIsNegative ) rev * = -1 ; printf ( " Reverse of %d = %d " , num , rev ) ; return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int isPalindrome ( int num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isPalindrome ( num ) = = 1 ) { printf ( " %d is palindrome number.\n  " , num ) ; } else { printf ( " %d is NOT palindrome number.\n  " , num ) ; } return 0 ; } int isPalindrome ( int num ) { if ( num = = reverse ( num ) ) { return 1 ; } return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> int sumOfDigits ( int num ) ; int main ( ) { int num , sum ; printf ( " Enter any number to find sum of digits : " ) ; scanf ( " %d " , & num ) ; sum = sumOfDigits ( num ) ; printf ( " Sum of digits of %d = %d " , num , sum ) ; return 0 ; } int sumOfDigits ( int num ) { if ( num = = 0 ) return 0 ; return ( ( num % 10 ) + sumOfDigits ( num / 10 ) ) ; }
#include <stdio.h> unsigned long long fact ( int num ) ; int main ( ) { int num ; unsigned long long factorial ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial of %d is %llu " , num , factorial ) ; return 0 ; } unsigned long long fact ( int num ) { if ( num = = 0 ) return 1 ; else return num * fact ( num - 1 ) ; }
#include <stdio.h> unsigned long long fibo ( int num ) ; int main ( ) { int num ; unsigned long long fibonacci ; printf ( " Enter any number to find nth fiboacci term : " ) ; scanf ( " %d " , & num ) ; fibonacci = fibo ( num ) ; printf ( " %d fibonacci term is %llu " , num , fibonacci ) ; return 0 ; } unsigned long long fibo ( int num ) { if ( num = = 0 ) return 0 ; else if ( num = = 1 ) return 1 ; else return fibo ( num-1 ) + fibo ( num-2 ) ; }
#include <stdio.h> int gcd ( int a , int b ) ; int main ( ) { int num1 , num2 , hcf ; printf ( " Enter any two numbers to find GCD : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; printf ( " GCD of %d and %d = %d " , num1 , num2 , hcf ) ; return 0 ; } int gcd ( int a , int b ) { if ( b = = 0 ) return a ; else return gcd ( b , a %b ) ; }
#include <stdio.h> int lcm ( int a , int b ) ; int main ( ) { int num1 , num2 , LCM ; printf ( " Enter any two numbers to find lcm : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) LCM = lcm ( num2 , num1 ) ; else LCM = lcm ( num1 , num2 ) ; printf ( " LCM of %d and %d = %d " , num1 , num2 , LCM ) ; return 0 ; } int lcm ( int a , int b ) { static int multiple = 0 ; multiple + = b ; if ( ( multiple % a = = 0 ) & & ( multiple % b = = 0 ) ) { return multiple ; } else { return lcm ( a , b ) ; } }
#include <stdio.h> #define MAX_SIZE 100 void printArray ( int arr [ ] , int start , int len ) ; int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Elements in the array : " ) ; printArray ( arr , 0 , N ) ; return 0 ; } void printArray ( int arr [ ] , int start , int len ) { if ( start > = len ) return ; printf ( " %d , " , arr [ start ] ) ; printArray ( arr , start + 1 , len ) ; }
#include <stdio.h> #define MAX_SIZE 100 int sum ( int arr [ ] , int start , int len ) ; int main ( ) { int arr [ MAX_SIZE ] ; int N , i , sumofarray ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } sumofarray = sum ( arr , 0 , N ) ; printf ( " Sum of array elements : %d " , sumofarray ) ; return 0 ; } int sum ( int arr [ ] , int start , int len ) { if ( start > = len ) return 0 ; return ( arr [ start ] + sum ( arr , start + 1 , len ) ) ; }
#include <stdio.h> #define MAX_SIZE 100 int maximum ( int array [ ] , int index , int len ) ; int minimum ( int array [ ] , int index , int len ) ; int main ( ) { int array [ MAX_SIZE ] , N , max , min ; int i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in array : " , N ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } max = maximum ( array , 0 , N ) ; min = minimum ( array , 0 , N ) ; printf ( " Minimum element in array = %d\n  " , min ) ; printf ( " Maximum element in array = %d\n  " , max ) ; return 0 ; } int maximum ( int array [ ] , int index , int len ) { int max ; if ( index > = len-2 ) { if ( array [ index ] > array [ index + 1 ] ) return array [ index ] ; else return array [ index + 1 ] ; } max = maximum ( array , index + 1 , len ) ; if ( array [ index ] > max ) return array [ index ] ; else return max ; } int minimum ( int array [ ] , int index , int len ) { int min ; if ( index > = len-2 ) { if ( array [ index ] < array [ index + 1 ] ) return array [ index ] ; else return array [ index + 1 ] ; } min = minimum ( array , index + 1 , len ) ; if ( array [ index ] < min ) return array [ index ] ; else return min ; }
#include <stdio.h> #define MAX_SIZE 100 int maximum ( int array [ ] , int index , int len ) ; int minimum ( int array [ ] , int index , int len ) ; int main ( ) { int array [ MAX_SIZE ] , N , max , min ; int i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in array : " , N ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } max = maximum ( array , 0 , N ) ; min = minimum ( array , 0 , N ) ; printf ( " Minimum element in array = %d\n  " , min ) ; printf ( " Maximum element in array = %d\n  " , max ) ; return 0 ; } int maximum ( int array [ ] , int index , int len ) { int max ; if ( index > = len-2 ) return ( array [ index ] > array [ index + 1 ] ) ? array [ index ] : array [ index + 1 ] ; max = maximum ( array , index + 1 , len ) ; return ( array [ index ] > max ) ? array [ index ] : max ; } int minimum ( int array [ ] , int index , int len ) { int min ; if ( index > = len-2 ) { return ( array [ index ] < array [ index + 1 ] ) ? array [ index ] : array [ index + 1 ] ; } min = minimum ( array , index + 1 , len ) ; return ( array [ index ] < min ) ? array [ index ] : min ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int i ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { count + + ; } printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] ; char text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; for ( i = 0 ; text1 [ i ] ! = '\0' ; i + + ) { text2 [ i ] = text1 [ i ] ; } text2 [ i ] = '\0' ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] ; char text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = 0 ; while ( text1 [ i ] ! = '\0' ) { text2 [ i ] = text1 [ i ] ; i + + ; } text2 [ i ] = '\0' ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = -1 ; while ( text2 [ i ] = text1 [ + + i ] ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; char * str1 = text1 ; char * str2 = text2 ; printf ( " Enter any string : " ) ; gets ( text1 ) ; while ( * ( str2 + + ) = * ( str1 + + ) ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = 0 ; while ( str1 [ i ] ! = '\0' ) { i + + ; } j = 0 ; while ( str2 [ j ] ! = '\0' ) { str1 [ i ] = str2 [ j ] ; i + + ; j + + ; } str1 [ i ] = '\0' ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = -1 ; while ( str1 [ + + i ] ) ; j = 0 ; while ( str1 [ i + + ] = str2 [ j + + ] ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; char * s1 = str1 ; char * s2 = str2 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; while ( * ( + + s1 ) ) ; while ( * ( s1 + + ) = * ( s2 + + ) ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { int i = 0 ; while ( str1 [ i ] = = str2 [ i ] ) { if ( str1 [ i ] = = '\0' & & str2 [ i ] = = '\0' ) break ; i + + ; } return str1 [ i ] - str2 [ i ] ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { while ( ( * str1 & & * str2 ) & & ( * str1 = = * str2 ) ) { str1 + + ; str2 + + ; } return * str1 - * str2 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = strcmp ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res = = -1 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter your text : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { str [ i ] = str [ i ] - 32 ; } } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; printf ( " Enter your text : " ) ; gets ( str ) ; while ( * s ) { * s = ( * s > 'a' & & * s < = 'z' ) ? * s-32 : * s ; s + + ; } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter your text : " ) ; gets ( str ) ; strupr ( str ) ; printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { str [ i ] = str [ i ] + 32 ; } } printf ( " Lower case string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; strlwr ( str ) ; printf ( " Lowercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 void toggleCase ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " String before toggling case : %s " , str ) ; toggleCase ( str ) ; printf ( " String after toggling case : %s " , str ) ; return 0 ; } void toggleCase ( char * str ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { str [ i ] = str [ i ] - 32 ; } else if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { str [ i ] = str [ i ] + 32 ; } i + + ; } }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int alphabets , digits , others , i ; alphabets = digits = others = i = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( str [ i ] ! = '\0' ) { if ( ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) || ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) ) { alphabets + + ; } else if ( str [ i ] > = '0' & & str [ i ] < = '9' ) { digits + + ; } else { others + + ; } i + + ; } printf ( " Alphabets = %d\n  " , alphabets ) ; printf ( " Digits = %d\n  " , digits ) ; printf ( " Special characters = %d " , others ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; int alphabets , digits , others ; alphabets = digits = others = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * s ) { if ( ( * s > = 'a' & & * s < = 'z' ) || ( * s > = 'A' & & * s < = 'Z' ) ) alphabets + + ; else if ( * s> = '0' & & * s < = '9' ) digits + + ; else others + + ; s + + ; } printf ( " Alphabets = %d\n  " , alphabets ) ; printf ( " Digits = %d\n  " , digits ) ; printf ( " Special characters = %d " , others ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len , vowel , consonant ; printf ( " Enter any string : " ) ; gets ( str ) ; vowel = 0 ; consonant = 0 ; len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) || ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) ) { if ( str [ i ] = = 'a' || str [ i ] = = 'e' || str [ i ] = = 'i' || str [ i ] = = 'o' || str [ i ] = = 'u' || str [ i ] = = 'A' || str [ i ] = = 'E' || str [ i ] = = 'I' || str [ i ] = = 'O' || str [ i ] = = 'U' ) vowel + + ; else consonant + + ; } } printf ( " Total number of vowel = %d\n  " , vowel ) ; printf ( " Total number of consonant = %d\n  " , consonant ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len , vowel , consonant ; printf ( " Enter any string : " ) ; gets ( str ) ; vowel = 0 ; consonant = 0 ; len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) || ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) ) { switch ( str [ i ] ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : vowel + + ; break ; default : consonant + + ; } } } printf ( " Total number of vowel = %d\n  " , vowel ) ; printf ( " Total number of consonant = %d\n  " , consonant ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; int vowel , consonant ; printf ( " Enter any string : " ) ; gets ( str ) ; vowel = 0 ; consonant = 0 ; while ( * s ) { if ( ( * s > = 'a' & & * s < = 'z' ) || ( * s > = 'A' & & * s < = 'Z' ) ) { switch ( * s ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : vowel + + ; break ; default : consonant + + ; } } s + + ; } printf ( " Total number of vowel = %d\n  " , vowel ) ; printf ( " Total number of consonant = %d\n  " , consonant ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , words ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; words = 1 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = ' ' || str [ i ] = = '\n ' || str [ i ] = = '\t' ) { words + + ; } i + + ; } printf ( " Total number of words = %d " , words ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char prevChar ; int i , words ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; words = 0 ; prevChar = '\0' ; while ( 1 ) { if ( str [ i ] = = ' ' || str [ i ] = = '\n ' || str [ i ] = = '\t' || str [ i ] = = '\0' ) { if ( prevChar ! = ' ' & & prevChar ! = '\n ' & & prevChar ! = '\t' & & prevChar ! = '\0' ) { words + + ; } } prevChar = str [ i ] ; if ( str [ i ] = = '\0' ) break ; else i + + ; } printf ( " Total number of words = %d " , words ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int i , strIndex , revIndex , len ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; while ( str [ i ] ! = '\0' ) i + + ; len = i ; revIndex = 0 ; strIndex = len - 1 ; while ( strIndex > = 0 ) { reverse [ revIndex ] = str [ strIndex ] ; strIndex-- ; revIndex + + ; } reverse [ revIndex ] = '\0' ; printf ( " \n Original string = %s\n  " , str ) ; printf ( " Reverse string = %s " , reverse ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; char * s = str ; char * r = reverse ; int len = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * ( s + + ) ) len + + ; s-- ; while ( len > = 0 ) { * ( r + + ) = * ( --s ) ; len-- ; } * r = '\0' ; printf ( " \n Original string = %s\n  " , str ) ; printf ( " Reverse string = %s " , reverse ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int len , startIndex , endIndex ; printf ( " Enter any string : " ) ; gets ( str ) ; len = 0 ; while ( str [ len ] ! = '\0' ) len + + ; startIndex = 0 ; endIndex = len-1 ; while ( startIndex < = endIndex ) { if ( str [ startIndex ] ! = str [ endIndex ] ) break ; startIndex + + ; endIndex-- ; } if ( startIndex > = endIndex ) { printf ( " String is Palindrome. " ) ; } else { printf ( " String is Not Palindrome. " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int flag ; printf ( " Enter any string : " ) ; gets ( str ) ; strcpy ( reverse , str ) ; strrev ( reverse ) ; flag = strcmp ( str , reverse ) ; if ( flag = = 0 ) { printf ( " String is Palindrome. " ) ; } else { printf ( " String is Not Palindrome. " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ 100 ] , reverse [ 100 ] ; int len , i , index , wordStart , wordEnd ; printf ( " Enter any string : " ) ; gets ( str ) ; len = strlen ( str ) ; index = 0 ; wordStart = len - 1 ; wordEnd = len - 1 ; while ( wordStart > 0 ) { if ( str [ wordStart ] = = ' ' ) { i = wordStart + 1 ; while ( i < = wordEnd ) { reverse [ index ] = str [ i ] ; i + + ; index + + ; } reverse [ index + + ] = ' ' ; wordEnd = wordStart - 1 ; } wordStart-- ; } for ( i = 0 ; i < = wordEnd ; i + + ) { reverse [ index ] = str [ i ] ; index + + ; } reverse [ index ] = '\0' ; printf ( " Original string \n  %s\n \n  " , str ) ; printf ( " Reverse ordered words \n  %s " , reverse ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int indexOf ( const char * str , const char toFind ) ; int main ( ) { char str [ MAX_SIZE ] ; char toFind ; int index ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to be searched : " ) ; toFind = getchar ( ) ; index = indexOf ( str , toFind ) ; if ( index = = -1 ) printf ( " ' %c' not found. " , toFind ) ; else printf ( " ' %c' is found at index %d. " , toFind , index ) ; return 0 ; } int indexOf ( const char * str , const char toFind ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toFind ) return i ; i + + ; } return -1 ; }
#include <stdio.h> #define MAX_SIZE 100 int lastIndexOf ( const char * str , const char toFind ) ; int main ( ) { char str [ MAX_SIZE ] ; char toFind ; int index ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to find : " ) ; toFind = getchar ( ) ; index = lastIndexOf ( str , toFind ) ; printf ( " \n Last index of ' %c' is %d " , toFind , index ) ; return 0 ; } int lastIndexOf ( const char * str , const char toFind ) { int index = -1 ; int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toFind ) { index = i ; } i + + ; } return index ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { printf ( " ' %c' is found at index %d\n  " , toSearch , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i , count ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; count = 0 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { count + + ; } i + + ; } printf ( " Total occurrence of ' %c' = %d " , toSearch , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 #define MAX_CHARS 255 int main ( ) { char str [ MAX_SIZE ] ; int freq [ MAX_CHARS ] ; int i = 0 , max ; int ascii ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { freq [ i ] = 0 ; } i = 0 ; while ( str [ i ] ! = '\0' ) { ascii = ( int ) str [ i ] ; freq [ ascii ] + = 1 ; i + + ; } max = 0 ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { if ( freq [ i ] > freq [ max ] ) max = i ; } printf ( " Maximum occurring character is ' %c' = %d times. " , max , freq [ max ] ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 #define MAX_CHARS 255 int main ( ) { char str [ MAX_SIZE ] ; int freq [ MAX_CHARS ] ; int i = 0 , min ; int ascii ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { freq [ i ] = 0 ; } i = 0 ; while ( str [ i ] ! = '\0' ) { ascii = ( int ) str [ i ] ; freq [ ascii ] + = 1 ; i + + ; } min = 0 ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { if ( freq [ i ] ! = 0 ) { if ( freq [ min ] = = 0 || freq [ i ] < freq [ min ] ) min = i ; } } printf ( " Minimum occurring character is ' %c' = %d. " , min , freq [ min ] ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len ; int freq [ 26 ] ; printf ( " Enter any string : " ) ; gets ( str ) ; len = strlen ( str ) ; for ( i = 0 ; i <26 ; i + + ) { freq [ i ] = 0 ; } for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { freq [ str [ i ] - 97 ] + + ; } else if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { freq [ str [ i ] - 65 ] + + ; } } printf ( " \n Frequency of all characters in the given string : \n  " ) ; for ( i = 0 ; i <26 ; i + + ) { if ( freq [ i ] ! = 0 ) { printf ( " ' %c' = %d\n  " , ( i + 97 ) , freq [ i ] ) ; } } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeFirst ( char * , const char ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to remove from string : " ) ; toRemove = getchar ( ) ; removeFirst ( str , toRemove ) ; printf ( " String after removing first ' %c' : %s " , toRemove , str ) ; return 0 ; } void removeFirst ( char * str , const char toRemove ) { int i = 0 ; int len = strlen ( str ) ; while ( i <len & & str [ i ] ! = toRemove ) i + + ; while ( i < len ) { str [ i ] = str [ i + 1 ] ; i + + ; } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeLast ( char * , const char ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to remove from string : " ) ; toRemove = getchar ( ) ; removeLast ( str , toRemove ) ; printf ( " String after removing last ' %c' : %s " , toRemove , str ) ; return 0 ; } void removeLast ( char * str , const char toRemove ) { int i , lastPosition ; int len = strlen ( str ) ; lastPosition = -1 ; i = 0 ; while ( i <len ) { if ( str [ i ] = = toRemove ) { lastPosition = i ; } i + + ; } if ( lastPosition ! = -1 ) { i = lastPosition ; while ( i <len ) { str [ i ] = str [ i + 1 ] ; i + + ; } } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeAll ( char * , const char ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to remove from string : " ) ; toRemove = getchar ( ) ; removeAll ( str , toRemove ) ; printf ( " String after removing ' %c' : %s " , toRemove , str ) ; return 0 ; } void removeAll ( char * str , const char toRemove ) { int i , j ; int len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] = = toRemove ) { for ( j = i ; j <len ; j + + ) { str [ j ] = str [ j + 1 ] ; } len-- ; i-- ; } } }
#include <stdio.h> #define MAX_SIZE 100 void removeDuplicates ( char * str ) ; void removeAll ( char * str , const char toRemove , int index ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " String before removing duplicates : %s\n  " , str ) ; removeDuplicates ( str ) ; printf ( " String after removing duplicates : %s\n  " , str ) ; return 0 ; } void removeDuplicates ( char * str ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { removeAll ( str , str [ i ] , i + 1 ) ; i + + ; } } void removeAll ( char * str , const char toRemove , int index ) { int i ; while ( str [ index ] ! = '\0' ) { if ( str [ index ] = = toRemove ) { i = index ; while ( str [ i ] ! = '\0' ) { str [ i ] = str [ i + 1 ] ; i + + ; } } else { index + + ; } } }
#include <stdio.h> #define MAX_SIZE 100 void replaceFirst ( char * str , char oldChar , char newChar ) ; int main ( ) { char str [ MAX_SIZE ] , oldChar , newChar ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to replace : " ) ; oldChar = getchar ( ) ; getchar ( ) ; printf ( " Enter character to replace ' %c' with : " , oldChar ) ; newChar = getchar ( ) ; printf ( " \n String before replacing : %s\n  " , str ) ; replaceFirst ( str , oldChar , newChar ) ; printf ( " String after replacing first ' %c' with ' %c' : %s " , oldChar , newChar , str ) ; return 0 ; } void replaceFirst ( char * str , char oldChar , char newChar ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = oldChar ) { str [ i ] = newChar ; break ; } i + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void replaceLast ( char * str , char oldChar , char newChar ) ; int main ( ) { char str [ MAX_SIZE ] , oldChar , newChar ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to replace : " ) ; oldChar = getchar ( ) ; getchar ( ) ; printf ( " Enter character to replace ' %c' with : " , oldChar ) ; newChar = getchar ( ) ; printf ( " \n String before replacing : \n  %s " , str ) ; replaceLast ( str , oldChar , newChar ) ; printf ( " \n \n String after replacing ' %c' with ' %c' : \n  %s " , oldChar , newChar , str ) ; return 0 ; } void replaceLast ( char * str , char oldChar , char newChar ) { int i , lastIndex ; lastIndex = -1 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = oldChar ) { lastIndex = i ; } i + + ; } if ( lastIndex ! = -1 ) { str [ lastIndex ] = newChar ; } }
#include <stdio.h> #define MAX_SIZE 100 void replaceAll ( char * str , char oldChar , char newChar ) ; int main ( ) { char str [ MAX_SIZE ] , oldChar , newChar ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to replace : " ) ; oldChar = getchar ( ) ; getchar ( ) ; printf ( " Enter character to replace ' %c' with : " , oldChar ) ; newChar = getchar ( ) ; printf ( " \n String before replacing : \n  %s " , str ) ; replaceAll ( str , oldChar , newChar ) ; printf ( " \n \n String after replacing ' %c' with ' %c' : \n  %s " , oldChar , newChar , str ) ; return 0 ; } void replaceAll ( char * str , char oldChar , char newChar ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = oldChar ) { str [ i ] = newChar ; } i + + ; } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , word [ MAX_SIZE ] ; int i , index , found = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to be searched : " ) ; gets ( word ) ; index = 0 ; while ( str [ index ] ! = '\0' ) { if ( str [ index ] = = word [ 0 ] ) { i = 0 ; found = 1 ; while ( word [ i ] ! = '\0' ) { if ( str [ index + i ] ! = word [ i ] ) { found = 0 ; break ; } i + + ; } } if ( found = = 1 ) { break ; } index + + ; } if ( found = = 1 ) { printf ( " \n ' %s' is found at index %d. " , word , index ) ; } else { printf ( " \n ' %s' is not found. " , word ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char word [ MAX_SIZE ] ; int i , j , index , found ; int strLen , wordLen ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any word to search : " ) ; gets ( word ) ; index = -1 ; strLen = strlen ( str ) ; wordLen = strlen ( word ) ; for ( i = 0 ; i < = strLen - wordLen ; i + + ) { found = 1 ; for ( j = 0 ; j <wordLen ; j + + ) { if ( str [ i + j ] ! = word [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { index = i ; } } if ( index = = -1 ) { printf ( " \n ' %s' not found. " , word ) ; } else { printf ( " \n Last index of ' %s' = %d " , word , index ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char word [ MAX_SIZE ] ; int i , j , found ; int strLen , wordLen ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any word to search : " ) ; gets ( word ) ; strLen = strlen ( str ) ; wordLen = strlen ( word ) ; for ( i = 0 ; i <strLen - wordLen ; i + + ) { found = 1 ; for ( j = 0 ; j <wordLen ; j + + ) { if ( str [ i + j ] ! = word [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { printf ( " ' %s' found at index : %d \n  " , word , i ) ; } } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int countOccurrences ( char * str , char * toSearch ) ; int main ( ) { char str [ MAX_SIZE ] ; char toSearch [ MAX_SIZE ] ; int count ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to search occurrences : " ) ; gets ( toSearch ) ; count = countOccurrences ( str , toSearch ) ; printf ( " Total occurrences of ' %s' : %d " , toSearch , count ) ; return 0 ; } int countOccurrences ( char * str , char * toSearch ) { int i , j , found , count ; int stringLen , searchLen ; stringLen = strlen ( str ) ; searchLen = strlen ( toSearch ) ; count = 0 ; for ( i = 0 ; i < = stringLen-searchLen ; i + + ) { found = 1 ; for ( j = 0 ; j <searchLen ; j + + ) { if ( str [ i + j ] ! = toSearch [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { count + + ; } } return count ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeFirst ( char * str , const char * toRemove ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter string to be removed : " ) ; gets ( toRemove ) ; removeFirst ( str , toRemove ) ; printf ( " \n String after removing ' %s' : \n  %s " , toRemove , str ) ; return 0 ; } void removeFirst ( char * str , const char * toRemove ) { int i , j ; int len , removeLen ; int found = 0 ; len = strlen ( str ) ; removeLen = strlen ( toRemove ) ; for ( i = 0 ; i <len ; i + + ) { found = 1 ; for ( j = 0 ; j <removeLen ; j + + ) { if ( str [ i + j ] ! = toRemove [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { for ( j = i ; j < = len-removeLen ; j + + ) { str [ j ] = str [ j + removeLen ] ; } break ; } } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char word [ MAX_SIZE ] ; int i , j , found , index ; int stringLen , wordLen ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to remove : " ) ; gets ( word ) ; stringLen = strlen ( str ) ; wordLen = strlen ( word ) ; index = -1 ; for ( i = 0 ; i <stringLen - wordLen ; i + + ) { found = 1 ; for ( j = 0 ; j <wordLen ; j + + ) { if ( str [ i + j ] ! = word [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { index = i ; } } if ( index = = -1 ) { printf ( " ' %s' not found. " ) ; } else { for ( i = index ; i < = stringLen - wordLen ; i + + ) { str [ i ] = str [ i + wordLen ] ; } printf ( " String after removing last ' %s' : \n  %s " , word , str ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeAll ( char * str , char * toRemove ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to remove : " ) ; gets ( toRemove ) ; printf ( " String before removing ' %s' : \n  %s " , toRemove , str ) ; removeAll ( str , toRemove ) ; printf ( " \n \n String after removing ' %s' : \n  %s " , toRemove , str ) ; return 0 ; } void removeAll ( char * str , char * toRemove ) { int i , j , stringLen , toRemoveLen ; int found ; stringLen = strlen ( str ) ; toRemoveLen = strlen ( toRemove ) ; for ( i = 0 ; i < = stringLen - toRemoveLen ; i + + ) { found = 1 ; for ( j = 0 ; j <toRemoveLen ; j + + ) { if ( str [ i + j ] ! = toRemove [ j ] ) { found = 0 ; break ; } } if ( str [ i + j ] ! = ' ' & & str [ i + j ] ! = '\t' & & str [ i + j ] ! = '\n ' & & str [ i + j ] ! = '\0' ) { found = 0 ; } if ( found = = 1 ) { for ( j = i ; j < = stringLen - toRemoveLen ; j + + ) { str [ j ] = str [ j + toRemoveLen ] ; } stringLen = stringLen - toRemoveLen ; i-- ; } } }
#include <stdio.h> #define MAX_SIZE 100 void trimLeading ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before trimming leading whitespace : \n  %s " , str ) ; trimLeading ( str ) ; printf ( " \n \n String after trimming leading whitespace : \n  %s " , str ) ; return 0 ; } void trimLeading ( char * str ) { int index , i , j ; index = 0 ; while ( str [ index ] = = ' ' || str [ index ] = = '\t' || str [ index ] = = '\n ' ) { index + + ; } if ( index ! = 0 ) { i = 0 ; while ( str [ i + index ] ! = '\0' ) { str [ i ] = str [ i + index ] ; i + + ; } str [ i ] = '\0' ; } }
#include <stdio.h> #define MAX_SIZE 100 void trimTrailing ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before trimming trailing white space : \n ' %s' " , str ) ; trimTrailing ( str ) ; printf ( " \n \n String after trimming trailing white spaces : \n ' %s' " , str ) ; return 0 ; } void trimTrailing ( char * str ) { int index , i ; index = -1 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] ! = ' ' & & str [ i ] ! = '\t' & & str [ i ] ! = '\n ' ) { index = i ; } i + + ; } str [ index + 1 ] = '\0' ; }
#include <stdio.h> #define MAX_SIZE 100 void trim ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before trimming white space : \n ' %s' " , str ) ; trim ( str ) ; printf ( " \n \n String after trimming white space : \n ' %s' " , str ) ; return 0 ; } void trim ( char * str ) { int index , i ; index = 0 ; while ( str [ index ] = = ' ' || str [ index ] = = '\t' || str [ index ] = = '\n ' ) { index + + ; } i = 0 ; while ( str [ i + index ] ! = '\0' ) { str [ i ] = str [ i + index ] ; i + + ; } str [ i ] = '\0' ; i = 0 ; index = -1 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] ! = ' ' & & str [ i ] ! = '\t' & & str [ i ] ! = '\n ' ) { index = i ; } i + + ; } str [ index + 1 ] = '\0' ; }
#include <stdio.h> #include <stdlib.h> #define MAX_SIZE 100 char * removeBlanks ( const char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; char * newString ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before removing blanks : \n ' %s' " , str ) ; newString = removeBlanks ( str ) ; printf ( " \n \n String after removing blanks : \n ' %s' " , newString ) ; return 0 ; } char * removeBlanks ( const char * str ) { int i , j ; char * newString ; newString = ( char * ) malloc ( MAX_SIZE ) ; i = 0 ; j = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = ' ' ) { newString [ j ] = ' ' ; j + + ; while ( str [ i ] = = ' ' ) i + + ; } newString [ j ] = str [ i ] ; i + + ; j + + ; } newString [ j ] = '\0' ; return newString ; }
#include <stdio.h> #include <limits.h> #define MAX_SIZE 1000 int main ( ) { int arr [ MAX_SIZE ] , size , i ; int max1 , max2 ; printf ( " Enter size of the array ( 1-1000 ) : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } max1 = max2 = INT_MIN ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] > max1 ) { max2 = max1 ; max1 = arr [ i ] ; } else if ( arr [ i ] > max2 & & arr [ i ] < max1 ) { max2 = arr [ i ] ; } } printf ( " First largest = %d\n  " , max1 ) ; printf ( " Second largest = %d " , max2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char character = 'C' ; int integer = 1 ; float real = 10.4f ; long long biginteger = 989898989ll ; printf ( " Value of character = %c , Address of character = %u\n  " , character , & character ) ; printf ( " Value of integer = %d , Address of integer = %u\n  " , integer , & integer ) ; printf ( " Value of real = %f , Address of real = %u\n  " , real , & real ) ; printf ( " Value of biginteger = %lld , Address of biginteger = %u " , biginteger , & biginteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * ptr ; ptr = & num ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of ptr = %d\n  " , & ptr ) ; printf ( " Value of ptr = %d\n  " , ptr ) ; printf ( " Value pointed by ptr = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { float num1 , num2 ; float * ptr1 , * ptr2 ; float sum , diff , mult , div ; ptr1 = & num1 ; ptr2 = & num2 ; printf ( " Enter any two real numbers : " ) ; scanf ( " %f %f " , ptr1 , ptr2 ) ; sum = ( * ptr1 ) + ( * ptr2 ) ; diff = ( * ptr1 ) - ( * ptr2 ) ; mult = ( * ptr1 ) * ( * ptr2 ) ; div = ( * ptr1 ) / ( * ptr2 ) ; printf ( " Sum = %.2f\n  " , sum ) ; printf ( " Difference = %.2f\n  " , diff ) ; printf ( " Product = %.2f\n  " , mult ) ; printf ( " Quotient = %.2f\n  " , div ) ; return 0 ; }
#include <stdio.h> void swap ( int * num1 , int * num2 ) ; int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Before swapping in main n " ) ; printf ( " Value of num1 = %d \n  " , num1 ) ; printf ( " Value of num2 = %d \n \n  " , num2 ) ; swap ( & num1 , & num2 ) ; printf ( " After swapping in main n " ) ; printf ( " Value of num1 = %d \n  " , num1 ) ; printf ( " Value of num2 = %d \n \n  " , num2 ) ; return 0 ; } void swap ( int * num1 , int * num2 ) { int temp ; temp = * num1 ; * num1 = * num2 ; * num2 = temp ; printf ( " After swapping in swap function n " ) ; printf ( " Value of num1 = %d \n  " , * num1 ) ; printf ( " Value of num2 = %d \n \n  " , * num2 ) ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; int * ptr = arr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : \n  " ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Array elements : " ) ; for ( i = 0 ; i < N ; i + + ) { printf ( " %d , " , * ptr ) ; ptr + + ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; int * ptr = arr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : \n  " ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , ( ptr + i ) ) ; } printf ( " Array elements : " ) ; for ( i = 0 ; i < N ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; int * ptr = arr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : \n  " ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , & ptr [ i ] ) ; } printf ( " Array elements : " ) ; for ( i = 0 ; i < N ; i + + ) { printf ( " %d , " , i [ ptr ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 void printArray ( int arr [ ] , int size ) ; int main ( ) { int source_arr [ MAX_SIZE ] , dest_arr [ MAX_SIZE ] ; int size , i ; int * source_ptr = source_arr ; int * dest_ptr = dest_arr ; int * end_ptr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , ( source_ptr + i ) ) ; } end_ptr = & source_arr [ size - 1 ] ; printf ( " \n Source array before copying : " ) ; printArray ( source_arr , size ) ; printf ( " \n Destination array before copying : " ) ; printArray ( dest_arr , size ) ; while ( source_ptr < = end_ptr ) { * dest_ptr = * source_ptr ; source_ptr + + ; dest_ptr + + ; } printf ( " \n \n Source array after copying : " ) ; printArray ( source_arr , size ) ; printf ( " \n Destination array after copying : " ) ; printArray ( dest_arr , size ) ; return 0 ; } void printArray ( int * arr , int size ) { int i ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d , " , * ( arr + i ) ) ; } }
#include <stdio.h> #define MAX_SIZE 100 void inputArray ( int * arr , int size ) ; void printArray ( int * arr , int size ) ; void swapArray ( int * sourceArr , int * destArr , int size ) ; int main ( ) { int sourceArr [ MAX_SIZE ] ; int destArr [ MAX_SIZE ] ; int size ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d elements in source array : " , size ) ; inputArray ( sourceArr , size ) ; printf ( " Enter %d elements in destination array : " , size ) ; inputArray ( destArr , size ) ; printf ( " \n \n Source array before swapping : " ) ; printArray ( sourceArr , size ) ; printf ( " \n Destination array before swapping : " ) ; printArray ( destArr , size ) ; swapArray ( sourceArr , destArr , size ) ; printf ( " \n \n Source array after swapping : " ) ; printArray ( sourceArr , size ) ; printf ( " \n Destination array after swapping : " ) ; printArray ( destArr , size ) ; return 0 ; } void inputArray ( int * arr , int size ) { int * arrEnd = ( arr + ( size - 1 ) ) ; while ( arr < = arrEnd ) scanf ( " %d " , arr + + ) ; } void printArray ( int * arr , int size ) { int * arrEnd = ( arr + ( size - 1 ) ) ; while ( arr < = arrEnd ) printf ( " %d , " , * ( arr + + ) ) ; } void swapArray ( int * sourceArr , int * destArr , int size ) { int * sourceArrEnd = ( sourceArr + ( size - 1 ) ) ; int * destArrEnd = ( destArr + ( size - 1 ) ) ; while ( sourceArr < = sourceArrEnd & & destArr < = destArrEnd ) { * sourceArr ^ = * destArr ; * destArr ^ = * sourceArr ; * sourceArr ^ = * destArr ; sourceArr + + ; destArr + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void printArr ( int * arr , int size ) ; int main ( ) { int arr [ MAX_SIZE ] ; int size ; int * left = arr ; int * right ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; right = & arr [ size - 1 ] ; printf ( " Enter elements in array : " ) ; while ( left < = right ) { scanf ( " %d " , left + + ) ; } printf ( " \n Array before reverse : " ) ; printArr ( arr , size ) ; left = arr ; while ( left < right ) { * left ^ = * right ; * right ^ = * left ; * left ^ = * right ; left + + ; right-- ; } printf ( " \n Array after reverse : " ) ; printArr ( arr , size ) ; return 0 ; } void printArr ( int * arr , int size ) { int * arrEnd = ( arr + size - 1 ) ; while ( arr < = arrEnd ) { printf ( " %d , " , * arr ) ; arr + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void inputArray ( int * arr , int size ) ; int search ( int * arr , int size , int toSearch ) ; int main ( ) { int array [ MAX_SIZE ] ; int size , toSearch , searchIndex ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; inputArray ( array , size ) ; printf ( " Enter element to search : " ) ; scanf ( " %d " , & toSearch ) ; searchIndex = search ( array , size , toSearch ) ; if ( searchIndex = = -1 ) printf ( " %d does not exists in array. " , toSearch ) ; else printf ( " %d is found at %d position. " , toSearch , searchIndex + 1 ) ; return 0 ; } void inputArray ( int * arr , int size ) { int * arrEnd = ( arr + size - 1 ) ; while ( arr < = arrEnd ) { scanf ( " %d " , arr + + ) ; } } int search ( int * arr , int size , int toSearch ) { int index = 0 ; int * arrEnd = ( arr + size - 1 ) ; while ( arr < = arrEnd & & * arr ! = toSearch ) { arr + + ; index + + ; } if ( arr < = arrEnd ) return index ; return -1 ; }
#include <stdio.h> #define ROWS 3 #define COLS 3 void inputMatrix ( int matrix [ ] [ COLS ] , int rows , int cols ) ; void printMatrix ( int matrix [ ] [ COLS ] , int rows , int cols ) ; int main ( ) { int matrix [ ROWS ] [ COLS ] ; int i , j ; printf ( " Enter elements in %dx %d matrix.\n  " , ROWS , COLS ) ; inputMatrix ( matrix , ROWS , COLS ) ; printf ( " Elements of %dx %d matrix.\n  " , ROWS , COLS ) ; printMatrix ( matrix , ROWS , COLS ) ; return 0 ; } void inputMatrix ( int matrix [ ] [ COLS ] , int rows , int cols ) { int i , j ; for ( i = 0 ; i < rows ; i + + ) { for ( j = 0 ; j < cols ; j + + ) { scanf ( " %d " , ( * ( matrix + i ) + j ) ) ; } } } void printMatrix ( int ( * matrix ) [ COLS ] , int rows , int cols ) { int i , j ; for ( i = 0 ; i < rows ; i + + ) { for ( j = 0 ; j < cols ; j + + ) { printf ( " %d " , * ( * ( matrix + i ) + j ) ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int i ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { count + + ; } printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] ; char text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; for ( i = 0 ; text1 [ i ] ! = '\0' ; i + + ) { text2 [ i ] = text1 [ i ] ; } text2 [ i ] = '\0' ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] ; char text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = 0 ; while ( text1 [ i ] ! = '\0' ) { text2 [ i ] = text1 [ i ] ; i + + ; } text2 [ i ] = '\0' ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = -1 ; while ( text2 [ i ] = text1 [ + + i ] ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; char * str1 = text1 ; char * str2 = text2 ; printf ( " Enter any string : " ) ; gets ( text1 ) ; while ( * ( str2 + + ) = * ( str1 + + ) ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = 0 ; while ( str1 [ i ] ! = '\0' ) { i + + ; } j = 0 ; while ( str2 [ j ] ! = '\0' ) { str1 [ i ] = str2 [ j ] ; i + + ; j + + ; } str1 [ i ] = '\0' ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = -1 ; while ( str1 [ + + i ] ) ; j = 0 ; while ( str1 [ i + + ] = str2 [ j + + ] ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; char * s1 = str1 ; char * s2 = str2 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; while ( * ( + + s1 ) ) ; while ( * ( s1 + + ) = * ( s2 + + ) ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { int i = 0 ; while ( str1 [ i ] = = str2 [ i ] ) { if ( str1 [ i ] = = '\0' & & str2 [ i ] = = '\0' ) break ; i + + ; } return str1 [ i ] - str2 [ i ] ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { while ( ( * str1 & & * str2 ) & & ( * str1 = = * str2 ) ) { str1 + + ; str2 + + ; } return * str1 - * str2 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = strcmp ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res = = -1 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int i , strIndex , revIndex , len ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; while ( str [ i ] ! = '\0' ) i + + ; len = i ; revIndex = 0 ; strIndex = len - 1 ; while ( strIndex > = 0 ) { reverse [ revIndex ] = str [ strIndex ] ; strIndex-- ; revIndex + + ; } reverse [ revIndex ] = '\0' ; printf ( " \n Original string = %s\n  " , str ) ; printf ( " Reverse string = %s " , reverse ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; char * s = str ; char * r = reverse ; int len = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * ( s + + ) ) len + + ; s-- ; while ( len > = 0 ) { * ( r + + ) = * ( --s ) ; len-- ; } * r = '\0' ; printf ( " \n Original string = %s\n  " , str ) ; printf ( " Reverse string = %s " , reverse ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int * getNEvenNumbers ( const int N , int * numbers ) ; int main ( ) { int evenNumbers [ SIZE ] ; int i ; getNEvenNumbers ( SIZE , evenNumbers ) ; printf ( " First %d even numbers are : \n  " , SIZE ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d " , * ( evenNumbers + i ) ) ; } return 0 ; } int * getNEvenNumbers ( const int N , int * numbers ) { int i ; for ( i = 0 ; i < N ; i + + ) { * ( numbers + i ) = 2 * ( i + 1 ) ; } return numbers ; }
#include <stdio.h> #define MAX_SIZE 10 typedef struct MinMax { int min ; int max ; } MinMax ; MinMax getMinMax ( int * array , const int SIZE ) ; int main ( ) { int array [ MAX_SIZE ] ; int N , i ; MinMax arrayMinMax ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in array : " , N ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , ( array + i ) ) ; } arrayMinMax = getMinMax ( array , N ) ; printf ( " Minimum value in array : %d \n  " , arrayMinMax.min ) ; printf ( " Maximum value in array : %d \n  " , arrayMinMax.max ) ; return 0 ; } MinMax getMinMax ( int * numbers , const int SIZE ) { int i ; int min = * ( numbers + 0 ) ; int max = * ( numbers + 0 ) ; MinMax arrayMinMax ; for ( i = 0 ; i < SIZE ; i + + ) { if ( * ( numbers + i ) < min ) min = * ( numbers + i ) ; if ( * ( numbers + i ) > max ) max = * ( numbers + i ) ; } arrayMinMax.min = min ; arrayMinMax.max = max ; return arrayMinMax ; }
#include <stdio.h> #define MAX_SIZE 100 void getMinMax ( int * numbers , int size , int * min , int * max ) ; int main ( ) { int arr [ MAX_SIZE ] , size , i ; int min , max ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d elements in array : " , size ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , ( arr + i ) ) ; } getMinMax ( arr , size , & min , & max ) ; printf ( " Minimum element in array : %d\n  " , min ) ; printf ( " Maximum element in array : %d\n  " , max ) ; return 0 ; } void getMinMax ( int * numbers , int size , int * min , int * max ) { int i ; * min = * ( numbers + 0 ) ; * max = * ( numbers + 0 ) ; for ( i = 0 ; i < size ; i + + ) { if ( * ( numbers + i ) < * ( min ) ) * min = * ( numbers + i ) ; if ( * ( numbers + i ) > * ( max ) ) * max = * ( numbers + i ) ; } }
#include <stdio.h> void greetMorning ( ) ; void greeEvening ( ) ; void greetNight ( ) ; void greet ( void ( * greeter ) ( ) ) ; int main ( ) { greet ( greetMorning ) ; greet ( greeEvening ) ; greet ( greetNight ) ; return 0 ; } void greet ( void ( * greeter ) ( ) ) { greeter ( ) ; } void greetMorning ( ) { printf ( " Good , morning!\n  " ) ; } void greeEvening ( ) { printf ( " Good , evening!\n  " ) ; } void greetNight ( ) { printf ( " Good , night!\n  " ) ; }
#include <stdio.h> #include <stdlib.h> #define DATA_SIZE 1000 int main ( ) { char data [ DATA_SIZE ] ; FILE * fPtr ; fPtr = fopen ( " data / file1.txt " , " w " ) ; if ( fPtr = = NULL ) { printf ( " Unable to create file.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " Enter contents to store in file : \n  " ) ; fgets ( data , DATA_SIZE , stdin ) ; fputs ( data , fPtr ) ; fclose ( fPtr ) ; printf ( " File created and saved successfully. 🙂 \n  " ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fPtr ; char ch ; fPtr = fopen ( " data / file1.txt " , " r " ) ; if ( fPtr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading file contents character by character. \n \n  " ) ; do { ch = fgetc ( fPtr ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int main ( ) { FILE * fPtr ; char buffer [ BUFFER_SIZE ] ; int totalRead = 0 ; fPtr = fopen ( " data / file2.txt " , " r " ) ; if ( fPtr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading file contents line by line. \n \n  " ) ; while ( fgets ( buffer , BUFFER_SIZE , fPtr ) ! = NULL ) { totalRead = strlen ( buffer ) ; buffer [ totalRead - 1 ] = buffer [ totalRead - 1 ] = = '\n ' ? '\0' : buffer [ totalRead - 1 ] ; printf ( " %s\n  " , buffer ) ; } fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int isEven ( const int NUM ) ; int isPrime ( const int NUM ) ; int main ( ) { FILE * fPtrIn , * fPtrEven , * fPtrOdd , * fPtrPrime ; int num , success ; fPtrIn = fopen ( " data / numbers.txt " , " r " ) ; fPtrEven = fopen ( " data / even-numbers.txt " , " w " ) ; fPtrOdd = fopen ( " data / odd-numbers.txt " , " w " ) ; fPtrPrime = fopen ( " data / prime-numbers.txt " , " w " ) ; if ( fPtrIn = = NULL || fPtrEven = = NULL || fPtrOdd = = NULL || fPtrPrime = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading integers from file. \n \n  " ) ; do { success = fscanf ( fPtrIn , " %d " , & num ) ; if ( isPrime ( num ) ) fprintf ( fPtrPrime , " %d\n  " , num ) ; else if ( isEven ( num ) ) fprintf ( fPtrEven , " %d\n  " , num ) ; else fprintf ( fPtrOdd , " %d\n  " , num ) ; } while ( success ! = -1 ) ; fclose ( fPtrIn ) ; fclose ( fPtrEven ) ; fclose ( fPtrOdd ) ; fclose ( fPtrPrime ) ; printf ( " Data written to files successfully. " ) ; return 0 ; } int isEven ( const int NUM ) { return ! ( NUM & 1 ) ; } int isPrime ( const int NUM ) { int i ; if ( NUM < 0 ) return 0 ; for ( i = 2 ; i < = NUM / 2 ; i + + ) { if ( NUM % i = = 0 ) { return 0 ; } } return 1 ; }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 void readFile ( FILE * fPtr ) ; int main ( ) { FILE * fPtr ; char filePath [ 100 ] ; char dataToAppend [ BUFFER_SIZE ] ; printf ( " Enter file path : " ) ; scanf ( " %s " , filePath ) ; fPtr = fopen ( filePath , " a " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open ' %s' file.\n  " , filePath ) ; printf ( " Please check whether file exists and you have write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " \n Enter data to append : " ) ; fflush ( stdin ) ; fgets ( dataToAppend , BUFFER_SIZE , stdin ) ; fputs ( dataToAppend , fPtr ) ; fPtr = freopen ( filePath , " r " , fPtr ) ; printf ( " \n Successfully appended data to file. \n  " ) ; printf ( " Changed file contents : \n \n  " ) ; readFile ( fPtr ) ; fclose ( fPtr ) ; return 0 ; } void readFile ( FILE * fPtr ) { char ch ; do { ch = fgetc ( fPtr ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; }
#include <stdio.h> #include <stdlib.h> int compareFile ( FILE * fPtr1 , FILE * fPtr2 , int * line , int * col ) ; int main ( ) { FILE * fPtr1 ; FILE * fPtr2 ; char path1 [ 100 ] ; char path2 [ 100 ] ; int diff ; int line , col ; printf ( " Enter path of first file : " ) ; scanf ( " %s " , path1 ) ; printf ( " Enter path of second file : " ) ; scanf ( " %s " , path2 ) ; fPtr1 = fopen ( path1 , " r " ) ; fPtr2 = fopen ( path2 , " r " ) ; if ( fPtr1 = = NULL || fPtr2 = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } diff = compareFile ( fPtr1 , fPtr2 , & line , & col ) ; if ( diff = = 0 ) { printf ( " \n Both files are equal. " ) ; } else { printf ( " \n Files are not equal.\n  " ) ; printf ( " Line : %d , col : %d\n  " , line , col ) ; } fclose ( fPtr1 ) ; fclose ( fPtr2 ) ; return 0 ; } int compareFile ( FILE * fPtr1 , FILE * fPtr2 , int * line , int * col ) { char ch1 , ch2 ; * line = 1 ; * col = 0 ; do { ch1 = fgetc ( fPtr1 ) ; ch2 = fgetc ( fPtr2 ) ; if ( ch1 = = '\n ' ) { * line + = 1 ; * col = 0 ; } if ( ch1 ! = ch2 ) return -1 ; * col + = 1 ; } while ( ch1 ! = EOF & & ch2 ! = EOF ) ; if ( ch1 = = EOF & & ch2 = = EOF ) return 0 ; else return -1 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * sourceFile ; FILE * destFile ; char sourcePath [ 100 ] ; char destPath [ 100 ] ; char ch ; printf ( " Enter source file path : " ) ; scanf ( " %s " , sourcePath ) ; printf ( " Enter destination file path : " ) ; scanf ( " %s " , destPath ) ; sourceFile = fopen ( sourcePath , " r " ) ; destFile = fopen ( destPath , " w " ) ; if ( sourceFile = = NULL || destFile = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } ch = fgetc ( sourceFile ) ; while ( ch ! = EOF ) { fputc ( ch , destFile ) ; ch = fgetc ( sourceFile ) ; } printf ( " \n Files copied successfully.\n  " ) ; fclose ( sourceFile ) ; fclose ( destFile ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int fcpy ( FILE * sourceFile , FILE * destFile ) ; int main ( ) { FILE * sourceFile ; FILE * destFile ; char sourcePath [ 100 ] ; char destPath [ 100 ] ; int count ; printf ( " Enter source file path : " ) ; scanf ( " %s " , sourcePath ) ; printf ( " Enter destination file path : " ) ; scanf ( " %s " , destPath ) ; sourceFile = fopen ( sourcePath , " r " ) ; destFile = fopen ( destPath , " w " ) ; if ( sourceFile = = NULL || destFile = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } count = fcpy ( sourceFile , destFile ) ; printf ( " \n Files copied successfully.\n  " ) ; printf ( " %d characters copied.\n  " , count ) ; fclose ( sourceFile ) ; fclose ( destFile ) ; return 0 ; } int fcpy ( FILE * sourceFile , FILE * destFile ) { int count = 0 ; char ch ; while ( ( ch = fgetc ( sourceFile ) ) ! = EOF ) { fputc ( ch , destFile ) ; count + + ; } return count ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * sourceFile1 ; FILE * sourceFile2 ; FILE * destFile ; char sourcePath1 [ 100 ] ; char sourcePath2 [ 100 ] ; char destPath [ 100 ] ; char ch ; printf ( " Enter first source file path : " ) ; scanf ( " %s " , sourcePath1 ) ; printf ( " Enter second source file path : " ) ; scanf ( " %s " , sourcePath2 ) ; printf ( " Enter destination file path : " ) ; scanf ( " %s " , destPath ) ; sourceFile1 = fopen ( sourcePath1 , " r " ) ; sourceFile2 = fopen ( sourcePath2 , " r " ) ; destFile = fopen ( destPath , " w " ) ; if ( sourceFile1 = = NULL || sourceFile2 = = NULL || destFile = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( sourceFile1 ) ) ! = EOF ) fputc ( ch , destFile ) ; while ( ( ch = fgetc ( sourceFile2 ) ) ! = EOF ) fputc ( ch , destFile ) ; printf ( " \n Files merged successfully to ' %s'.\n  " , destPath ) ; fclose ( sourceFile1 ) ; fclose ( sourceFile2 ) ; fclose ( destFile ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * file ; char path [ 100 ] ; char ch ; int characters , words , lines ; printf ( " Enter source file path : " ) ; scanf ( " %s " , path ) ; file = fopen ( path , " r " ) ; if ( file = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } characters = words = lines = 0 ; while ( ( ch = fgetc ( file ) ) ! = EOF ) { characters + + ; if ( ch = = '\n ' || ch = = '\0' ) lines + + ; if ( ch = = ' ' || ch = = '\t' || ch = = '\n ' || ch = = '\0' ) words + + ; } if ( characters > 0 ) { words + + ; lines + + ; } printf ( " \n  " ) ; printf ( " Total characters = %d\n  " , characters ) ; printf ( " Total words = %d\n  " , words ) ; printf ( " Total lines = %d\n  " , lines ) ; fclose ( file ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 void deleteLine ( FILE * srcFile , FILE * tempFile , const int line ) ; void printFile ( FILE * fptr ) ; int main ( ) { FILE * srcFile ; FILE * tempFile ; char path [ 100 ] ; int line ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter line number to remove : " ) ; scanf ( " %d " , & line ) ; srcFile = fopen ( path , " r " ) ; tempFile = fopen ( " delete-line.tmp " , " w " ) ; if ( srcFile = = NULL || tempFile = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " \n File contents before removing line.\n \n  " ) ; printFile ( srcFile ) ; rewind ( srcFile ) ; deleteLine ( srcFile , tempFile , line ) ; fclose ( srcFile ) ; fclose ( tempFile ) ; remove ( path ) ; rename ( " delete-line.tmp " , path ) ; printf ( " \n \n \n File contents after removing %d line.\n \n  " , line ) ; srcFile = fopen ( path , " r " ) ; printFile ( srcFile ) ; fclose ( srcFile ) ; return 0 ; } void printFile ( FILE * fptr ) { char ch ; while ( ( ch = fgetc ( fptr ) ) ! = EOF ) putchar ( ch ) ; } void deleteLine ( FILE * srcFile , FILE * tempFile , const int line ) { char buffer [ BUFFER_SIZE ] ; int count = 1 ; while ( ( fgets ( buffer , BUFFER_SIZE , srcFile ) ) ! = NULL ) { if ( line ! = count ) fputs ( buffer , tempFile ) ; count + + ; } }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 int isEmpty ( const char * str ) ; void removeEmptyLines ( FILE * srcFile , FILE * tempFile ) ; void printFile ( FILE * fptr ) ; int main ( ) { FILE * srcFile ; FILE * tempFile ; char path [ 100 ] ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; srcFile = fopen ( path , " r " ) ; tempFile = fopen ( " remove-blanks.tmp " , " w " ) ; if ( srcFile = = NULL || tempFile = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " \n File contents before removing all empty lines.\n \n  " ) ; printFile ( srcFile ) ; rewind ( srcFile ) ; removeEmptyLines ( srcFile , tempFile ) ; fclose ( srcFile ) ; fclose ( tempFile ) ; remove ( path ) ; rename ( " remove-blanks.tmp " , path ) ; printf ( " \n \n \n File contents after removing all empty line.\n \n  " ) ; srcFile = fopen ( path , " r " ) ; printFile ( srcFile ) ; fclose ( srcFile ) ; return 0 ; } void printFile ( FILE * fptr ) { char ch ; while ( ( ch = fgetc ( fptr ) ) ! = EOF ) putchar ( ch ) ; } int isEmpty ( const char * str ) { char ch ; do { ch = * ( str + + ) ; if ( ch ! = ' ' & & ch ! = '\t' & & ch ! = '\n ' & & ch ! = '\r' & & ch ! = '\0' ) return 0 ; } while ( ch ! = '\0' ) ; return 1 ; } void removeEmptyLines ( FILE * srcFile , FILE * tempFile ) { char buffer [ BUFFER_SIZE ] ; while ( ( fgets ( buffer , BUFFER_SIZE , srcFile ) ) ! = NULL ) { if ( !isEmpty ( buffer ) ) fputs ( buffer , tempFile ) ; } }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int indexOf ( FILE * fptr , const char * word , int * line , int * col ) ; int main ( ) { FILE * fptr ; char path [ 100 ] ; char word [ 50 ] ; int line , col ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to search in file : " ) ; scanf ( " %s " , word ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } indexOf ( fptr , word , & line , & col ) ; if ( line ! = -1 ) printf ( " ' %s' found at line : %d , col : %d\n  " , word , line + 1 , col + 1 ) ; else printf ( " ' %s' does not exists. " , word ) ; fclose ( fptr ) ; return 0 ; } int indexOf ( FILE * fptr , const char * word , int * line , int * col ) { char str [ BUFFER_SIZE ] ; char * pos ; * line = -1 ; * col = -1 ; while ( ( fgets ( str , BUFFER_SIZE , fptr ) ) ! = NULL ) { * line + = 1 ; pos = strstr ( str , word ) ; if ( pos ! = NULL ) { * col = ( pos - str ) ; break ; } } if ( * col = = -1 ) * line = -1 ; return * col ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int lastIndexOf ( FILE * fptr , const char * word , int * line , int * col ) ; int main ( ) { FILE * fptr ; char path [ 100 ] ; char word [ 50 ] ; int line , col ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to search in file : " ) ; scanf ( " %s " , word ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } lastIndexOf ( fptr , word , & line , & col ) ; if ( line ! = -1 ) printf ( " Last index of ' %s' line : %d , col : %d\n  " , word , line + 1 , col + 1 ) ; else printf ( " ' %s' does not exists. " , word ) ; fclose ( fptr ) ; return 0 ; } int lastIndexOf ( FILE * fptr , const char * word , int * line , int * col ) { char str [ BUFFER_SIZE ] ; char * pos ; int lfound , cfound ; * line = -1 ; * col = -1 ; lfound = -1 ; cfound = -1 ; while ( ( fgets ( str , BUFFER_SIZE , fptr ) ) ! = NULL ) { * line + = 1 ; * col = -1 ; while ( ( pos = strstr ( str + * col + 1 , word ) ) ! = NULL ) { * col = ( pos - str ) ; lfound = * line ; cfound = * col ; } } if ( cfound = = -1 ) { * line = -1 ; * col = -1 ; } else { * line = lfound ; * col = cfound ; } return * col ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int countOccurrences ( FILE * fptr , const char * word ) ; int main ( ) { FILE * fptr ; char path [ 100 ] ; char word [ 50 ] ; int wCount ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to search in file : " ) ; scanf ( " %s " , word ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } wCount = countOccurrences ( fptr , word ) ; printf ( " ' %s' is found %d times in file. " , word , wCount ) ; fclose ( fptr ) ; return 0 ; } int countOccurrences ( FILE * fptr , const char * word ) { char str [ BUFFER_SIZE ] ; char * pos ; int index , count ; count = 0 ; while ( ( fgets ( str , BUFFER_SIZE , fptr ) ) ! = NULL ) { index = 0 ; while ( ( pos = strstr ( str + index , word ) ) ! = NULL ) { index = ( pos - str ) + 1 ; count + + ; } } return count ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #include <ctype.h> #define MAX_WORDS 1000 int main ( ) { FILE * fptr ; char path [ 100 ] ; int i , len , index , isUnique ; char words [ MAX_WORDS ] [ 50 ] ; char word [ 50 ] ; int count [ MAX_WORDS ] ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } for ( i = 0 ; i <MAX_WORDS ; i + + ) count [ i ] = 0 ; index = 0 ; while ( fscanf ( fptr , " %s " , word ) ! = EOF ) { strlwr ( word ) ; len = strlen ( word ) ; if ( ispunct ( word [ len - 1 ] ) ) word [ len - 1 ] = '\0' ; isUnique = 1 ; for ( i = 0 ; i <index & & isUnique ; i + + ) { if ( strcmp ( words [ i ] , word ) = = 0 ) isUnique = 0 ; } if ( isUnique ) { strcpy ( words [ index ] , word ) ; count [ index ] + + ; index + + ; } else { count [ i - 1 ] + + ; } } fclose ( fptr ) ; printf ( " \n Occurrences of all distinct words in file : \n  " ) ; for ( i = 0 ; i <index ; i + + ) { printf ( " %-15s = > %d\n  " , words [ i ] , count [ i ] ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 void replaceAll ( char * str , const char * oldWord , const char * newWord ) ; int main ( ) { FILE * fPtr ; FILE * fTemp ; char path [ 100 ] ; char buffer [ BUFFER_SIZE ] ; char oldWord [ 100 ] , newWord [ 100 ] ; printf ( " Enter path of source file : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to replace : " ) ; scanf ( " %s " , oldWord ) ; printf ( " Replace ' %s' with : " ) ; scanf ( " %s " , newWord ) ; fPtr = fopen ( path , " r " ) ; fTemp = fopen ( " replace.tmp " , " w " ) ; if ( fPtr = = NULL || fTemp = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } while ( ( fgets ( buffer , BUFFER_SIZE , fPtr ) ) ! = NULL ) { replaceAll ( buffer , oldWord , newWord ) ; fputs ( buffer , fTemp ) ; } fclose ( fPtr ) ; fclose ( fTemp ) ; remove ( path ) ; rename ( " replace.tmp " , path ) ; printf ( " \n Successfully replaced all occurrences of ' %s' with ' %s'. " , oldWord , newWord ) ; return 0 ; } void replaceAll ( char * str , const char * oldWord , const char * newWord ) { char * pos , temp [ BUFFER_SIZE ] ; int index = 0 ; int owlen ; owlen = strlen ( oldWord ) ; while ( ( pos = strstr ( str , oldWord ) ) ! = NULL ) { strcpy ( temp , str ) ; index = pos - str ; str [ index ] = '\0' ; strcat ( str , newWord ) ; strcat ( str , temp + index + owlen ) ; } }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 int main ( ) { FILE * fPtr ; FILE * fTemp ; char path [ 100 ] ; char buffer [ BUFFER_SIZE ] ; char newline [ BUFFER_SIZE ] ; int line , count ; printf ( " Enter path of source file : " ) ; scanf ( " %s " , path ) ; printf ( " Enter line number to replace : " ) ; scanf ( " %d " , & line ) ; fflush ( stdin ) ; printf ( " Replace ' %d' line with : " , line ) ; fgets ( newline , BUFFER_SIZE , stdin ) ; fPtr = fopen ( path , " r " ) ; fTemp = fopen ( " replace.tmp " , " w " ) ; if ( fPtr = = NULL || fTemp = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } count = 0 ; while ( ( fgets ( buffer , BUFFER_SIZE , fPtr ) ) ! = NULL ) { count + + ; if ( count = = line ) fputs ( newline , fTemp ) ; else fputs ( buffer , fTemp ) ; } fclose ( fPtr ) ; fclose ( fTemp ) ; remove ( path ) ; rename ( " replace.tmp " , path ) ; printf ( " \n Successfully replaced ' %d' line with ' %s'. " , line , newline ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fPtr ; char ch ; fPtr = fopen ( __FILE__ , " r " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } while ( ( ch = fgetc ( fPtr ) ) ! = EOF ) { printf ( " %c " , ch ) ; } fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> void toggleCase ( FILE * fptr , const char * path ) ; int main ( ) { FILE * fPtr ; char path [ 100 ] ; printf ( " Enter path of source file : " ) ; scanf ( " %s " , path ) ; fPtr = fopen ( path , " r " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } toggleCase ( fPtr , path ) ; printf ( " \n Successfully converted characters in file from uppercase to lowercase and vice versa.\n  " ) ; return 0 ; } void toggleCase ( FILE * fptr , const char * path ) { FILE * dest ; char ch ; dest = fopen ( " toggle.tmp " , " w " ) ; if ( dest = = NULL ) { printf ( " Unable to toggle case. " ) ; fclose ( fptr ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( fptr ) ) ! = EOF ) { if ( isupper ( ch ) ) ch = tolower ( ch ) ; else if ( islower ( ch ) ) ch = toupper ( ch ) ; fputc ( ch , dest ) ; } fclose ( fptr ) ; fclose ( dest ) ; remove ( path ) ; rename ( " toggle.tmp " , path ) ; }
#include <stdio.h> #include <unistd.h> #include <sys / stat.h> #include <time.h> void printFileProperties ( struct stat stats ) ; int main ( ) { char path [ 100 ] ; struct stat stats ; printf ( " Enter source file path : " ) ; scanf ( " %s " , path ) ; if ( stat ( path , & stats ) = = 0 ) { printFileProperties ( stats ) ; } else { printf ( " Unable to get file properties.\n  " ) ; printf ( " Please check whether ' %s' file exists.\n  " , path ) ; } return 0 ; } void printFileProperties ( struct stat stats ) { struct tm dt ; printf ( " \n File access : " ) ; if ( stats.st_mode & R_OK ) printf ( " read " ) ; if ( stats.st_mode & W_OK ) printf ( " write " ) ; if ( stats.st_mode & X_OK ) printf ( " execute " ) ; printf ( " \n File size : %d " , stats.st_size ) ; dt = * ( gmtime ( & stats.st_ctime ) ) ; printf ( " \n Created on : %d- %d- %d %d : %d : %d " , dt.tm_mday , dt.tm_mon , dt.tm_year + 1900 , dt.tm_hour , dt.tm_min , dt.tm_sec ) ; dt = * ( gmtime ( & stats.st_mtime ) ) ; printf ( " \n Modified on : %d- %d- %d %d : %d : %d " , dt.tm_mday , dt.tm_mon , dt.tm_year + 1900 , dt.tm_hour , dt.tm_min , dt.tm_sec ) ; }
#include <stdio.h> #include <unistd.h> #include <io.h> #include <sys / stat.h> int isFileExists ( const char * path ) ; int isFileExistsAccess ( const char * path ) ; int isFileExistsStats ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter source file path : " ) ; scanf ( " %s " , path ) ; if ( isFileExistsAccess ( path ) ) { printf ( " File exists at path ' %s'\n  " , path ) ; } else { printf ( " File does not exists at path ' %s'\n  " , path ) ; } return 0 ; } int isFileExists ( const char * path ) { FILE * fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) return 0 ; fclose ( fptr ) ; return 1 ; } int isFileExistsAccess ( const char * path ) { if ( access ( path , F_OK ) = = -1 ) return 0 ; return 1 ; } int isFileExistsStats ( const char * path ) { struct stat stats ; stat ( path , & stats ) ; if ( stats.st_mode & F_OK ) return 1 ; return 0 ; }
#include <stdio.h> #include <unistd.h> #include <sys / stat.h> int isDirectoryExists ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter directory path : " ) ; scanf ( " %s " , path ) ; if ( isDirectoryExists ( path ) ) { printf ( " Directory exists at path ' %s'\n  " , path ) ; } else { printf ( " Directory does not exists at path ' %s'\n  " , path ) ; } return 0 ; } int isDirectoryExists ( const char * path ) { struct stat stats ; stat ( path , & stats ) ; if ( S_ISDIR ( stats.st_mode ) ) return 1 ; return 0 ; }
#include <stdio.h> int main ( ) { char oldName [ 100 ] , newName [ 100 ] ; printf ( " Enter old file path : " ) ; scanf ( " %s " , oldName ) ; printf ( " Enter new file path : " ) ; scanf ( " %s " , newName ) ; if ( rename ( oldName , newName ) = = 0 ) { printf ( " File renamed successfully.\n  " ) ; } else { printf ( " Unable to rename files. Please check files exist and you have permissions to modify files.\n  " ) ; } return 0 ; }
#include <stdio.h> #include <sys / types.h> #include <dirent.h> void listFiles ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; listFiles ( path ) ; return 0 ; } void listFiles ( const char * path ) { struct dirent * dp ; DIR * dir = opendir ( path ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { printf ( " %s\n  " , dp-> d_name ) ; } closedir ( dir ) ; }
#include <stdio.h> #include <string.h> void listFilesRecursively ( char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; listFilesRecursively ( path ) ; return 0 ; } void listFilesRecursively ( char * basePath ) { char path [ 1000 ] ; struct dirent * dp ; DIR * dir = opendir ( basePath ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { if ( strcmp ( dp-> d_name , " . " ) ! = 0 & & strcmp ( dp-> d_name , " .. " ) ! = 0 ) { printf ( " %s\n  " , dp-> d_name ) ; strcpy ( path , basePath ) ; strcat ( path , " / " ) ; strcat ( path , dp-> d_name ) ; listFilesRecursively ( path ) ; } } closedir ( dir ) ; } }
#include <stdio.h> #include <string.h> #include <sys / types.h> #include <dirent.h> void tree ( char * basePath , const int root ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; tree ( path , 0 ) ; return 0 ; } void tree ( char * basePath , const int root ) { int i ; char path [ 1000 ] ; struct dirent * dp ; DIR * dir = opendir ( basePath ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { if ( strcmp ( dp-> d_name , " . " ) ! = 0 & & strcmp ( dp-> d_name , " .. " ) ! = 0 ) { for ( i = 0 ; i <root ; i + + ) { if ( i %2 = = 0 || i = = 0 ) printf ( " %c " , 179 ) ; else printf ( " " ) ; } printf ( " %c %c %s\n  " , 195 , 196 , dp-> d_name ) ; strcpy ( path , basePath ) ; strcat ( path , " / " ) ; strcat ( path , dp-> d_name ) ; tree ( path , root + 2 ) ; } } closedir ( dir ) ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } * head ; void createList ( int n ) ; void traverseList ( ) ; int main ( ) { int n ; printf ( " Enter the total number of nodes : " ) ; scanf ( " %d " , & n ) ; createList ( n ) ; printf ( " \n Data in the list \n  " ) ; traverseList ( ) ; return 0 ; } void createList ( int n ) { struct node * newNode , * temp ; int data , i ; head = ( struct node * ) malloc ( sizeof ( struct node ) ) ; if ( head = = NULL ) { printf ( " Unable to allocate memory. " ) ; exit ( 0 ) ; } printf ( " Enter the data of node 1 : " ) ; scanf ( " %d " , & data ) ; head-> data = data ; head-> next = NULL ; temp = head ; for ( i = 2 ; i < = n ; i + + ) { newNode = ( struct node * ) malloc ( sizeof ( struct node ) ) ; if ( newNode = = NULL ) { printf ( " Unable to allocate memory. " ) ; break ; } printf ( " Enter the data of node %d : " , i ) ; scanf ( " %d " , & data ) ; newNode-> data = data ; newNode-> next = NULL ; temp-> next = newNode ; temp = temp-> next ; } } void traverseList ( ) { struct node * temp ; if ( head = = NULL ) { printf ( " List is empty. " ) ; return ; } temp = head ; while ( temp ! = NULL ) { printf ( " Data = %d\n  " , temp-> data ) ; temp = temp-> next ; } }
#include <stdio.h> #define EVEN_ODD ( num ) \ if ( num & 1 ) \ printf ( " %d is odd\n  " , num ) ; \ else \ printf ( " %d is even\n  " , num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; EVEN_ODD ( num ) ; return 0 ; }
#include <stdio.h> #define EVEN_ODD ( num ) \ if ( num & 1 ) \ printf ( " %d is odd\n  " , num ) ; \ else \ printf ( " %d is even\n  " , num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; EVEN_ODD ( num ) ; return 0 ; }
#include <stdio.h> #define IS_UPPER ( x ) ( x > = 'A' & & x < = 'Z' ) #define IS_LOWER ( x ) ( x > = 'a' & & x < = 'z' ) int main ( ) { char ch ; printf ( " Enter any character : " ) ; ch = getchar ( ) ; if ( IS_UPPER ( ch ) ) printf ( " ' %c' is uppercase\n  " , ch ) ; else if ( IS_LOWER ( ch ) ) printf ( " ' %c' is lowercase\n  " , ch ) ; else printf ( " Entered character is not alphabet " ) ; return 0 ; }
#include <stdio.h> #define IS_UPPER ( x ) ( x > = 'A' & & x < = 'Z' ) #define IS_LOWER ( x ) ( x > = 'a' & & x < = 'z' ) int main ( ) { char ch ; printf ( " Enter any character : " ) ; ch = getchar ( ) ; if ( IS_UPPER ( ch ) ) printf ( " ' %c' is uppercase\n  " , ch ) ; else if ( IS_LOWER ( ch ) ) printf ( " ' %c' is lowercase\n  " , ch ) ; else printf ( " Entered character is not alphabet " ) ; return 0 ; }
#include <stdio.h> #define MAX ( x , y ) ( x > y ? x : y ) #define MIN ( x , y ) ( x < y ? x : y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two number to check max and min : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " MAX ( %d , %d ) = %d\n  " , num1 , num2 , MAX ( num1 , num2 ) ) ; printf ( " MIN ( %d , %d ) = %d\n  " , num1 , num2 , MIN ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> #define MAX ( x , y ) ( x > y ? x : y ) #define MIN ( x , y ) ( x < y ? x : y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two number to check max and min : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " MAX ( %d , %d ) = %d\n  " , num1 , num2 , MAX ( num1 , num2 ) ) ; printf ( " MIN ( %d , %d ) = %d\n  " , num1 , num2 , MIN ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> #define IS_ODD ( x ) ( x & 1 ) int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( IS_ODD ( num ) ) printf ( " %d is ODD\n  " , num ) ; else printf ( " %d is EVEN\n  " , num ) ; return 0 ; }
#include <stdio.h> #define IS_ODD ( x ) ( x & 1 ) int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( IS_ODD ( num ) ) printf ( " %d is ODD\n  " , num ) ; else printf ( " %d is EVEN\n  " , num ) ; return 0 ; }
#include <stdio.h> #define SQUARE ( x ) ( x * x ) #define CUBE ( x ) ( x * x * x ) int main ( ) { int num ; printf ( " Enter any number to find square and cube : " ) ; scanf ( " %d " , & num ) ; printf ( " SQUARE ( %d ) = %d\n  " , num , SQUARE ( num ) ) ; printf ( " CUBE ( %d ) = %d\n  " , num , CUBE ( num ) ) ; return 0 ; }
#include <stdio.h> #define SQUARE ( x ) ( x * x ) #define CUBE ( x ) ( x * x * x ) int main ( ) { int num ; printf ( " Enter any number to find square and cube : " ) ; scanf ( " %d " , & num ) ; printf ( " SQUARE ( %d ) = %d\n  " , num , SQUARE ( num ) ) ; printf ( " CUBE ( %d ) = %d\n  " , num , CUBE ( num ) ) ; return 0 ; }
#include <stdio.h> #define SUM ( x , y ) ( x + y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Sum ( %d , %d ) = %d\n  " , num1 , num2 , SUM ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> #define SUM ( x , y ) ( x + y ) int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Sum ( %d , %d ) = %d\n  " , num1 , num2 , SUM ( num1 , num2 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14 int main ( ) { printf ( " Value of PI : %f\n  " , PI ) ; #ifdef PI #undef PI #endif #define PI 3.14159 printf ( " Value of PI after redefinition : %f " , PI ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14 int main ( ) { printf ( " Value of PI : %f\n  " , PI ) ; #ifdef PI #undef PI #endif #define PI 3.14159 printf ( " Value of PI after redefinition : %f " , PI ) ; return 0 ; }
#include <stdio.h> #include " arith.h " int main ( ) { printf ( " sum ( 10 , 20 ) = %.2f\n  " , sum ( 10 , 20 ) ) ; printf ( " sub ( 10 , 20 ) = %.2f\n  " , sub ( 10 , 20 ) ) ; printf ( " mult ( 10 , 20 ) = %.2f\n  " , mult ( 10 , 20 ) ) ; printf ( " div ( 10 , 20 ) = %.2f\n  " , div ( 10 , 20 ) ) ; printf ( " mod ( 10 , 20 ) = %d\n  " , mod ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> #include " arith.h " int main ( ) { printf ( " sum ( 10 , 20 ) = %.2f\n  " , sum ( 10 , 20 ) ) ; printf ( " sub ( 10 , 20 ) = %.2f\n  " , sub ( 10 , 20 ) ) ; printf ( " mult ( 10 , 20 ) = %.2f\n  " , mult ( 10 , 20 ) ) ; printf ( " div ( 10 , 20 ) = %.2f\n  " , div ( 10 , 20 ) ) ; printf ( " mod ( 10 , 20 ) = %d\n  " , mod ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerVar ; printf ( " Size of char = %d\n  " , sizeof ( char ) ) ; printf ( " Size of int = %d\n  " , sizeof ( integerVar ) ) ; printf ( " Size of expression ( 3 + 2.5 ) = %d\n  " , sizeof ( 3 + 2.5 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sizeof ( char ) = %d\n \n  " , sizeof ( char ) ) ; printf ( " sizeof ( short ) = %d\n  " , sizeof ( short ) ) ; printf ( " sizeof ( int ) = %d\n  " , sizeof ( int ) ) ; printf ( " sizeof ( long ) = %d\n  " , sizeof ( long ) ) ; printf ( " sizeof ( long long ) = %d\n \n  " , sizeof ( long long ) ) ; printf ( " sizeof ( float ) = %d\n  " , sizeof ( float ) ) ; printf ( " sizeof ( double ) = %d\n  " , sizeof ( double ) ) ; printf ( " sizeof ( long double ) = %d\n  " , sizeof ( long double ) ) ; return 0 ; }
#include <stdio.h> void printUnsignedRange ( int bytes ) { int bits = 8 * bytes ; unsigned long long to = ( 1LLU < < ( bits - 1 ) ) + ( ( 1LL < < ( bits - 1 ) ) - 1 ) ; ; printf ( " 0 to %llu\n \n  " , to ) ; } void printSignedRange ( int bytes ) { int bits = 8 * bytes ; long long from = - ( 1LL < < ( bits - 1 ) ) ; long long to = ( 1LL < < ( bits - 1 ) ) - 1 ; printf ( " %lld to %lld\n \n  " , from , to ) ; } int main ( ) { printf ( " Range of char = " ) ; printSignedRange ( sizeof ( char ) ) ; printf ( " Range of unsigned char = " ) ; printUnsignedRange ( sizeof ( unsigned char ) ) ; printf ( " Range of short = " ) ; printSignedRange ( sizeof ( short ) ) ; printf ( " Range of unsigned short = " ) ; printUnsignedRange ( sizeof ( unsigned short ) ) ; printf ( " Range of int = " ) ; printSignedRange ( sizeof ( int ) ) ; printf ( " Range of unsigned int = " ) ; printUnsignedRange ( sizeof ( unsigned int ) ) ; printf ( " Range of long = " ) ; printSignedRange ( sizeof ( long ) ) ; printf ( " Range of unsigned long = " ) ; printUnsignedRange ( sizeof ( unsigned long ) ) ; printf ( " Range of long long = " ) ; printSignedRange ( sizeof ( long long ) ) ; printf ( " Range of unsigned long long = " ) ; printUnsignedRange ( sizeof ( unsigned long long ) ) ; return 0 ; }
#include <stdio.h> #include <limits.h> #include <float.h> int main ( ) { printf ( " Range of signed char %d to %d\n  " , SCHAR_MIN , SCHAR_MAX ) ; printf ( " Range of unsigned char 0 to %d\n \n  " , UCHAR_MAX ) ; printf ( " Range of signed short int %d to %d\n  " , SHRT_MIN , SHRT_MAX ) ; printf ( " Range of unsigned short int 0 to %d\n \n  " , USHRT_MAX ) ; printf ( " Range of signed int %d to %d\n  " , INT_MIN , INT_MAX ) ; printf ( " Range of unsigned int 0 to %lu\n \n  " , UINT_MAX ) ; printf ( " Range of signed long int %ld to %ld\n  " , LONG_MIN , LONG_MAX ) ; printf ( " Range of unsigned long int 0 to %lu\n \n  " , ULONG_MAX ) ; printf ( " Range of signed long long int %lld to %lld\n  " , LONG_LONG_MIN , LONG_LONG_MAX ) ; printf ( " Range of unsigned long long int 0 to %llu\n \n  " , ULONG_LONG_MAX ) ; printf ( " Range of float %e to %e\n  " , FLT_MIN , FLT_MAX ) ; printf ( " Range of double %e to %e\n  " , DBL_MIN , DBL_MAX ) ; printf ( " Range of long double %e to %e\n  " , LDBL_MIN , LDBL_MAX ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( isupper ( ch ) ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( islower ( ch ) ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { float num1 , num2 ; float * ptr1 , * ptr2 ; float sum , diff , mult , div ; ptr1 = & num1 ; ptr2 = & num2 ; printf ( " Enter any two real numbers : " ) ; scanf ( " %f %f " , ptr1 , ptr2 ) ; sum = ( * ptr1 ) + ( * ptr2 ) ; diff = ( * ptr1 ) - ( * ptr2 ) ; mult = ( * ptr1 ) * ( * ptr2 ) ; div = ( * ptr1 ) / ( * ptr2 ) ; printf ( " Sum = %.2f\n  " , sum ) ; printf ( " Difference = %.2f\n  " , diff ) ; printf ( " Product = %.2f\n  " , mult ) ; printf ( " Quotient = %.2f\n  " , div ) ; return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( side1 = = side2 & & side2 = = side3 ) { printf ( " Equilateral triangle. " ) ; } else if ( side1 = = side2 || side1 = = side3 || side2 = = side3 ) { printf ( " Isosceles triangle. " ) ; } else { printf ( " Scalene triangle. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , i , terms ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & terms ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; for ( i = 1 ; i < = terms ; i + + ) { printf ( " %d , " , c ) ; a = b ; b = c ; c = a + b ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , start , end ; printf ( " Enter starting term : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end term : " ) ; scanf ( " %d " , & end ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; while ( c < = end ) { if ( c > = start ) { printf ( " %d , " , c ) ; } a = b ; b = c ; c = a + b ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter year : " ) ; scanf ( " %d " , & year ) ; if ( ( ( year % 4 = = 0 ) & & ( year % 100 ! = 0 ) ) || ( year % 400 = = 0 ) ) { printf ( " LEAP YEAR " ) ; } else { printf ( " COMMON YEAR " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int base , exponent ; long long power = 1 ; int i ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %d " , & exponent ) ; for ( i = 1 ; i < = exponent ; i + + ) { power = power * base ; } printf ( " %d ^ %d = %lld " , base , exponent , power ) ; return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month = = 1 ) { printf ( " 31 days " ) ; } else if ( month = = 2 ) { printf ( " 28 or 29 days " ) ; } else if ( month = = 3 ) { printf ( " 31 days " ) ; } else if ( month = = 4 ) { printf ( " 30 days " ) ; } else if ( month = = 5 ) { printf ( " 31 days " ) ; } else if ( month = = 6 ) { printf ( " 30 days " ) ; } else if ( month = = 7 ) { printf ( " 31 days " ) ; } else if ( month = = 8 ) { printf ( " 31 days " ) ; } else if ( month = = 9 ) { printf ( " 30 days " ) ; } else if ( month = = 10 ) { printf ( " 31 days " ) ; } else if ( month = = 11 ) { printf ( " 30 days " ) ; } else if ( month = = 12 ) { printf ( " 31 days " ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month = = 1 || month = = 3 || month = = 5 || month = = 7 || month = = 8 || month = = 10 || month = = 12 ) { printf ( " 31 days " ) ; } else if ( month = = 4 || month = = 6 || month = = 9 || month = = 11 ) { printf ( " 30 days " ) ; } else if ( month = = 2 ) { printf ( " 28 or 29 days " ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { const int MONTHS [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month > = 1 & & month < = 12 ) { printf ( " %d days " , MONTHS [ month - 1 ] ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int angle1 , angle2 , angle3 , sum ; printf ( " Enter three angles of triangle : \n  " ) ; scanf ( " %d %d %d " , & angle1 , & angle2 , & angle3 ) ; sum = angle1 + angle2 + angle3 ; if ( sum = = 180 & & angle1 ! = 0 & & angle2 ! = 0 & & angle3 ! = 0 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 ) > side3 ) { if ( ( side2 + side3 ) > side1 ) { if ( ( side1 + side3 ) > side2 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } } else { printf ( " Triangle is not valid. " ) ; } } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; int valid = 0 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 ) > side3 ) { if ( ( side2 + side3 ) > side1 ) { if ( ( side1 + side3 ) > side2 ) { valid = 1 ; } } } if ( valid = = 1 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 > side3 ) & & ( side1 + side3 > side2 ) & & ( side2 + side3 > side1 ) ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int phy , chem , bio , math , comp ; float per ; printf ( " Enter five subjects marks : " ) ; scanf ( " %d %d %d %d %d " , & phy , & chem , & bio , & math , & comp ) ; per = ( phy + chem + bio + math + comp ) / 5.0 ; printf ( " Percentage = %.2f\n  " , per ) ; if ( per > = 90 ) { printf ( " Grade A " ) ; } else if ( per > = 80 ) { printf ( " Grade B " ) ; } else if ( per > = 70 ) { printf ( " Grade C " ) ; } else if ( per > = 60 ) { printf ( " Grade D " ) ; } else if ( per > = 40 ) { printf ( " Grade E " ) ; } else { printf ( " Grade F " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , n , sum = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements in the array : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <n ; i + + ) { sum = sum + arr [ i ] ; } printf ( " Sum of all elements of array = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , n , sum = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements in the array : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; sum + = arr [ i ] ; } printf ( " Sum of all elements of array = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int amount ; int note500 , note100 , note50 , note20 , note10 , note5 , note2 , note1 ; note500 = note100 = note50 = note20 = note10 = note5 = note2 = note1 = 0 ; printf ( " Enter amount : " ) ; scanf ( " %d " , & amount ) ; if ( amount > = 500 ) { note500 = amount / 500 ; amount - = note500 * 500 ; } if ( amount > = 100 ) { note100 = amount / 100 ; amount - = note100 * 100 ; } if ( amount > = 50 ) { note50 = amount / 50 ; amount - = note50 * 50 ; } if ( amount > = 20 ) { note20 = amount / 20 ; amount - = note20 * 20 ; } if ( amount > = 10 ) { note10 = amount / 10 ; amount - = note10 * 10 ; } if ( amount > = 5 ) { note5 = amount / 5 ; amount - = note5 * 5 ; } if ( amount > = 2 ) { note2 = amount / 2 ; amount - = note2 * 2 ; } if ( amount > = 1 ) { note1 = amount ; } printf ( " Total number of notes = \n  " ) ; printf ( " 500 = %d\n  " , note500 ) ; printf ( " 100 = %d\n  " , note100 ) ; printf ( " 50 = %d\n  " , note50 ) ; printf ( " 20 = %d\n  " , note20 ) ; printf ( " 10 = %d\n  " , note10 ) ; printf ( " 5 = %d\n  " , note5 ) ; printf ( " 2 = %d\n  " , note2 ) ; printf ( " 1 = %d\n  " , note1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int cp , sp , amt ; printf ( " Enter cost price : " ) ; scanf ( " %d " , & cp ) ; printf ( " Enter selling price : " ) ; scanf ( " %d " , & sp ) ; if ( sp > cp ) { amt = sp - cp ; printf ( " Profit = %d " , amt ) ; } else if ( cp > sp ) { amt = cp - sp ; printf ( " Loss = %d " , amt ) ; } else { printf ( " No Profit No Loss. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { max = num1 ; } else { max = num3 ; } } else { if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1 > num2 ) & & ( num1 > num3 ) ) { max = num1 ; } else if ( ( num2 > num1 ) & & ( num2 > num3 ) ) { max = num2 ; } else if ( ( num3 > num1 ) & & ( num3 > num2 ) ) { max = num3 ; } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1 > num2 ) & & ( num1 > num3 ) ) { max = num1 ; } else if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( num % 2 = = 0 ) { printf ( " Number is Even. " ) ; } else { printf ( " Number is Odd. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( ( num % 5 = = 0 ) & & ( num % 11 = = 0 ) ) { printf ( " Number is divisible by 5 and 11 " ) ; } else { printf ( " Number is not divisible by 5 and 11 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } if ( num = = 0 ) { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } else if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } else { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , max , min , size ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } max = arr [ 0 ] ; min = arr [ 0 ] ; for ( i = 1 ; i <size ; i + + ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( " Maximum element = %d\n  " , max ) ; printf ( " Minimum element = %d " , min ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> #define SIZE 8 int main ( ) { char binary [ SIZE + 1 ] , onesComp [ SIZE + 1 ] , twosComp [ SIZE + 1 ] ; int i , carry = 1 ; printf ( " Enter %d bit binary value : " , SIZE ) ; gets ( binary ) ; for ( i = 0 ; i <SIZE ; i + + ) { if ( binary [ i ] = = '1' ) { onesComp [ i ] = '0' ; } else if ( binary [ i ] = = '0' ) { onesComp [ i ] = '1' ; } } onesComp [ SIZE ] = '\0' ; for ( i = SIZE-1 ; i> = 0 ; i-- ) { if ( onesComp [ i ] = = '1' & & carry = = 1 ) { twosComp [ i ] = '0' ; } else if ( onesComp [ i ] = = '0' & & carry = = 1 ) { twosComp [ i ] = '1' ; carry = 0 ; } else { twosComp [ i ] = onesComp [ i ] ; } } twosComp [ SIZE ] = '\0' ; printf ( " Original binary = %s\n  " , binary ) ; printf ( " Ones complement = %s\n  " , onesComp ) ; printf ( " Twos complement = %s\n  " , twosComp ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num , isPrime ; isPrime = 1 ; printf ( " Enter any number to check prime : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d is prime number " , num ) ; } else { printf ( " %d is composite number " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " Even numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All even numbers from %d to %d are : \n  " , start , end ) ; if ( start %2 ! = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Enter any number : " ) ; scanf ( " %d " , & n ) ; printf ( " Natural numbers from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter start value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; printf ( " Natural numbers from %d to %d : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; for ( i = start ; i> = 1 ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i> = end ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 1000 int main ( ) { int arr [ MAX_SIZE ] ; int i , N ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in the array : " , N ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Elements in array are : " ) ; for ( i = 0 ; i <N ; i + + ) { printf ( " %d , " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , num , pos ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter element to insert : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the element position : " ) ; scanf ( " %d " , & pos ) ; if ( pos > size + 1 || pos < = 0 ) { printf ( " Invalid position! Please enter position between 1 to %d " , size ) ; } else { for ( i = size ; i> = pos ; i-- ) { arr [ i ] = arr [ i-1 ] ; } arr [ pos-1 ] = num ; size + + ; printf ( " Array elements after insertion : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size , i , toSearch , found ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Enter element to search : " ) ; scanf ( " %d " , & toSearch ) ; found = 0 ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] = = toSearch ) { found = 1 ; break ; } } if ( found = = 1 ) { printf ( " \n  %d is found at position %d " , toSearch , i + 1 ) ; } else { printf ( " \n  %d is not found in the array " , toSearch ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size ; int i , j , temp ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( " \n Elements of array in ascending order : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int C [ SIZE ] [ SIZE ] ; int row , col ; printf ( " Enter elements in matrix A of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { C [ row ] [ col ] = A [ row ] [ col ] + B [ row ] [ col ] ; } } printf ( " \n Sum of matrices A + B = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , C [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int C [ SIZE ] [ SIZE ] ; int row , col ; printf ( " Enter elements in matrix A of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { C [ row ] [ col ] = A [ row ] [ col ] - B [ row ] [ col ] ; } } printf ( " \n Difference of two matrices A-B = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , C [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int row , col , isEqual ; printf ( " Enter elements in matrix A of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size %dx %d : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } isEqual = 1 ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( A [ row ] [ col ] ! = B [ row ] [ col ] ) { isEqual = 0 ; break ; } } } if ( isEqual = = 1 ) { printf ( " \n Matrix A is equal to Matrix B " ) ; } else { printf ( " \n Matrix A is not equal to Matrix B " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int C [ SIZE ] [ SIZE ] ; int row , col , i , sum ; printf ( " Enter elements in matrix A of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { sum = 0 ; for ( i = 0 ; i <SIZE ; i + + ) { sum + = A [ row ] [ i ] * B [ i ] [ col ] ; } C [ row ] [ col ] = sum ; } } printf ( " \n Product of matrix A * B = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , C [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_COLS ] ; int B [ MAX_COLS ] [ MAX_ROWS ] ; int row , col ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { B [ col ] [ row ] = A [ row ] [ col ] ; } } printf ( " \n Original matrix : \n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } printf ( " Transpose of matrix A : \n  " ) ; for ( row = 0 ; row <MAX_COLS ; row + + ) { for ( col = 0 ; col <MAX_ROWS ; col + + ) { printf ( " %d " , B [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , isIdentity ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } isIdentity = 1 ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( row = = col & & A [ row ] [ col ] ! = 1 ) { isIdentity = 0 ; } else if ( row! = col & & A [ row ] [ col ] ! = 0 ) { isIdentity = 0 ; } } } if ( isIdentity = = 1 ) { printf ( " \n The given matrix is an Identity Matrix.\n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " The given matrix is not Identity Matrix " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char HEXVALUE [ ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ; long long decimal , tempDecimal ; char hex [ 65 ] ; int index , rem ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; index = 0 ; while ( tempDecimal ! = 0 ) { rem = tempDecimal % 16 ; hex [ index ] = HEXVALUE [ rem ] ; tempDecimal / = 16 ; index + + ; } hex [ index ] = '\0' ; strrev ( hex ) ; printf ( " \n Decimal number = %lld\n  " , decimal ) ; printf ( " Hexadecimal number = %s " , hex ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , binary ; int rem , place = 1 ; binary = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 2 ; binary = ( rem * place ) + binary ; tempDecimal / = 2 ; place * = 10 ; } printf ( " Decimal number = %lld\n  " , decimal ) ; printf ( " Binary number = %lld " , binary ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { long decimal , tempDecimal ; char binary [ 65 ] ; int index = 0 ; printf ( " Enter any decimal value : " ) ; scanf ( " %ld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { binary [ index ] = ( tempDecimal % 2 ) + '0' ; tempDecimal / = 2 ; index + + ; } binary [ index ] = '\0' ; strrev ( binary ) ; printf ( " Decimal value = %ld\n  " , decimal ) ; printf ( " Binary value of decimal = %s " , binary ) ; return 0 ; }
#include <stdio.h> #define SIZE 8 int main ( ) { char binary [ SIZE + 1 ] , onesComp [ SIZE + 1 ] ; int i , error = 0 ; printf ( " Enter %d bit binary value : " , SIZE ) ; gets ( binary ) ; for ( i = 0 ; i <SIZE ; i + + ) { if ( binary [ i ] = = '1' ) { onesComp [ i ] = '0' ; } else if ( binary [ i ] = = '0' ) { onesComp [ i ] = '1' ; } else { printf ( " Invalid Input " ) ; error = 1 ; break ; } } onesComp [ SIZE ] = '\0' ; if ( error = = 0 ) { printf ( " Original binary = %s\n  " , binary ) ; printf ( " Ones complement = %s " , onesComp ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; ( num %2 = = 0 ) ? printf ( " The number is EVEN " ) : printf ( " The number is ODD " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; printf ( " The number is %s " , ( num %2 = = 0 ? " EVEN " : " ODD " ) ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , even , odd ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d elements in array : " , size ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } even = 0 ; odd = 0 ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] %2 = = 0 ) { even + + ; } else { odd + + ; } } printf ( " Total even elements : %d\n  " , even ) ; printf ( " Total odd elements : %d " , odd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int arr [ 100 ] , freq [ 100 ] ; int size , i , j , count ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; freq [ i ] = -1 ; } for ( i = 0 ; i <size ; i + + ) { count = 1 ; for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; freq [ j ] = 0 ; } } if ( freq [ i ] ! = 0 ) { freq [ i ] = count ; } } printf ( " \n Frequency of all elements of array : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { if ( freq [ i ] ! = 0 ) { printf ( " %d occurs %d times\n  " , arr [ i ] , freq [ i ] ) ; } } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr1 [ MAX_SIZE ] , arr2 [ MAX_SIZE ] , mergeArray [ MAX_SIZE * 2 ] ; int size1 , size2 , mergeSize ; int index1 , index2 , mergeIndex ; int i ; printf ( " Enter the size of first array : " ) ; scanf ( " %d " , & size1 ) ; printf ( " Enter elements in first array : " ) ; for ( i = 0 ; i <size1 ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } printf ( " \n Enter the size of second array : " ) ; scanf ( " %d " , & size2 ) ; printf ( " Enter elements in second array : " ) ; for ( i = 0 ; i <size2 ; i + + ) { scanf ( " %d " , & arr2 [ i ] ) ; } mergeSize = size1 + size2 ; index1 = 0 ; index2 = 0 ; for ( mergeIndex = 0 ; mergeIndex < mergeSize ; mergeIndex + + ) { if ( index1 > = size1 || index2 > = size2 ) { break ; } if ( arr1 [ index1 ] < arr2 [ index2 ] ) { mergeArray [ mergeIndex ] = arr1 [ index1 ] ; index1 + + ; } else { mergeArray [ mergeIndex ] = arr2 [ index2 ] ; index2 + + ; } } while ( index1 < size1 ) { mergeArray [ mergeIndex ] = arr1 [ index1 ] ; mergeIndex + + ; index1 + + ; } while ( index2 < size2 ) { mergeArray [ mergeIndex ] = arr2 [ index2 ] ; mergeIndex + + ; index2 + + ; } printf ( " \n Array merged in ascending order : " ) ; for ( i = 0 ; i <mergeSize ; i + + ) { printf ( " %d\t " , mergeArray [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size ; int i , j , k ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { for ( k = j ; k <size ; k + + ) { arr [ k ] = arr [ k + 1 ] ; } size-- ; j-- ; } } } printf ( " \n Array elements after deleting duplicates : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int source [ MAX_SIZE ] , dest [ MAX_SIZE ] ; int i , size ; printf ( " Enter the size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements of source array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & source [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { dest [ i ] = source [ i ] ; } printf ( " \n Elements of source array are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , source [ i ] ) ; } printf ( " \n Elements of dest array are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , dest [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; if ( week = = 1 ) { printf ( " Monday " ) ; } else if ( week = = 2 ) { printf ( " Tuesday " ) ; } else if ( week = = 3 ) { printf ( " Wednesday " ) ; } else if ( week = = 4 ) { printf ( " Thursday " ) ; } else if ( week = = 5 ) { printf ( " Friday " ) ; } else if ( week = = 6 ) { printf ( " Saturday " ) ; } else if ( week = = 7 ) { printf ( " Sunday " ) ; } else { printf ( " Invalid Input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { const char * WEEKS [ ] = { " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " } ; int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; if ( week > 0 & & week < 8 ) { printf ( " %s " , WEEKS [ week-1 ] ) ; } else { printf ( " Invalid input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'a' || ch = = 'e' || ch = = 'i' || ch = = 'o' || ch = = 'u' || ch = = 'A' || ch = = 'E' || ch = = 'I' || ch = = 'O' || ch = = 'U' ) { printf ( " ' %c' is Vowel. " , ch ) ; } else if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " ' %c' is Consonant. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 97 || ch = = 101 || ch = = 105 || ch = = 111 || ch = = 117 || ch = = 65 || ch = = 69 || ch = = 73 || ch = = 79 || ch = = 85 ) { printf ( " ' %c' is Vowel. " , ch ) ; } else if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " ' %c' is Consonant. " , ch ) ; } else { printf ( " %c is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ? printf ( " It is ALPHABET " ) : printf ( " It is NOT ALPHABET " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 24 ; printf ( " 24 / ( 2^1 ) = > %d\n  " , ( a > > 1 ) ) ; printf ( " 24 / ( 2^2 ) = > %d\n  " , ( a > > 2 ) ) ; printf ( " 24 / ( 2^3 ) = > %d\n  " , ( a > > 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 ; printf ( " 12 * ( 2^1 ) = > %d\n  " , ( a < < 1 ) ) ; printf ( " 12 * ( 2^2 ) = > %d\n  " , ( a < < 2 ) ) ; printf ( " 12 * ( 2^3 ) = > %d\n  " , ( a < < 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 21 ; if ( num1 & 1 ) printf ( " %d is an ODD number.\n  " , num1 ) ; else printf ( " %d is an EVEN number.\n  " , num1 ) ; if ( num2 & 1 ) printf ( " %d is an ODD number.\n  " , num2 ) ; else printf ( " %d is an EVEN number.\n  " , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned char flag = 0 ; flag = flag | 1 ; flag = flag | 2 ; flag = flag | 4 ; printf ( " flag , DECIMAL = %d , HEX = %x\n \n  " , flag , flag ) ; if ( flag & 1 ) printf ( " You are married.\n  " ) ; else printf ( " You are not married.\n  " ) ; if ( flag & 2 ) printf ( " You are eligible for voting.\n  " ) ; else printf ( " You are not eligible for voting.\n  " ) ; if ( flag & 4 ) printf ( " You are eligible to get VISA.\n  " ) ; else printf ( " You are not eligible to get VISA.\n  " ) ; flag = flag & ( ~ ( 1 < < 0 ) ) ; flag = flag & ( ~ ( 1 < < 1 ) ) ; flag = flag & ( ~ ( 1 < < 2 ) ) ; printf ( " \n flag , DECIMAL = %d , HEX = %x\n  " , flag , flag ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 8 ; printf ( " 1s complement of %d = %d\n  " , num , ( ~num ) ) ; printf ( " 2s complement of %d = %d\n  " , num , ( ~num + 1 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " 'a' = > ' %c'\n  " , ( 'a' | ' ' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'A' | ' ' ) ) ; printf ( " 'a' = > ' %c'\n  " , ( 'a' & '_' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'a' & '_' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 20 , x ; x = a ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = x ^ x ; printf ( " x = %d\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 20 ; int min = ( y ^ ( x ^ y ) & - ( x < y ) ) ; int max = ( x ^ ( x ^ y ) & - ( x < y ) ) ; printf ( " Minimum ( 10 , 20 ) = > %d\n  " , min ) ; printf ( " Maximum ( 10 , 20 ) = > %d\n  " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " Enter two numbers to swap : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Original value : a = %d , b = %d\n  " , a , b ) ; a ^ = b ; b ^ = a ; a ^ = b ; printf ( " Swapped value : a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #define KEY 22 int main ( ) { char text [ 100 ] ; int i ; printf ( " Enter text to encrypt : " ) ; fgets ( text , 100 , stdin ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { text [ i ] = text [ i ] ^ KEY ; } printf ( " Encrypted text : %s\n  " , text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { text [ i ] = text [ i ] ^ KEY ; } printf ( " Original text : %s\n  " , text ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , b , c ; float root1 , root2 , imaginary ; float discriminant ; printf ( " Enter values of a , b , c of quadratic equation ( aX^2 + bX + c ) : " ) ; scanf ( " %f %f %f " , & a , & b , & c ) ; discriminant = ( b * b ) - ( 4 * a * c ) ; if ( discriminant > 0 ) { root1 = ( -b + sqrt ( discriminant ) ) / ( 2 * a ) ; root2 = ( -b - sqrt ( discriminant ) ) / ( 2 * a ) ; printf ( " Two distinct and real roots exists : %.2f and %.2f " , root1 , root2 ) ; } else if ( discriminant = = 0 ) { root1 = root2 = -b / ( 2 * a ) ; printf ( " Two equal and real roots exists : %.2f and %.2f " , root1 , root2 ) ; } else if ( discriminant < 0 ) { root1 = root2 = -b / ( 2 * a ) ; imaginary = sqrt ( -discriminant ) / ( 2 * a ) ; printf ( " Two distinct complex roots exists : %.2f + i %.2f and %.2f - i %.2f " , root1 , imaginary , root2 , imaginary ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter any number to find its factor : " ) ; scanf ( " %d " , & num ) ; printf ( " All factors of %d are : \n  " , num ) ; for ( i = 1 ; i < = num ; i + + ) { if ( num % i = = 0 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , num , isPrime ; printf ( " Enter any number to print Prime factors : " ) ; scanf ( " %d " , & num ) ; printf ( " All Prime Factors of %d are : \n  " , num ) ; for ( i = 2 ; i < = num ; i + + ) { if ( num %i = = 0 ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d , " , i ) ; } } } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; unsigned long long fact = 1LL ; printf ( " Enter any number to calculate factorial : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d = %llu " , num , fact ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , end , isPrime , sum = 0 ; printf ( " Find sum of all prime between 1 to : " ) ; scanf ( " %d " , & end ) ; for ( i = 2 ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { sum + = i ; } } printf ( " Sum of all prime numbers between 1 to %d = %d " , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , start , end ; int isPrime , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { sum + = i ; } } printf ( " Sum of all prime numbers between %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , end ; printf ( " Print all natural numbers from 1 to : " ) ; scanf ( " %d " , & end ) ; i = 1 ; while ( i < = end ) { printf ( " %d\n  " , i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; max = ( num1 > num2 & & num1 > num3 ) ? num1 : ( num2 > num3 ) ? num2 : num3 ; printf ( " \n Maximum between %d , %d and %d = %d " , num1 , num2 , num3 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 1 ; while ( i < = n ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 2 ; while ( i < = n ) { printf ( " %d\n  " , i ) ; i + = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = N ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = columns ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; while ( n> = 1 ) { printf ( " %d\n  " , n ) ; n-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , M , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & M ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = M ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'a' ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 'z' ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch = 97 ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 122 ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = ( i * i ) ; j + = i ) { printf ( " %-3d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = N ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = columns ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( int arr [ ] ) ; void rotateByOne ( int arr [ ] ) ; int main ( ) { int i , N ; int arr [ SIZE ] ; printf ( " Enter 10 elements array : " ) ; for ( i = 0 ; i <SIZE ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter number of times to left rotate : " ) ; scanf ( " %d " , & N ) ; N = N % SIZE ; printf ( " Array before rotationn " ) ; printArray ( arr ) ; for ( i = 1 ; i < = N ; i + + ) { rotateByOne ( arr ) ; } printf ( " \n \n Array after rotation\n  " ) ; printArray ( arr ) ; return 0 ; } void rotateByOne ( int arr [ ] ) { int i , first ; first = arr [ 0 ] ; for ( i = 0 ; i <SIZE-1 ; i + + ) { arr [ i ] = arr [ i + 1 ] ; } arr [ SIZE-1 ] = first ; } void printArray ( int arr [ ] ) { int i ; for ( i = 0 ; i <SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> #include <math.h> int main ( ) { int originalNum , num , lastDigit , digits , sum ; printf ( " Enter any number to check Armstrong number : " ) ; scanf ( " %d " , & num ) ; sum = 0 ; originalNum = num ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + round ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } if ( originalNum = = sum ) { printf ( " %d is ARMSTRONG NUMBER " , originalNum ) ; } else { printf ( " %d is NOT ARMSTRONG NUMBER " , originalNum ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num , sum = 0 ; printf ( " Enter any number to check perfect number : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i <num ; i + + ) { if ( num %i = = 0 ) { sum + = i ; } } if ( sum = = num ) { printf ( " %d is PERFECT NUMBER " , num ) ; } else { printf ( " %d is NOT PERFECT NUMBER " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , originalNum , num , lastDigit , sum ; long fact ; printf ( " Enter any number to check Strong number : " ) ; scanf ( " %d " , & num ) ; originalNum = num ; sum = 0 ; while ( num > 0 ) { lastDigit = num % 10 ; fact = 1 ; for ( i = 1 ; i < = lastDigit ; i + + ) { fact = fact * i ; } sum = sum + fact ; num = num / 10 ; } if ( sum = = originalNum ) { printf ( " %d is STRONG NUMBER " , originalNum ) ; } else { printf ( " %d is NOT STRONG NUMBER " , originalNum ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , end , isPrime ; printf ( " Find prime numbers between 1 to : " ) ; scanf ( " %d " , & end ) ; printf ( " All prime numbers between 1 to %d are : \n  " , end ) ; for ( i = 2 ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , start , end ; int isPrime ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All prime numbers between %d to %d are : \n  " , start , end ) ; if ( start < 2 ) start = 2 ; for ( i = start ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j , k ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; k = 1 ; for ( i = 1 ; i < = rows ; i + + ) { if ( i %2 = = 0 ) k = 2 ; else k = 1 ; for ( j = 1 ; j < = cols ; j + + ) { printf ( " %-3d " , k ) ; k + = 2 ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define BASE 10 int main ( ) { long long num , n ; int i , lastDigit ; int freq [ BASE ] ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; for ( i = 0 ; i <BASE ; i + + ) { freq [ i ] = 0 ; } n = num ; while ( n ! = 0 ) { lastDigit = n % 10 ; n / = 10 ; freq [ lastDigit ] + + ; } printf ( " Frequency of each digit in %lld is : \n  " , num ) ; for ( i = 0 ; i <BASE ; i + + ) { printf ( " Frequency of %d = %d\n  " , i , freq [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( ( N-i ) * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int k = 1 ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = i ) printf ( " %d " , j ) ; else printf ( " " ) ; } k = j - 2 ; for ( j = 1 ; j <i ; j + + , k-- ) { if ( i = = 1 || i = = N || j = = i-1 ) printf ( " %d " , k ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , swappedNum ; int firstDigit , lastDigit , digits ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; swappedNum = lastDigit ; swappedNum * = ( int ) pow ( 10 , digits ) ; swappedNum + = num % ( ( int ) pow ( 10 , digits ) ) ; swappedNum - = lastDigit ; swappedNum + = firstDigit ; printf ( " Original number = %d " , num ) ; printf ( " Number after swapping first and last digit : %d " , swappedNum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , swappedNum ; int firstDigit , lastDigit , digits ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; swappedNum = lastDigit ; swappedNum * = ( int ) round ( pow ( 10 , digits ) ) ; swappedNum + = num % ( ( int ) round ( pow ( 10 , digits ) ) ) ; swappedNum - = lastDigit ; swappedNum + = firstDigit ; printf ( " Original number = %d " , num ) ; printf ( " Number after swapping first and last digit : %d " , swappedNum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , cur , lastDigit , end ; long long fact , sum ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Strong numbers between 1 to %d are : \n  " , end ) ; for ( i = 1 ; i < = end ; i + + ) { cur = i ; sum = 0 ; while ( cur > 0 ) { fact = 1ll ; lastDigit = cur % 10 ; for ( j = 1 ; j < = lastDigit ; j + + ) { fact = fact * j ; } sum + = fact ; cur / = 10 ; } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , cur , lastDigit , start , end ; long long fact , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Strong numbers between %d to %d are : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { cur = i ; sum = 0 ; while ( cur > 0 ) { fact = 1ll ; lastDigit = cur % 10 ; for ( j = 1 ; j < = lastDigit ; j + + ) { fact = fact * j ; } sum + = fact ; cur / = 10 ; } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , lastDigit , digits , sum , i , end ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Armstrong number between 1 to %d are : \n  " , end ) ; for ( i = 1 ; i < = end ; i + + ) { sum = 0 ; num = i ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + ceil ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } if ( i = = sum ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , lastDigit , digits , sum , i ; int start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Armstrong number between %d to %d are : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { sum = 0 ; num = i ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + ceil ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } if ( i = = sum ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , end , sum ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Perfect numbers between 1 to %d : \n  " , end ) ; for ( i = 1 ; i < = end ; i + + ) { sum = 0 ; for ( j = 1 ; j <i ; j + + ) { if ( i % j = = 0 ) { sum + = j ; } } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , start , end , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Perfect numbers between %d to %d : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { sum = 0 ; for ( j = 1 ; j <i ; j + + ) { if ( i % j = = 0 ) { sum + = j ; } } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { sum + = i ; } printf ( " Sum of first %d natural numbers = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i < = end ; i + + ) { sum + = i ; } printf ( " Sum of natural numbers from %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of all even number between 1 to %d = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; if ( start %2! = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { sum + = i ; } printf ( " Sum of all even number between %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , reverse = 0 ; printf ( " Enter any number to find reverse : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { reverse = ( reverse * 10 ) + ( num % 10 ) ; num / = 10 ; } printf ( " Reverse = %d " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , num , rev = 0 ; printf ( " Enter any number to check palindrome : " ) ; scanf ( " %d " , & n ) ; num = n ; while ( n ! = 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n / = 10 ; } if ( rev = = num ) { printf ( " %d is palindrome. " , num ) ; } else { printf ( " %d is not palindrome. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num1 , num2 , min , hcf = 1 ; printf ( " Enter any two numbers to find HCF : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; min = ( num1 <num2 ) ? num1 : num2 ; for ( i = 1 ; i < = min ; i + + ) { if ( num1 %i = = 0 & & num2 %i = = 0 ) { hcf = i ; } } printf ( " HCF of %d and %d = %d\n  " , num1 , num2 , hcf ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num1 , num2 , max , lcm = 1 ; printf ( " Enter any two numbers to find LCM : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; i = max ; while ( 1 ) { if ( i %num1 = = 0 & & i %num2 = = 0 ) { lcm = i ; break ; } i + = max ; } printf ( " LCM of %d and %d = %d " , num1 , num2 , lcm ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] , freq [ MAX_SIZE ] ; int size , i , j , count ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; freq [ i ] = -1 ; } for ( i = 0 ; i <size ; i + + ) { count = 1 ; for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; freq [ j ] = 0 ; } } if ( freq [ i ] ! = 0 ) { freq [ i ] = count ; } } printf ( " \n Unique elements in the array are : " ) ; for ( i = 0 ; i <size ; i + + ) { if ( freq [ i ] = = 1 ) { printf ( " %d " , arr [ i ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = '0' & & ch < = '9' ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = 48 & & ch < = 57 ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size , i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Array in reverse order : " ) ; for ( i = size-1 ; i> = 0 ; i-- ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int size , i , arrIndex , revIndex ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } revIndex = 0 ; arrIndex = size - 1 ; while ( arrIndex > = 0 ) { reverse [ revIndex ] = arr [ arrIndex ] ; revIndex + + ; arrIndex-- ; } printf ( " \n Reversed array : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , reverse [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size , i , arrIndex , revIndex ; int temp ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } revIndex = 0 ; arrIndex = size - 1 ; while ( revIndex < arrIndex ) { temp = arr [ revIndex ] ; arr [ revIndex ] = arr [ arrIndex ] ; arr [ arrIndex ] = temp ; revIndex + + ; arrIndex-- ; } printf ( " \n Reversed array : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { int i = 0 ; while ( str1 [ i ] = = str2 [ i ] ) { if ( str1 [ i ] = = '\0' & & str2 [ i ] = = '\0' ) break ; i + + ; } return str1 [ i ] - str2 [ i ] ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { while ( ( * str1 & & * str2 ) & & ( * str1 = = * str2 ) ) { str1 + + ; str2 + + ; } return * str1 - * str2 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = strcmp ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res = = -1 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int k = 1 ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } k = j - 2 ; for ( j = 1 ; j <i ; j + + , k-- ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 255 ; i + + ) { printf ( " ASCII value of character %c = %d\n  " , i , i ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , pos ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter the element position to delete : " ) ; scanf ( " %d " , & pos ) ; if ( pos < 0 || pos > size ) { printf ( " Invalid position! Please enter position between 1 to %d " , size ) ; } else { for ( i = pos-1 ; i <size-1 ; i + + ) { arr [ i ] = arr [ i + 1 ] ; } size-- ; } printf ( " \n Elements of array after delete are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , j , size , count = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; break ; } } } printf ( " \n Total number of duplicate elements found in array = %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { char character = 'C' ; int integer = 1 ; float real = 10.4f ; long long biginteger = 989898989ll ; printf ( " Value of character = %c , Address of character = %u\n  " , character , & character ) ; printf ( " Value of integer = %d , Address of integer = %u\n  " , integer , & integer ) ; printf ( " Value of real = %f , Address of real = %u\n  " , real , & real ) ; printf ( " Value of biginteger = %lld , Address of biginteger = %u " , biginteger , & biginteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * ptr ; ptr = & num ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of ptr = %d\n  " , & ptr ) ; printf ( " Value of ptr = %d\n  " , ptr ) ; printf ( " Value pointed by ptr = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , swappedNum ; int firstDigit , lastDigit , digits ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; swappedNum = lastDigit ; swappedNum * = ( int ) pow ( 10 , digits ) ; swappedNum + = num % ( ( int ) pow ( 10 , digits ) ) ; swappedNum - = lastDigit ; swappedNum + = firstDigit ; printf ( " Original number = %d " , num ) ; printf ( " Number after swapping first and last digit : %d " , swappedNum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , swappedNum ; int firstDigit , lastDigit , digits ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; swappedNum = lastDigit ; swappedNum * = ( int ) round ( pow ( 10 , digits ) ) ; swappedNum + = num % ( ( int ) round ( pow ( 10 , digits ) ) ) ; swappedNum - = lastDigit ; swappedNum + = firstDigit ; printf ( " Original number = %d " , num ) ; printf ( " Number after swapping first and last digit : %d " , swappedNum ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int arr [ SIZE ] ; int * ptr = arr ; int i ; printf ( " Enter %d array elements : " , SIZE ) ; while ( ptr < & arr [ SIZE ] ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Elements in array are : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; int num ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; num = atoi ( number ) ; printf ( " Converted integer = %d\n  " , num ) ; return 0 ; }
#include <stdio.h> #include <sys / types.h> #include <dirent.h> void listFiles ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; listFiles ( path ) ; return 0 ; } void listFiles ( const char * path ) { struct dirent * dp ; DIR * dir = opendir ( path ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { printf ( " %s\n  " , dp-> d_name ) ; } closedir ( dir ) ; }
#include <stdio.h> #include <string.h> void listFilesRecursively ( char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; listFilesRecursively ( path ) ; return 0 ; } void listFilesRecursively ( char * basePath ) { char path [ 1000 ] ; struct dirent * dp ; DIR * dir = opendir ( basePath ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { if ( strcmp ( dp-> d_name , " . " ) ! = 0 & & strcmp ( dp-> d_name , " .. " ) ! = 0 ) { printf ( " %s\n  " , dp-> d_name ) ; strcpy ( path , basePath ) ; strcat ( path , " / " ) ; strcat ( path , dp-> d_name ) ; listFilesRecursively ( path ) ; } } closedir ( dir ) ; } }
#include <stdio.h> #include <string.h> #include <sys / types.h> #include <dirent.h> void tree ( char * basePath , const int root ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter path to list files : " ) ; scanf ( " %s " , path ) ; tree ( path , 0 ) ; return 0 ; } void tree ( char * basePath , const int root ) { int i ; char path [ 1000 ] ; struct dirent * dp ; DIR * dir = opendir ( basePath ) ; if ( !dir ) return ; while ( ( dp = readdir ( dir ) ) ! = NULL ) { if ( strcmp ( dp-> d_name , " . " ) ! = 0 & & strcmp ( dp-> d_name , " .. " ) ! = 0 ) { for ( i = 0 ; i <root ; i + + ) { if ( i %2 = = 0 || i = = 0 ) printf ( " %c " , 179 ) ; else printf ( " " ) ; } printf ( " %c %c %s\n  " , 195 , 196 , dp-> d_name ) ; strcpy ( path , basePath ) ; strcat ( path , " / " ) ; strcat ( path , dp-> d_name ) ; tree ( path , root + 2 ) ; } } closedir ( dir ) ; }
#include <stdio.h> int main ( ) { char oldName [ 100 ] , newName [ 100 ] ; printf ( " Enter old file path : " ) ; scanf ( " %s " , oldName ) ; printf ( " Enter new file path : " ) ; scanf ( " %s " , newName ) ; if ( rename ( oldName , newName ) = = 0 ) { printf ( " File renamed successfully.\n  " ) ; } else { printf ( " Unable to rename files. Please check files exist and you have permissions to modify files.\n  " ) ; } return 0 ; }
#include <stdio.h> #include <unistd.h> #include <io.h> #include <sys / stat.h> int isFileExists ( const char * path ) ; int isFileExistsAccess ( const char * path ) ; int isFileExistsStats ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter source file path : " ) ; scanf ( " %s " , path ) ; if ( isFileExistsAccess ( path ) ) { printf ( " File exists at path ' %s'\n  " , path ) ; } else { printf ( " File does not exists at path ' %s'\n  " , path ) ; } return 0 ; } int isFileExists ( const char * path ) { FILE * fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) return 0 ; fclose ( fptr ) ; return 1 ; } int isFileExistsAccess ( const char * path ) { if ( access ( path , F_OK ) = = -1 ) return 0 ; return 1 ; } int isFileExistsStats ( const char * path ) { struct stat stats ; stat ( path , & stats ) ; if ( stats.st_mode & F_OK ) return 1 ; return 0 ; }
#include <stdio.h> #include <unistd.h> #include <sys / stat.h> int isDirectoryExists ( const char * path ) ; int main ( ) { char path [ 100 ] ; printf ( " Enter directory path : " ) ; scanf ( " %s " , path ) ; if ( isDirectoryExists ( path ) ) { printf ( " Directory exists at path ' %s'\n  " , path ) ; } else { printf ( " Directory does not exists at path ' %s'\n  " , path ) ; } return 0 ; } int isDirectoryExists ( const char * path ) { struct stat stats ; stat ( path , & stats ) ; if ( S_ISDIR ( stats.st_mode ) ) return 1 ; return 0 ; }
#include <stdio.h> #include <unistd.h> #include <sys / stat.h> #include <time.h> void printFileProperties ( struct stat stats ) ; int main ( ) { char path [ 100 ] ; struct stat stats ; printf ( " Enter source file path : " ) ; scanf ( " %s " , path ) ; if ( stat ( path , & stats ) = = 0 ) { printFileProperties ( stats ) ; } else { printf ( " Unable to get file properties.\n  " ) ; printf ( " Please check whether ' %s' file exists.\n  " , path ) ; } return 0 ; } void printFileProperties ( struct stat stats ) { struct tm dt ; printf ( " \n File access : " ) ; if ( stats.st_mode & R_OK ) printf ( " read " ) ; if ( stats.st_mode & W_OK ) printf ( " write " ) ; if ( stats.st_mode & X_OK ) printf ( " execute " ) ; printf ( " \n File size : %d " , stats.st_size ) ; dt = * ( gmtime ( & stats.st_ctime ) ) ; printf ( " \n Created on : %d- %d- %d %d : %d : %d " , dt.tm_mday , dt.tm_mon , dt.tm_year + 1900 , dt.tm_hour , dt.tm_min , dt.tm_sec ) ; dt = * ( gmtime ( & stats.st_mtime ) ) ; printf ( " \n Modified on : %d- %d- %d %d : %d : %d " , dt.tm_mday , dt.tm_mon , dt.tm_year + 1900 , dt.tm_hour , dt.tm_min , dt.tm_sec ) ; }
#include <stdio.h> #include <stdlib.h> void toggleCase ( FILE * fptr , const char * path ) ; int main ( ) { FILE * fPtr ; char path [ 100 ] ; printf ( " Enter path of source file : " ) ; scanf ( " %s " , path ) ; fPtr = fopen ( path , " r " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } toggleCase ( fPtr , path ) ; printf ( " \n Successfully converted characters in file from uppercase to lowercase and vice versa.\n  " ) ; return 0 ; } void toggleCase ( FILE * fptr , const char * path ) { FILE * dest ; char ch ; dest = fopen ( " toggle.tmp " , " w " ) ; if ( dest = = NULL ) { printf ( " Unable to toggle case. " ) ; fclose ( fptr ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( fptr ) ) ! = EOF ) { if ( isupper ( ch ) ) ch = tolower ( ch ) ; else if ( islower ( ch ) ) ch = toupper ( ch ) ; fputc ( ch , dest ) ; } fclose ( fptr ) ; fclose ( dest ) ; remove ( path ) ; rename ( " toggle.tmp " , path ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fPtr ; char ch ; fPtr = fopen ( __FILE__ , " r " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } while ( ( ch = fgetc ( fPtr ) ) ! = EOF ) { printf ( " %c " , ch ) ; } fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 int main ( ) { FILE * fPtr ; FILE * fTemp ; char path [ 100 ] ; char buffer [ BUFFER_SIZE ] ; char newline [ BUFFER_SIZE ] ; int line , count ; printf ( " Enter path of source file : " ) ; scanf ( " %s " , path ) ; printf ( " Enter line number to replace : " ) ; scanf ( " %d " , & line ) ; fflush ( stdin ) ; printf ( " Replace ' %d' line with : " , line ) ; fgets ( newline , BUFFER_SIZE , stdin ) ; fPtr = fopen ( path , " r " ) ; fTemp = fopen ( " replace.tmp " , " w " ) ; if ( fPtr = = NULL || fTemp = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } count = 0 ; while ( ( fgets ( buffer , BUFFER_SIZE , fPtr ) ) ! = NULL ) { count + + ; if ( count = = line ) fputs ( newline , fTemp ) ; else fputs ( buffer , fTemp ) ; } fclose ( fPtr ) ; fclose ( fTemp ) ; remove ( path ) ; rename ( " replace.tmp " , path ) ; printf ( " \n Successfully replaced ' %d' line with ' %s'. " , line , newline ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 void replaceAll ( char * str , const char * oldWord , const char * newWord ) ; int main ( ) { FILE * fPtr ; FILE * fTemp ; char path [ 100 ] ; char buffer [ BUFFER_SIZE ] ; char oldWord [ 100 ] , newWord [ 100 ] ; printf ( " Enter path of source file : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to replace : " ) ; scanf ( " %s " , oldWord ) ; printf ( " Replace ' %s' with : " ) ; scanf ( " %s " , newWord ) ; fPtr = fopen ( path , " r " ) ; fTemp = fopen ( " replace.tmp " , " w " ) ; if ( fPtr = = NULL || fTemp = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_SUCCESS ) ; } while ( ( fgets ( buffer , BUFFER_SIZE , fPtr ) ) ! = NULL ) { replaceAll ( buffer , oldWord , newWord ) ; fputs ( buffer , fTemp ) ; } fclose ( fPtr ) ; fclose ( fTemp ) ; remove ( path ) ; rename ( " replace.tmp " , path ) ; printf ( " \n Successfully replaced all occurrences of ' %s' with ' %s'. " , oldWord , newWord ) ; return 0 ; } void replaceAll ( char * str , const char * oldWord , const char * newWord ) { char * pos , temp [ BUFFER_SIZE ] ; int index = 0 ; int owlen ; owlen = strlen ( oldWord ) ; while ( ( pos = strstr ( str , oldWord ) ) ! = NULL ) { strcpy ( temp , str ) ; index = pos - str ; str [ index ] = '\0' ; strcat ( str , newWord ) ; strcat ( str , temp + index + owlen ) ; } }
#include <stdio.h> #include <stdlib.h> #include <string.h> #include <ctype.h> #define MAX_WORDS 1000 int main ( ) { FILE * fptr ; char path [ 100 ] ; int i , len , index , isUnique ; char words [ MAX_WORDS ] [ 50 ] ; char word [ 50 ] ; int count [ MAX_WORDS ] ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } for ( i = 0 ; i <MAX_WORDS ; i + + ) count [ i ] = 0 ; index = 0 ; while ( fscanf ( fptr , " %s " , word ) ! = EOF ) { strlwr ( word ) ; len = strlen ( word ) ; if ( ispunct ( word [ len - 1 ] ) ) word [ len - 1 ] = '\0' ; isUnique = 1 ; for ( i = 0 ; i <index & & isUnique ; i + + ) { if ( strcmp ( words [ i ] , word ) = = 0 ) isUnique = 0 ; } if ( isUnique ) { strcpy ( words [ index ] , word ) ; count [ index ] + + ; index + + ; } else { count [ i - 1 ] + + ; } } fclose ( fptr ) ; printf ( " \n Occurrences of all distinct words in file : \n  " ) ; for ( i = 0 ; i <index ; i + + ) { printf ( " %-15s = > %d\n  " , words [ i ] , count [ i ] ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long long int bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atoll ( number ) ; printf ( " Converted long long int = %lld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int isEven ( const int NUM ) ; int isPrime ( const int NUM ) ; int main ( ) { FILE * fPtrIn , * fPtrEven , * fPtrOdd , * fPtrPrime ; int num , success ; fPtrIn = fopen ( " data / numbers.txt " , " r " ) ; fPtrEven = fopen ( " data / even-numbers.txt " , " w " ) ; fPtrOdd = fopen ( " data / odd-numbers.txt " , " w " ) ; fPtrPrime = fopen ( " data / prime-numbers.txt " , " w " ) ; if ( fPtrIn = = NULL || fPtrEven = = NULL || fPtrOdd = = NULL || fPtrPrime = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading integers from file. \n \n  " ) ; do { success = fscanf ( fPtrIn , " %d " , & num ) ; if ( isPrime ( num ) ) fprintf ( fPtrPrime , " %d\n  " , num ) ; else if ( isEven ( num ) ) fprintf ( fPtrEven , " %d\n  " , num ) ; else fprintf ( fPtrOdd , " %d\n  " , num ) ; } while ( success ! = -1 ) ; fclose ( fPtrIn ) ; fclose ( fPtrEven ) ; fclose ( fPtrOdd ) ; fclose ( fPtrPrime ) ; printf ( " Data written to files successfully. " ) ; return 0 ; } int isEven ( const int NUM ) { return ! ( NUM & 1 ) ; } int isPrime ( const int NUM ) { int i ; if ( NUM < 0 ) return 0 ; for ( i = 2 ; i < = NUM / 2 ; i + + ) { if ( NUM % i = = 0 ) { return 0 ; } } return 1 ; }
#include <stdio.h> #include <stdlib.h> struct node { int data ; struct node * next ; } * head ; void createList ( int n ) ; void traverseList ( ) ; int main ( ) { int n ; printf ( " Enter the total number of nodes : " ) ; scanf ( " %d " , & n ) ; createList ( n ) ; printf ( " \n Data in the list \n  " ) ; traverseList ( ) ; return 0 ; } void createList ( int n ) { struct node * newNode , * temp ; int data , i ; head = ( struct node * ) malloc ( sizeof ( struct node ) ) ; if ( head = = NULL ) { printf ( " Unable to allocate memory. " ) ; exit ( 0 ) ; } printf ( " Enter the data of node 1 : " ) ; scanf ( " %d " , & data ) ; head-> data = data ; head-> next = NULL ; temp = head ; for ( i = 2 ; i < = n ; i + + ) { newNode = ( struct node * ) malloc ( sizeof ( struct node ) ) ; if ( newNode = = NULL ) { printf ( " Unable to allocate memory. " ) ; break ; } printf ( " Enter the data of node %d : " , i ) ; scanf ( " %d " , & data ) ; newNode-> data = data ; newNode-> next = NULL ; temp-> next = newNode ; temp = temp-> next ; } } void traverseList ( ) { struct node * temp ; if ( head = = NULL ) { printf ( " List is empty. " ) ; return ; } temp = head ; while ( temp ! = NULL ) { printf ( " Data = %d\n  " , temp-> data ) ; temp = temp-> next ; } }
#include <stdio.h> #define NEW_STUDENT { " " , 0 , 0.0f } struct student { char name [ 100 ] ; int roll ; float marks ; } ; int main ( ) { struct student stu1 = NEW_STUDENT ; printf ( " Enter student name : " ) ; gets ( stu1.name ) ; printf ( " Enter student roll no : " ) ; scanf ( " %d " , & stu1.roll ) ; printf ( " Enter student marks : " ) ; scanf ( " %f " , & stu1.marks ) ; printf ( " \n \n Student details\n  " ) ; printf ( " Name : %s\n  " , stu1.name ) ; printf ( " Roll : %d\n  " , stu1.roll ) ; printf ( " Marks : %.2f\n  " , stu1.marks ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 5 ) ; if ( ptr = = NULL ) return 0 ; free ( ptr ) ; * ptr = 50 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 10 ) ; if ( !ptr ) { printf ( " Unable to allocate memory " ) ; return ; } free ( ptr ) ; ptr = NULL ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #define PRINT ( msg ) #msg int main ( ) { printf ( PRINT ( C Programming in Codeforwin ) ) ; return 0 ; }
#include <stdio.h> #define CONCAT ( a , b ) a##b int main ( ) { printf ( " CONCAT ( 10 , 20 ) = %d\n  " , CONCAT ( 10 , 20 ) ) ; return 0 ; }
#include <stdio.h> #include " main.h " #include " win / display.c "
#include <stdio.h> #define COUNTRY " INDIA " #define TRUE 1 #define FALSE 0 #define SUM ( 10 + 20 ) int main ( ) { printf ( " COUNTRY : %s\n  " , COUNTRY ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; printf ( " SUM ( 10 + 20 ) : %d\n  " , SUM ) ; return 0 ; }
#include <stdio.h> #define TRUE 1 #define FALSE 0 int main ( ) { printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; #undef TRUE #undef FALSE #define TRUE 0 #define FALSE 1 printf ( " \n Macro values are redefinition\n  " ) ; printf ( " TRUE : %d\n  " , TRUE ) ; printf ( " FALSE : %d\n  " , FALSE ) ; return 0 ; }
#include <stdio.h> int sum ( int a , int b ) { return ( a + b ) ; } #define SUM ( a , b ) ( a + b ) int main ( ) { printf ( " SUM using function : %d\n  " , sum ( 100 , 200 ) ) ; printf ( " SUM using macro : %d\n  " , SUM ( 100 , 200 ) ) ; return 0 ; }
#include <stdio.h> #define COUNTRY " INDIA " int main ( ) { #ifdef COUNTRY printf ( " Country is defined\n  " ) ; #endif #ifndef STATE printf ( " State is not defined. Defining state. \n  " ) ; #define STATE " PATNA " #endif printf ( " State is : %s\n  " , STATE ) ; return 0 ; }
#include <stdio.h> #define IND 1 #define USA 2 #define UK 3 #define COUNTRY IND int main ( ) { #if COUNTRY = = IND printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #elif COUNTRY = = USA printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #else printf ( " Selected country code is : %d\n  " , COUNTRY ) ; #endif return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 5 ) ; if ( ptr = = NULL ) return 0 ; free ( ptr ) ; * ptr = 50 ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char * ptr = malloc ( sizeof ( char ) * 20 ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int * ptr = NULL ; ptr = malloc ( sizeof ( int ) * 10 ) ; if ( !ptr ) { printf ( " Unable to allocate memory " ) ; return ; } free ( ptr ) ; ptr = NULL ; free ( ptr ) ; return 0 ; }
#include <stdio.h> typedef struct point { int x ; int y ; } Point ; typedef int ( * Fptr ) ( const void * , const void * ) ; int main ( ) { typedef int Integer ; typedef char CharArray [ 100 ] ; Fptr functionPointer ; Point point = { 10 , 20 } ; Integer num = 100 ; CharArray name = " Codeforwin " ; printf ( " Point x = %d , y = %d\n  " , point.x , point.y ) ; printf ( " num = %d\n  " , num ) ; printf ( " name = %s\n  " , name ) ; return 0 ; }
#include <stdio.h> #define NEW_STUDENT { " " , 0 , 0.0f } struct student { char name [ 100 ] ; int roll ; float marks ; } ; int main ( ) { struct student stu1 = NEW_STUDENT ; printf ( " Enter student name : " ) ; gets ( stu1.name ) ; printf ( " Enter student roll no : " ) ; scanf ( " %d " , & stu1.roll ) ; printf ( " Enter student marks : " ) ; scanf ( " %f " , & stu1.marks ) ; printf ( " \n \n Student details\n  " ) ; printf ( " Name : %s\n  " , stu1.name ) ; printf ( " Roll : %d\n  " , stu1.roll ) ; printf ( " Marks : %.2f\n  " , stu1.marks ) ; return 0 ; }
#include <stdio.h> struct color_rgb { unsigned char r ; unsigned char g ; unsigned char b ; } ; struct color_rgba { unsigned char r ; unsigned char g ; unsigned char b ; float a ; } ; union color { struct color_rgb rgb ; struct color_rgba rgba ; unsigned int value ; char name [ 20 ] ; } ; int main ( ) { union color console_color ; printf ( " Size of color variable = %d\n \n  " , sizeof ( console_color ) ) ; printf ( " Enter space separated rgb color value : " ) ; scanf ( " %d %d %d " , & console_color.rgb.r , & console_color.rgb.g , & console_color.rgb.b ) ; printf ( " Color in rgb format : %d %d %d\n \n  " , console_color.rgb.r , console_color.rgb.g , console_color.rgb.b ) ; printf ( " Enter space separated rgba color value : " ) ; scanf ( " %d %d %d %f " , & console_color.rgba.r , & console_color.rgba.g , & console_color.rgba.b , & console_color.rgba.a ) ; printf ( " Color in rgba format : %d %d %d %.2f\n \n  " , console_color.rgba.r , console_color.rgba.g , console_color.rgba.b , console_color.rgba.a ) ; printf ( " Enter integer color value : " ) ; scanf ( " %d " , & console_color.value ) ; printf ( " Color in integer format : %d\n \n  " , console_color.value ) ; printf ( " Enter string color value : " ) ; getchar ( ) ; gets ( console_color.name ) ; printf ( " Color in string format : %s\n \n  " , console_color.name ) ; return 0 ; }
#include <stdio.h> #include <string.h> #include <stdlib.h> struct student { char name [ 40 ] ; int age ; unsigned long long mobile ; } ; int main ( ) { struct student student1 ; struct student * student2 ; student2 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; printf ( " Enter student name : " ) ; fgets ( student1.name , 40 , stdin ) ; printf ( " Enter student age : " ) ; scanf ( " %d " , & student1.age ) ; printf ( " Enter student mobile : " ) ; scanf ( " %llu " , & student1.mobile ) ; getchar ( ) ; printf ( " \n Student using simple structure variable.\n  " ) ; printf ( " Student name : %s\n  " , student1.name ) ; printf ( " Student age : %d\n  " , student1.age ) ; printf ( " Student mobile : %llu\n \n  " , student1.mobile ) ; printf ( " Enter student name : " ) ; fgets ( student2-> name , 40 , stdin ) ; printf ( " Enter student age : " ) ; scanf ( " %d " , & student2-> age ) ; printf ( " Enter student mobile : " ) ; scanf ( " %llu " , & student2-> mobile ) ; printf ( " Student using pointer to structure variable.\n  " ) ; printf ( " Student name : %s\n  " , student2-> name ) ; printf ( " Student age : %d\n  " , student2-> age ) ; printf ( " Student mobile : %llu\n  " , student2-> mobile ) ; free ( student2 ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) malloc ( max * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < max ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) calloc ( max , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < max ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max , newSize ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) calloc ( max , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Enter new size of the array : " ) ; scanf ( " %d " , & newSize ) ; ptr = ( int * ) realloc ( ptr , ( newSize * sizeof ( int ) ) ) ; printf ( " \n Enter %d elements : \n  " , ( newSize - max ) ) ; for ( i = max ; i < newSize ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < newSize ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; switch ( num > 0 ) { case 1 : printf ( " %d is positive. " , num ) ; break ; case 0 : switch ( num < 0 ) { case 1 : printf ( " %d is negative. " , num ) ; break ; case 0 : printf ( " %d is zero. " , num ) ; break ; } break ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> #include <string.h> int main ( ) { char hex [ 17 ] ; long long decimal , place ; int i = 0 , val , len ; decimal = 0 ; place = 1 ; printf ( " Enter any hexadecimal number : " ) ; gets ( hex ) ; len = strlen ( hex ) ; len-- ; for ( i = 0 ; hex [ i ] ! = '\0' ; i + + ) { if ( hex [ i ] > = '0' & & hex [ i ] < = '9' ) { val = hex [ i ] - 48 ; } else if ( hex [ i ] > = 'a' & & hex [ i ] < = 'f' ) { val = hex [ i ] - 97 + 10 ; } else if ( hex [ i ] > = 'A' & & hex [ i ] < = 'F' ) { val = hex [ i ] - 65 + 10 ; } decimal + = val * pow ( 16 , len ) ; len-- ; } printf ( " Hexadecimal number = %s\n  " , hex ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; ( year %4 = = 0 & & year %100! = 0 ) ? printf ( " LEAP YEAR " ) : ( year %400 = = 0 ) ? printf ( " LEAP YEAR " ) : printf ( " COMMON YEAR " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; printf ( " %s " , ( ( year %4 = = 0 & & year %100! = 0 ) ? " LEAP YEAR " : ( year %400 = = 0 ) ? " LEAP YEAR " : " COMMON YEAR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { float basic , gross , da , hra ; printf ( " Enter basic salary of an employee : " ) ; scanf ( " %f " , & basic ) ; if ( basic < = 10000 ) { da = basic * 0.8 ; hra = basic * 0.2 ; } else if ( basic < = 20000 ) { da = basic * 0.9 ; hra = basic * 0.25 ; } else { da = basic * 0.95 ; hra = basic * 0.3 ; } gross = basic + hra + da ; printf ( " GROSS SALARY OF EMPLOYEE = %.2f " , gross ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; if ( start % 2 = = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers between %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int octalConstant [ ] = { 0 , 1 , 10 , 11 , 100 , 101 , 110 , 111 } ; long long binary , octal , tempBinary ; int digit , place , i ; octal = 0 ; place = 1 ; printf ( " Enter any binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; while ( tempBinary ! = 0 ) { digit = tempBinary % 1000 ; for ( i = 0 ; i <8 ; i + + ) { if ( octalConstant [ i ] = = digit ) { octal = ( i * place ) + octal ; break ; } } tempBinary / = 1000 ; place * = 10 ; } printf ( " Original binary number = %lld\n  " , binary ) ; printf ( " Octal number = %lld " , octal ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define BASE 2 int main ( ) { long long binary , decimal = 0 , tempBinary ; int N = 0 ; printf ( " Enter any binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; while ( tempBinary! = 0 ) { if ( tempBinary % 10 = = 1 ) { decimal + = pow ( BASE , N ) ; } N + + ; tempBinary / = 10 ; } printf ( " Binary number = %lld\n  " , binary ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <string.h> #define SIZE 16 void getTwosComplement ( char * twosComp , const char * ) ; int main ( ) { char binary [ SIZE + 1 ] , tempBinary [ SIZE + 1 ] ; int i , j , signBit = 0 ; long long decimal = 0 ; printf ( " Enter any %d bit binary value : " , SIZE ) ; gets ( binary ) ; strcpy ( tempBinary , binary ) ; if ( binary [ 0 ] = = '1' ) { signBit = 1 ; getTwosComplement ( tempBinary , binary ) ; } for ( i = 0 ; i <SIZE ; i + + ) { if ( tempBinary [ i ] = = '1' ) { decimal + = pow ( 2 , ( SIZE - ( i + 1 ) ) ) ; } } if ( signBit = = 1 ) { decimal * = -1 ; } printf ( " Binary value = %s\n  " , binary ) ; printf ( " Decimal value = %lld " , decimal ) ; return 0 ; } void getTwosComplement ( char * twosComp , const char * binary ) { char onesComp [ SIZE + 1 ] ; int i , carry = 1 ; for ( i = 0 ; i <SIZE ; i + + ) { if ( binary [ i ] = = '1' ) { onesComp [ i ] = '0' ; } else if ( binary [ i ] = = '0' ) { onesComp [ i ] = '1' ; } } onesComp [ SIZE ] = '\0' ; for ( i = SIZE-1 ; i> = 0 ; i-- ) { if ( onesComp [ i ] = = '1' & & carry = = 1 ) { twosComp [ i ] = '0' ; } else if ( onesComp [ i ] = = '0' & & carry = = 1 ) { twosComp [ i ] = '1' ; carry = 0 ; } else { twosComp [ i ] = onesComp [ i ] ; } } twosComp [ SIZE ] = '\0' ; }
#include <stdio.h> int main ( ) { int OCTALVALUES [ ] = { 0 , 1 , 10 , 11 , 100 , 101 , 110 , 111 } ; long long octal , tempOctal , binary , place ; int rem ; printf ( " Enter any Octal number : " ) ; scanf ( " %lld " , & octal ) ; tempOctal = octal ; binary = 0 ; place = 1 ; while ( tempOctal > 0 ) { rem = tempOctal % 10 ; binary = ( OCTALVALUES [ rem ] * place ) + binary ; tempOctal / = 10 ; place * = 1000 ; } printf ( " Octal number = %lld\n  " , octal ) ; printf ( " Binary number = %lld " , binary ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char hex [ 17 ] , bin [ 65 ] = " " ; int i = 0 ; printf ( " Enter any hexadecimal number : " ) ; gets ( hex ) ; for ( i = 0 ; hex [ i ] ! = '\0' ; i + + ) { switch ( hex [ i ] ) { case '0' : strcat ( bin , " 0000 " ) ; break ; case '1' : strcat ( bin , " 0001 " ) ; break ; case '2' : strcat ( bin , " 0010 " ) ; break ; case '3' : strcat ( bin , " 0011 " ) ; break ; case '4' : strcat ( bin , " 0100 " ) ; break ; case '5' : strcat ( bin , " 0101 " ) ; break ; case '6' : strcat ( bin , " 0110 " ) ; break ; case '7' : strcat ( bin , " 0111 " ) ; break ; case '8' : strcat ( bin , " 1000 " ) ; break ; case '9' : strcat ( bin , " 1001 " ) ; break ; case 'a' : case 'A' : strcat ( bin , " 1010 " ) ; break ; case 'b' : case 'B' : strcat ( bin , " 1011 " ) ; break ; case 'c' : case 'C' : strcat ( bin , " 1100 " ) ; break ; case 'd' : case 'D' : strcat ( bin , " 1101 " ) ; break ; case 'e' : case 'E' : strcat ( bin , " 1110 " ) ; break ; case 'f' : case 'F' : strcat ( bin , " 1111 " ) ; break ; default : printf ( " Invalid hexadecimal input. " ) ; } } printf ( " Hexademial number = %s\n  " , hex ) ; printf ( " Binary number = %s " , bin ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2! = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All odd numbers from %d to %d are : \n  " , start , end ) ; if ( start %2 = = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Alphabets from a - z are : \n  " ) ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { printf ( " %c\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; printf ( " Alphabets from a - z are : \n  " ) ; for ( i = 97 ; i < = 122 ; i + + ) { printf ( " %c\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2! = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All odd numbers from %d to %d are : \n  " , start , end ) ; if ( start %2 = = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , N ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n All negative elements in array are : " ) ; for ( i = 0 ; i <N ; i + + ) { if ( arr [ i ] < 0 ) { printf ( " %d\t " , arr [ i ] ) ; } } return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( int arr [ ] ) ; void rotateByOne ( int arr [ ] ) ; int main ( ) { int i , N ; int arr [ SIZE ] ; printf ( " Enter 10 elements array : " ) ; for ( i = 0 ; i <SIZE ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter number of times to right rotate : " ) ; scanf ( " %d " , & N ) ; N = N % SIZE ; printf ( " Array before rotationn " ) ; printArray ( arr ) ; for ( i = 1 ; i < = N ; i + + ) { rotateByOne ( arr ) ; } printf ( " \n \n Array after rotation\n  " ) ; printArray ( arr ) ; return 0 ; } void rotateByOne ( int arr [ ] ) { int i , last ; last = arr [ SIZE - 1 ] ; for ( i = SIZE-1 ; i> 0 ; i-- ) { arr [ i ] = arr [ i - 1 ] ; } arr [ 0 ] = last ; } void printArray ( int arr [ ] ) { int i ; for ( i = 0 ; i <SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int num , row , col ; printf ( " Enter elements in matrix of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " Enter any number to multiply with matrix A : " ) ; scanf ( " %d " , & num ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { A [ row ] [ col ] = num * A [ row ] [ col ] ; } } printf ( " \n Resultant matrix c.A = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 2 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col ; long det ; printf ( " Enter elements in matrix of size 2x2 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } det = ( A [ 0 ] [ 0 ] * A [ 1 ] [ 1 ] ) - ( A [ 0 ] [ 1 ] * A [ 1 ] [ 0 ] ) ; printf ( " Determinant of matrix A = %ld " , det ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col ; int a , b , c , d , e , f , g , h , i ; long det ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } a = A [ 0 ] [ 0 ] ; b = A [ 0 ] [ 1 ] ; c = A [ 0 ] [ 2 ] ; d = A [ 1 ] [ 0 ] ; e = A [ 1 ] [ 1 ] ; f = A [ 1 ] [ 2 ] ; g = A [ 2 ] [ 0 ] ; h = A [ 2 ] [ 1 ] ; i = A [ 2 ] [ 2 ] ; det = ( a * ( e * i - f * h ) ) - ( b * ( d * i - f * g ) ) + ( c * ( d * h - e * g ) ) ; printf ( " Determinant of matrix A = %ld " , det ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , total = 0 ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( A [ row ] [ col ] = = 0 ) { total + + ; } } } if ( total > = ( row * col ) / 2 ) { printf ( " \n The given matrix is a Sparse matrix. " ) ; } else { printf ( " \n The given matrix is not Sparse matrix. " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int row , col , isSymmetric ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { B [ row ] [ col ] = A [ col ] [ row ] ; } } isSymmetric = 1 ; for ( row = 0 ; row <SIZE & & isSymmetric ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( A [ row ] [ col ] ! = B [ row ] [ col ] ) { isSymmetric = 0 ; break ; } } } if ( isSymmetric = = 1 ) { printf ( " \n The given matrix is Symmetric matrix : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " \n The given matrix is not Symmetric matrix. " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { sum = sum + A [ row ] [ row ] ; } printf ( " \n Sum of main diagonal elements = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( row + col = = ( ( SIZE + 1 ) -2 ) ) { sum + = A [ row ] [ col ] ; } } } printf ( " \n Sum of minor diagonal elements = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int array [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , isUpper ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & array [ row ] [ col ] ) ; } } isUpper = 1 ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col <row & & array [ row ] [ col ] ! = 0 ) { isUpper = 0 ; } } } if ( isUpper = = 1 ) { printf ( " \n The matrix is Upper triangular matrix.\n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , array [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " \n The matrix is not Upper triangular matrix. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , octal ; int i , rem , place = 1 ; octal = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 8 ; octal = ( rem * place ) + octal ; tempDecimal / = 8 ; place * = 10 ; } printf ( " \n Decimal number = %lld\n  " , decimal ) ; printf ( " Octal number = %lld " , octal ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int hexConstant [ ] = { 0 , 1 , 10 , 11 , 100 , 101 , 110 , 111 , 1000 , 1001 , 1010 , 1011 , 1100 , 1101 , 1110 , 1111 } ; long long binary , tempBinary ; char hex [ 20 ] ; int index , i , digit ; printf ( " Enter binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; index = 0 ; while ( tempBinary! = 0 ) { digit = tempBinary % 10000 ; for ( i = 0 ; i <16 ; i + + ) { if ( hexConstant [ i ] = = digit ) { if ( i <10 ) { hex [ index ] = ( char ) ( i + 48 ) ; } else { hex [ index ] = ( char ) ( ( i-10 ) + 65 ) ; } index + + ; break ; } } tempBinary / = 10000 ; } hex [ index ] = '\0' ; strrev ( hex ) ; printf ( " Binary number = %lld\n  " , binary ) ; printf ( " Hexadecimal number = %s " , hex ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long octal , tempOctal , decimal ; int rem , place ; printf ( " Enter any octal number : " ) ; scanf ( " %lld " , & octal ) ; tempOctal = octal ; decimal = 0 ; place = 0 ; while ( tempOctal > 0 ) { rem = tempOctal % 10 ; decimal + = pow ( 8 , place ) * rem ; tempOctal / = 10 ; place + + ; } printf ( " Octal number = %lld\n  " , octal ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col <row ) { sum + = A [ row ] [ col ] ; } } } printf ( " Sum of lower triangular matrix = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , count = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] < 0 ) { count + + ; } } printf ( " \n Total negative elements in array = %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int unit ; float amt , total_amt , sur_charge ; printf ( " Enter total units consumed : " ) ; scanf ( " %d " , & unit ) ; if ( unit < = 50 ) { amt = unit * 0.50 ; } else if ( unit < = 150 ) { amt = 25 + ( ( unit-50 ) * 0.75 ) ; } else if ( unit < = 250 ) { amt = 100 + ( ( unit-150 ) * 1.20 ) ; } else { amt = 220 + ( ( unit-250 ) * 1.50 ) ; } sur_charge = amt * 0.20 ; total_amt = amt + sur_charge ; printf ( " Electricity Bill = Rs. %.2f " , total_amt ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter number to print table : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d * %d = %d\n  " , num , i , ( num * i ) ) ; } return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( int arr [ ] ) ; void rotateByOne ( int arr [ ] ) ; int main ( ) { int i , N ; int arr [ SIZE ] ; printf ( " Enter 10 elements array : " ) ; for ( i = 0 ; i <SIZE ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter number of times to right rotate : " ) ; scanf ( " %d " , & N ) ; N = N % SIZE ; printf ( " Array before rotationn " ) ; printArray ( arr ) ; for ( i = 1 ; i < = N ; i + + ) { rotateByOne ( arr ) ; } printf ( " \n \n Array after rotation\n  " ) ; printArray ( arr ) ; return 0 ; } void rotateByOne ( int arr [ ] ) { int i , last ; last = arr [ SIZE - 1 ] ; for ( i = SIZE-1 ; i> 0 ; i-- ) { arr [ i ] = arr [ i - 1 ] ; } arr [ 0 ] = last ; } void printArray ( int arr [ ] ) { int i ; for ( i = 0 ; i <SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> int main ( ) { int num , sum = 0 , firstDigit , lastDigit ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; firstDigit = num ; while ( num > = 10 ) { num = num / 10 ; } firstDigit = num ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , sum , digits , firstDigit , lastDigit ; sum = 0 ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len ; int freq [ 26 ] ; printf ( " Enter any string : " ) ; gets ( str ) ; len = strlen ( str ) ; for ( i = 0 ; i <26 ; i + + ) { freq [ i ] = 0 ; } for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { freq [ str [ i ] - 97 ] + + ; } else if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { freq [ str [ i ] - 65 ] + + ; } } printf ( " \n Frequency of all characters in the given string : \n  " ) ; for ( i = 0 ; i <26 ; i + + ) { if ( freq [ i ] ! = 0 ) { printf ( " ' %c' = %d\n  " , ( i + 97 ) , freq [ i ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int arr [ 100 ] , freq [ 100 ] ; int size , i , j , count ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; freq [ i ] = -1 ; } for ( i = 0 ; i <size ; i + + ) { count = 1 ; for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; freq [ j ] = 0 ; } } if ( freq [ i ] ! = 0 ) { freq [ i ] = count ; } } printf ( " \n Frequency of all elements of array : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { if ( freq [ i ] ! = 0 ) { printf ( " %d occurs %d times\n  " , arr [ i ] , freq [ i ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , num , rev = 0 ; printf ( " Enter any number to check palindrome : " ) ; scanf ( " %d " , & n ) ; num = n ; while ( n ! = 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n / = 10 ; } if ( rev = = num ) { printf ( " %d is palindrome. " , num ) ; } else { printf ( " %d is not palindrome. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; long long product = 1ll ; printf ( " Enter any number to calculate product of digit : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } printf ( " Product of digits = %lld " , product ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n , num = 0 ; printf ( " Enter any number to print in words : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { num = ( num * 10 ) + ( n % 10 ) ; n / = 10 ; } while ( num ! = 0 ) { switch ( num % 10 ) { case 0 : printf ( " Zero " ) ; break ; case 1 : printf ( " One " ) ; break ; case 2 : printf ( " Two " ) ; break ; case 3 : printf ( " Three " ) ; break ; case 4 : printf ( " Four " ) ; break ; case 5 : printf ( " Five " ) ; break ; case 6 : printf ( " Six " ) ; break ; case 7 : printf ( " Seven " ) ; break ; case 8 : printf ( " Eight " ) ; break ; case 9 : printf ( " Nine " ) ; break ; } num = num / 10 ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int n , num = 0 , digits ; printf ( " Enter any number to print in words : " ) ; scanf ( " %d " , & n ) ; digits = ( int ) log10 ( n ) ; while ( n ! = 0 ) { num = ( num * 10 ) + ( n % 10 ) ; n / = 10 ; } digits = digits - ( ( int ) log10 ( num ) ) ; while ( num ! = 0 ) { switch ( num % 10 ) { case 0 : printf ( " Zero " ) ; break ; case 1 : printf ( " One " ) ; break ; case 2 : printf ( " Two " ) ; break ; case 3 : printf ( " Three " ) ; break ; case 4 : printf ( " Four " ) ; break ; case 5 : printf ( " Five " ) ; break ; case 6 : printf ( " Six " ) ; break ; case 7 : printf ( " Seven " ) ; break ; case 8 : printf ( " Eight " ) ; break ; case 9 : printf ( " Nine " ) ; break ; } num / = 10 ; } while ( digits ) { printf ( " Zero " ) ; digits-- ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { sum = 0 ; for ( col = 0 ; col <SIZE ; col + + ) { sum + = A [ row ] [ col ] ; } printf ( " Sum of elements of Row %d = %d\n  " , row + 1 , sum ) ; } for ( row = 0 ; row <SIZE ; row + + ) { sum = 0 ; for ( col = 0 ; col <SIZE ; col + + ) { sum + = A [ col ] [ row ] ; } printf ( " Sum of elements of Column %d = %d\n  " , row + 1 , sum ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , size , temp ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } size = ( MAX_ROWS < MAX_COLS ) ? MAX_ROWS : MAX_COLS ; for ( row = 0 ; row <size ; row + + ) { col = row ; temp = A [ row ] [ col ] ; A [ row ] [ col ] = A [ row ] [ ( size-col ) - 1 ] ; A [ row ] [ ( size-col ) - 1 ] = temp ; } printf ( " \n Matrix after diagonals interchanged : \n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int array [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , isLower ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & array [ row ] [ col ] ) ; } } isLower = 1 ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col> row & & array [ row ] [ col ] ! = 0 ) { isLower = 0 ; } } } if ( isLower = = 1 ) { printf ( " \n Matrix is Lower triangular matrix : \n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , array [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " \n Matrix is not a Lower triangular matrix " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_ROWS ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col> row ) { sum + = A [ row ] [ col ] ; } } } printf ( " Sum of upper triangular matrix = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtol ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long = %ld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atol ( number ) ; printf ( " Converted long int = %ld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; double decimalNumber ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; decimalNumber = atof ( number ) ; printf ( " Converted floating point number = %lf\n  " , decimalNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long long int bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoll ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long long int = %lld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; unsigned long int bigNumber ; int base ; printf ( " Enter any number : " ) ; gets ( number ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoul ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted unsigned long int = %lu\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int countOccurrences ( FILE * fptr , const char * word ) ; int main ( ) { FILE * fptr ; char path [ 100 ] ; char word [ 50 ] ; int wCount ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to search in file : " ) ; scanf ( " %s " , word ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } wCount = countOccurrences ( fptr , word ) ; printf ( " ' %s' is found %d times in file. " , word , wCount ) ; fclose ( fptr ) ; return 0 ; } int countOccurrences ( FILE * fptr , const char * word ) { char str [ BUFFER_SIZE ] ; char * pos ; int index , count ; count = 0 ; while ( ( fgets ( str , BUFFER_SIZE , fptr ) ) ! = NULL ) { index = 0 ; while ( ( pos = strstr ( str + index , word ) ) ! = NULL ) { index = ( pos - str ) + 1 ; count + + ; } } return count ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int indexOf ( FILE * fptr , const char * word , int * line , int * col ) ; int main ( ) { FILE * fptr ; char path [ 100 ] ; char word [ 50 ] ; int line , col ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to search in file : " ) ; scanf ( " %s " , word ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } indexOf ( fptr , word , & line , & col ) ; if ( line ! = -1 ) printf ( " ' %s' found at line : %d , col : %d\n  " , word , line + 1 , col + 1 ) ; else printf ( " ' %s' does not exists. " , word ) ; fclose ( fptr ) ; return 0 ; } int indexOf ( FILE * fptr , const char * word , int * line , int * col ) { char str [ BUFFER_SIZE ] ; char * pos ; * line = -1 ; * col = -1 ; while ( ( fgets ( str , BUFFER_SIZE , fptr ) ) ! = NULL ) { * line + = 1 ; pos = strstr ( str , word ) ; if ( pos ! = NULL ) { * col = ( pos - str ) ; break ; } } if ( * col = = -1 ) * line = -1 ; return * col ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int lastIndexOf ( FILE * fptr , const char * word , int * line , int * col ) ; int main ( ) { FILE * fptr ; char path [ 100 ] ; char word [ 50 ] ; int line , col ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter word to search in file : " ) ; scanf ( " %s " , word ) ; fptr = fopen ( path , " r " ) ; if ( fptr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } lastIndexOf ( fptr , word , & line , & col ) ; if ( line ! = -1 ) printf ( " Last index of ' %s' line : %d , col : %d\n  " , word , line + 1 , col + 1 ) ; else printf ( " ' %s' does not exists. " , word ) ; fclose ( fptr ) ; return 0 ; } int lastIndexOf ( FILE * fptr , const char * word , int * line , int * col ) { char str [ BUFFER_SIZE ] ; char * pos ; int lfound , cfound ; * line = -1 ; * col = -1 ; lfound = -1 ; cfound = -1 ; while ( ( fgets ( str , BUFFER_SIZE , fptr ) ) ! = NULL ) { * line + = 1 ; * col = -1 ; while ( ( pos = strstr ( str + * col + 1 , word ) ) ! = NULL ) { * col = ( pos - str ) ; lfound = * line ; cfound = * col ; } } if ( cfound = = -1 ) { * line = -1 ; * col = -1 ; } else { * line = lfound ; * col = cfound ; } return * col ; }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 int isEmpty ( const char * str ) ; void removeEmptyLines ( FILE * srcFile , FILE * tempFile ) ; void printFile ( FILE * fptr ) ; int main ( ) { FILE * srcFile ; FILE * tempFile ; char path [ 100 ] ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; srcFile = fopen ( path , " r " ) ; tempFile = fopen ( " remove-blanks.tmp " , " w " ) ; if ( srcFile = = NULL || tempFile = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " \n File contents before removing all empty lines.\n \n  " ) ; printFile ( srcFile ) ; rewind ( srcFile ) ; removeEmptyLines ( srcFile , tempFile ) ; fclose ( srcFile ) ; fclose ( tempFile ) ; remove ( path ) ; rename ( " remove-blanks.tmp " , path ) ; printf ( " \n \n \n File contents after removing all empty line.\n \n  " ) ; srcFile = fopen ( path , " r " ) ; printFile ( srcFile ) ; fclose ( srcFile ) ; return 0 ; } void printFile ( FILE * fptr ) { char ch ; while ( ( ch = fgetc ( fptr ) ) ! = EOF ) putchar ( ch ) ; } int isEmpty ( const char * str ) { char ch ; do { ch = * ( str + + ) ; if ( ch ! = ' ' & & ch ! = '\t' & & ch ! = '\n ' & & ch ! = '\r' & & ch ! = '\0' ) return 0 ; } while ( ch ! = '\0' ) ; return 1 ; } void removeEmptyLines ( FILE * srcFile , FILE * tempFile ) { char buffer [ BUFFER_SIZE ] ; while ( ( fgets ( buffer , BUFFER_SIZE , srcFile ) ) ! = NULL ) { if ( !isEmpty ( buffer ) ) fputs ( buffer , tempFile ) ; } }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 void deleteLine ( FILE * srcFile , FILE * tempFile , const int line ) ; void printFile ( FILE * fptr ) ; int main ( ) { FILE * srcFile ; FILE * tempFile ; char path [ 100 ] ; int line ; printf ( " Enter file path : " ) ; scanf ( " %s " , path ) ; printf ( " Enter line number to remove : " ) ; scanf ( " %d " , & line ) ; srcFile = fopen ( path , " r " ) ; tempFile = fopen ( " delete-line.tmp " , " w " ) ; if ( srcFile = = NULL || tempFile = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check you have read / write previleges.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " \n File contents before removing line.\n \n  " ) ; printFile ( srcFile ) ; rewind ( srcFile ) ; deleteLine ( srcFile , tempFile , line ) ; fclose ( srcFile ) ; fclose ( tempFile ) ; remove ( path ) ; rename ( " delete-line.tmp " , path ) ; printf ( " \n \n \n File contents after removing %d line.\n \n  " , line ) ; srcFile = fopen ( path , " r " ) ; printFile ( srcFile ) ; fclose ( srcFile ) ; return 0 ; } void printFile ( FILE * fptr ) { char ch ; while ( ( ch = fgetc ( fptr ) ) ! = EOF ) putchar ( ch ) ; } void deleteLine ( FILE * srcFile , FILE * tempFile , const int line ) { char buffer [ BUFFER_SIZE ] ; int count = 1 ; while ( ( fgets ( buffer , BUFFER_SIZE , srcFile ) ) ! = NULL ) { if ( line ! = count ) fputs ( buffer , tempFile ) ; count + + ; } }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * file ; char path [ 100 ] ; char ch ; int characters , words , lines ; printf ( " Enter source file path : " ) ; scanf ( " %s " , path ) ; file = fopen ( path , " r " ) ; if ( file = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } characters = words = lines = 0 ; while ( ( ch = fgetc ( file ) ) ! = EOF ) { characters + + ; if ( ch = = '\n ' || ch = = '\0' ) lines + + ; if ( ch = = ' ' || ch = = '\t' || ch = = '\n ' || ch = = '\0' ) words + + ; } if ( characters > 0 ) { words + + ; lines + + ; } printf ( " \n  " ) ; printf ( " Total characters = %d\n  " , characters ) ; printf ( " Total words = %d\n  " , words ) ; printf ( " Total lines = %d\n  " , lines ) ; fclose ( file ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * sourceFile1 ; FILE * sourceFile2 ; FILE * destFile ; char sourcePath1 [ 100 ] ; char sourcePath2 [ 100 ] ; char destPath [ 100 ] ; char ch ; printf ( " Enter first source file path : " ) ; scanf ( " %s " , sourcePath1 ) ; printf ( " Enter second source file path : " ) ; scanf ( " %s " , sourcePath2 ) ; printf ( " Enter destination file path : " ) ; scanf ( " %s " , destPath ) ; sourceFile1 = fopen ( sourcePath1 , " r " ) ; sourceFile2 = fopen ( sourcePath2 , " r " ) ; destFile = fopen ( destPath , " w " ) ; if ( sourceFile1 = = NULL || sourceFile2 = = NULL || destFile = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } while ( ( ch = fgetc ( sourceFile1 ) ) ! = EOF ) fputc ( ch , destFile ) ; while ( ( ch = fgetc ( sourceFile2 ) ) ! = EOF ) fputc ( ch , destFile ) ; printf ( " \n Files merged successfully to ' %s'.\n  " , destPath ) ; fclose ( sourceFile1 ) ; fclose ( sourceFile2 ) ; fclose ( destFile ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * sourceFile ; FILE * destFile ; char sourcePath [ 100 ] ; char destPath [ 100 ] ; char ch ; printf ( " Enter source file path : " ) ; scanf ( " %s " , sourcePath ) ; printf ( " Enter destination file path : " ) ; scanf ( " %s " , destPath ) ; sourceFile = fopen ( sourcePath , " r " ) ; destFile = fopen ( destPath , " w " ) ; if ( sourceFile = = NULL || destFile = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } ch = fgetc ( sourceFile ) ; while ( ch ! = EOF ) { fputc ( ch , destFile ) ; ch = fgetc ( sourceFile ) ; } printf ( " \n Files copied successfully.\n  " ) ; fclose ( sourceFile ) ; fclose ( destFile ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int fcpy ( FILE * sourceFile , FILE * destFile ) ; int main ( ) { FILE * sourceFile ; FILE * destFile ; char sourcePath [ 100 ] ; char destPath [ 100 ] ; int count ; printf ( " Enter source file path : " ) ; scanf ( " %s " , sourcePath ) ; printf ( " Enter destination file path : " ) ; scanf ( " %s " , destPath ) ; sourceFile = fopen ( sourcePath , " r " ) ; destFile = fopen ( destPath , " w " ) ; if ( sourceFile = = NULL || destFile = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check if file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } count = fcpy ( sourceFile , destFile ) ; printf ( " \n Files copied successfully.\n  " ) ; printf ( " %d characters copied.\n  " , count ) ; fclose ( sourceFile ) ; fclose ( destFile ) ; return 0 ; } int fcpy ( FILE * sourceFile , FILE * destFile ) { int count = 0 ; char ch ; while ( ( ch = fgetc ( sourceFile ) ) ! = EOF ) { fputc ( ch , destFile ) ; count + + ; } return count ; }
#include <stdio.h> #include <stdlib.h> int compareFile ( FILE * fPtr1 , FILE * fPtr2 , int * line , int * col ) ; int main ( ) { FILE * fPtr1 ; FILE * fPtr2 ; char path1 [ 100 ] ; char path2 [ 100 ] ; int diff ; int line , col ; printf ( " Enter path of first file : " ) ; scanf ( " %s " , path1 ) ; printf ( " Enter path of second file : " ) ; scanf ( " %s " , path2 ) ; fPtr1 = fopen ( path1 , " r " ) ; fPtr2 = fopen ( path2 , " r " ) ; if ( fPtr1 = = NULL || fPtr2 = = NULL ) { printf ( " \n Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } diff = compareFile ( fPtr1 , fPtr2 , & line , & col ) ; if ( diff = = 0 ) { printf ( " \n Both files are equal. " ) ; } else { printf ( " \n Files are not equal.\n  " ) ; printf ( " Line : %d , col : %d\n  " , line , col ) ; } fclose ( fPtr1 ) ; fclose ( fPtr2 ) ; return 0 ; } int compareFile ( FILE * fPtr1 , FILE * fPtr2 , int * line , int * col ) { char ch1 , ch2 ; * line = 1 ; * col = 0 ; do { ch1 = fgetc ( fPtr1 ) ; ch2 = fgetc ( fPtr2 ) ; if ( ch1 = = '\n ' ) { * line + = 1 ; * col = 0 ; } if ( ch1 ! = ch2 ) return -1 ; * col + = 1 ; } while ( ch1 ! = EOF & & ch2 ! = EOF ) ; if ( ch1 = = EOF & & ch2 = = EOF ) return 0 ; else return -1 ; }
#include <stdio.h> #include <stdlib.h> #define BUFFER_SIZE 1000 void readFile ( FILE * fPtr ) ; int main ( ) { FILE * fPtr ; char filePath [ 100 ] ; char dataToAppend [ BUFFER_SIZE ] ; printf ( " Enter file path : " ) ; scanf ( " %s " , filePath ) ; fPtr = fopen ( filePath , " a " ) ; if ( fPtr = = NULL ) { printf ( " \n Unable to open ' %s' file.\n  " , filePath ) ; printf ( " Please check whether file exists and you have write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " \n Enter data to append : " ) ; fflush ( stdin ) ; fgets ( dataToAppend , BUFFER_SIZE , stdin ) ; fputs ( dataToAppend , fPtr ) ; fPtr = freopen ( filePath , " r " , fPtr ) ; printf ( " \n Successfully appended data to file. \n  " ) ; printf ( " Changed file contents : \n \n  " ) ; readFile ( fPtr ) ; fclose ( fPtr ) ; return 0 ; } void readFile ( FILE * fPtr ) { char ch ; do { ch = fgetc ( fPtr ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; unsigned long long int bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoull ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted unsigned long long int = %llu\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) malloc ( max * sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < max ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) calloc ( max , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < max ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { int i , max , newSize ; int * ptr ; printf ( " Enter total number of elements : " ) ; scanf ( " %d " , & max ) ; ptr = ( int * ) calloc ( max , sizeof ( int ) ) ; if ( ptr = = NULL ) { printf ( " Memory is not created!!! " ) ; exit ( 0 ) ; } printf ( " Enter %d elements : \n  " , max ) ; for ( i = 0 ; i < max ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Enter new size of the array : " ) ; scanf ( " %d " , & newSize ) ; ptr = ( int * ) realloc ( ptr , ( newSize * sizeof ( int ) ) ) ; printf ( " \n Enter %d elements : \n  " , ( newSize - max ) ) ; for ( i = max ; i < newSize ; i + + ) scanf ( " %d " , ( ptr + i ) ) ; printf ( " \n Array elements are : \n  " ) ; for ( i = 0 ; i < newSize ; i + + ) printf ( " %d " , * ( ptr + i ) ) ; free ( ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 24 ; printf ( " 24 / ( 2^1 ) = > %d\n  " , ( a > > 1 ) ) ; printf ( " 24 / ( 2^2 ) = > %d\n  " , ( a > > 2 ) ) ; printf ( " 24 / ( 2^3 ) = > %d\n  " , ( a > > 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 12 ; printf ( " 12 * ( 2^1 ) = > %d\n  " , ( a < < 1 ) ) ; printf ( " 12 * ( 2^2 ) = > %d\n  " , ( a < < 2 ) ) ; printf ( " 12 * ( 2^3 ) = > %d\n  " , ( a < < 3 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 , num2 = 21 ; if ( num1 & 1 ) printf ( " %d is an ODD number.\n  " , num1 ) ; else printf ( " %d is an EVEN number.\n  " , num1 ) ; if ( num2 & 1 ) printf ( " %d is an ODD number.\n  " , num2 ) ; else printf ( " %d is an EVEN number.\n  " , num2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { unsigned char flag = 0 ; flag = flag | 1 ; flag = flag | 2 ; flag = flag | 4 ; printf ( " flag , DECIMAL = %d , HEX = %x\n \n  " , flag , flag ) ; if ( flag & 1 ) printf ( " You are married.\n  " ) ; else printf ( " You are not married.\n  " ) ; if ( flag & 2 ) printf ( " You are eligible for voting.\n  " ) ; else printf ( " You are not eligible for voting.\n  " ) ; if ( flag & 4 ) printf ( " You are eligible to get VISA.\n  " ) ; else printf ( " You are not eligible to get VISA.\n  " ) ; flag = flag & ( ~ ( 1 < < 0 ) ) ; flag = flag & ( ~ ( 1 < < 1 ) ) ; flag = flag & ( ~ ( 1 < < 2 ) ) ; printf ( " \n flag , DECIMAL = %d , HEX = %x\n  " , flag , flag ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 8 ; printf ( " 1s complement of %d = %d\n  " , num , ( ~num ) ) ; printf ( " 2s complement of %d = %d\n  " , num , ( ~num + 1 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " 'a' = > ' %c'\n  " , ( 'a' | ' ' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'A' | ' ' ) ) ; printf ( " 'a' = > ' %c'\n  " , ( 'a' & '_' ) ) ; printf ( " 'A' = > ' %c'\n  " , ( 'a' & '_' ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 , b = 20 , x ; x = a ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = a ^ b ^ x ; printf ( " x = %d\n  " , x ) ; x = x ^ x ; printf ( " x = %d\n  " , x ) ; return 0 ; }
#include <stdio.h> int main ( ) { int x = 10 , y = 20 ; int min = ( y ^ ( x ^ y ) & - ( x < y ) ) ; int max = ( x ^ ( x ^ y ) & - ( x < y ) ) ; printf ( " Minimum ( 10 , 20 ) = > %d\n  " , min ) ; printf ( " Maximum ( 10 , 20 ) = > %d\n  " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b ; printf ( " Enter two numbers to swap : " ) ; scanf ( " %d %d " , & a , & b ) ; printf ( " Original value : a = %d , b = %d\n  " , a , b ) ; a ^ = b ; b ^ = a ; a ^ = b ; printf ( " Swapped value : a = %d , b = %d\n  " , a , b ) ; return 0 ; }
#include <stdio.h> #define KEY 22 int main ( ) { char text [ 100 ] ; int i ; printf ( " Enter text to encrypt : " ) ; fgets ( text , 100 , stdin ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { text [ i ] = text [ i ] ^ KEY ; } printf ( " Encrypted text : %s\n  " , text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { text [ i ] = text [ i ] ^ KEY ; } printf ( " Original text : %s\n  " , text ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( int arr [ ] ) ; void rotateByOne ( int arr [ ] ) ; int main ( ) { int i , N ; int arr [ SIZE ] ; printf ( " Enter 10 elements array : " ) ; for ( i = 0 ; i <SIZE ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter number of times to left rotate : " ) ; scanf ( " %d " , & N ) ; N = N % SIZE ; printf ( " Array before rotationn " ) ; printArray ( arr ) ; for ( i = 1 ; i < = N ; i + + ) { rotateByOne ( arr ) ; } printf ( " \n \n Array after rotation\n  " ) ; printArray ( arr ) ; return 0 ; } void rotateByOne ( int arr [ ] ) { int i , first ; first = arr [ 0 ] ; for ( i = 0 ; i <SIZE-1 ; i + + ) { arr [ i ] = arr [ i + 1 ] ; } arr [ SIZE-1 ] = first ; } void printArray ( int arr [ ] ) { int i ; for ( i = 0 ; i <SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long long int bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atoll ( number ) ; printf ( " Converted long long int = %lld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; unsigned long long int bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoull ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted unsigned long long int = %llu\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long long int bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoll ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long long int = %lld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; unsigned long int bigNumber ; int base ; printf ( " Enter any number : " ) ; gets ( number ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtoul ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted unsigned long int = %lu\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; char * endPtr ; long bigNumber ; int base ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; bigNumber = strtol ( number , & endPtr , base ) ; if ( * endPtr ) printf ( " Unable to convert ' %s' to base %d. " , number , base ) ; else printf ( " Converted long = %ld\n  " , bigNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; double decimalNumber ; printf ( " Enter any number : " ) ; fgets ( number , 30 , stdin ) ; decimalNumber = atof ( number ) ; printf ( " Converted floating point number = %lf\n  " , decimalNumber ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; long bigNum ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; bigNum = atol ( number ) ; printf ( " Converted long int = %ld\n  " , bigNum ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { char number [ 30 ] ; int num ; printf ( " Enter any integer : " ) ; fgets ( number , 30 , stdin ) ; num = atoi ( number ) ; printf ( " Converted integer = %d\n  " , num ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> int isEven ( const int NUM ) ; int isPrime ( const int NUM ) ; int main ( ) { FILE * fPtrIn , * fPtrEven , * fPtrOdd , * fPtrPrime ; int num , success ; fPtrIn = fopen ( " data / numbers.txt " , " r " ) ; fPtrEven = fopen ( " data / even-numbers.txt " , " w " ) ; fPtrOdd = fopen ( " data / odd-numbers.txt " , " w " ) ; fPtrPrime = fopen ( " data / prime-numbers.txt " , " w " ) ; if ( fPtrIn = = NULL || fPtrEven = = NULL || fPtrOdd = = NULL || fPtrPrime = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read / write privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading integers from file. \n \n  " ) ; do { success = fscanf ( fPtrIn , " %d " , & num ) ; if ( isPrime ( num ) ) fprintf ( fPtrPrime , " %d\n  " , num ) ; else if ( isEven ( num ) ) fprintf ( fPtrEven , " %d\n  " , num ) ; else fprintf ( fPtrOdd , " %d\n  " , num ) ; } while ( success ! = -1 ) ; fclose ( fPtrIn ) ; fclose ( fPtrEven ) ; fclose ( fPtrOdd ) ; fclose ( fPtrPrime ) ; printf ( " Data written to files successfully. " ) ; return 0 ; } int isEven ( const int NUM ) { return ! ( NUM & 1 ) ; } int isPrime ( const int NUM ) { int i ; if ( NUM < 0 ) return 0 ; for ( i = 2 ; i < = NUM / 2 ; i + + ) { if ( NUM % i = = 0 ) { return 0 ; } } return 1 ; }
#include <stdio.h> #include <stdlib.h> int main ( ) { FILE * fPtr ; char ch ; fPtr = fopen ( " data / file1.txt " , " r " ) ; if ( fPtr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading file contents character by character. \n \n  " ) ; do { ch = fgetc ( fPtr ) ; putchar ( ch ) ; } while ( ch ! = EOF ) ; fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #include <string.h> #define BUFFER_SIZE 1000 int main ( ) { FILE * fPtr ; char buffer [ BUFFER_SIZE ] ; int totalRead = 0 ; fPtr = fopen ( " data / file2.txt " , " r " ) ; if ( fPtr = = NULL ) { printf ( " Unable to open file.\n  " ) ; printf ( " Please check whether file exists and you have read privilege.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " File opened successfully. Reading file contents line by line. \n \n  " ) ; while ( fgets ( buffer , BUFFER_SIZE , fPtr ) ! = NULL ) { totalRead = strlen ( buffer ) ; buffer [ totalRead - 1 ] = buffer [ totalRead - 1 ] = = '\n ' ? '\0' : buffer [ totalRead - 1 ] ; printf ( " %s\n  " , buffer ) ; } fclose ( fPtr ) ; return 0 ; }
#include <stdio.h> #include <stdlib.h> #define DATA_SIZE 1000 int main ( ) { char data [ DATA_SIZE ] ; FILE * fPtr ; fPtr = fopen ( " data / file1.txt " , " w " ) ; if ( fPtr = = NULL ) { printf ( " Unable to create file.\n  " ) ; exit ( EXIT_FAILURE ) ; } printf ( " Enter contents to store in file : \n  " ) ; fgets ( data , DATA_SIZE , stdin ) ; fputs ( data , fPtr ) ; fclose ( fPtr ) ; printf ( " File created and saved successfully. 🙂 \n  " ) ; return 0 ; }
#include <stdio.h> void greetMorning ( ) ; void greeEvening ( ) ; void greetNight ( ) ; void greet ( void ( * greeter ) ( ) ) ; int main ( ) { greet ( greetMorning ) ; greet ( greeEvening ) ; greet ( greetNight ) ; return 0 ; } void greet ( void ( * greeter ) ( ) ) { greeter ( ) ; } void greetMorning ( ) { printf ( " Good , morning!\n  " ) ; } void greeEvening ( ) { printf ( " Good , evening!\n  " ) ; } void greetNight ( ) { printf ( " Good , night!\n  " ) ; }
#include <stdio.h> #define SIZE 10 int * getNEvenNumbers ( const int N , int * numbers ) ; int main ( ) { int evenNumbers [ SIZE ] ; int i ; getNEvenNumbers ( SIZE , evenNumbers ) ; printf ( " First %d even numbers are : \n  " , SIZE ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d " , * ( evenNumbers + i ) ) ; } return 0 ; } int * getNEvenNumbers ( const int N , int * numbers ) { int i ; for ( i = 0 ; i < N ; i + + ) { * ( numbers + i ) = 2 * ( i + 1 ) ; } return numbers ; }
#include <stdio.h> #define MAX_SIZE 10 typedef struct MinMax { int min ; int max ; } MinMax ; MinMax getMinMax ( int * array , const int SIZE ) ; int main ( ) { int array [ MAX_SIZE ] ; int N , i ; MinMax arrayMinMax ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in array : " , N ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , ( array + i ) ) ; } arrayMinMax = getMinMax ( array , N ) ; printf ( " Minimum value in array : %d \n  " , arrayMinMax.min ) ; printf ( " Maximum value in array : %d \n  " , arrayMinMax.max ) ; return 0 ; } MinMax getMinMax ( int * numbers , const int SIZE ) { int i ; int min = * ( numbers + 0 ) ; int max = * ( numbers + 0 ) ; MinMax arrayMinMax ; for ( i = 0 ; i < SIZE ; i + + ) { if ( * ( numbers + i ) < min ) min = * ( numbers + i ) ; if ( * ( numbers + i ) > max ) max = * ( numbers + i ) ; } arrayMinMax.min = min ; arrayMinMax.max = max ; return arrayMinMax ; }
#include <stdio.h> #define MAX_SIZE 100 void getMinMax ( int * numbers , int size , int * min , int * max ) ; int main ( ) { int arr [ MAX_SIZE ] , size , i ; int min , max ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d elements in array : " , size ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , ( arr + i ) ) ; } getMinMax ( arr , size , & min , & max ) ; printf ( " Minimum element in array : %d\n  " , min ) ; printf ( " Maximum element in array : %d\n  " , max ) ; return 0 ; } void getMinMax ( int * numbers , int size , int * min , int * max ) { int i ; * min = * ( numbers + 0 ) ; * max = * ( numbers + 0 ) ; for ( i = 0 ; i < size ; i + + ) { if ( * ( numbers + i ) < * ( min ) ) * min = * ( numbers + i ) ; if ( * ( numbers + i ) > * ( max ) ) * max = * ( numbers + i ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void inputMatrix ( int matrix [ ] [ COLS ] , int rows , int cols ) ; void printMatrix ( int matrix [ ] [ COLS ] , int rows , int cols ) ; int main ( ) { int matrix [ ROWS ] [ COLS ] ; int i , j ; printf ( " Enter elements in %dx %d matrix.\n  " , ROWS , COLS ) ; inputMatrix ( matrix , ROWS , COLS ) ; printf ( " Elements of %dx %d matrix.\n  " , ROWS , COLS ) ; printMatrix ( matrix , ROWS , COLS ) ; return 0 ; } void inputMatrix ( int matrix [ ] [ COLS ] , int rows , int cols ) { int i , j ; for ( i = 0 ; i < rows ; i + + ) { for ( j = 0 ; j < cols ; j + + ) { scanf ( " %d " , ( * ( matrix + i ) + j ) ) ; } } } void printMatrix ( int ( * matrix ) [ COLS ] , int rows , int cols ) { int i , j ; for ( i = 0 ; i < rows ; i + + ) { for ( j = 0 ; j < cols ; j + + ) { printf ( " %d " , * ( * ( matrix + i ) + j ) ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> int * getArray ( ) { int num [ ] = { 1 , 2 , 3 , 4 , 5 } ; int i ; printf ( " Array inside function : " ) ; for ( i = 0 ; i < 5 ; + + i ) { printf ( " %d\n  " , num [ i ] ) ; } return num ; } int main ( ) { int i ; int * num ; num = getArray ( ) ; printf ( " Array outside function : \n  " ) ; for ( i = 0 ; i < 5 ; + + i ) { printf ( " %d\n  " , num [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 10 void getArray ( int arr [ ] , int size ) ; int main ( ) { int arr [ MAX_SIZE ] ; int i ; getArray ( arr , MAX_SIZE ) ; printf ( " \n \n Array outside function : \n  " ) ; for ( i = 0 ; i < MAX_SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } return 0 ; } void getArray ( int arr [ ] , int size ) { int i ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n \n Array inside function : \n  " ) ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void printMatrix ( int mat [ ] [ COLS ] ) ; int main ( ) { int mat [ ROWS ] [ COLS ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; printMatrix ( mat ) ; return 0 ; } void printMatrix ( int mat [ ] [ COLS ] ) { int i , j ; printf ( " Elements in matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { printf ( " %d " , mat [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void inputMatrix ( int ( * mat ) [ COLS ] ) ; void printMatrix ( int mat [ ] [ COLS ] ) ; int main ( ) { int mat [ ROWS ] [ COLS ] ; inputMatrix ( mat ) ; printMatrix ( mat ) ; return 0 ; } void inputMatrix ( int ( * mat ) [ COLS ] ) { int i , j ; printf ( " Enter elements in 2D matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { scanf ( " %d " , ( * ( mat + i ) + j ) ) ; } } } void printMatrix ( int ( * mat ) [ COLS ] ) { int i , j ; printf ( " Elements in matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { printf ( " %d " , * ( * ( mat + i ) + j ) ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #define ROWS 3 #define COLS 3 void matrixAddition ( int mat1 [ ] [ COLS ] , int mat2 [ ] [ COLS ] , int res [ ] [ COLS ] ) ; void printMatrix ( int mat [ ] [ COLS ] ) ; int main ( ) { int mat1 [ ROWS ] [ COLS ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int mat2 [ ROWS ] [ COLS ] = { { 1 , 1 , 1 } , { 2 , 2 , 2 } , { 3 , 3 , 3 } } ; int res [ ROWS ] [ COLS ] ; matrixAddition ( mat1 , mat2 , res ) ; printMatrix ( res ) ; return 0 ; } void matrixAddition ( int mat1 [ ] [ COLS ] , int mat2 [ ] [ COLS ] , int res [ ] [ COLS ] ) { int i , j ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { res [ i ] [ j ] = mat1 [ i ] [ j ] + mat2 [ i ] [ j ] ; } } } void printMatrix ( int mat [ ] [ COLS ] ) { int i , j ; printf ( " Elements in matrix : \n  " ) ; for ( i = 0 ; i < ROWS ; i + + ) { for ( j = 0 ; j < COLS ; j + + ) { printf ( " %d " , mat [ i ] [ j ] ) ; } printf ( " \n  " ) ; } }
#include <stdio.h> #define INT_SIZE sizeof ( int ) #define INT_BITS INT_SIZE * 8 - 1 int rotateLeft ( int num , unsigned int rotation ) ; int rotateRight ( int num , unsigned int rotation ) ; int main ( ) { int num ; unsigned int rotation ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter number of rotation : " ) ; scanf ( " %u " , & rotation ) ; printf ( " %d left rotated %u times = %d\n \n  " , num , rotation , rotateLeft ( num , rotation ) ) ; printf ( " %d right rotated %u times = %d\n  " , num , rotation , rotateRight ( num , rotation ) ) ; return 0 ; } int rotateLeft ( int num , unsigned int rotation ) { int DROPPED_MSB ; rotation % = INT_BITS ; while ( rotation-- ) { DROPPED_MSB = ( num > > INT_BITS ) & 1 ; num = ( num < < 1 ) | DROPPED_MSB ; } return num ; } int rotateRight ( int num , unsigned int rotation ) { int DROPPED_LSB ; rotation % = INT_BITS ; while ( rotation-- ) { DROPPED_LSB = num & 1 ; num = ( num > > 1 ) & ( ~ ( 1 < < INT_BITS ) ) ; num = num | ( DROPPED_LSB < < INT_BITS ) ; } return num ; }
#include <stdio.h> #define MAX_SIZE 100 void inputArray ( int * arr , int size ) ; int search ( int * arr , int size , int toSearch ) ; int main ( ) { int array [ MAX_SIZE ] ; int size , toSearch , searchIndex ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; inputArray ( array , size ) ; printf ( " Enter element to search : " ) ; scanf ( " %d " , & toSearch ) ; searchIndex = search ( array , size , toSearch ) ; if ( searchIndex = = -1 ) printf ( " %d does not exists in array. " , toSearch ) ; else printf ( " %d is found at %d position. " , toSearch , searchIndex + 1 ) ; return 0 ; } void inputArray ( int * arr , int size ) { int * arrEnd = ( arr + size - 1 ) ; while ( arr < = arrEnd ) { scanf ( " %d " , arr + + ) ; } } int search ( int * arr , int size , int toSearch ) { int index = 0 ; int * arrEnd = ( arr + size - 1 ) ; while ( arr < = arrEnd & & * arr ! = toSearch ) { arr + + ; index + + ; } if ( arr < = arrEnd ) return index ; return -1 ; }
#include <stdio.h> #define MAX_SIZE 100 void printArr ( int * arr , int size ) ; int main ( ) { int arr [ MAX_SIZE ] ; int size ; int * left = arr ; int * right ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; right = & arr [ size - 1 ] ; printf ( " Enter elements in array : " ) ; while ( left < = right ) { scanf ( " %d " , left + + ) ; } printf ( " \n Array before reverse : " ) ; printArr ( arr , size ) ; left = arr ; while ( left < right ) { * left ^ = * right ; * right ^ = * left ; * left ^ = * right ; left + + ; right-- ; } printf ( " \n Array after reverse : " ) ; printArr ( arr , size ) ; return 0 ; } void printArr ( int * arr , int size ) { int * arrEnd = ( arr + size - 1 ) ; while ( arr < = arrEnd ) { printf ( " %d , " , * arr ) ; arr + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void inputArray ( int * arr , int size ) ; void printArray ( int * arr , int size ) ; void swapArray ( int * sourceArr , int * destArr , int size ) ; int main ( ) { int sourceArr [ MAX_SIZE ] ; int destArr [ MAX_SIZE ] ; int size ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d elements in source array : " , size ) ; inputArray ( sourceArr , size ) ; printf ( " Enter %d elements in destination array : " , size ) ; inputArray ( destArr , size ) ; printf ( " \n \n Source array before swapping : " ) ; printArray ( sourceArr , size ) ; printf ( " \n Destination array before swapping : " ) ; printArray ( destArr , size ) ; swapArray ( sourceArr , destArr , size ) ; printf ( " \n \n Source array after swapping : " ) ; printArray ( sourceArr , size ) ; printf ( " \n Destination array after swapping : " ) ; printArray ( destArr , size ) ; return 0 ; } void inputArray ( int * arr , int size ) { int * arrEnd = ( arr + ( size - 1 ) ) ; while ( arr < = arrEnd ) scanf ( " %d " , arr + + ) ; } void printArray ( int * arr , int size ) { int * arrEnd = ( arr + ( size - 1 ) ) ; while ( arr < = arrEnd ) printf ( " %d , " , * ( arr + + ) ) ; } void swapArray ( int * sourceArr , int * destArr , int size ) { int * sourceArrEnd = ( sourceArr + ( size - 1 ) ) ; int * destArrEnd = ( destArr + ( size - 1 ) ) ; while ( sourceArr < = sourceArrEnd & & destArr < = destArrEnd ) { * sourceArr ^ = * destArr ; * destArr ^ = * sourceArr ; * sourceArr ^ = * destArr ; sourceArr + + ; destArr + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void printArray ( int arr [ ] , int size ) ; int main ( ) { int source_arr [ MAX_SIZE ] , dest_arr [ MAX_SIZE ] ; int size , i ; int * source_ptr = source_arr ; int * dest_ptr = dest_arr ; int * end_ptr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i < size ; i + + ) { scanf ( " %d " , ( source_ptr + i ) ) ; } end_ptr = & source_arr [ size - 1 ] ; printf ( " \n Source array before copying : " ) ; printArray ( source_arr , size ) ; printf ( " \n Destination array before copying : " ) ; printArray ( dest_arr , size ) ; while ( source_ptr < = end_ptr ) { * dest_ptr = * source_ptr ; source_ptr + + ; dest_ptr + + ; } printf ( " \n \n Source array after copying : " ) ; printArray ( source_arr , size ) ; printf ( " \n Destination array after copying : " ) ; printArray ( dest_arr , size ) ; return 0 ; } void printArray ( int * arr , int size ) { int i ; for ( i = 0 ; i < size ; i + + ) { printf ( " %d , " , * ( arr + i ) ) ; } }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; int * ptr = arr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : \n  " ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Array elements : " ) ; for ( i = 0 ; i < N ; i + + ) { printf ( " %d , " , * ptr ) ; ptr + + ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; int * ptr = arr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : \n  " ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , ( ptr + i ) ) ; } printf ( " Array elements : " ) ; for ( i = 0 ; i < N ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; int * ptr = arr ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : \n  " ) ; for ( i = 0 ; i < N ; i + + ) { scanf ( " %d " , & ptr [ i ] ) ; } printf ( " Array elements : " ) ; for ( i = 0 ; i < N ; i + + ) { printf ( " %d , " , i [ ptr ] ) ; } return 0 ; }
#include <stdio.h> int add ( int , int ) ; int sub ( int , int ) ; int main ( ) { int sum , diff ; int ( * arith ) ( int , int ) ; arith = add ; sum = arith ( 10 , 20 ) ; arith = sub ; diff = arith ( 100 , 30 ) ; printf ( " 10 + 20 = > %d\n  " , sum ) ; printf ( " 100-30 = > %d\n  " , diff ) ; return 0 ; } int add ( int num1 , int num2 ) { return ( num1 + num2 ) ; } int sub ( int num1 , int num2 ) { return ( num1 - num2 ) ; }
#include <stdio.h> #include <stdlib.h> #define SIZE 10 void printArray ( int * , int ) ; int sort_ascending ( const void * , const void * ) ; int sort_descending ( const void * , const void * ) ; int main ( ) { int array [ SIZE ] = { 20 , 80 , 100 , 50 , 40 , 30 , 60 , 90 , 70 , 10 } ; int ( * compare ) ( const void * , const void * ) ; printf ( " Unsorted array " ) ; printArray ( array , SIZE ) ; compare = sort_ascending ; qsort ( array , SIZE , sizeof ( int ) , compare ) ; printf ( " \n \n Ascending sorted array " ) ; printArray ( array , SIZE ) ; compare = sort_descending ; qsort ( array , SIZE , sizeof ( int ) , compare ) ; printf ( " \n \n Descending sorted array " ) ; printArray ( array , SIZE ) ; return 0 ; } int sort_ascending ( const void * num1 , const void * num2 ) { return ( * ( int * ) num1 ) - ( * ( int * ) num2 ) ; } int sort_descending ( const void * num1 , const void * num2 ) { return ( * ( int * ) num2 ) - ( * ( int * ) num1 ) ; } void printArray ( int * array , int size ) { int i ; printf ( " \n Array elements are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d , " , * ( array + i ) ) ; } }
#include <stdio.h> #define SIZE 10 void printArray ( void * vPtr , int size , int type ) ; int main ( ) { int num [ SIZE ] = { 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 } ; float fractional [ SIZE ] = { 1.1f , 1.2f , 1.3f , 1.4f , 1.5f , 1.6f , 1.7f , 1.8f , 1.9f , 2.0f } ; char characters [ SIZE ] = { 'C' , 'o' , 'd' , 'e' , 'f' , 'o' , 'r' , 'w' , 'i' , 'n' } ; printf ( " \n Elements of integer array : " ) ; printArray ( & num , SIZE , 1 ) ; printf ( " \n Elements of float array : " ) ; printArray ( & fractional , SIZE , 2 ) ; printf ( " \n Elements of character array : " ) ; printArray ( & characters , SIZE , 3 ) ; return 0 ; } void printArray ( void * vPtr , int size , int type ) { int i ; for ( i = 0 ; i <size ; i + + ) { switch ( type ) { case 1 : printf ( " %d , " , * ( ( int * ) vPtr + i ) ) ; break ; case 2 : printf ( " %f , " , * ( ( float * ) vPtr + i ) ) ; break ; case 3 : printf ( " %c , " , * ( ( char * ) vPtr + i ) ) ; break ; } } }
#include <stdio.h> int main ( ) { int num1 , num2 ; int * const const_ptr = & num1 ; * const_ptr = 10 ; const_ptr = & num2 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * const_ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; const int * ptr_const ; ptr_const = & num ; num = 20 ; * ptr_const = 100 ; printf ( " Num = %d\n  " , num ) ; printf ( " Num = %d\n  " , * ptr_const ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; const int * const ptr = & num1 ; ptr = & num2 ; * ptr = 100 ; printf ( " Num1 = %d\n  " , num1 ) ; printf ( " Num1 = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int arr [ SIZE ] ; int * ptr = arr ; int i ; printf ( " Enter %d array elements : " , SIZE ) ; while ( ptr < & arr [ SIZE ] ) { scanf ( " %d " , ptr ) ; ptr + + ; } ptr = arr ; printf ( " Elements in array are : " ) ; for ( i = 0 ; i < SIZE ; i + + ) { printf ( " %d , " , * ( ptr + i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; int * ptr = & num ; int * * dPtr = & ptr ; num = 10 ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; printf ( " Value pointed by dPtr = %d \n \n  " , * * dPtr ) ; * ptr = 100 ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; printf ( " Value pointed by dPtr = %d \n \n  " , * * dPtr ) ; * * dPtr = 1000 ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; printf ( " Value pointed by dPtr = %d \n \n  " , * * dPtr ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ptr ) ; ptr + + ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr ; int count ; ptr = & arr [ 0 ] ; count = 0 ; printf ( " Accessing array elements using pointer \n  " ) ; while ( count < SIZE ) { printf ( " arr [ %d ] = %d \n  " , count , * ( ptr + count ) ) ; count + + ; } return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int arr [ SIZE ] = { 10 , 20 , 30 , 40 , 50 } ; int * ptr = & arr [ 0 ] ; printf ( " Accessing array elements using pointer \n  " ) ; while ( ptr < & arr [ SIZE ] ) { printf ( " %d \n  " , * ptr ) ; ptr + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Address of num in hexadecimal = %x " , & num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , * ( & num ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 1 ; int * ptr = & num ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Address of num = %x \n \n  " , & num ) ; printf ( " Value of ptr = %x \n  " , ptr ) ; printf ( " Address of ptr = %x \n  " , & ptr ) ; printf ( " Value pointed by ptr = %d \n \n  " , * ptr ) ; num = 10 ; printf ( " After changing value of num directly. \n  " ) ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n \n  " , * ptr ) ; * ptr = 100 ; printf ( " After changing value pointed by ptr. \n  " ) ; printf ( " Value of num = %d \n  " , num ) ; printf ( " Value pointed by ptr = %d \n  " , * ptr ) ; return 0 ; }
#include <stdio.h> #define ROW_SIZE 4 #define COL_SIZE 3 int main ( ) { int matrix [ ROW_SIZE ] [ COL_SIZE ] ; int row , col ; printf ( " Enter elements in matrix of size %dx %d \n  " , ROW_SIZE , COL_SIZE ) ; for ( row = 0 ; row <ROW_SIZE ; row + + ) { for ( col = 0 ; col <COL_SIZE ; col + + ) { scanf ( " %d " , & matrix [ row ] [ col ] ) ; } } printf ( " \n Elements in matrix are : \n  " ) ; for ( row = 0 ; row <ROW_SIZE ; row + + ) { for ( col = 0 ; col <COL_SIZE ; col + + ) { printf ( " %d " , matrix [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE1 2 #define SIZE2 2 #define SIZE3 3 int main ( ) { int arr [ SIZE1 ] [ SIZE2 ] [ SIZE3 ] ; int i , j , k ; printf ( " Enter elements in three-dimensional array of size %dx %dx %d \n  " , SIZE1 , SIZE2 , SIZE3 ) ; for ( i = 0 ; i < SIZE1 ; i + + ) { for ( j = 0 ; j < SIZE2 ; j + + ) { for ( k = 0 ; k < SIZE3 ; k + + ) { scanf ( " %d " , & arr [ i ] [ j ] [ k ] ) ; } } } printf ( " \n Elements in three-dimensional array are : \n  " ) ; for ( i = 0 ; i < SIZE1 ; i + + ) { for ( j = 0 ; j < SIZE2 ; j + + ) { for ( k = 0 ; k < SIZE3 ; k + + ) { printf ( " %d\n  " , arr [ i ] [ j ] [ k ] ) ; } } } return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int marks [ SIZE ] ; int index , sum ; float avg ; printf ( " Enter marks of %d students : " , SIZE ) ; for ( index = 0 ; index <SIZE ; index + + ) { scanf ( " %d " , & marks [ index ] ) ; } sum = 0 ; for ( index = 0 ; index <SIZE ; index + + ) { sum = sum + marks [ index ] ; } avg = ( float ) sum / SIZE ; printf ( " Average marks = %f " , avg ) ; return 0 ; }
#include <stdio.h> #define SIZE 5 int main ( ) { int array [ SIZE ] ; int index ; for ( index = 0 ; index < = SIZE ; index + + ) { scanf ( " %d " , & array [ index ] ) ; } return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> int num ; void display ( ) { int i ; for ( i = 1 ; i < = num ; i + + ) { printf ( " num = %d\n  " , i ) ; } }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> extern int num1 , num2 ; int main ( ) { num1 = 10 ; num2 = 20 ; printf ( " num1 = %d , num2 = %d " , num1 , num2 ) ; return 0 ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 = 10 ; static int n2 = 10 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; n1 + + ; n2 + + ; }
#include <stdio.h> void display ( ) ; int main ( ) { display ( ) ; display ( ) ; return 0 ; } void display ( ) { int n1 ; static int n2 ; printf ( " Local n1 = %d , Static n2 = %d\n  " , n1 , n2 ) ; }
#include <stdio.h> int main ( ) { int outervariable = 10 ; { printf ( " I can access outervariable in inner block = %d\n  " , outervariable ) ; } printf ( " I can also access outervariable in same block = %d " , outervariable ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; printf ( " 'num' is accessible within same block = %d\n  " , num ) ; { int num = 20 ; printf ( " Inner block 'num' shadows outer block 'num' = %d\n  " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; printf ( " 'num1 = %d' and 'num2 = %d' declared in outer block is accessible within same block.\n  " , num1 , num2 ) ; { int sum = num1 + num2 ; printf ( " sum = %d\n  " , sum ) ; } return 0 ; }
#include <stdio.h> #include <stdarg.h> #include <limits.h> int maximum ( int num , ... ) ; int main ( ) { printf ( " Max ( 10 , 2 ) = %d\n  " , maximum ( 2 , 10 , 2 ) ) ; printf ( " Max ( 4 , 2 , 3 , 0 ) = %d\n  " , maximum ( 4 , 4 , 2 , 3 , 0 ) ) ; printf ( " Max ( 1 , 2 , 3 , 4 , 10 , 20 , 30 ) = %d\n  " , maximum ( 7 , 1 , 2 , 3 , 4 , 10 , 20 , 30 ) ) ; printf ( " Max ( 100 , 10 , 0 , 1 , 2 , 3 , 4 , 10 , 20 , 12 ) = %d\n  " , maximum ( 10 , 100 , 10 , 0 , 1 , 2 , 3 , 4 , 10 , 20 , 12 ) ) ; return 0 ; } int maximum ( int num , ... ) { int max = INT_MIN ; int count ; int value ; va_list list ; va_start ( list , num ) ; for ( count = 1 ; count < = num ; count + + ) { value = va_arg ( list , int ) ; if ( value > max ) max = value ; } va_end ( list ) ; return max ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = N || i = = j || j = = ( N - i + 1 ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> void print ( int n ) ; int main ( ) { print ( 5 ) ; return 0 ; } void print ( int n ) { printf ( " %d " , n ) ; if ( n < = 1 ) { return ; } print ( n - 1 ) ; }
#include <stdio.h> void generateFibo ( ) ; int main ( ) { generateFibo ( ) ; return 0 ; } void generateFibo ( ) { int a , b , c , i , terms ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & terms ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; for ( i = 1 ; i < = terms ; i + + ) { printf ( " %d , " , c ) ; a = b ; b = c ; c = a + b ; } }
#include <stdio.h> void printNaturalNumbers ( int start , int end ) ; int main ( ) { int s , e ; printf ( " Enter lower range to print natural numbers : " ) ; scanf ( " %d " , & s ) ; printf ( " Enter upper limit to print natural numbers : " ) ; scanf ( " %d " , & e ) ; printNaturalNumbers ( s , e ) ; return 0 ; } void printNaturalNumbers ( int start , int end ) { printf ( " Natural numbers from %d to %d are : \n  " , start , end ) ; while ( start < = end ) { printf ( " %d , " , start ) ; start + + ; } }
#include <stdio.h> #include <stdlib.h> int randPrime ( ) ; int main ( ) { int i ; printf ( " Random 5 prime numbers are : \n  " ) ; for ( i = 1 ; i < = 5 ; i + + ) { printf ( " %d\n  " , randPrime ( ) ) ; } return 0 ; } int randPrime ( ) { int i , n , isPrime ; isPrime = 0 ; while ( !isPrime ) { n = rand ( ) ; isPrime = 1 ; for ( i = 2 ; i < = n / 2 ; i + + ) { if ( n %i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { return n ; } } }
#include <stdio.h> int evenOdd ( int num ) ; int main ( ) { int num , isEven ; printf ( " Enter a number : " ) ; scanf ( " %d " , & num ) ; isEven = evenOdd ( num ) ; if ( isEven = = 0 ) printf ( " The given number is EVEN. " ) ; else printf ( " The given number is ODD. " ) ; return 0 ; } int evenOdd ( int num ) { if ( num % 2 = = 0 ) return 0 ; else return 1 ; }
#include <stdio.h> int max ( int num1 , int num2 ) ; int main ( ) { int num1 , num2 , maximum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; maximum = max ( num1 , num2 ) ; printf ( " Maximum = %d " , maximum ) ; return 0 ; } int max ( int num1 , int num2 ) { int maximum ; if ( num1 > num2 ) maximum = num1 ; else maximum = num2 ; return maximum ; }
#include <stdio.h> void swap ( int num1 , int num2 ) { int temp ; printf ( " In Function values before swapping : %d %d\n  " , num1 , num2 ) ; temp = num1 ; num1 = num2 ; num2 = temp ; printf ( " In Function values after swapping : %d %d\n \n  " , num1 , num2 ) ; } int main ( ) { int n1 , n2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " In Main values before swapping : %d %d\n \n  " , n1 , n2 ) ; swap ( n1 , n2 ) ; printf ( " In Main values after swapping : %d %d " , n1 , n2 ) ; return 0 ; }
#include <stdio.h> void swap ( int * num1 , int * num2 ) { int temp ; printf ( " In Function values before swapping : %d %d\n  " , * num1 , * num2 ) ; temp = * num1 ; * num1 = * num2 ; * num2 = temp ; printf ( " In Function values after swapping : %d %d\n \n  " , * num1 , * num2 ) ; } int main ( ) { int n1 , n2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; printf ( " In Main values before swapping : %d %d\n \n  " , n1 , n2 ) ; swap ( & n1 , & n2 ) ; printf ( " In Main values after swapping : %d %d " , n1 , n2 ) ; return 0 ; }
#include <stdio.h> int add ( int num1 , int num2 ) ; int main ( ) { int n1 , n2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & n1 , & n2 ) ; sum = add ( n1 , n2 ) ; printf ( " Sum = %d " , sum ) ; return 0 ; } int add ( int num1 , int num2 ) { int s = num1 + num2 ; return s ; }
#include <stdio.h> int main ( ) { int i = 1 ; start : goto print ; print : printf ( " %d " , i ) ; goto next ; increment : i + + ; goto print ; next : if ( i < 10 ) goto increment ; else goto exit ; printf ( " I cannot execute. " ) ; exit : return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 10 ; j + + ) { k = 1 ; while ( k < = 10 ) { if ( j = = 5 & & k = = 5 ) { goto out_of_loop ; } printf ( " %d " , k ) ; k + + ; } } } out_of_loop : return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Even numbers between 1 to 100 : \n  " ) ; for ( num = 1 ; num < = 100 ; num + + ) { if ( num % 2 = = 1 ) continue ; printf ( " %d " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , isPrime , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; isPrime = 1 ; for ( i = 2 ; i <num ; i + + ) { if ( num % i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " Number is prime number. " ) ; } else { printf ( " Number is composite number. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j ; for ( i = 1 ; i < = 10 ; i + + ) { for ( j = 1 ; j < = 5 ; j + + ) { printf ( " %d\t " , ( i * j ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; do { printf ( " %d " , n ) ; n + + ; } while ( n < = 10 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n = 1 ; while ( n < = 10 ) { printf ( " %d " , n ) ; n + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int count ; for ( count = 1 ; count < = 10 ; count + + ) { printf ( " %d " , count ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; switch ( week ) { case 1 : printf ( " Its Monday.\n  " ) ; printf ( " Its a busy day. " ) ; break ; case 2 : printf ( " Its Tuesday. " ) ; break ; case 3 : printf ( " Its Wednesday. " ) ; break ; case 4 : printf ( " Its Thursday.\n  " ) ; printf ( " Feeling bit relaxed. " ) ; break ; case 5 : printf ( " Its Friday. " ) ; break ; case 6 : printf ( " Its Saturday.\n  " ) ; printf ( " It is weekend. " ) ; break ; case 7 : printf ( " Its Sunday.\n  " ) ; printf ( " Hurray! Its holiday. " ) ; break ; default : printf ( " Um! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { printf ( " Num1 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } else { if ( num2 > num3 ) { printf ( " Num2 is max. " ) ; } else { printf ( " Num3 is max. " ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " First number is maximum. " ) ; } else { printf ( " Second number is maximum. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num < 0 ) { printf ( " NUMBER IS NEGATIVE. " ) ; } else if ( num = = 0 ) { printf ( " NUMBER IS ZERO. " ) ; } else { printf ( " NUMBER IS POSITIVE. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int age ; printf ( " Enter your age : " ) ; scanf ( " %d " , & age ) ; if ( age > = 18 ) { printf ( " You are eligible to vote in India. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char grade ; printf ( " Enter student grade : " ) ; grade = getchar ( ) ; putchar ( grade ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'A' ; int val = ch + 10 ; printf ( " val = %d " , val ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 ; float average ; num1 = 91 ; num2 = 85 ; num3 = 83 ; average = ( float ) ( num1 + num2 + num3 ) / 3 ; printf ( " Average = %f " , average ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , pi , area ; pi = 3.14159 ; radius = 12 ; area = pi * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { const float PI = 3.14159 ; float radius , area ; PI = 3.14 ; radius = 12 ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> #define PI 3.14159 int main ( ) { float radius , area ; printf ( " Enter radius : " ) ; scanf ( " %f " , & radius ) ; area = PI * radius * radius ; printf ( " Area = %f " , area ) ; return 0 ; }
#include <stdio.h> void printUnsignedRange ( int bytes ) { int bits = 8 * bytes ; unsigned long long to = ( 1LLU < < ( bits - 1 ) ) + ( ( 1LL < < ( bits - 1 ) ) - 1 ) ; ; printf ( " 0 to %llu\n \n  " , to ) ; } void printSignedRange ( int bytes ) { int bits = 8 * bytes ; long long from = - ( 1LL < < ( bits - 1 ) ) ; long long to = ( 1LL < < ( bits - 1 ) ) - 1 ; printf ( " %lld to %lld\n \n  " , from , to ) ; } int main ( ) { printf ( " Range of char = " ) ; printSignedRange ( sizeof ( char ) ) ; printf ( " Range of unsigned char = " ) ; printUnsignedRange ( sizeof ( unsigned char ) ) ; printf ( " Range of short = " ) ; printSignedRange ( sizeof ( short ) ) ; printf ( " Range of unsigned short = " ) ; printUnsignedRange ( sizeof ( unsigned short ) ) ; printf ( " Range of int = " ) ; printSignedRange ( sizeof ( int ) ) ; printf ( " Range of unsigned int = " ) ; printUnsignedRange ( sizeof ( unsigned int ) ) ; printf ( " Range of long = " ) ; printSignedRange ( sizeof ( long ) ) ; printf ( " Range of unsigned long = " ) ; printUnsignedRange ( sizeof ( unsigned long ) ) ; printf ( " Range of long long = " ) ; printSignedRange ( sizeof ( long long ) ) ; printf ( " Range of unsigned long long = " ) ; printUnsignedRange ( sizeof ( unsigned long long ) ) ; return 0 ; }
#include <stdio.h> #include <limits.h> #include <float.h> int main ( ) { printf ( " Range of signed char %d to %d\n  " , SCHAR_MIN , SCHAR_MAX ) ; printf ( " Range of unsigned char 0 to %d\n \n  " , UCHAR_MAX ) ; printf ( " Range of signed short int %d to %d\n  " , SHRT_MIN , SHRT_MAX ) ; printf ( " Range of unsigned short int 0 to %d\n \n  " , USHRT_MAX ) ; printf ( " Range of signed int %d to %d\n  " , INT_MIN , INT_MAX ) ; printf ( " Range of unsigned int 0 to %lu\n \n  " , UINT_MAX ) ; printf ( " Range of signed long int %ld to %ld\n  " , LONG_MIN , LONG_MAX ) ; printf ( " Range of unsigned long int 0 to %lu\n \n  " , ULONG_MAX ) ; printf ( " Range of signed long long int %lld to %lld\n  " , LONG_LONG_MIN , LONG_LONG_MAX ) ; printf ( " Range of unsigned long long int 0 to %llu\n \n  " , ULONG_LONG_MAX ) ; printf ( " Range of float %e to %e\n  " , FLT_MIN , FLT_MAX ) ; printf ( " Range of double %e to %e\n  " , DBL_MIN , DBL_MAX ) ; printf ( " Range of long double %e to %e\n  " , LDBL_MIN , LDBL_MAX ) ; return 0 ; }
#include <stdio.h> int main ( ) { int integerVar ; printf ( " Size of char = %d\n  " , sizeof ( char ) ) ; printf ( " Size of int = %d\n  " , sizeof ( integerVar ) ) ; printf ( " Size of expression ( 3 + 2.5 ) = %d\n  " , sizeof ( 3 + 2.5 ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " sizeof ( char ) = %d\n \n  " , sizeof ( char ) ) ; printf ( " sizeof ( short ) = %d\n  " , sizeof ( short ) ) ; printf ( " sizeof ( int ) = %d\n  " , sizeof ( int ) ) ; printf ( " sizeof ( long ) = %d\n  " , sizeof ( long ) ) ; printf ( " sizeof ( long long ) = %d\n \n  " , sizeof ( long long ) ) ; printf ( " sizeof ( float ) = %d\n  " , sizeof ( float ) ) ; printf ( " sizeof ( double ) = %d\n  " , sizeof ( double ) ) ; printf ( " sizeof ( long double ) = %d\n  " , sizeof ( long double ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter two number : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 = 10 ; int num2 = 20 ; int max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum is %d. " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; a = 10 ; b = + + a ; c = a + + printf ( " a = %d , b = %d , c = %d " , a , b , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a = 10 ; int b = 20 ; int c = a + b ; printf ( " Sum = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Learn at Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , World! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> int main ( ) { printf ( " Hello , Codeforwin! " ) ; return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( int arr [ ] ) ; void rotateByOne ( int arr [ ] ) ; int main ( ) { int i , N ; int arr [ SIZE ] ; printf ( " Enter 10 elements array : " ) ; for ( i = 0 ; i <SIZE ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter number of times to right rotate : " ) ; scanf ( " %d " , & N ) ; N = N % SIZE ; printf ( " Array before rotationn " ) ; printArray ( arr ) ; for ( i = 1 ; i < = N ; i + + ) { rotateByOne ( arr ) ; } printf ( " \n \n Array after rotation\n  " ) ; printArray ( arr ) ; return 0 ; } void rotateByOne ( int arr [ ] ) { int i , last ; last = arr [ SIZE - 1 ] ; for ( i = SIZE-1 ; i> 0 ; i-- ) { arr [ i ] = arr [ i - 1 ] ; } arr [ 0 ] = last ; } void printArray ( int arr [ ] ) { int i ; for ( i = 0 ; i <SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> int main ( ) { int i , j , N ; int k = 1 ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } k = j - 2 ; for ( j = 1 ; j <i ; j + + , k-- ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 10 void printArray ( int arr [ ] ) ; void rotateByOne ( int arr [ ] ) ; int main ( ) { int i , N ; int arr [ SIZE ] ; printf ( " Enter 10 elements array : " ) ; for ( i = 0 ; i <SIZE ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter number of times to left rotate : " ) ; scanf ( " %d " , & N ) ; N = N % SIZE ; printf ( " Array before rotationn " ) ; printArray ( arr ) ; for ( i = 1 ; i < = N ; i + + ) { rotateByOne ( arr ) ; } printf ( " \n \n Array after rotation\n  " ) ; printArray ( arr ) ; return 0 ; } void rotateByOne ( int arr [ ] ) { int i , first ; first = arr [ 0 ] ; for ( i = 0 ; i <SIZE-1 ; i + + ) { arr [ i ] = arr [ i + 1 ] ; } arr [ SIZE-1 ] = first ; } void printArray ( int arr [ ] ) { int i ; for ( i = 0 ; i <SIZE ; i + + ) { printf ( " %d " , arr [ i ] ) ; } }
#include <stdio.h> int main ( ) { int i , j , size ; printf ( " Enter size : " ) ; scanf ( " %d " , & size ) ; for ( i = 1 ; i <size * 2 ; i + + ) { for ( j = 1 ; j < = size ; j + + ) { if ( ( i = = 1 & & ( j = = 1 || j = = size ) ) || ( i = = size & & ( j = = 1 || j = = size ) ) || ( i = = size * 2-1 & & ( j = = 1 || j = = size ) ) ) { printf ( " " ) ; } else if ( i = = 1 || i = = size || i = = ( size * 2 ) -1 || j = = 1 || j = = size ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> void swap ( int * num1 , int * num2 ) ; int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Before swapping in main n " ) ; printf ( " Value of num1 = %d \n  " , num1 ) ; printf ( " Value of num2 = %d \n \n  " , num2 ) ; swap ( & num1 , & num2 ) ; printf ( " After swapping in main n " ) ; printf ( " Value of num1 = %d \n  " , num1 ) ; printf ( " Value of num2 = %d \n \n  " , num2 ) ; return 0 ; } void swap ( int * num1 , int * num2 ) { int temp ; temp = * num1 ; * num1 = * num2 ; * num2 = temp ; printf ( " After swapping in swap function n " ) ; printf ( " Value of num1 = %d \n  " , * num1 ) ; printf ( " Value of num2 = %d \n \n  " , * num2 ) ; }
#include <stdio.h> int main ( ) { float num1 , num2 ; float * ptr1 , * ptr2 ; float sum , diff , mult , div ; ptr1 = & num1 ; ptr2 = & num2 ; printf ( " Enter any two real numbers : " ) ; scanf ( " %f %f " , ptr1 , ptr2 ) ; sum = ( * ptr1 ) + ( * ptr2 ) ; diff = ( * ptr1 ) - ( * ptr2 ) ; mult = ( * ptr1 ) * ( * ptr2 ) ; div = ( * ptr1 ) / ( * ptr2 ) ; printf ( " Sum = %.2f\n  " , sum ) ; printf ( " Difference = %.2f\n  " , diff ) ; printf ( " Product = %.2f\n  " , mult ) ; printf ( " Quotient = %.2f\n  " , div ) ; return 0 ; }
#include <stdio.h> int main ( ) { char character = 'C' ; int integer = 1 ; float real = 10.4f ; long long biginteger = 989898989ll ; printf ( " Value of character = %c , Address of character = %u\n  " , character , & character ) ; printf ( " Value of integer = %d , Address of integer = %u\n  " , integer , & integer ) ; printf ( " Value of real = %f , Address of real = %u\n  " , real , & real ) ; printf ( " Value of biginteger = %lld , Address of biginteger = %u " , biginteger , & biginteger ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num = 10 ; int * ptr ; ptr = & num ; printf ( " Address of num = %d\n  " , & num ) ; printf ( " Value of num = %d\n  " , num ) ; printf ( " Address of ptr = %d\n  " , & ptr ) ; printf ( " Value of ptr = %d\n  " , ptr ) ; printf ( " Value pointed by ptr = %d\n  " , * ptr ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } printf ( " %d " , i ) ; for ( j = 1 ; j < = ( ( N - i ) * 2 - 1 ) ; j + + ) { printf ( " " ) ; } if ( i ! = N ) printf ( " %d " , i ) ; printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } printf ( " %d " , i ) ; for ( j = 1 ; j < = ( ( N - i ) * 2 - 1 ) ; j + + ) { printf ( " " ) ; } printf ( " %d " , i ) ; printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int k = 1 ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = i ) printf ( " %d " , j ) ; else printf ( " " ) ; } k = j - 2 ; for ( j = 1 ; j <i ; j + + , k-- ) { if ( i = = 1 || i = = N || j = = i-1 ) printf ( " %d " , k ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ 100 ] , reverse [ 100 ] ; int len , i , index , wordStart , wordEnd ; printf ( " Enter any string : " ) ; gets ( str ) ; len = strlen ( str ) ; index = 0 ; wordStart = len - 1 ; wordEnd = len - 1 ; while ( wordStart > 0 ) { if ( str [ wordStart ] = = ' ' ) { i = wordStart + 1 ; while ( i < = wordEnd ) { reverse [ index ] = str [ i ] ; i + + ; index + + ; } reverse [ index + + ] = ' ' ; wordEnd = wordStart - 1 ; } wordStart-- ; } for ( i = 0 ; i < = wordEnd ; i + + ) { reverse [ index ] = str [ i ] ; index + + ; } reverse [ index ] = '\0' ; printf ( " Original string \n  %s\n \n  " , str ) ; printf ( " Reverse ordered words \n  %s " , reverse ) ; return 0 ; }
#include <stdio.h> #define BASE 10 int main ( ) { long long num , n ; int i , lastDigit ; int freq [ BASE ] ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; for ( i = 0 ; i <BASE ; i + + ) { freq [ i ] = 0 ; } n = num ; while ( n ! = 0 ) { lastDigit = n % 10 ; n / = 10 ; freq [ lastDigit ] + + ; } printf ( " Frequency of each digit in %lld is : \n  " , num ) ; for ( i = 0 ; i <BASE ; i + + ) { printf ( " Frequency of %d = %d\n  " , i , freq [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = i ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( k % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( k & 1 ) ) ; k + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( i & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j % 2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( j & 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = N-1 ; j> = i ; j-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = ( i * 2 ) ; j < ( N * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = N-1 ; i> = 1 ; i-- ) { for ( j = ( i * 2 ) ; j < ( N * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 - 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int count ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; count = N * 2 - 1 ; for ( i = 1 ; i < = count ; i + + ) { for ( j = 1 ; j < = count ; j + + ) { if ( j = = i || ( j = = count - i + 1 ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = ( N * 2 - 1 ) ; i + + ) { if ( i = = N ) { for ( j = 1 ; j < = ( N * 2 - 1 ) ; j + + ) { printf ( " + " ) ; } } else { for ( j = 1 ; j < = N-1 ; j + + ) { printf ( " " ) ; } printf ( " + " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = ( i * i ) ; j + = i ) { printf ( " %-3d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , firstDigit , digits , placeValue ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num > 0 ) { printf ( " %d\n  " , num ) ; digits = ( int ) log10 ( num ) ; placeValue = ( int ) ceil ( pow ( 10 , digits ) ) ; firstDigit = ( int ) ( num / placeValue ) ; num = num - ( placeValue * firstDigit ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { printf ( " %d\n  " , num ) ; num = num / 10 ; } return 0 ; }
#include <stdio.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; while ( num ! = 0 ) { count + + ; num / = 10 ; } printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long num ; int count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %lld " , & num ) ; count = log10 ( num ) + 1 ; printf ( " Total digits : %d " , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( i < = ( N / 2 ) ) { printf ( " %d " , i ) ; } else { printf ( " %d " , ( N - i + 1 ) ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , count , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; count = 0 ; for ( i = 1 ; i < = N ; i + + ) { value = ( i & 1 ) ? ( count + 1 ) : ( count + i ) ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; if ( i & 1 ) value + + ; else value-- ; count + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; diff = 1 ; value = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff + + ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , diff , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { diff = N-1 ; value = i ; for ( j = 1 ; j < = i ; j + + ) { printf ( " %-3d " , value ) ; value + = diff ; diff-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { if ( i & 1 ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } } else { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i * 2 ; j <N * 2 ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 2 ; j < = i * 2 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2 ; j> = 2 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 2 ; j < = i * 2 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2 ; j> = 2 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2 ) -1 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2-1 ; j> = 1 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 ) -1 ; j + = 2 ) { printf ( " %d " , j ) ; } for ( j = ( i-1 ) * 2-1 ; j> = 1 ; j- = 2 ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , value , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { value = i + 1 ; for ( j = 3 ; j < = i ; j + + ) { printf ( " %d " , value ) ; value + + ; } for ( j = ( i * 2 ) -1 ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , colCount , value ; colCount = 1 ; value = 1 ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = colCount ; j + + ) { if ( value = = 10 ) value = 1 ; printf ( " %d " , value ) ; value + + ; } printf ( " \n  " ) ; colCount * = 2 ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , even , odd ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter %d elements in array : " , size ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } even = 0 ; odd = 0 ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] %2 = = 0 ) { even + + ; } else { odd + + ; } } printf ( " Total even elements : %d\n  " , even ) ; printf ( " Total odd elements : %d " , odd ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , cols ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( ( i = = 1 || i = = rows ) & & ( j = = 1 || j = = cols ) ) { printf ( " 0 " ) ; } else if ( i = = 1 || i = = rows || j = = 1 || j = = cols ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int i , j , n ; char name [ 50 ] ; int len ; printf ( " Enter your name : " ) ; gets ( name ) ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; len = strlen ( name ) ; for ( i = n / 2 ; i < = n ; i + = 2 ) { for ( j = 1 ; j <n-i ; j + = 2 ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } for ( j = 1 ; j < = n-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = n ; i> = 1 ; i-- ) { for ( j = i ; j <n ; j + + ) { printf ( " " ) ; } if ( i = = n ) { for ( j = 1 ; j < = ( n * 2-len ) / 2 ; j + + ) { printf ( " * " ) ; } printf ( " %s " , name ) ; for ( j = 1 ; j < ( n * 2-len ) / 2 ; j + + ) { printf ( " * " ) ; } } else { for ( j = 1 ; j < = ( i * 2 ) -1 ; j + + ) { printf ( " * " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; k = 1 ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = N ; j> = i ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { if ( i & 1 ) k = 1 ; else k = 2 ; for ( j = 1 ; j < = i ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = ( ( N-i ) * 2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = ( i * 2 ) - 1 ; for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + , k + = 2 ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , k , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { k = i ; for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + , k + + ) { printf ( " %d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = i ; j < = N-1 ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( N-i + 1 ) ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = ( N-i + 1 ) ; j> 1 ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = i ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N-i + 1 ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , ( N - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = N ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> i ; j-- ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = i ; j <N ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 10 int main ( ) { int i , j , N ; int board [ SIZE ] [ SIZE ] ; int left , top ; left = 0 ; top = SIZE - 1 ; N = 1 ; for ( i = 1 ; i < = SIZE / 2 ; i + + , left + + , top-- ) { for ( j = left ; j < = top ; j + + , N + + ) { board [ left ] [ j ] = N ; } for ( j = left + 1 ; j < = top ; j + + , N + + ) { board [ j ] [ top ] = N ; } for ( j = top-1 ; j> = left ; j-- , N + + ) { board [ top ] [ j ] = N ; } for ( j = top-1 ; j> = left + 1 ; j-- , N + + ) { board [ j ] [ left ] = N ; } } for ( i = 0 ; i <SIZE ; i + + ) { for ( j = 0 ; j <SIZE ; j + + ) { printf ( " %-5d " , board [ i ] [ j ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int N , i , j ; printf ( " Enter N : " ) ; scanf ( " %d " , & N ) ; for ( i = N ; i> = 1 ; i-- ) { for ( j = N ; j> i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , i ) ; } for ( j = i + 1 ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i <N ; i + + ) { for ( j = N ; j> i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = ( i * 2-1 ) ; j + + ) { printf ( " %d " , i + 1 ) ; } for ( j = i + 1 ; j < = N ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , cols ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = rows ; i> = 1 ; i-- ) { for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } for ( j = i ; j> 1 ; j-- ) { printf ( " %d " , cols ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = cols ; j> cols-i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = cols-i ; j + + ) { printf ( " %d " , ( rows - i + 1 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = rows ; i> = 1 ; i-- ) { for ( j = 1 ; j < = i-1 ; j + + ) { printf ( " %d " , i ) ; } for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = cols ; j> = i ; j-- ) { printf ( " %d " , j ) ; } for ( j = 1 ; j < = i-1 ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i-1 ; j + + ) { printf ( " %d " , i ) ; } for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } for ( j = i-1 ; j> = 1 ; j-- ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j , k ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; k = 1 ; for ( i = 1 ; i < = rows ; i + + ) { if ( i %2 = = 0 ) k = 2 ; else k = 1 ; for ( j = 1 ; j < = cols ; j + + ) { printf ( " %-3d " , k ) ; k + = 2 ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j , k ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; k = 1 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + , k + + ) { printf ( " %-3d " , k ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < i + cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , j ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , i ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j , k ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; k = 1 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( k = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } k * = -1 ; } if ( cols % 2 = = 0 ) { k * = -1 ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( i = = j || ( j = = ( cols + 1 ) - i ) ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; int centerRow , centerCol ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; centerRow = ( rows + 1 ) / 2 ; centerCol = ( cols + 1 ) / 2 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( centerCol = = j || centerRow = = i ) { printf ( " 0 " ) ; } else if ( ( cols %2 = = 0 & & centerCol + 1 = = j ) || ( rows %2 = = 0 & & centerRow + 1 = = i ) ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; int centerRow , centerCol ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; centerRow = ( rows + 1 ) / 2 ; centerCol = ( cols + 1 ) / 2 ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( centerCol = = j & & centerRow = = i ) { printf ( " 0 " ) ; } else if ( cols %2 = = 0 & & centerCol + 1 = = j ) { if ( centerRow = = i || ( rows %2 = = 0 & & centerRow + 1 = = i ) ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } else if ( rows %2 = = 0 & & centerRow + 1 = = i ) { if ( centerCol = = j || ( cols %2 = = 0 & & centerCol + 1 = = j ) ) printf ( " 0 " ) ; else printf ( " 1 " ) ; } else { printf ( " 1 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = cols ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( j %2 = = 1 ) { printf ( " 0 " ) ; } else { printf ( " 1 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ! ( j %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { if ( i %2 = = 1 ) { printf ( " 1 " ) ; } else { printf ( " 0 " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " %d " , ( i %2 ) ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int rows , cols , i , j ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & cols ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = cols ; j + + ) { printf ( " 1 " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #include <stdlib.h> #define MAX_SIZE 100 char * removeBlanks ( const char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; char * newString ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before removing blanks : \n ' %s' " , str ) ; newString = removeBlanks ( str ) ; printf ( " \n \n String after removing blanks : \n ' %s' " , newString ) ; return 0 ; } char * removeBlanks ( const char * str ) { int i , j ; char * newString ; newString = ( char * ) malloc ( MAX_SIZE ) ; i = 0 ; j = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = ' ' ) { newString [ j ] = ' ' ; j + + ; while ( str [ i ] = = ' ' ) i + + ; } newString [ j ] = str [ i ] ; i + + ; j + + ; } newString [ j ] = '\0' ; return newString ; }
#include <stdio.h> #define MAX_SIZE 100 void replaceAll ( char * str , char oldChar , char newChar ) ; int main ( ) { char str [ MAX_SIZE ] , oldChar , newChar ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to replace : " ) ; oldChar = getchar ( ) ; getchar ( ) ; printf ( " Enter character to replace ' %c' with : " , oldChar ) ; newChar = getchar ( ) ; printf ( " \n String before replacing : \n  %s " , str ) ; replaceAll ( str , oldChar , newChar ) ; printf ( " \n \n String after replacing ' %c' with ' %c' : \n  %s " , oldChar , newChar , str ) ; return 0 ; } void replaceAll ( char * str , char oldChar , char newChar ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = oldChar ) { str [ i ] = newChar ; } i + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void replaceLast ( char * str , char oldChar , char newChar ) ; int main ( ) { char str [ MAX_SIZE ] , oldChar , newChar ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to replace : " ) ; oldChar = getchar ( ) ; getchar ( ) ; printf ( " Enter character to replace ' %c' with : " , oldChar ) ; newChar = getchar ( ) ; printf ( " \n String before replacing : \n  %s " , str ) ; replaceLast ( str , oldChar , newChar ) ; printf ( " \n \n String after replacing ' %c' with ' %c' : \n  %s " , oldChar , newChar , str ) ; return 0 ; } void replaceLast ( char * str , char oldChar , char newChar ) { int i , lastIndex ; lastIndex = -1 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = oldChar ) { lastIndex = i ; } i + + ; } if ( lastIndex ! = -1 ) { str [ lastIndex ] = newChar ; } }
#include <stdio.h> #define MAX_SIZE 100 void replaceFirst ( char * str , char oldChar , char newChar ) ; int main ( ) { char str [ MAX_SIZE ] , oldChar , newChar ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to replace : " ) ; oldChar = getchar ( ) ; getchar ( ) ; printf ( " Enter character to replace ' %c' with : " , oldChar ) ; newChar = getchar ( ) ; printf ( " \n String before replacing : %s\n  " , str ) ; replaceFirst ( str , oldChar , newChar ) ; printf ( " String after replacing first ' %c' with ' %c' : %s " , oldChar , newChar , str ) ; return 0 ; } void replaceFirst ( char * str , char oldChar , char newChar ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = oldChar ) { str [ i ] = newChar ; break ; } i + + ; } }
#include <stdio.h> #define MAX_SIZE 100 void trim ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before trimming white space : \n ' %s' " , str ) ; trim ( str ) ; printf ( " \n \n String after trimming white space : \n ' %s' " , str ) ; return 0 ; } void trim ( char * str ) { int index , i ; index = 0 ; while ( str [ index ] = = ' ' || str [ index ] = = '\t' || str [ index ] = = '\n ' ) { index + + ; } i = 0 ; while ( str [ i + index ] ! = '\0' ) { str [ i ] = str [ i + index ] ; i + + ; } str [ i ] = '\0' ; i = 0 ; index = -1 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] ! = ' ' & & str [ i ] ! = '\t' & & str [ i ] ! = '\n ' ) { index = i ; } i + + ; } str [ index + 1 ] = '\0' ; }
#include <stdio.h> #define MAX_SIZE 100 void trimTrailing ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before trimming trailing white space : \n ' %s' " , str ) ; trimTrailing ( str ) ; printf ( " \n \n String after trimming trailing white spaces : \n ' %s' " , str ) ; return 0 ; } void trimTrailing ( char * str ) { int index , i ; index = -1 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] ! = ' ' & & str [ i ] ! = '\t' & & str [ i ] ! = '\n ' ) { index = i ; } i + + ; } str [ index + 1 ] = '\0' ; }
#include <stdio.h> #define MAX_SIZE 100 void trimLeading ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " \n String before trimming leading whitespace : \n  %s " , str ) ; trimLeading ( str ) ; printf ( " \n \n String after trimming leading whitespace : \n  %s " , str ) ; return 0 ; } void trimLeading ( char * str ) { int index , i , j ; index = 0 ; while ( str [ index ] = = ' ' || str [ index ] = = '\t' || str [ index ] = = '\n ' ) { index + + ; } if ( index ! = 0 ) { i = 0 ; while ( str [ i + index ] ! = '\0' ) { str [ i ] = str [ i + index ] ; i + + ; } str [ i ] = '\0' ; } }
#include <stdio.h> #define MAX_SIZE 100 void removeDuplicates ( char * str ) ; void removeAll ( char * str , const char toRemove , int index ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " String before removing duplicates : %s\n  " , str ) ; removeDuplicates ( str ) ; printf ( " String after removing duplicates : %s\n  " , str ) ; return 0 ; } void removeDuplicates ( char * str ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { removeAll ( str , str [ i ] , i + 1 ) ; i + + ; } } void removeAll ( char * str , const char toRemove , int index ) { int i ; while ( str [ index ] ! = '\0' ) { if ( str [ index ] = = toRemove ) { i = index ; while ( str [ i ] ! = '\0' ) { str [ i ] = str [ i + 1 ] ; i + + ; } } else { index + + ; } } }
#include <stdio.h> #define MAX_SIZE 100 #define MAX_CHARS 255 int main ( ) { char str [ MAX_SIZE ] ; int freq [ MAX_CHARS ] ; int i = 0 , min ; int ascii ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { freq [ i ] = 0 ; } i = 0 ; while ( str [ i ] ! = '\0' ) { ascii = ( int ) str [ i ] ; freq [ ascii ] + = 1 ; i + + ; } min = 0 ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { if ( freq [ i ] ! = 0 ) { if ( freq [ min ] = = 0 || freq [ i ] < freq [ min ] ) min = i ; } } printf ( " Minimum occurring character is ' %c' = %d. " , min , freq [ min ] ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 #define MAX_CHARS 255 int main ( ) { char str [ MAX_SIZE ] ; int freq [ MAX_CHARS ] ; int i = 0 , max ; int ascii ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { freq [ i ] = 0 ; } i = 0 ; while ( str [ i ] ! = '\0' ) { ascii = ( int ) str [ i ] ; freq [ ascii ] + = 1 ; i + + ; } max = 0 ; for ( i = 0 ; i <MAX_CHARS ; i + + ) { if ( freq [ i ] > freq [ max ] ) max = i ; } printf ( " Maximum occurring character is ' %c' = %d times. " , max , freq [ max ] ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 void toggleCase ( char * str ) ; int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " String before toggling case : %s " , str ) ; toggleCase ( str ) ; printf ( " String after toggling case : %s " , str ) ; return 0 ; } void toggleCase ( char * str ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { str [ i ] = str [ i ] - 32 ; } else if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { str [ i ] = str [ i ] + 32 ; } i + + ; } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int countOccurrences ( char * str , char * toSearch ) ; int main ( ) { char str [ MAX_SIZE ] ; char toSearch [ MAX_SIZE ] ; int count ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to search occurrences : " ) ; gets ( toSearch ) ; count = countOccurrences ( str , toSearch ) ; printf ( " Total occurrences of ' %s' : %d " , toSearch , count ) ; return 0 ; } int countOccurrences ( char * str , char * toSearch ) { int i , j , found , count ; int stringLen , searchLen ; stringLen = strlen ( str ) ; searchLen = strlen ( toSearch ) ; count = 0 ; for ( i = 0 ; i < = stringLen-searchLen ; i + + ) { found = 1 ; for ( j = 0 ; j <searchLen ; j + + ) { if ( str [ i + j ] ! = toSearch [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { count + + ; } } return count ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeAll ( char * str , char * toRemove ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to remove : " ) ; gets ( toRemove ) ; printf ( " String before removing ' %s' : \n  %s " , toRemove , str ) ; removeAll ( str , toRemove ) ; printf ( " \n \n String after removing ' %s' : \n  %s " , toRemove , str ) ; return 0 ; } void removeAll ( char * str , char * toRemove ) { int i , j , stringLen , toRemoveLen ; int found ; stringLen = strlen ( str ) ; toRemoveLen = strlen ( toRemove ) ; for ( i = 0 ; i < = stringLen - toRemoveLen ; i + + ) { found = 1 ; for ( j = 0 ; j <toRemoveLen ; j + + ) { if ( str [ i + j ] ! = toRemove [ j ] ) { found = 0 ; break ; } } if ( str [ i + j ] ! = ' ' & & str [ i + j ] ! = '\t' & & str [ i + j ] ! = '\n ' & & str [ i + j ] ! = '\0' ) { found = 0 ; } if ( found = = 1 ) { for ( j = i ; j < = stringLen - toRemoveLen ; j + + ) { str [ j ] = str [ j + toRemoveLen ] ; } stringLen = stringLen - toRemoveLen ; i-- ; } } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char word [ MAX_SIZE ] ; int i , j , found , index ; int stringLen , wordLen ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to remove : " ) ; gets ( word ) ; stringLen = strlen ( str ) ; wordLen = strlen ( word ) ; index = -1 ; for ( i = 0 ; i <stringLen - wordLen ; i + + ) { found = 1 ; for ( j = 0 ; j <wordLen ; j + + ) { if ( str [ i + j ] ! = word [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { index = i ; } } if ( index = = -1 ) { printf ( " ' %s' not found. " ) ; } else { for ( i = index ; i < = stringLen - wordLen ; i + + ) { str [ i ] = str [ i + wordLen ] ; } printf ( " String after removing last ' %s' : \n  %s " , word , str ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char word [ MAX_SIZE ] ; int i , j , found ; int strLen , wordLen ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any word to search : " ) ; gets ( word ) ; strLen = strlen ( str ) ; wordLen = strlen ( word ) ; for ( i = 0 ; i <strLen - wordLen ; i + + ) { found = 1 ; for ( j = 0 ; j <wordLen ; j + + ) { if ( str [ i + j ] ! = word [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { printf ( " ' %s' found at index : %d \n  " , word , i ) ; } } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char word [ MAX_SIZE ] ; int i , j , index , found ; int strLen , wordLen ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any word to search : " ) ; gets ( word ) ; index = -1 ; strLen = strlen ( str ) ; wordLen = strlen ( word ) ; for ( i = 0 ; i < = strLen - wordLen ; i + + ) { found = 1 ; for ( j = 0 ; j <wordLen ; j + + ) { if ( str [ i + j ] ! = word [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { index = i ; } } if ( index = = -1 ) { printf ( " \n ' %s' not found. " , word ) ; } else { printf ( " \n Last index of ' %s' = %d " , word , index ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { printf ( " ' %c' is found at index %d\n  " , toSearch , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char toSearch ; int i , count ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to search : " ) ; toSearch = getchar ( ) ; count = 0 ; i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toSearch ) { count + + ; } i + + ; } printf ( " Total occurrence of ' %c' = %d " , toSearch , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int maximum ( int array [ ] , int index , int len ) ; int minimum ( int array [ ] , int index , int len ) ; int main ( ) { int array [ MAX_SIZE ] , N , max , min ; int i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in array : " , N ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } max = maximum ( array , 0 , N ) ; min = minimum ( array , 0 , N ) ; printf ( " Minimum element in array = %d\n  " , min ) ; printf ( " Maximum element in array = %d\n  " , max ) ; return 0 ; } int maximum ( int array [ ] , int index , int len ) { int max ; if ( index > = len-2 ) { if ( array [ index ] > array [ index + 1 ] ) return array [ index ] ; else return array [ index + 1 ] ; } max = maximum ( array , index + 1 , len ) ; if ( array [ index ] > max ) return array [ index ] ; else return max ; } int minimum ( int array [ ] , int index , int len ) { int min ; if ( index > = len-2 ) { if ( array [ index ] < array [ index + 1 ] ) return array [ index ] ; else return array [ index + 1 ] ; } min = minimum ( array , index + 1 , len ) ; if ( array [ index ] < min ) return array [ index ] ; else return min ; }
#include <stdio.h> #define MAX_SIZE 100 int maximum ( int array [ ] , int index , int len ) ; int minimum ( int array [ ] , int index , int len ) ; int main ( ) { int array [ MAX_SIZE ] , N , max , min ; int i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in array : " , N ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & array [ i ] ) ; } max = maximum ( array , 0 , N ) ; min = minimum ( array , 0 , N ) ; printf ( " Minimum element in array = %d\n  " , min ) ; printf ( " Maximum element in array = %d\n  " , max ) ; return 0 ; } int maximum ( int array [ ] , int index , int len ) { int max ; if ( index > = len-2 ) return ( array [ index ] > array [ index + 1 ] ) ? array [ index ] : array [ index + 1 ] ; max = maximum ( array , index + 1 , len ) ; return ( array [ index ] > max ) ? array [ index ] : max ; } int minimum ( int array [ ] , int index , int len ) { int min ; if ( index > = len-2 ) { return ( array [ index ] < array [ index + 1 ] ) ? array [ index ] : array [ index + 1 ] ; } min = minimum ( array , index + 1 , len ) ; return ( array [ index ] < min ) ? array [ index ] : min ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , b , c ; float root1 , root2 , imaginary ; float discriminant ; printf ( " Enter values of a , b , c of quadratic equation ( aX^2 + bX + c ) : " ) ; scanf ( " %f %f %f " , & a , & b , & c ) ; discriminant = ( b * b ) - ( 4 * a * c ) ; switch ( discriminant > 0 ) { case 1 : root1 = ( -b + sqrt ( discriminant ) ) / ( 2 * a ) ; root2 = ( -b - sqrt ( discriminant ) ) / ( 2 * a ) ; printf ( " Two distinct and real roots exists : %.2f and %.2f " , root1 , root2 ) ; break ; case 0 : switch ( discriminant < 0 ) { case 1 : root1 = root2 = -b / ( 2 * a ) ; imaginary = sqrt ( -discriminant ) / ( 2 * a ) ; printf ( " Two distinct complex roots exists : %.2f + i %.2f and %.2f - i %.2f " , root1 , imaginary , root2 , imaginary ) ; break ; case 0 : root1 = root2 = -b / ( 2 * a ) ; printf ( " Two equal and real roots exists : %.2f and %.2f " , root1 , root2 ) ; break ; } } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float a , b , c ; float root1 , root2 , imaginary ; float discriminant ; printf ( " Enter values of a , b , c of quadratic equation ( aX^2 + bX + c ) : " ) ; scanf ( " %f %f %f " , & a , & b , & c ) ; discriminant = ( b * b ) - ( 4 * a * c ) ; if ( discriminant > 0 ) { root1 = ( -b + sqrt ( discriminant ) ) / ( 2 * a ) ; root2 = ( -b - sqrt ( discriminant ) ) / ( 2 * a ) ; printf ( " Two distinct and real roots exists : %.2f and %.2f " , root1 , root2 ) ; } else if ( discriminant = = 0 ) { root1 = root2 = -b / ( 2 * a ) ; printf ( " Two equal and real roots exists : %.2f and %.2f " , root1 , root2 ) ; } else if ( discriminant < 0 ) { root1 = root2 = -b / ( 2 * a ) ; imaginary = sqrt ( -discriminant ) / ( 2 * a ) ; printf ( " Two distinct complex roots exists : %.2f + i %.2f and %.2f - i %.2f " , root1 , imaginary , root2 , imaginary ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int sum ( int arr [ ] , int start , int len ) ; int main ( ) { int arr [ MAX_SIZE ] ; int N , i , sumofarray ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } sumofarray = sum ( arr , 0 , N ) ; printf ( " Sum of array elements : %d " , sumofarray ) ; return 0 ; } int sum ( int arr [ ] , int start , int len ) { if ( start > = len ) return 0 ; return ( arr [ start ] + sum ( arr , start + 1 , len ) ) ; }
#include <stdio.h> #define MAX_SIZE 100 void printArray ( int arr [ ] , int start , int len ) ; int main ( ) { int arr [ MAX_SIZE ] ; int N , i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Elements in the array : " ) ; printArray ( arr , 0 , N ) ; return 0 ; } void printArray ( int arr [ ] , int start , int len ) { if ( start > = len ) return ; printf ( " %d , " , arr [ start ] ) ; printArray ( arr , start + 1 , len ) ; }
#include <stdio.h> int isPerfect ( int num ) ; void printPerfect ( int start , int end ) ; int main ( ) { int start , end ; printf ( " Enter lower limit to print perfect numbers : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit to print perfect numbers : " ) ; scanf ( " %d " , & end ) ; printf ( " All perfect numbers between %d to %d are : \n  " , start , end ) ; printPerfect ( start , end ) ; return 0 ; } int isPerfect ( int num ) { int i , sum ; sum = 0 ; for ( i = 1 ; i <num ; i + + ) { if ( num % i = = 0 ) { sum + = i ; } } if ( sum = = num ) return 1 ; else return 0 ; } void printPerfect ( int start , int end ) { while ( start < = end ) { if ( isPerfect ( start ) ) { printf ( " %d , " , start ) ; } start + + ; } }
#include <stdio.h> int isArmstrong ( int num ) ; void printArmstrong ( int start , int end ) ; int main ( ) { int start , end ; printf ( " Enter lower limit to print armstrong numbers : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit to print armstrong numbers : " ) ; scanf ( " %d " , & end ) ; printf ( " All armstrong numbers between %d to %d are : \n  " , start , end ) ; printArmstrong ( start , end ) ; return 0 ; } int isArmstrong ( int num ) { int temp , lastDigit , sum ; temp = num ; sum = 0 ; while ( temp ! = 0 ) { lastDigit = temp % 10 ; sum + = lastDigit * lastDigit * lastDigit ; temp / = 10 ; } if ( num = = sum ) return 1 ; else return 0 ; } void printArmstrong ( int start , int end ) { while ( start < = end ) { if ( isArmstrong ( start ) ) { printf ( " %d , " , start ) ; } start + + ; } }
#include <stdio.h> long long fact ( int num ) ; void printStrongNumbers ( int start , int end ) ; int main ( ) { int start , end ; printf ( " Enter the lower limit to find strong number : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter the upper limit to find strong number : " ) ; scanf ( " %d " , & end ) ; printf ( " All strong numbers between %d to %d are : \n  " , start , end ) ; printStrongNumbers ( start , end ) ; return 0 ; } void printStrongNumbers ( int start , int end ) { long long sum ; int num ; while ( start ! = end ) { sum = 0 ; num = start ; while ( num ! = 0 ) { sum + = fact ( num % 10 ) ; num / = 10 ; } if ( start = = sum ) { printf ( " %d , " , start ) ; } start + + ; } } long long fact ( int num ) { if ( num = = 0 ) return 1 ; else return ( num * fact ( num-1 ) ) ; }
#include <stdio.h> int lcm ( int a , int b ) ; int main ( ) { int num1 , num2 , LCM ; printf ( " Enter any two numbers to find lcm : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) LCM = lcm ( num2 , num1 ) ; else LCM = lcm ( num1 , num2 ) ; printf ( " LCM of %d and %d = %d " , num1 , num2 , LCM ) ; return 0 ; } int lcm ( int a , int b ) { static int multiple = 0 ; multiple + = b ; if ( ( multiple % a = = 0 ) & & ( multiple % b = = 0 ) ) { return multiple ; } else { return lcm ( a , b ) ; } }
#include <stdio.h> int gcd ( int a , int b ) ; int main ( ) { int num1 , num2 , hcf ; printf ( " Enter any two numbers to find GCD : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; printf ( " GCD of %d and %d = %d " , num1 , num2 , hcf ) ; return 0 ; } int gcd ( int a , int b ) { if ( b = = 0 ) return a ; else return gcd ( b , a %b ) ; }
#include <stdio.h> int sumOfDigits ( int num ) ; int main ( ) { int num , sum ; printf ( " Enter any number to find sum of digits : " ) ; scanf ( " %d " , & num ) ; sum = sumOfDigits ( num ) ; printf ( " Sum of digits of %d = %d " , num , sum ) ; return 0 ; } int sumOfDigits ( int num ) { if ( num = = 0 ) return 0 ; return ( ( num % 10 ) + sumOfDigits ( num / 10 ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int isPalindrome ( int num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isPalindrome ( num ) = = 1 ) { printf ( " %d is palindrome number.\n  " , num ) ; } else { printf ( " %d is NOT palindrome number.\n  " , num ) ; } return 0 ; } int isPalindrome ( int num ) { if ( num = = reverse ( num ) ) { return 1 ; } return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int main ( ) { int num , rev ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; rev = reverse ( num ) ; printf ( " Reverse of %d = %d " , num , rev ) ; return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> #include <math.h> int reverse ( int num ) ; int main ( ) { int num , rev , numIsNegative ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; numIsNegative = ( num < 0 ) ; if ( numIsNegative ) num * = -1 ; rev = reverse ( num ) ; if ( numIsNegative ) rev * = -1 ; printf ( " Reverse of %d = %d " , num , rev ) ; return 0 ; } int reverse ( int num ) { int digit = ( int ) log10 ( num ) ; if ( num = = 0 ) return 0 ; return ( ( num %10 * pow ( 10 , digit ) ) + reverse ( num / 10 ) ) ; }
#include <stdio.h> int sumOfEvenOdd ( int start , int end ) ; int main ( ) { int start , end , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Sum of even / odd numbers between %d to %d = %d\n  " , start , end , sumOfEvenOdd ( start , end ) ) ; return 0 ; } int sumOfEvenOdd ( int start , int end ) { if ( start > end ) return 0 ; else return ( start + sumOfEvenOdd ( start + 2 , end ) ) ; }
#include <stdio.h> void printEvenOdd ( int cur , int limit ) ; int main ( ) { int lowerLimit , upperLimit ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & lowerLimit ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & upperLimit ) ; printf ( " Even / odd Numbers from %d to %d are : " , lowerLimit , upperLimit ) ; printEvenOdd ( lowerLimit , upperLimit ) ; return 0 ; } void printEvenOdd ( int cur , int limit ) { if ( cur > limit ) return ; printf ( " %d , " , cur ) ; printEvenOdd ( cur + 2 , limit ) ; }
#include <stdio.h> int sumOfNaturalNumbers ( int start , int end ) ; int main ( ) { int start , end , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; sum = sumOfNaturalNumbers ( start , end ) ; printf ( " Sum of natural numbers from %d to %d = %d " , start , end , sum ) ; return 0 ; } int sumOfNaturalNumbers ( int start , int end ) { if ( start = = end ) return start ; else return start + sumOfNaturalNumbers ( start + 1 , end ) ; }
#include <stdio.h> void printNaturalNumbers ( int lowerLimit , int upperLimit ) ; int main ( ) { int lowerLimit , upperLimit ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & lowerLimit ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & upperLimit ) ; printf ( " All natural numbers from %d to %d are : " , lowerLimit , upperLimit ) ; printNaturalNumbers ( lowerLimit , upperLimit ) ; return 0 ; } void printNaturalNumbers ( int lowerLimit , int upperLimit ) { if ( lowerLimit > upperLimit ) return ; printf ( " %d , " , lowerLimit ) ; printNaturalNumbers ( lowerLimit + 1 , upperLimit ) ; }
#include <stdio.h> int isPrime ( int num ) ; void printPrimes ( int lowerLimit , int upperLimit ) ; int main ( ) { int lowerLimit , upperLimit ; printf ( " Enter the lower and upper limit to list primes : " ) ; scanf ( " %d %d " , & lowerLimit , & upperLimit ) ; printPrimes ( lowerLimit , upperLimit ) ; return 0 ; } void printPrimes ( int lowerLimit , int upperLimit ) { printf ( " All prime number between %d to %d are : " , lowerLimit , upperLimit ) ; while ( lowerLimit < = upperLimit ) { if ( isPrime ( lowerLimit ) ) { printf ( " %d , " , lowerLimit ) ; } lowerLimit + + ; } } int isPrime ( int num ) { int i ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num % i = = 0 ) { return 0 ; } } return 1 ; }
#include <stdio.h> #include <math.h> int isPrime ( int num ) ; int isArmstrong ( int num ) ; int isPerfect ( int num ) ; int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isPrime ( num ) ) { printf ( " %d is Prime number.\n  " , num ) ; } else { printf ( " %d is not Prime number.\n  " , num ) ; } if ( isArmstrong ( num ) ) { printf ( " %d is Armstrong number.\n  " , num ) ; } else { printf ( " %d is not Armstrong number.\n  " , num ) ; } if ( isPerfect ( num ) ) { printf ( " %d is Perfect number.\n  " , num ) ; } else { printf ( " %d is not Perfect number.\n  " , num ) ; } return 0 ; } int isPrime ( int num ) { int i ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) { return 0 ; } } return 1 ; } int isArmstrong ( int num ) { int lastDigit , sum , originalNum , digits ; sum = 0 ; originalNum = num ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + round ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } return ( originalNum = = sum ) ; } int isPerfect ( int num ) { int i , sum , n ; sum = 0 ; n = num ; for ( i = 1 ; i <n ; i + + ) { if ( n %i = = 0 ) { sum + = i ; } } return ( num = = sum ) ; }
#include <stdio.h> unsigned long long fibo ( int num ) ; int main ( ) { int num ; unsigned long long fibonacci ; printf ( " Enter any number to find nth fiboacci term : " ) ; scanf ( " %d " , & num ) ; fibonacci = fibo ( num ) ; printf ( " %d fibonacci term is %llu " , num , fibonacci ) ; return 0 ; } unsigned long long fibo ( int num ) { if ( num = = 0 ) return 0 ; else if ( num = = 1 ) return 1 ; else return fibo ( num-1 ) + fibo ( num-2 ) ; }
#include <stdio.h> unsigned long long fact ( int num ) ; int main ( ) { int num ; unsigned long long factorial ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; factorial = fact ( num ) ; printf ( " Factorial of %d is %llu " , num , factorial ) ; return 0 ; } unsigned long long fact ( int num ) { if ( num = = 0 ) return 1 ; else return num * fact ( num - 1 ) ; }
#include <stdio.h> int isEven ( int num ) { return ! ( num & 1 ) ; } int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( isEven ( num ) ) { printf ( " The number is even. " ) ; } else { printf ( " The number is odd. " ) ; } return 0 ; }
#include <stdio.h> int max ( int num1 , int num2 ) ; int min ( int num1 , int num2 ) ; int main ( ) { int num1 , num2 , maximum , minimum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; maximum = max ( num1 , num2 ) ; minimum = min ( num1 , num2 ) ; printf ( " \n Maximum = %d\n  " , maximum ) ; printf ( " Minimum = %d " , minimum ) ; return 0 ; } int max ( int num1 , int num2 ) { return ( num1 > num2 ) ? num1 : num2 ; } int min ( int num1 , int num2 ) { return ( num1 > num2 ) ? num2 : num1 ; }
#include <stdio.h> #include <limits.h> #include <stdarg.h> int max ( int args , ... ) ; int min ( int args , ... ) ; int main ( ) { printf ( " Maximum of three numbers : ( 10 , 30 , 20 ) = %d\n  " , max ( 3 , 10 , 30 , 20 ) ) ; printf ( " Maximum of five numbers : ( 5 , -45 , 4 , 60 , 100 ) = %d\n  " , max ( 5 , -45 , 4 , 60 , 100 ) ) ; printf ( " Minimum of four numbers : ( -5 , 0 , 10 , 50 ) = %d\n  " , min ( 4 , -5 , 0 , 10 , 50 ) ) ; printf ( " Minimum of two numbers : ( 10 , 20 ) = %d " , min ( 2 , 10 , 20 ) ) ; return 0 ; } int max ( int args , ... ) { int i , max , cur ; va_list valist ; va_start ( valist , args ) ; max = INT_MIN ; for ( i = 0 ; i <args ; i + + ) { cur = va_arg ( valist , int ) ; if ( max < cur ) max = cur ; } va_end ( valist ) ; return max ; } int min ( int args , ... ) { int i , min , cur ; va_list valist ; va_start ( valist , args ) ; min = INT_MAX ; for ( i = 0 ; i <args ; i + + ) { cur = va_arg ( valist , int ) ; if ( min > cur ) min = cur ; } va_end ( valist ) ; return min ; }
#include <stdio.h> #include <math.h> double getDiameter ( double radius ) ; double getCircumference ( double radius ) ; double getArea ( double radius ) ; int main ( ) { float radius , dia , circ , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; dia = getDiameter ( radius ) ; circ = getCircumference ( radius ) ; area = getArea ( radius ) ; printf ( " Diameter of the circle = %.2f units\n  " , dia ) ; printf ( " Circumference of the circle = %.2f units\n  " , circ ) ; printf ( " Area of the circle = %.2f sq. units " , area ) ; return 0 ; } double getDiameter ( double radius ) { return ( 2 * radius ) ; } double getCircumference ( double radius ) { return ( 2 * M_PI * radius ) ; } double getArea ( double radius ) { return ( M_PI * radius * radius ) ; }
#include <stdio.h> double pow ( double base , int expo ) ; int main ( ) { double base , power ; int expo ; printf ( " Enter base : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %d " , & expo ) ; power = pow ( base , expo ) ; printf ( " %.2lf ^ %d = %f " , base , expo , power ) ; return 0 ; } double pow ( double base , int expo ) { if ( expo = = 0 ) return 1 ; else if ( expo > 0 ) return base * pow ( base , expo - 1 ) ; else return 1 / pow ( base , -expo ) ; }
#include <stdio.h> double cube ( double num ) ; int main ( ) { int num ; double c ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; c = cube ( num ) ; printf ( " Cube of %d is %.2f " , num , c ) ; return 0 ; } double cube ( double num ) { return ( num * num * num ) ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , swappedNum ; int firstDigit , lastDigit , digits ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; swappedNum = lastDigit ; swappedNum * = ( int ) pow ( 10 , digits ) ; swappedNum + = num % ( ( int ) pow ( 10 , digits ) ) ; swappedNum - = lastDigit ; swappedNum + = firstDigit ; printf ( " Original number = %d " , num ) ; printf ( " Number after swapping first and last digit : %d " , swappedNum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , swappedNum ; int firstDigit , lastDigit , digits ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; swappedNum = lastDigit ; swappedNum * = ( int ) round ( pow ( 10 , digits ) ) ; swappedNum + = num % ( ( int ) round ( pow ( 10 , digits ) ) ) ; swappedNum - = lastDigit ; swappedNum + = firstDigit ; printf ( " Original number = %d " , num ) ; printf ( " Number after swapping first and last digit : %d " , swappedNum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 1000 void printArray ( int arr [ ] , int len ) ; int main ( ) { int arr [ MAX_SIZE ] ; int even [ MAX_SIZE ] , odd [ MAX_SIZE ] ; int evenCount , oddCount ; int i , size ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } evenCount = 0 ; oddCount = 0 ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] & 1 ) { odd [ oddCount ] = arr [ i ] ; oddCount + + ; } else { even [ evenCount ] = arr [ i ] ; evenCount + + ; } } printf ( " \n Elements of even array : \n  " ) ; printArray ( even , evenCount ) ; printf ( " \n Elements of odd array : \n  " ) ; printArray ( odd , oddCount ) ; return 0 ; } void printArray ( int arr [ ] , int len ) { int i ; printf ( " Elements in the array : " ) ; for ( i = 0 ; i <len ; i + + ) { printf ( " %d " , arr [ i ] ) ; } printf ( " \n  " ) ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; printf ( " Original value of num1 = %d\n  " , num1 ) ; printf ( " Original value of num2 = %d\n  " , num2 ) ; num1 ^ = num2 ; num2 ^ = num1 ; num1 ^ = num2 ; printf ( " Num1 after swapping = %d\n  " , num1 ) ; printf ( " Num2 after swapping = %d\n  " , num2 ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , index , i ; int bin [ INT_SIZE ] ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; index = INT_SIZE - 1 ; while ( index > = 0 ) { bin [ index ] = num & 1 ; index-- ; num > > = 1 ; } printf ( " Converted binary : " ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { printf ( " %d " , bin [ i ] ) ; } return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , zeros , ones , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; zeros = 0 ; ones = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( num & 1 ) ones + + ; else zeros + + ; num > > = 1 ; } printf ( " Total zero bit is %d\n  " , zeros ) ; printf ( " Total one bit is %d " , ones ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , msb , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( INT_SIZE - 1 ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num < < i ) & msb ) { break ; } count + + ; } printf ( " Total number of leading zeros in %d is %d " , num , count ) ; return 0 ; }
#include <stdio.h> #include <limits.h> int main ( ) { int num , count ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; while ( ! ( num & ( ~INT_MAX ) ) ) { count + + ; num < < = 1 ; } printf ( " Total number of leading zeros = %d " , count ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , count , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; count = 0 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num > > i ) & 1 ) { break ; } count + + ; } printf ( " Total number of trailing zeros in %d is %d. " , num , count ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , count = 0 ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; while ( ! ( num & 1 ) ) { count + + ; num > > = 1 ; } printf ( " Total number of trailing zeros = %d. " , count ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; order = INT_SIZE - 1 ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) { order = i ; break ; } } printf ( " Lowest order set bit in %d is %d " , num , order ) ; return 0 ; }
#include <stdio.h> #define INT_SIZE sizeof ( int ) * 8 int main ( ) { int num , order = -1 , i ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; for ( i = 0 ; i <INT_SIZE ; i + + ) { if ( ( num> > i ) & 1 ) order = i ; } if ( order ! = -1 ) printf ( " Highest order set bit in %d is %d " , num , order ) ; else printf ( " 0 has no set bits. " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , flippedNumber ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; flippedNumber = ~num ; printf ( " Original number = %d ( in decimal ) \n  " , num ) ; printf ( " Number after bits are flipped = %d ( in decimal ) " , flippedNumber ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , newNum ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to toggle ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; newNum = num ^ ( 1 < < n ) ; printf ( " Bit toggled successfully.\n \n  " ) ; printf ( " Number before toggling %d bit : %d ( in decimal ) \n  " , n , num ) ; printf ( " Number after toggling %d bit : %d ( in decimal ) \n  " , n , newNum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , newNum ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to clear ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; newNum = num & ( ~ ( 1 < < n ) ) ; printf ( " Bit cleared successfully.\n \n  " ) ; printf ( " Number before clearing %d bit : %d ( in decimal ) \n  " , n , num ) ; printf ( " Number after clearing %d bit : %d ( in decimal ) \n  " , n , newNum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , newNum ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to set ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; newNum = ( 1 < < n ) | num ; printf ( " Bit set successfully.\n \n  " ) ; printf ( " Number before setting %d bit : %d ( in decimal ) \n  " , n , num ) ; printf ( " Number after setting %d bit : %d ( in decimal ) \n  " , n , newNum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , n , bitStatus ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter nth bit to check ( 0-31 ) : " ) ; scanf ( " %d " , & n ) ; bitStatus = ( num > > n ) & 1 ; printf ( " The %d bit is set to %d " , n , bitStatus ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) { printf ( " %d is odd. " , num ) ; } else { printf ( " %d is even. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; ( num & 1 ) ? printf ( " %d is odd. " , num ) : printf ( " %d is even. " , num ) ; return 0 ; }
#include <stdio.h> #define BITS sizeof ( int ) * 8 int main ( ) { int num , msb ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; msb = 1 < < ( BITS - 1 ) ; if ( num & msb ) printf ( " MSB of %d is set ( 1 ) . " , num ) ; else printf ( " MSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num & 1 ) printf ( " LSB of %d is set ( 1 ) . " , num ) ; else printf ( " LSB of %d is unset ( 0 ) . " , num ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeFirst ( char * str , const char * toRemove ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter string to be removed : " ) ; gets ( toRemove ) ; removeFirst ( str , toRemove ) ; printf ( " \n String after removing ' %s' : \n  %s " , toRemove , str ) ; return 0 ; } void removeFirst ( char * str , const char * toRemove ) { int i , j ; int len , removeLen ; int found = 0 ; len = strlen ( str ) ; removeLen = strlen ( toRemove ) ; for ( i = 0 ; i <len ; i + + ) { found = 1 ; for ( j = 0 ; j <removeLen ; j + + ) { if ( str [ i + j ] ! = toRemove [ j ] ) { found = 0 ; break ; } } if ( found = = 1 ) { for ( j = i ; j < = len-removeLen ; j + + ) { str [ j ] = str [ j + removeLen ] ; } break ; } } }
#include <stdio.h> #define MAX_SIZE 100 int lastIndexOf ( const char * str , const char toFind ) ; int main ( ) { char str [ MAX_SIZE ] ; char toFind ; int index ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter any character to find : " ) ; toFind = getchar ( ) ; index = lastIndexOf ( str , toFind ) ; printf ( " \n Last index of ' %c' is %d " , toFind , index ) ; return 0 ; } int lastIndexOf ( const char * str , const char toFind ) { int index = -1 ; int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toFind ) { index = i ; } i + + ; } return index ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeAll ( char * , const char ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to remove from string : " ) ; toRemove = getchar ( ) ; removeAll ( str , toRemove ) ; printf ( " String after removing ' %c' : %s " , toRemove , str ) ; return 0 ; } void removeAll ( char * str , const char toRemove ) { int i , j ; int len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] = = toRemove ) { for ( j = i ; j <len ; j + + ) { str [ j ] = str [ j + 1 ] ; } len-- ; i-- ; } } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeLast ( char * , const char ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to remove from string : " ) ; toRemove = getchar ( ) ; removeLast ( str , toRemove ) ; printf ( " String after removing last ' %c' : %s " , toRemove , str ) ; return 0 ; } void removeLast ( char * str , const char toRemove ) { int i , lastPosition ; int len = strlen ( str ) ; lastPosition = -1 ; i = 0 ; while ( i <len ) { if ( str [ i ] = = toRemove ) { lastPosition = i ; } i + + ; } if ( lastPosition ! = -1 ) { i = lastPosition ; while ( i <len ) { str [ i ] = str [ i + 1 ] ; i + + ; } } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 void removeFirst ( char * , const char ) ; int main ( ) { char str [ MAX_SIZE ] ; char toRemove ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to remove from string : " ) ; toRemove = getchar ( ) ; removeFirst ( str , toRemove ) ; printf ( " String after removing first ' %c' : %s " , toRemove , str ) ; return 0 ; } void removeFirst ( char * str , const char toRemove ) { int i = 0 ; int len = strlen ( str ) ; while ( i <len & & str [ i ] ! = toRemove ) i + + ; while ( i < len ) { str [ i ] = str [ i + 1 ] ; i + + ; } }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , word [ MAX_SIZE ] ; int i , index , found = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter word to be searched : " ) ; gets ( word ) ; index = 0 ; while ( str [ index ] ! = '\0' ) { if ( str [ index ] = = word [ 0 ] ) { i = 0 ; found = 1 ; while ( word [ i ] ! = '\0' ) { if ( str [ index + i ] ! = word [ i ] ) { found = 0 ; break ; } i + + ; } } if ( found = = 1 ) { break ; } index + + ; } if ( found = = 1 ) { printf ( " \n ' %s' is found at index %d. " , word , index ) ; } else { printf ( " \n ' %s' is not found. " , word ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int indexOf ( const char * str , const char toFind ) ; int main ( ) { char str [ MAX_SIZE ] ; char toFind ; int index ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Enter character to be searched : " ) ; toFind = getchar ( ) ; index = indexOf ( str , toFind ) ; if ( index = = -1 ) printf ( " ' %c' not found. " , toFind ) ; else printf ( " ' %c' is found at index %d. " , toFind , index ) ; return 0 ; } int indexOf ( const char * str , const char toFind ) { int i = 0 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = toFind ) return i ; i + + ; } return -1 ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { int i = 0 ; while ( str1 [ i ] = = str2 [ i ] ) { if ( str1 [ i ] = = '\0' & & str2 [ i ] = = '\0' ) break ; i + + ; } return str1 [ i ] - str2 [ i ] ; }
#include <stdio.h> #define MAX_SIZE 100 int compare ( char * str1 , char * str2 ) ; int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = compare ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res < 0 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; } int compare ( char * str1 , char * str2 ) { while ( ( * str1 & & * str2 ) & & ( * str1 = = * str2 ) ) { str1 + + ; str2 + + ; } return * str1 - * str2 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int res ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; res = strcmp ( str1 , str2 ) ; if ( res = = 0 ) { printf ( " Both strings are equal. " ) ; } else if ( res = = -1 ) { printf ( " First string is lexicographically smaller than second. " ) ; } else { printf ( " First string is lexicographically greater than second. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int alphabets , digits , others , i ; alphabets = digits = others = i = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( str [ i ] ! = '\0' ) { if ( ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) || ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) ) { alphabets + + ; } else if ( str [ i ] > = '0' & & str [ i ] < = '9' ) { digits + + ; } else { others + + ; } i + + ; } printf ( " Alphabets = %d\n  " , alphabets ) ; printf ( " Digits = %d\n  " , digits ) ; printf ( " Special characters = %d " , others ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; int alphabets , digits , others ; alphabets = digits = others = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * s ) { if ( ( * s > = 'a' & & * s < = 'z' ) || ( * s > = 'A' & & * s < = 'Z' ) ) alphabets + + ; else if ( * s> = '0' & & * s < = '9' ) digits + + ; else others + + ; s + + ; } printf ( " Alphabets = %d\n  " , alphabets ) ; printf ( " Digits = %d\n  " , digits ) ; printf ( " Special characters = %d " , others ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = 0 ; while ( str1 [ i ] ! = '\0' ) { i + + ; } j = 0 ; while ( str2 [ j ] ! = '\0' ) { str1 [ i ] = str2 [ j ] ; i + + ; j + + ; } str1 [ i ] = '\0' ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; int i , j ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; i = -1 ; while ( str1 [ + + i ] ) ; j = 0 ; while ( str1 [ i + + ] = str2 [ j + + ] ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; char * s1 = str1 ; char * s2 = str2 ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; while ( * ( + + s1 ) ) ; while ( * ( s1 + + ) = * ( s2 + + ) ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str1 [ MAX_SIZE ] , str2 [ MAX_SIZE ] ; printf ( " Enter first string : " ) ; gets ( str1 ) ; printf ( " Enter second string : " ) ; gets ( str2 ) ; strcat ( str1 , str2 ) ; printf ( " Concatenated string = %s " , str1 ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char hex [ 17 ] , bin [ 65 ] = " " ; int i = 0 ; printf ( " Enter any hexadecimal number : " ) ; gets ( hex ) ; for ( i = 0 ; hex [ i ] ! = '\0' ; i + + ) { switch ( hex [ i ] ) { case '0' : strcat ( bin , " 0000 " ) ; break ; case '1' : strcat ( bin , " 0001 " ) ; break ; case '2' : strcat ( bin , " 0010 " ) ; break ; case '3' : strcat ( bin , " 0011 " ) ; break ; case '4' : strcat ( bin , " 0100 " ) ; break ; case '5' : strcat ( bin , " 0101 " ) ; break ; case '6' : strcat ( bin , " 0110 " ) ; break ; case '7' : strcat ( bin , " 0111 " ) ; break ; case '8' : strcat ( bin , " 1000 " ) ; break ; case '9' : strcat ( bin , " 1001 " ) ; break ; case 'a' : case 'A' : strcat ( bin , " 1010 " ) ; break ; case 'b' : case 'B' : strcat ( bin , " 1011 " ) ; break ; case 'c' : case 'C' : strcat ( bin , " 1100 " ) ; break ; case 'd' : case 'D' : strcat ( bin , " 1101 " ) ; break ; case 'e' : case 'E' : strcat ( bin , " 1110 " ) ; break ; case 'f' : case 'F' : strcat ( bin , " 1111 " ) ; break ; default : printf ( " Invalid hexadecimal input. " ) ; } } printf ( " Hexademial number = %s\n  " , hex ) ; printf ( " Binary number = %s " , bin ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] ; char text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; for ( i = 0 ; text1 [ i ] ! = '\0' ; i + + ) { text2 [ i ] = text1 [ i ] ; } text2 [ i ] = '\0' ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] ; char text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = 0 ; while ( text1 [ i ] ! = '\0' ) { text2 [ i ] = text1 [ i ] ; i + + ; } text2 [ i ] = '\0' ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( text1 ) ; i = -1 ; while ( text2 [ i ] = text1 [ + + i ] ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; printf ( " Total characters copied = %d\n  " , i ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; char * str1 = text1 ; char * str2 = text2 ; printf ( " Enter any string : " ) ; gets ( text1 ) ; while ( * ( str2 + + ) = * ( str1 + + ) ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text1 [ MAX_SIZE ] , text2 [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( text1 ) ; strcpy ( text2 , text1 ) ; printf ( " First string = %s\n  " , text1 ) ; printf ( " Second string = %s\n  " , text2 ) ; return 0 ; }
#include <stdio.h> #include <limits.h> #define MAX_SIZE 1000 int main ( ) { int arr [ MAX_SIZE ] , size , i ; int max1 , max2 ; printf ( " Enter size of the array ( 1-1000 ) : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } max1 = max2 = INT_MIN ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] > max1 ) { max2 = max1 ; max1 = arr [ i ] ; } else if ( arr [ i ] > max2 & & arr [ i ] < max1 ) { max2 = arr [ i ] ; } } printf ( " First largest = %d\n  " , max1 ) ; printf ( " Second largest = %d " , max2 ) ; return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch > = 'A' & & ch < = 'Z' ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( ch > = 'a' & & ch < = 'z' ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> #include <ctype.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( isupper ( ch ) ) { printf ( " ' %c' is uppercase alphabet. " , ch ) ; } else if ( islower ( ch ) ) { printf ( " ' %c' is lowercase alphabet. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> #include <math.h> #include <string.h> int main ( ) { char hex [ 17 ] ; long long decimal , place ; int i = 0 , val , len ; decimal = 0 ; place = 1 ; printf ( " Enter any hexadecimal number : " ) ; gets ( hex ) ; len = strlen ( hex ) ; len-- ; for ( i = 0 ; hex [ i ] ! = '\0' ; i + + ) { if ( hex [ i ] > = '0' & & hex [ i ] < = '9' ) { val = hex [ i ] - 48 ; } else if ( hex [ i ] > = 'a' & & hex [ i ] < = 'f' ) { val = hex [ i ] - 97 + 10 ; } else if ( hex [ i ] > = 'A' & & hex [ i ] < = 'F' ) { val = hex [ i ] - 65 + 10 ; } decimal + = val * pow ( 16 , len ) ; len-- ; } printf ( " Hexadecimal number = %s\n  " , hex ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { long long octal , tempOctal , decimal ; int rem , place ; printf ( " Enter any octal number : " ) ; scanf ( " %lld " , & octal ) ; tempOctal = octal ; decimal = 0 ; place = 0 ; while ( tempOctal > 0 ) { rem = tempOctal % 10 ; decimal + = pow ( 8 , place ) * rem ; tempOctal / = 10 ; place + + ; } printf ( " Octal number = %lld\n  " , octal ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> int main ( ) { int OCTALVALUES [ ] = { 0 , 1 , 10 , 11 , 100 , 101 , 110 , 111 } ; long long octal , tempOctal , binary , place ; int rem ; printf ( " Enter any Octal number : " ) ; scanf ( " %lld " , & octal ) ; tempOctal = octal ; binary = 0 ; place = 1 ; while ( tempOctal > 0 ) { rem = tempOctal % 10 ; binary = ( OCTALVALUES [ rem ] * place ) + binary ; tempOctal / = 10 ; place * = 1000 ; } printf ( " Octal number = %lld\n  " , octal ) ; printf ( " Binary number = %lld " , binary ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { char HEXVALUE [ ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ; long long decimal , tempDecimal ; char hex [ 65 ] ; int index , rem ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; index = 0 ; while ( tempDecimal ! = 0 ) { rem = tempDecimal % 16 ; hex [ index ] = HEXVALUE [ rem ] ; tempDecimal / = 16 ; index + + ; } hex [ index ] = '\0' ; strrev ( hex ) ; printf ( " \n Decimal number = %lld\n  " , decimal ) ; printf ( " Hexadecimal number = %s " , hex ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , octal ; int i , rem , place = 1 ; octal = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 8 ; octal = ( rem * place ) + octal ; tempDecimal / = 8 ; place * = 10 ; } printf ( " \n Decimal number = %lld\n  " , decimal ) ; printf ( " Octal number = %lld " , octal ) ; return 0 ; }
#include <stdio.h> int main ( ) { long long decimal , tempDecimal , binary ; int rem , place = 1 ; binary = 0 ; printf ( " Enter any decimal number : " ) ; scanf ( " %lld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { rem = tempDecimal % 2 ; binary = ( rem * place ) + binary ; tempDecimal / = 2 ; place * = 10 ; } printf ( " Decimal number = %lld\n  " , decimal ) ; printf ( " Binary number = %lld " , binary ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { long decimal , tempDecimal ; char binary [ 65 ] ; int index = 0 ; printf ( " Enter any decimal value : " ) ; scanf ( " %ld " , & decimal ) ; tempDecimal = decimal ; while ( tempDecimal > 0 ) { binary [ index ] = ( tempDecimal % 2 ) + '0' ; tempDecimal / = 2 ; index + + ; } binary [ index ] = '\0' ; strrev ( binary ) ; printf ( " Decimal value = %ld\n  " , decimal ) ; printf ( " Binary value of decimal = %s " , binary ) ; return 0 ; }
#include <stdio.h> #include <string.h> int main ( ) { int hexConstant [ ] = { 0 , 1 , 10 , 11 , 100 , 101 , 110 , 111 , 1000 , 1001 , 1010 , 1011 , 1100 , 1101 , 1110 , 1111 } ; long long binary , tempBinary ; char hex [ 20 ] ; int index , i , digit ; printf ( " Enter binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; index = 0 ; while ( tempBinary! = 0 ) { digit = tempBinary % 10000 ; for ( i = 0 ; i <16 ; i + + ) { if ( hexConstant [ i ] = = digit ) { if ( i <10 ) { hex [ index ] = ( char ) ( i + 48 ) ; } else { hex [ index ] = ( char ) ( ( i-10 ) + 65 ) ; } index + + ; break ; } } tempBinary / = 10000 ; } hex [ index ] = '\0' ; strrev ( hex ) ; printf ( " Binary number = %lld\n  " , binary ) ; printf ( " Hexadecimal number = %s " , hex ) ; return 0 ; }
#include <stdio.h> int main ( ) { int octalConstant [ ] = { 0 , 1 , 10 , 11 , 100 , 101 , 110 , 111 } ; long long binary , octal , tempBinary ; int digit , place , i ; octal = 0 ; place = 1 ; printf ( " Enter any binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; while ( tempBinary ! = 0 ) { digit = tempBinary % 1000 ; for ( i = 0 ; i <8 ; i + + ) { if ( octalConstant [ i ] = = digit ) { octal = ( i * place ) + octal ; break ; } } tempBinary / = 1000 ; place * = 10 ; } printf ( " Original binary number = %lld\n  " , binary ) ; printf ( " Octal number = %lld " , octal ) ; return 0 ; }
#include <stdio.h> #include <math.h> #define BASE 2 int main ( ) { long long binary , decimal = 0 , tempBinary ; int N = 0 ; printf ( " Enter any binary number : " ) ; scanf ( " %lld " , & binary ) ; tempBinary = binary ; while ( tempBinary! = 0 ) { if ( tempBinary % 10 = = 1 ) { decimal + = pow ( BASE , N ) ; } N + + ; tempBinary / = 10 ; } printf ( " Binary number = %lld\n  " , binary ) ; printf ( " Decimal number = %lld " , decimal ) ; return 0 ; }
#include <stdio.h> #include <math.h> #include <string.h> #define SIZE 16 void getTwosComplement ( char * twosComp , const char * ) ; int main ( ) { char binary [ SIZE + 1 ] , tempBinary [ SIZE + 1 ] ; int i , j , signBit = 0 ; long long decimal = 0 ; printf ( " Enter any %d bit binary value : " , SIZE ) ; gets ( binary ) ; strcpy ( tempBinary , binary ) ; if ( binary [ 0 ] = = '1' ) { signBit = 1 ; getTwosComplement ( tempBinary , binary ) ; } for ( i = 0 ; i <SIZE ; i + + ) { if ( tempBinary [ i ] = = '1' ) { decimal + = pow ( 2 , ( SIZE - ( i + 1 ) ) ) ; } } if ( signBit = = 1 ) { decimal * = -1 ; } printf ( " Binary value = %s\n  " , binary ) ; printf ( " Decimal value = %lld " , decimal ) ; return 0 ; } void getTwosComplement ( char * twosComp , const char * binary ) { char onesComp [ SIZE + 1 ] ; int i , carry = 1 ; for ( i = 0 ; i <SIZE ; i + + ) { if ( binary [ i ] = = '1' ) { onesComp [ i ] = '0' ; } else if ( binary [ i ] = = '0' ) { onesComp [ i ] = '1' ; } } onesComp [ SIZE ] = '\0' ; for ( i = SIZE-1 ; i> = 0 ; i-- ) { if ( onesComp [ i ] = = '1' & & carry = = 1 ) { twosComp [ i ] = '0' ; } else if ( onesComp [ i ] = = '0' & & carry = = 1 ) { twosComp [ i ] = '1' ; carry = 0 ; } else { twosComp [ i ] = onesComp [ i ] ; } } twosComp [ SIZE ] = '\0' ; }
#include <stdio.h> #define SIZE 8 int main ( ) { char binary [ SIZE + 1 ] , onesComp [ SIZE + 1 ] , twosComp [ SIZE + 1 ] ; int i , carry = 1 ; printf ( " Enter %d bit binary value : " , SIZE ) ; gets ( binary ) ; for ( i = 0 ; i <SIZE ; i + + ) { if ( binary [ i ] = = '1' ) { onesComp [ i ] = '0' ; } else if ( binary [ i ] = = '0' ) { onesComp [ i ] = '1' ; } } onesComp [ SIZE ] = '\0' ; for ( i = SIZE-1 ; i> = 0 ; i-- ) { if ( onesComp [ i ] = = '1' & & carry = = 1 ) { twosComp [ i ] = '0' ; } else if ( onesComp [ i ] = = '0' & & carry = = 1 ) { twosComp [ i ] = '1' ; carry = 0 ; } else { twosComp [ i ] = onesComp [ i ] ; } } twosComp [ SIZE ] = '\0' ; printf ( " Original binary = %s\n  " , binary ) ; printf ( " Ones complement = %s\n  " , onesComp ) ; printf ( " Twos complement = %s\n  " , twosComp ) ; return 0 ; }
#include <stdio.h> #define SIZE 8 int main ( ) { char binary [ SIZE + 1 ] , onesComp [ SIZE + 1 ] ; int i , error = 0 ; printf ( " Enter %d bit binary value : " , SIZE ) ; gets ( binary ) ; for ( i = 0 ; i <SIZE ; i + + ) { if ( binary [ i ] = = '1' ) { onesComp [ i ] = '0' ; } else if ( binary [ i ] = = '0' ) { onesComp [ i ] = '1' ; } else { printf ( " Invalid Input " ) ; error = 1 ; break ; } } onesComp [ SIZE ] = '\0' ; if ( error = = 0 ) { printf ( " Original binary = %s\n  " , binary ) ; printf ( " Ones complement = %s " , onesComp ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col <row ) { sum + = A [ row ] [ col ] ; } } } printf ( " Sum of lower triangular matrix = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_ROWS ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col> row ) { sum + = A [ row ] [ col ] ; } } } printf ( " Sum of upper triangular matrix = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define SIZE 2 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col ; long det ; printf ( " Enter elements in matrix of size 2x2 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } det = ( A [ 0 ] [ 0 ] * A [ 1 ] [ 1 ] ) - ( A [ 0 ] [ 1 ] * A [ 1 ] [ 0 ] ) ; printf ( " Determinant of matrix A = %ld " , det ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col ; int a , b , c , d , e , f , g , h , i ; long det ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } a = A [ 0 ] [ 0 ] ; b = A [ 0 ] [ 1 ] ; c = A [ 0 ] [ 2 ] ; d = A [ 1 ] [ 0 ] ; e = A [ 1 ] [ 1 ] ; f = A [ 1 ] [ 2 ] ; g = A [ 2 ] [ 0 ] ; h = A [ 2 ] [ 1 ] ; i = A [ 2 ] [ 2 ] ; det = ( a * ( e * i - f * h ) ) - ( b * ( d * i - f * g ) ) + ( c * ( d * h - e * g ) ) ; printf ( " Determinant of matrix A = %ld " , det ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int row , col , isSymmetric ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { B [ row ] [ col ] = A [ col ] [ row ] ; } } isSymmetric = 1 ; for ( row = 0 ; row <SIZE & & isSymmetric ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( A [ row ] [ col ] ! = B [ row ] [ col ] ) { isSymmetric = 0 ; break ; } } } if ( isSymmetric = = 1 ) { printf ( " \n The given matrix is Symmetric matrix : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " \n The given matrix is not Symmetric matrix. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_COLS ] ; int B [ MAX_COLS ] [ MAX_ROWS ] ; int row , col ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { B [ col ] [ row ] = A [ row ] [ col ] ; } } printf ( " \n Original matrix : \n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } printf ( " Transpose of matrix A : \n  " ) ; for ( row = 0 ; row <MAX_COLS ; row + + ) { for ( col = 0 ; col <MAX_ROWS ; col + + ) { printf ( " %d " , B [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , total = 0 ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( A [ row ] [ col ] = = 0 ) { total + + ; } } } if ( total > = ( row * col ) / 2 ) { printf ( " \n The given matrix is a Sparse matrix. " ) ; } else { printf ( " \n The given matrix is not Sparse matrix. " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , isIdentity ; printf ( " Enter elements in matrix of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } isIdentity = 1 ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( row = = col & & A [ row ] [ col ] ! = 1 ) { isIdentity = 0 ; } else if ( row! = col & & A [ row ] [ col ] ! = 0 ) { isIdentity = 0 ; } } } if ( isIdentity = = 1 ) { printf ( " \n The given matrix is an Identity Matrix.\n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " The given matrix is not Identity Matrix " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int array [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , isUpper ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & array [ row ] [ col ] ) ; } } isUpper = 1 ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col <row & & array [ row ] [ col ] ! = 0 ) { isUpper = 0 ; } } } if ( isUpper = = 1 ) { printf ( " \n The matrix is Upper triangular matrix.\n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , array [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " \n The matrix is not Upper triangular matrix. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int array [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , isLower ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & array [ row ] [ col ] ) ; } } isLower = 1 ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { if ( col> row & & array [ row ] [ col ] ! = 0 ) { isLower = 0 ; } } } if ( isLower = = 1 ) { printf ( " \n Matrix is Lower triangular matrix : \n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , array [ row ] [ col ] ) ; } printf ( " \n  " ) ; } } else { printf ( " \n Matrix is not a Lower triangular matrix " ) ; } return 0 ; }
#include <stdio.h> #define MAX_ROWS 3 #define MAX_COLS 3 int main ( ) { int A [ MAX_ROWS ] [ MAX_COLS ] ; int row , col , size , temp ; printf ( " Enter elements in matrix of size %dx %d : \n  " , MAX_ROWS , MAX_COLS ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } size = ( MAX_ROWS < MAX_COLS ) ? MAX_ROWS : MAX_COLS ; for ( row = 0 ; row <size ; row + + ) { col = row ; temp = A [ row ] [ col ] ; A [ row ] [ col ] = A [ row ] [ ( size-col ) - 1 ] ; A [ row ] [ ( size-col ) - 1 ] = temp ; } printf ( " \n Matrix after diagonals interchanged : \n  " ) ; for ( row = 0 ; row <MAX_ROWS ; row + + ) { for ( col = 0 ; col <MAX_COLS ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { sum = 0 ; for ( col = 0 ; col <SIZE ; col + + ) { sum + = A [ row ] [ col ] ; } printf ( " Sum of elements of Row %d = %d\n  " , row + 1 , sum ) ; } for ( row = 0 ; row <SIZE ; row + + ) { sum = 0 ; for ( col = 0 ; col <SIZE ; col + + ) { sum + = A [ col ] [ row ] ; } printf ( " Sum of elements of Column %d = %d\n  " , row + 1 , sum ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( row + col = = ( ( SIZE + 1 ) -2 ) ) { sum + = A [ row ] [ col ] ; } } } printf ( " \n Sum of minor diagonal elements = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int num , row , col ; printf ( " Enter elements in matrix of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " Enter any number to multiply with matrix A : " ) ; scanf ( " %d " , & num ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { A [ row ] [ col ] = num * A [ row ] [ col ] ; } } printf ( " \n Resultant matrix c.A = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , A [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int row , col , sum = 0 ; printf ( " Enter elements in matrix of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { sum = sum + A [ row ] [ row ] ; } printf ( " \n Sum of main diagonal elements = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int row , col , isEqual ; printf ( " Enter elements in matrix A of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size %dx %d : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } isEqual = 1 ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { if ( A [ row ] [ col ] ! = B [ row ] [ col ] ) { isEqual = 0 ; break ; } } } if ( isEqual = = 1 ) { printf ( " \n Matrix A is equal to Matrix B " ) ; } else { printf ( " \n Matrix A is not equal to Matrix B " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int C [ SIZE ] [ SIZE ] ; int row , col , i , sum ; printf ( " Enter elements in matrix A of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size %dx %d : \n  " , SIZE , SIZE ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { sum = 0 ; for ( i = 0 ; i <SIZE ; i + + ) { sum + = A [ row ] [ i ] * B [ i ] [ col ] ; } C [ row ] [ col ] = sum ; } } printf ( " \n Product of matrix A * B = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , C [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int C [ SIZE ] [ SIZE ] ; int row , col ; printf ( " Enter elements in matrix A of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { C [ row ] [ col ] = A [ row ] [ col ] - B [ row ] [ col ] ; } } printf ( " \n Difference of two matrices A-B = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , C [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define SIZE 3 int main ( ) { int A [ SIZE ] [ SIZE ] ; int B [ SIZE ] [ SIZE ] ; int C [ SIZE ] [ SIZE ] ; int row , col ; printf ( " Enter elements in matrix A of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & A [ row ] [ col ] ) ; } } printf ( " \n Enter elements in matrix B of size 3x3 : \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { scanf ( " %d " , & B [ row ] [ col ] ) ; } } for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { C [ row ] [ col ] = A [ row ] [ col ] + B [ row ] [ col ] ; } } printf ( " \n Sum of matrices A + B = \n  " ) ; for ( row = 0 ; row <SIZE ; row + + ) { for ( col = 0 ; col <SIZE ; col + + ) { printf ( " %d " , C [ row ] [ col ] ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] , freq [ MAX_SIZE ] ; int size , i , j , count ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; freq [ i ] = -1 ; } for ( i = 0 ; i <size ; i + + ) { count = 1 ; for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; freq [ j ] = 0 ; } } if ( freq [ i ] ! = 0 ) { freq [ i ] = count ; } } printf ( " \n Unique elements in the array are : " ) ; for ( i = 0 ; i <size ; i + + ) { if ( freq [ i ] = = 1 ) { printf ( " %d " , arr [ i ] ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int amount ; int note500 , note100 , note50 , note20 , note10 , note5 , note2 , note1 ; note500 = note100 = note50 = note20 = note10 = note5 = note2 = note1 = 0 ; printf ( " Enter amount : " ) ; scanf ( " %d " , & amount ) ; if ( amount > = 500 ) { note500 = amount / 500 ; amount - = note500 * 500 ; } if ( amount > = 100 ) { note100 = amount / 100 ; amount - = note100 * 100 ; } if ( amount > = 50 ) { note50 = amount / 50 ; amount - = note50 * 50 ; } if ( amount > = 20 ) { note20 = amount / 20 ; amount - = note20 * 20 ; } if ( amount > = 10 ) { note10 = amount / 10 ; amount - = note10 * 10 ; } if ( amount > = 5 ) { note5 = amount / 5 ; amount - = note5 * 5 ; } if ( amount > = 2 ) { note2 = amount / 2 ; amount - = note2 * 2 ; } if ( amount > = 1 ) { note1 = amount ; } printf ( " Total number of notes = \n  " ) ; printf ( " 500 = %d\n  " , note500 ) ; printf ( " 100 = %d\n  " , note100 ) ; printf ( " 50 = %d\n  " , note50 ) ; printf ( " 20 = %d\n  " , note20 ) ; printf ( " 10 = %d\n  " , note10 ) ; printf ( " 5 = %d\n  " , note5 ) ; printf ( " 2 = %d\n  " , note2 ) ; printf ( " 1 = %d\n  " , note1 ) ; return 0 ; }
#include <stdio.h> int main ( ) { int base , exponent ; long long power = 1 ; int i ; printf ( " Enter base : " ) ; scanf ( " %d " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %d " , & exponent ) ; for ( i = 1 ; i < = exponent ; i + + ) { power = power * base ; } printf ( " %d ^ %d = %lld " , base , exponent , power ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size ; int i , j , temp ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( " \n Elements of array in ascending order : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size , i , toSearch , found ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Enter element to search : " ) ; scanf ( " %d " , & toSearch ) ; found = 0 ; for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] = = toSearch ) { found = 1 ; break ; } } if ( found = = 1 ) { printf ( " \n  %d is found at position %d " , toSearch , i + 1 ) ; } else { printf ( " \n  %d is not found in the array " , toSearch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int arr [ 100 ] , freq [ 100 ] ; int size , i , j , count ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; freq [ i ] = -1 ; } for ( i = 0 ; i <size ; i + + ) { count = 1 ; for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; freq [ j ] = 0 ; } } if ( freq [ i ] ! = 0 ) { freq [ i ] = count ; } } printf ( " \n Frequency of all elements of array : \n  " ) ; for ( i = 0 ; i <size ; i + + ) { if ( freq [ i ] ! = 0 ) { printf ( " %d occurs %d times\n  " , arr [ i ] , freq [ i ] ) ; } } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size , i ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Array in reverse order : " ) ; for ( i = size-1 ; i> = 0 ; i-- ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int size , i , arrIndex , revIndex ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } revIndex = 0 ; arrIndex = size - 1 ; while ( arrIndex > = 0 ) { reverse [ revIndex ] = arr [ arrIndex ] ; revIndex + + ; arrIndex-- ; } printf ( " \n Reversed array : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , reverse [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size , i , arrIndex , revIndex ; int temp ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } revIndex = 0 ; arrIndex = size - 1 ; while ( revIndex < arrIndex ) { temp = arr [ revIndex ] ; arr [ revIndex ] = arr [ arrIndex ] ; arr [ arrIndex ] = temp ; revIndex + + ; arrIndex-- ; } printf ( " \n Reversed array : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr1 [ MAX_SIZE ] , arr2 [ MAX_SIZE ] , mergeArray [ MAX_SIZE * 2 ] ; int size1 , size2 , mergeSize ; int index1 , index2 , mergeIndex ; int i ; printf ( " Enter the size of first array : " ) ; scanf ( " %d " , & size1 ) ; printf ( " Enter elements in first array : " ) ; for ( i = 0 ; i <size1 ; i + + ) { scanf ( " %d " , & arr1 [ i ] ) ; } printf ( " \n Enter the size of second array : " ) ; scanf ( " %d " , & size2 ) ; printf ( " Enter elements in second array : " ) ; for ( i = 0 ; i <size2 ; i + + ) { scanf ( " %d " , & arr2 [ i ] ) ; } mergeSize = size1 + size2 ; index1 = 0 ; index2 = 0 ; for ( mergeIndex = 0 ; mergeIndex < mergeSize ; mergeIndex + + ) { if ( index1 > = size1 || index2 > = size2 ) { break ; } if ( arr1 [ index1 ] < arr2 [ index2 ] ) { mergeArray [ mergeIndex ] = arr1 [ index1 ] ; index1 + + ; } else { mergeArray [ mergeIndex ] = arr2 [ index2 ] ; index2 + + ; } } while ( index1 < size1 ) { mergeArray [ mergeIndex ] = arr1 [ index1 ] ; mergeIndex + + ; index1 + + ; } while ( index2 < size2 ) { mergeArray [ mergeIndex ] = arr2 [ index2 ] ; mergeIndex + + ; index2 + + ; } printf ( " \n Array merged in ascending order : " ) ; for ( i = 0 ; i <mergeSize ; i + + ) { printf ( " %d\t " , mergeArray [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , count = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { if ( arr [ i ] < 0 ) { count + + ; } } printf ( " \n Total negative elements in array = %d " , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , N ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n All negative elements in array are : " ) ; for ( i = 0 ; i <N ; i + + ) { if ( arr [ i ] < 0 ) { printf ( " %d\t " , arr [ i ] ) ; } } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int size ; int i , j , k ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { for ( k = j ; k <size ; k + + ) { arr [ k ] = arr [ k + 1 ] ; } size-- ; j-- ; } } } printf ( " \n Array elements after deleting duplicates : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , j , size , count = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { for ( j = i + 1 ; j <size ; j + + ) { if ( arr [ i ] = = arr [ j ] ) { count + + ; break ; } } } printf ( " \n Total number of duplicate elements found in array = %d " , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , pos ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter the element position to delete : " ) ; scanf ( " %d " , & pos ) ; if ( pos < 0 || pos > size ) { printf ( " Invalid position! Please enter position between 1 to %d " , size ) ; } else { for ( i = pos-1 ; i <size-1 ; i + + ) { arr [ i ] = arr [ i + 1 ] ; } size-- ; } printf ( " \n Elements of array after delete are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , size , num , pos ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " Enter element to insert : " ) ; scanf ( " %d " , & num ) ; printf ( " Enter the element position : " ) ; scanf ( " %d " , & pos ) ; if ( pos > size + 1 || pos < = 0 ) { printf ( " Invalid position! Please enter position between 1 to %d " , size ) ; } else { for ( i = size ; i> = pos ; i-- ) { arr [ i ] = arr [ i-1 ] ; } arr [ pos-1 ] = num ; size + + ; printf ( " Array elements after insertion : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , arr [ i ] ) ; } } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int source [ MAX_SIZE ] , dest [ MAX_SIZE ] ; int i , size ; printf ( " Enter the size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements of source array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & source [ i ] ) ; } for ( i = 0 ; i <size ; i + + ) { dest [ i ] = source [ i ] ; } printf ( " \n Elements of source array are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , source [ i ] ) ; } printf ( " \n Elements of dest array are : " ) ; for ( i = 0 ; i <size ; i + + ) { printf ( " %d\t " , dest [ i ] ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , max , min , size ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & size ) ; printf ( " Enter elements in the array : " ) ; for ( i = 0 ; i <size ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } max = arr [ 0 ] ; min = arr [ 0 ] ; for ( i = 1 ; i <size ; i + + ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( " Maximum element = %d\n  " , max ) ; printf ( " Minimum element = %d " , min ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , n , sum = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements in the array : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } for ( i = 0 ; i <n ; i + + ) { sum = sum + arr [ i ] ; } printf ( " Sum of all elements of array = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { int arr [ MAX_SIZE ] ; int i , n , sum = 0 ; printf ( " Enter size of the array : " ) ; scanf ( " %d " , & n ) ; printf ( " Enter %d elements in the array : " , n ) ; for ( i = 0 ; i <n ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; sum + = arr [ i ] ; } printf ( " Sum of all elements of array = %d " , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 1000 int main ( ) { int arr [ MAX_SIZE ] ; int i , N ; printf ( " Enter size of array : " ) ; scanf ( " %d " , & N ) ; printf ( " Enter %d elements in the array : " , N ) ; for ( i = 0 ; i <N ; i + + ) { scanf ( " %d " , & arr [ i ] ) ; } printf ( " \n Elements in array are : " ) ; for ( i = 0 ; i <N ; i + + ) { printf ( " %d , " , arr [ i ] ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch = 'a' ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 'z' ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int ch = 97 ; printf ( " Alphabets from a - z are : \n  " ) ; while ( ch < = 122 ) { printf ( " %c\n  " , ch ) ; ch + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( rows * 2 - ( 2 * i-1 ) ) ; j + + ) { if ( i = = 1 || j = = 1 || j = = ( rows * 2 - ( 2 * i - 1 ) ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( 2 * i-1 ) ; j + + ) { if ( i = = rows || j = = 1 || j = = ( 2 * i-1 ) ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = rows ; j + + ) { if ( j = = i || j = = rows || i = = 1 ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { if ( i = = 1 || j = = i || j = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { if ( i = = rows || j = = 1 || j = = i ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { if ( j = = 1 || j = = i || i = = rows ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1|| j = = N ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , M , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & M ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = M ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = M || j = = 1|| j = = N ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = rows ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = columns ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = columns ) printf ( " * " ) ; else printf ( " " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; while ( n> = 1 ) { printf ( " %d\n  " , n ) ; n-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; for ( i = start ; i> = 1 ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter starting value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i> = end ; i-- ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> long long fact ( int n ) ; int main ( ) { int n , k , num , i ; long long term ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & num ) ; for ( n = 0 ; n <num ; n + + ) { for ( i = n ; i < = num ; i + + ) printf ( " %3c " , ' ' ) ; for ( k = 0 ; k < = n ; k + + ) { term = fact ( n ) / ( fact ( k ) * fact ( n-k ) ) ; printf ( " %6lld " , term ) ; } printf ( " \n  " ) ; } return 0 ; } long long fact ( int n ) { long long factorial = 1ll ; while ( n> = 1 ) { factorial * = n ; n-- ; } return factorial ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = n / 2 ; i < = n ; i + = 2 ) { for ( j = 1 ; j <n-i ; j + = 2 ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } for ( j = 1 ; j < = n-i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = n ; i> = 1 ; i-- ) { for ( j = i ; j <n ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( i * 2 ) -1 ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i <n ; i + + ) { for ( j = 1 ; j < = ( n-i ) ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i <n ; i + + ) { for ( j = 1 ; j < = ( 2 * i-2 ) ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = ( 2 * n - 2 * i ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } for ( j = 1 ; j < = ( 2 * i-2 ) ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = n ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } for ( j = ( 2 * i-2 ) ; j < ( 2 * n-2 ) ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; int stars , spaces ; printf ( " Enter rows to print : " ) ; scanf ( " %d " , & rows ) ; stars = 1 ; spaces = rows - 1 ; for ( i = 1 ; i <rows * 2 ; i + + ) { for ( j = 1 ; j < = spaces ; j + + ) printf ( " " ) ; for ( j = 1 ; j <stars * 2 ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; if ( i <rows ) { spaces-- ; stars + + ; } else { spaces + + ; stars-- ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { if ( i = = 1 || i = = N || j = = 1 || j = = N ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { if ( i = = 1 || i = = rows || j = = 1 || j = = columns ) { printf ( " * " ) ; } else { printf ( " " ) ; } } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; int star , spaces ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & N ) ; spaces = N-1 ; star = 1 ; for ( i = 1 ; i <N * 2 ; i + + ) { for ( j = 1 ; j < = spaces ; j + + ) printf ( " " ) ; for ( j = 1 ; j < = star ; j + + ) printf ( " * " ) ; printf ( " \n  " ) ; if ( i < N ) { star + + ; spaces-- ; } else { star-- ; spaces + + ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N , columns ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & N ) ; columns = 1 ; for ( i = 1 ; i <N * 2 ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } if ( i < N ) { columns + + ; } else { columns-- ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( rows * 2 - ( 2 * i-1 ) ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = ( 2 * i-1 ) ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = i ; j <rows ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , n ; printf ( " Enter value of n : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { for ( j = 1 ; j < = i ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , M , N ; printf ( " Enter rows : " ) ; scanf ( " %d " , & M ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = M ; i + + ) { for ( j = 1 ; j <i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = rows ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = rows - i ; j + + ) { printf ( " " ) ; } for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , N ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & N ) ; for ( i = 1 ; i < = N ; i + + ) { for ( j = 1 ; j < = N ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , rows , columns ; printf ( " Enter number of rows : " ) ; scanf ( " %d " , & rows ) ; printf ( " Enter number of columns : " ) ; scanf ( " %d " , & columns ) ; for ( i = 1 ; i < = rows ; i + + ) { for ( j = 1 ; j < = columns ; j + + ) { printf ( " * " ) ; } printf ( " \n  " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 1 ; while ( i < = n ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; i = 2 ; while ( i < = n ) { printf ( " %d\n  " , i ) ; i + = 2 ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , end ; printf ( " Print all natural numbers from 1 to : " ) ; scanf ( " %d " , & end ) ; i = 1 ; while ( i < = end ) { printf ( " %d\n  " , i ) ; i + + ; } return 0 ; }
#include <stdio.h> int main ( ) { char op ; float num1 , num2 , result = 0.0f ; printf ( " WELCOME TO SIMPLE CALCULATOR\n  " ) ; printf ( " ----------------------------\n  " ) ; printf ( " Enter [ number 1 ] [ + - * / ] [ number 2 ] \n  " ) ; scanf ( " %f %c %f " , & num1 , & op , & num2 ) ; switch ( op ) { case ' + ' : result = num1 + num2 ; break ; case '-' : result = num1 - num2 ; break ; case ' * ' : result = num1 * num2 ; break ; case ' / ' : result = num1 / num2 ; break ; default : printf ( " Invalid operator " ) ; } printf ( " %.2f %c %.2f = %.2f " , num1 , op , num2 , result ) ; return 0 ; }
#include <stdio.h> float add ( float num1 , float num2 ) ; float sub ( float num1 , float num2 ) ; float mult ( float num1 , float num2 ) ; float div ( float num1 , float num2 ) ; int main ( ) { char op ; float num1 , num2 , result = 0.0f ; printf ( " WELCOME TO SIMPLE CALCULATOR\n  " ) ; printf ( " ----------------------------\n  " ) ; printf ( " Enter [ number 1 ] [ + - * / ] [ number 2 ] \n  " ) ; scanf ( " %f %c %f " , & num1 , & op , & num2 ) ; switch ( op ) { case ' + ' : result = add ( num1 , num2 ) ; break ; case '-' : result = sub ( num1 , num2 ) ; break ; case ' * ' : result = mult ( num1 , num2 ) ; break ; case ' / ' : result = div ( num1 , num2 ) ; break ; default : printf ( " Invalid operator " ) ; } printf ( " %.2f %c %.2f = %.2f " , num1 , op , num2 , result ) ; return 0 ; } float add ( float num1 , float num2 ) { return num1 + num2 ; } float sub ( float num1 , float num2 ) { return num1 - num2 ; } float mult ( float num1 , float num2 ) { return num1 * num2 ; } float div ( float num1 , float num2 ) { return num1 / num2 ; }
#include <stdio.h> int main ( ) { int i , j , end , isPrime , sum = 0 ; printf ( " Find sum of all prime between 1 to : " ) ; scanf ( " %d " , & end ) ; for ( i = 2 ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { sum + = i ; } } printf ( " Sum of all prime numbers between 1 to %d = %d " , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , start , end ; int isPrime , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { sum + = i ; } } printf ( " Sum of all prime numbers between %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num1 , num2 , min , hcf = 1 ; printf ( " Enter any two numbers to find HCF : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; min = ( num1 <num2 ) ? num1 : num2 ; for ( i = 1 ; i < = min ; i + + ) { if ( num1 %i = = 0 & & num2 %i = = 0 ) { hcf = i ; } } printf ( " HCF of %d and %d = %d\n  " , num1 , num2 , hcf ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num1 , num2 , max , lcm = 1 ; printf ( " Enter any two numbers to find LCM : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; i = max ; while ( 1 ) { if ( i %num1 = = 0 & & i %num2 = = 0 ) { lcm = i ; break ; } i + = max ; } printf ( " LCM of %d and %d = %d " , num1 , num2 , lcm ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , j , num , isPrime ; printf ( " Enter any number to print Prime factors : " ) ; scanf ( " %d " , & num ) ; printf ( " All Prime Factors of %d are : \n  " , num ) ; for ( i = 2 ; i < = num ; i + + ) { if ( num %i = = 0 ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d , " , i ) ; } } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , cur , lastDigit , end ; long long fact , sum ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Strong numbers between 1 to %d are : \n  " , end ) ; for ( i = 1 ; i < = end ; i + + ) { cur = i ; sum = 0 ; while ( cur > 0 ) { fact = 1ll ; lastDigit = cur % 10 ; for ( j = 1 ; j < = lastDigit ; j + + ) { fact = fact * j ; } sum + = fact ; cur / = 10 ; } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , cur , lastDigit , start , end ; long long fact , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Strong numbers between %d to %d are : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { cur = i ; sum = 0 ; while ( cur > 0 ) { fact = 1ll ; lastDigit = cur % 10 ; for ( j = 1 ; j < = lastDigit ; j + + ) { fact = fact * j ; } sum + = fact ; cur / = 10 ; } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , originalNum , num , lastDigit , sum ; long fact ; printf ( " Enter any number to check Strong number : " ) ; scanf ( " %d " , & num ) ; originalNum = num ; sum = 0 ; while ( num > 0 ) { lastDigit = num % 10 ; fact = 1 ; for ( i = 1 ; i < = lastDigit ; i + + ) { fact = fact * i ; } sum = sum + fact ; num = num / 10 ; } if ( sum = = originalNum ) { printf ( " %d is STRONG NUMBER " , originalNum ) ; } else { printf ( " %d is NOT STRONG NUMBER " , originalNum ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , end , isPrime ; printf ( " Find prime numbers between 1 to : " ) ; scanf ( " %d " , & end ) ; printf ( " All prime numbers between 1 to %d are : \n  " , end ) ; for ( i = 2 ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , start , end ; int isPrime ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All prime numbers between %d to %d are : \n  " , start , end ) ; if ( start < 2 ) start = 2 ; for ( i = start ; i < = end ; i + + ) { isPrime = 1 ; for ( j = 2 ; j < = i / 2 ; j + + ) { if ( i %j = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , end , sum ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Perfect numbers between 1 to %d : \n  " , end ) ; for ( i = 1 ; i < = end ; i + + ) { sum = 0 ; for ( j = 1 ; j <i ; j + + ) { if ( i % j = = 0 ) { sum + = j ; } } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , j , start , end , sum ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All Perfect numbers between %d to %d : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { sum = 0 ; for ( j = 1 ; j <i ; j + + ) { if ( i % j = = 0 ) { sum + = j ; } } if ( sum = = i ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , num , sum = 0 ; printf ( " Enter any number to check perfect number : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i <num ; i + + ) { if ( num %i = = 0 ) { sum + = i ; } } if ( sum = = num ) { printf ( " %d is PERFECT NUMBER " , num ) ; } else { printf ( " %d is NOT PERFECT NUMBER " , num ) ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , lastDigit , digits , sum , i , end ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Armstrong number between 1 to %d are : \n  " , end ) ; for ( i = 1 ; i < = end ; i + + ) { sum = 0 ; num = i ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + ceil ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } if ( i = = sum ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , lastDigit , digits , sum , i ; int start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " Armstrong number between %d to %d are : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { sum = 0 ; num = i ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + ceil ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } if ( i = = sum ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int originalNum , num , lastDigit , digits , sum ; printf ( " Enter any number to check Armstrong number : " ) ; scanf ( " %d " , & num ) ; sum = 0 ; originalNum = num ; digits = ( int ) log10 ( num ) + 1 ; while ( num > 0 ) { lastDigit = num % 10 ; sum = sum + round ( pow ( lastDigit , digits ) ) ; num = num / 10 ; } if ( originalNum = = sum ) { printf ( " %d is ARMSTRONG NUMBER " , originalNum ) ; } else { printf ( " %d is NOT ARMSTRONG NUMBER " , originalNum ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 , firstDigit , lastDigit ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; firstDigit = num ; while ( num > = 10 ) { num = num / 10 ; } firstDigit = num ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int num , sum , digits , firstDigit , lastDigit ; sum = 0 ; printf ( " Enter any number to find sum of first and last digit : " ) ; scanf ( " %d " , & num ) ; lastDigit = num % 10 ; digits = ( int ) log10 ( num ) ; firstDigit = ( int ) ( num / pow ( 10 , digits ) ) ; sum = firstDigit + lastDigit ; printf ( " Sum of first and last digit = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i ; for ( i = 0 ; i < = 255 ; i + + ) { printf ( " ASCII value of character %c = %d\n  " , i , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , num = 0 ; printf ( " Enter any number to print in words : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { num = ( num * 10 ) + ( n % 10 ) ; n / = 10 ; } while ( num ! = 0 ) { switch ( num % 10 ) { case 0 : printf ( " Zero " ) ; break ; case 1 : printf ( " One " ) ; break ; case 2 : printf ( " Two " ) ; break ; case 3 : printf ( " Three " ) ; break ; case 4 : printf ( " Four " ) ; break ; case 5 : printf ( " Five " ) ; break ; case 6 : printf ( " Six " ) ; break ; case 7 : printf ( " Seven " ) ; break ; case 8 : printf ( " Eight " ) ; break ; case 9 : printf ( " Nine " ) ; break ; } num = num / 10 ; } return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { int n , num = 0 , digits ; printf ( " Enter any number to print in words : " ) ; scanf ( " %d " , & n ) ; digits = ( int ) log10 ( n ) ; while ( n ! = 0 ) { num = ( num * 10 ) + ( n % 10 ) ; n / = 10 ; } digits = digits - ( ( int ) log10 ( num ) ) ; while ( num ! = 0 ) { switch ( num % 10 ) { case 0 : printf ( " Zero " ) ; break ; case 1 : printf ( " One " ) ; break ; case 2 : printf ( " Two " ) ; break ; case 3 : printf ( " Three " ) ; break ; case 4 : printf ( " Four " ) ; break ; case 5 : printf ( " Five " ) ; break ; case 6 : printf ( " Six " ) ; break ; case 7 : printf ( " Seven " ) ; break ; case 8 : printf ( " Eight " ) ; break ; case 9 : printf ( " Nine " ) ; break ; } num / = 10 ; } while ( digits ) { printf ( " Zero " ) ; digits-- ; } return 0 ; }
#include <stdio.h> int main ( ) { int n , num , rev = 0 ; printf ( " Enter any number to check palindrome : " ) ; scanf ( " %d " , & n ) ; num = n ; while ( n ! = 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n / = 10 ; } if ( rev = = num ) { printf ( " %d is palindrome. " , num ) ; } else { printf ( " %d is not palindrome. " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num , reverse = 0 ; printf ( " Enter any number to find reverse : " ) ; scanf ( " %d " , & num ) ; while ( num ! = 0 ) { reverse = ( reverse * 10 ) + ( num % 10 ) ; num / = 10 ; } printf ( " Reverse = %d " , reverse ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + + ) { sum + = i ; } printf ( " Sum of first %d natural numbers = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; for ( i = start ; i < = end ; i + + ) { sum + = i ; } printf ( " Sum of natural numbers from %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int n ; long long product = 1ll ; printf ( " Enter any number to calculate product of digit : " ) ; scanf ( " %d " , & n ) ; while ( n ! = 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } printf ( " Product of digits = %lld " , product ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num , sum = 0 ; printf ( " Enter any number to find sum of its digit : " ) ; scanf ( " %d " , & num ) ; while ( num! = 0 ) { sum + = num % 10 ; num = num / 10 ; } printf ( " Sum of digits = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; unsigned long long fact = 1LL ; printf ( " Enter any number to calculate factorial : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = num ; i + + ) { fact = fact * i ; } printf ( " Factorial of %d = %llu " , num , fact ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , num , isPrime ; isPrime = 1 ; printf ( " Enter any number to check prime : " ) ; scanf ( " %d " , & num ) ; for ( i = 2 ; i < = num / 2 ; i + + ) { if ( num %i = = 0 ) { isPrime = 0 ; break ; } } if ( isPrime = = 1 ) { printf ( " %d is prime number " , num ) ; } else { printf ( " %d is composite number " , num ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter any number to find its factor : " ) ; scanf ( " %d " , & num ) ; printf ( " All factors of %d are : \n  " , num ) ; for ( i = 1 ; i < = num ; i + + ) { if ( num % i = = 0 ) { printf ( " %d , " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , num ; printf ( " Enter number to print table : " ) ; scanf ( " %d " , & num ) ; for ( i = 1 ; i < = 10 ; i + + ) { printf ( " %d * %d = %d\n  " , num , i , ( num * i ) ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers = %d " , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; if ( start % 2 = = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { sum + = i ; } printf ( " Sum of odd numbers between %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n , sum = 0 ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { sum + = i ; } printf ( " Sum of all even number between 1 to %d = %d " , n , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end , sum = 0 ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; if ( start %2! = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { sum + = i ; } printf ( " Sum of all even number between %d to %d = %d " , start , end , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2! = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print odd numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All odd numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All odd numbers from %d to %d are : \n  " , start , end ) ; if ( start %2 = = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " Even numbers from 1 to %d are : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { if ( i %2 = = 0 ) { printf ( " %d\n  " , i ) ; } } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Print all even numbers till : " ) ; scanf ( " %d " , & n ) ; printf ( " All even numbers from 1 to %d are : \n  " , n ) ; for ( i = 2 ; i < = n ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter lower limit : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter upper limit : " ) ; scanf ( " %d " , & end ) ; printf ( " All even numbers from %d to %d are : \n  " , start , end ) ; if ( start %2 ! = 0 ) { start + + ; } for ( i = start ; i < = end ; i + = 2 ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Alphabets from a - z are : \n  " ) ; for ( ch = 'a' ; ch < = 'z' ; ch + + ) { printf ( " %c\n  " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i ; printf ( " Alphabets from a - z are : \n  " ) ; for ( i = 97 ; i < = 122 ; i + + ) { printf ( " %c\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , n ; printf ( " Enter any number : " ) ; scanf ( " %d " , & n ) ; printf ( " Natural numbers from 1 to %d : \n  " , n ) ; for ( i = 1 ; i < = n ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int i , start , end ; printf ( " Enter start value : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end value : " ) ; scanf ( " %d " , & end ) ; printf ( " Natural numbers from %d to %d : \n  " , start , end ) ; for ( i = start ; i < = end ; i + + ) { printf ( " %d\n  " , i ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; switch ( num % 2 ) { case 0 : printf ( " Number is Even " ) ; break ; case 1 : printf ( " Number is Odd " ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; ( ch> = 'a' & & ch < = 'z' ) || ( ch> = 'A' & & ch < = 'Z' ) ? printf ( " It is ALPHABET " ) : printf ( " It is NOT ALPHABET " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; ( year %4 = = 0 & & year %100! = 0 ) ? printf ( " LEAP YEAR " ) : ( year %400 = = 0 ) ? printf ( " LEAP YEAR " ) : printf ( " COMMON YEAR " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter any year : " ) ; scanf ( " %d " , & year ) ; printf ( " %s " , ( ( year %4 = = 0 & & year %100! = 0 ) ? " LEAP YEAR " : ( year %400 = = 0 ) ? " LEAP YEAR " : " COMMON YEAR " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; ( num %2 = = 0 ) ? printf ( " The number is EVEN " ) : printf ( " The number is ODD " ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; printf ( " The number is %s " , ( num %2 = = 0 ? " EVEN " : " ODD " ) ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; max = ( num1 > num2 & & num1 > num3 ) ? num1 : ( num2 > num3 ) ? num2 : num3 ; printf ( " \n Maximum between %d , %d and %d = %d " , num1 , num2 , num3 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; printf ( " Maximum between %d and %d is %d " , num1 , num2 , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers to find maximum : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; switch ( num1 > num2 ) { case 0 : printf ( " %d is maximum " , num2 ) ; break ; case 1 : printf ( " %d is maximum " , num1 ) ; break ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; switch ( month ) { case 1 : printf ( " 31 days " ) ; break ; case 2 : printf ( " 28 / 29 days " ) ; break ; case 3 : printf ( " 31 days " ) ; break ; case 4 : printf ( " 30 days " ) ; break ; case 5 : printf ( " 31 days " ) ; break ; case 6 : printf ( " 30 days " ) ; break ; case 7 : printf ( " 31 days " ) ; break ; case 8 : printf ( " 31 days " ) ; break ; case 9 : printf ( " 30 days " ) ; break ; case 10 : printf ( " 31 days " ) ; break ; case 11 : printf ( " 30 days " ) ; break ; case 12 : printf ( " 31 days " ) ; break ; default : printf ( " Invalid input! Please enter month number between 1-12 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; switch ( month ) { case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : printf ( " 31 days " ) ; break ; case 4 : case 6 : case 9 : case 11 : printf ( " 30 days " ) ; break ; case 2 : printf ( " 28 / 29 days " ) ; break ; default : printf ( " Invalid input! Please enter month number between 1-12 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; switch ( week ) { case 1 : printf ( " Monday " ) ; break ; case 2 : printf ( " Tuesday " ) ; break ; case 3 : printf ( " Wednesday " ) ; break ; case 4 : printf ( " Thursday " ) ; break ; case 5 : printf ( " Friday " ) ; break ; case 6 : printf ( " Saturday " ) ; break ; case 7 : printf ( " Sunday " ) ; break ; default : printf ( " Invalid input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any alphabet : " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : printf ( " Vowel " ) ; break ; case 'e' : printf ( " Vowel " ) ; break ; case 'i' : printf ( " Vowel " ) ; break ; case 'o' : printf ( " Vowel " ) ; break ; case 'u' : printf ( " Vowel " ) ; break ; case 'A' : printf ( " Vowel " ) ; break ; case 'E' : printf ( " Vowel " ) ; break ; case 'I' : printf ( " Vowel " ) ; break ; case 'O' : printf ( " Vowel " ) ; break ; case 'U' : printf ( " Vowel " ) ; break ; default : printf ( " Consonant " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; switch ( ch ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : printf ( " Vowel " ) ; break ; default : printf ( " Consonant " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int days , years , weeks ; printf ( " Enter days : " ) ; scanf ( " %d " , & days ) ; years = ( days / 365 ) ; weeks = ( days % 365 ) / 7 ; days = days - ( ( years * 365 ) + ( weeks * 7 ) ) ; printf ( " YEARS : %d\n  " , years ) ; printf ( " WEEKS : %d\n  " , weeks ) ; printf ( " DAYS : %d " , days ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Fahrenheit : " ) ; scanf ( " %f " , & fahrenheit ) ; celsius = ( fahrenheit - 32 ) * 5 / 9 ; printf ( " %.2f Fahrenheit = %.2f Celsius " , fahrenheit , celsius ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , i , terms ; printf ( " Enter number of terms : " ) ; scanf ( " %d " , & terms ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; for ( i = 1 ; i < = terms ; i + + ) { printf ( " %d , " , c ) ; a = b ; b = c ; c = a + b ; } return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c , start , end ; printf ( " Enter starting term : " ) ; scanf ( " %d " , & start ) ; printf ( " Enter end term : " ) ; scanf ( " %d " , & end ) ; a = 0 ; b = 1 ; c = 0 ; printf ( " Fibonacci terms : \n  " ) ; while ( c < = end ) { if ( c > = start ) { printf ( " %d , " , c ) ; } a = b ; b = c ; c = a + b ; } return 0 ; }
#include <stdio.h> int main ( ) { int unit ; float amt , total_amt , sur_charge ; printf ( " Enter total units consumed : " ) ; scanf ( " %d " , & unit ) ; if ( unit < = 50 ) { amt = unit * 0.50 ; } else if ( unit < = 150 ) { amt = 25 + ( ( unit-50 ) * 0.75 ) ; } else if ( unit < = 250 ) { amt = 100 + ( ( unit-150 ) * 1.20 ) ; } else { amt = 220 + ( ( unit-250 ) * 1.50 ) ; } sur_charge = amt * 0.20 ; total_amt = amt + sur_charge ; printf ( " Electricity Bill = Rs. %.2f " , total_amt ) ; return 0 ; }
#include <stdio.h> int main ( ) { float basic , gross , da , hra ; printf ( " Enter basic salary of an employee : " ) ; scanf ( " %f " , & basic ) ; if ( basic < = 10000 ) { da = basic * 0.8 ; hra = basic * 0.2 ; } else if ( basic < = 20000 ) { da = basic * 0.9 ; hra = basic * 0.25 ; } else { da = basic * 0.95 ; hra = basic * 0.3 ; } gross = basic + hra + da ; printf ( " GROSS SALARY OF EMPLOYEE = %.2f " , gross ) ; return 0 ; }
#include <stdio.h> int main ( ) { int phy , chem , bio , math , comp ; float per ; printf ( " Enter five subjects marks : " ) ; scanf ( " %d %d %d %d %d " , & phy , & chem , & bio , & math , & comp ) ; per = ( phy + chem + bio + math + comp ) / 5.0 ; printf ( " Percentage = %.2f\n  " , per ) ; if ( per > = 90 ) { printf ( " Grade A " ) ; } else if ( per > = 80 ) { printf ( " Grade B " ) ; } else if ( per > = 70 ) { printf ( " Grade C " ) ; } else if ( per > = 60 ) { printf ( " Grade D " ) ; } else if ( per > = 40 ) { printf ( " Grade E " ) ; } else { printf ( " Grade F " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int cp , sp , amt ; printf ( " Enter cost price : " ) ; scanf ( " %d " , & cp ) ; printf ( " Enter selling price : " ) ; scanf ( " %d " , & sp ) ; if ( sp > cp ) { amt = sp - cp ; printf ( " Profit = %d " , amt ) ; } else if ( cp > sp ) { amt = cp - sp ; printf ( " Loss = %d " , amt ) ; } else { printf ( " No Profit No Loss. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( ( num % 5 = = 0 ) & & ( num % 11 = = 0 ) ) { printf ( " Number is divisible by 5 and 11 " ) ; } else { printf ( " Number is not divisible by 5 and 11 " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( num1 > num2 ) { if ( num1 > num3 ) { max = num1 ; } else { max = num3 ; } } else { if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1 > num2 ) & & ( num1 > num3 ) ) { max = num1 ; } else if ( ( num2 > num1 ) & & ( num2 > num3 ) ) { max = num2 ; } else if ( ( num3 > num1 ) & & ( num3 > num2 ) ) { max = num3 ; } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , num3 , max ; printf ( " Enter three numbers : " ) ; scanf ( " %d %d %d " , & num1 , & num2 , & num3 ) ; if ( ( num1 > num2 ) & & ( num1 > num3 ) ) { max = num1 ; } else if ( num2 > num3 ) { max = num2 ; } else { max = num3 ; } printf ( " Maximum among all three numbers = %d " , max ) ; return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( side1 = = side2 & & side2 = = side3 ) { printf ( " Equilateral triangle. " ) ; } else if ( side1 = = side2 || side1 = = side3 || side2 = = side3 ) { printf ( " Isosceles triangle. " ) ; } else { printf ( " Scalene triangle. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 ) > side3 ) { if ( ( side2 + side3 ) > side1 ) { if ( ( side1 + side3 ) > side2 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } } else { printf ( " Triangle is not valid. " ) ; } } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; int valid = 0 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 ) > side3 ) { if ( ( side2 + side3 ) > side1 ) { if ( ( side1 + side3 ) > side2 ) { valid = 1 ; } } } if ( valid = = 1 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int side1 , side2 , side3 ; printf ( " Enter three sides of triangle : \n  " ) ; scanf ( " %d %d %d " , & side1 , & side2 , & side3 ) ; if ( ( side1 + side2 > side3 ) & & ( side1 + side3 > side2 ) & & ( side2 + side3 > side1 ) ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int angle1 , angle2 , angle3 , sum ; printf ( " Enter three angles of triangle : \n  " ) ; scanf ( " %d %d %d " , & angle1 , & angle2 , & angle3 ) ; sum = angle1 + angle2 + angle3 ; if ( sum = = 180 & & angle1 ! = 0 & & angle2 ! = 0 & & angle3 ! = 0 ) { printf ( " Triangle is valid. " ) ; } else { printf ( " Triangle is not valid. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month = = 1 ) { printf ( " 31 days " ) ; } else if ( month = = 2 ) { printf ( " 28 or 29 days " ) ; } else if ( month = = 3 ) { printf ( " 31 days " ) ; } else if ( month = = 4 ) { printf ( " 30 days " ) ; } else if ( month = = 5 ) { printf ( " 31 days " ) ; } else if ( month = = 6 ) { printf ( " 30 days " ) ; } else if ( month = = 7 ) { printf ( " 31 days " ) ; } else if ( month = = 8 ) { printf ( " 31 days " ) ; } else if ( month = = 9 ) { printf ( " 30 days " ) ; } else if ( month = = 10 ) { printf ( " 31 days " ) ; } else if ( month = = 11 ) { printf ( " 30 days " ) ; } else if ( month = = 12 ) { printf ( " 31 days " ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month = = 1 || month = = 3 || month = = 5 || month = = 7 || month = = 8 || month = = 10 || month = = 12 ) { printf ( " 31 days " ) ; } else if ( month = = 4 || month = = 6 || month = = 9 || month = = 11 ) { printf ( " 30 days " ) ; } else if ( month = = 2 ) { printf ( " 28 or 29 days " ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { const int MONTHS [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int month ; printf ( " Enter month number ( 1-12 ) : " ) ; scanf ( " %d " , & month ) ; if ( month > = 1 & & month < = 12 ) { printf ( " %d days " , MONTHS [ month - 1 ] ) ; } else { printf ( " Invalid input! Please enter month number between ( 1-12 ) . " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; if ( week = = 1 ) { printf ( " Monday " ) ; } else if ( week = = 2 ) { printf ( " Tuesday " ) ; } else if ( week = = 3 ) { printf ( " Wednesday " ) ; } else if ( week = = 4 ) { printf ( " Thursday " ) ; } else if ( week = = 5 ) { printf ( " Friday " ) ; } else if ( week = = 6 ) { printf ( " Saturday " ) ; } else if ( week = = 7 ) { printf ( " Sunday " ) ; } else { printf ( " Invalid Input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { const char * WEEKS [ ] = { " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " } ; int week ; printf ( " Enter week number ( 1-7 ) : " ) ; scanf ( " %d " , & week ) ; if ( week > 0 & & week < 8 ) { printf ( " %s " , WEEKS [ week-1 ] ) ; } else { printf ( " Invalid input! Please enter week number between 1-7. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = '0' & & ch < = '9' ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " ' %c' is alphabet. " , ch ) ; } else if ( ch > = 48 & & ch < = 57 ) { printf ( " ' %c' is digit. " , ch ) ; } else { printf ( " ' %c' is special character. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 'a' || ch = = 'e' || ch = = 'i' || ch = = 'o' || ch = = 'u' || ch = = 'A' || ch = = 'E' || ch = = 'I' || ch = = 'O' || ch = = 'U' ) { printf ( " ' %c' is Vowel. " , ch ) ; } else if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " ' %c' is Consonant. " , ch ) ; } else { printf ( " ' %c' is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ch = = 97 || ch = = 101 || ch = = 105 || ch = = 111 || ch = = 117 || ch = = 65 || ch = = 69 || ch = = 73 || ch = = 79 || ch = = 85 ) { printf ( " ' %c' is Vowel. " , ch ) ; } else if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " ' %c' is Consonant. " , ch ) ; } else { printf ( " %c is not an alphabet. " , ch ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 'a' & & ch < = 'z' ) || ( ch > = 'A' & & ch < = 'Z' ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { char ch ; printf ( " Enter any character : " ) ; scanf ( " %c " , & ch ) ; if ( ( ch > = 97 & & ch < = 122 ) || ( ch > = 65 & & ch < = 90 ) ) { printf ( " Character is an ALPHABET. " ) ; } else { printf ( " Character is NOT ALPHABET. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number to check even or odd : " ) ; scanf ( " %d " , & num ) ; if ( num % 2 = = 0 ) { printf ( " Number is Even. " ) ; } else { printf ( " Number is Odd. " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } if ( num = = 0 ) { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num ; printf ( " Enter any number : " ) ; scanf ( " %d " , & num ) ; if ( num > 0 ) { printf ( " Number is POSITIVE " ) ; } else if ( num < 0 ) { printf ( " Number is NEGATIVE " ) ; } else { printf ( " Number is ZERO " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int year ; printf ( " Enter year : " ) ; scanf ( " %d " , & year ) ; if ( ( ( year % 4 = = 0 ) & & ( year % 100 ! = 0 ) ) || ( year % 400 = = 0 ) ) { printf ( " LEAP YEAR " ) ; } else { printf ( " COMMON YEAR " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } if ( num2 > num1 ) { printf ( " %d is maximum " , num2 ) ; } if ( num1 = = num2 ) { printf ( " Both are equal " ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) { printf ( " %d is maximum " , num1 ) ; } else { printf ( " %d is maximum " , num2 ) ; } return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , max ; printf ( " Enter two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; if ( num1 > num2 ) max = num1 ; else max = num2 ; printf ( " %d is maximum. " , max ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float principle , rate , time , CI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; CI = principle * ( pow ( ( 1 + rate / 100 ) , time ) ) ; printf ( " Compound Interest = %f " , CI ) ; return 0 ; }
#include <stdio.h> int main ( ) { float principle , time , rate , SI ; printf ( " Enter principle ( amount ) : " ) ; scanf ( " %f " , & principle ) ; printf ( " Enter time : " ) ; scanf ( " %f " , & time ) ; printf ( " Enter rate : " ) ; scanf ( " %f " , & rate ) ; SI = ( principle * time * rate ) / 100 ; printf ( " Simple Interest = %f " , SI ) ; return 0 ; }
#include <stdio.h> int main ( ) { float eng , phy , chem , math , comp ; float total , average , percentage ; printf ( " Enter marks of five subjects : \n  " ) ; scanf ( " %f %f %f %f %f " , & eng , & phy , & chem , & math , & comp ) ; total = eng + phy + chem + math + comp ; average = total / 5.0 ; percentage = ( total / 500.0 ) * 100 ; printf ( " Total marks = %.2f\n  " , total ) ; printf ( " Average marks = %.2f\n  " , average ) ; printf ( " Percentage = %.2f " , percentage ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double num , root ; printf ( " Enter any number to find square root : " ) ; scanf ( " %lf " , & num ) ; root = sqrt ( num ) ; printf ( " Square root of %.2lf = %.2lf " , num , root ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float side , area ; printf ( " Enter side of an equilateral triangle : " ) ; scanf ( " %f " , & side ) ; area = ( sqrt ( 3 ) / 4 ) * ( side * side ) ; printf ( " Area of equilateral triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float base , height , area ; printf ( " Enter base of the triangle : " ) ; scanf ( " %f " , & base ) ; printf ( " Enter height of the triangle : " ) ; scanf ( " %f " , & height ) ; area = ( base * height ) / 2 ; printf ( " Area of the triangle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { double base , expo , power ; printf ( " Enter base : " ) ; scanf ( " %lf " , & base ) ; printf ( " Enter exponent : " ) ; scanf ( " %lf " , & expo ) ; power = pow ( base , expo ) ; printf ( " %.2lf ^ %.2lf = %.2lf " , base , expo , power ) ; return 0 ; }
#include <stdio.h> int main ( ) { int a , b , c ; printf ( " Enter two angles of triangle : " ) ; scanf ( " %d %d " , & a , & b ) ; c = 180 - ( a + b ) ; printf ( " Third angle of the triangle = %d " , c ) ; return 0 ; }
#include <stdio.h> int main ( ) { float celsius , fahrenheit ; printf ( " Enter temperature in Celsius : " ) ; scanf ( " %f " , & celsius ) ; fahrenheit = ( celsius * 9 / 5 ) + 32 ; printf ( " %.2f Celsius = %.2f Fahrenheit " , celsius , fahrenheit ) ; return 0 ; }
#include <stdio.h> int main ( ) { float cm , meter , km ; printf ( " Enter length in centimeter : " ) ; scanf ( " %f " , & cm ) ; meter = cm / 100.0 ; km = cm / 100000.0 ; printf ( " Length in Meter = %.2f m \n  " , meter ) ; printf ( " Length in Kilometer = %.2f km " , km ) ; return 0 ; }
#include <stdio.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * 3.14 * radius ; area = 3.14 * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> #include <math.h> int main ( ) { float radius , diameter , circumference , area ; printf ( " Enter radius of circle : " ) ; scanf ( " %f " , & radius ) ; diameter = 2 * radius ; circumference = 2 * M_PI * radius ; area = M_PI * ( radius * radius ) ; printf ( " Diameter of circle = %.2f units \n  " , diameter ) ; printf ( " Circumference of circle = %.2f units \n  " , circumference ) ; printf ( " Area of circle = %.2f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , area ; printf ( " Enter length of rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of rectangle : " ) ; scanf ( " %d " , & width ) ; area = length * width ; printf ( " Area of rectangle = %f sq. units " , area ) ; return 0 ; }
#include <stdio.h> int main ( ) { float length , width , perimeter ; printf ( " Enter length of the rectangle : " ) ; scanf ( " %f " , & length ) ; printf ( " Enter width of the rectangle : " ) ; scanf ( " %f " , & width ) ; perimeter = 2 * ( length + width ) ; printf ( " Perimeter of rectangle = %f units " , perimeter ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 ; int sum , sub , mult , mod ; float div ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; sub = num1 - num2 ; mult = num1 * num2 ; div = ( float ) num1 / num2 ; mod = num1 % num2 ; printf ( " SUM = %d\n  " , sum ) ; printf ( " DIFFERENCE = %d\n  " , sub ) ; printf ( " PRODUCT = %d\n  " , mult ) ; printf ( " QUOTIENT = %f\n  " , div ) ; printf ( " MODULUS = %d " , mod ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter first number : " ) ; scanf ( " %d " , & num1 ) ; printf ( " Enter second number : " ) ; scanf ( " %d " , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> int main ( ) { int num1 , num2 , sum ; printf ( " Enter any two numbers : " ) ; scanf ( " %d %d " , & num1 , & num2 ) ; sum = num1 + num2 ; printf ( " Sum of %d and %d = %d\n  " , num1 , num2 , sum ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter any string : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { str [ i ] = str [ i ] + 32 ; } } printf ( " Lower case string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; strlwr ( str ) ; printf ( " Lowercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i ; printf ( " Enter your text : " ) ; gets ( str ) ; for ( i = 0 ; str [ i ] ! = '\0' ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { str [ i ] = str [ i ] - 32 ; } } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; printf ( " Enter your text : " ) ; gets ( str ) ; while ( * s ) { * s = ( * s > 'a' & & * s < = 'z' ) ? * s-32 : * s ; s + + ; } printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter your text : " ) ; gets ( str ) ; strupr ( str ) ; printf ( " Uppercase string : %s " , str ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int len , startIndex , endIndex ; printf ( " Enter any string : " ) ; gets ( str ) ; len = 0 ; while ( str [ len ] ! = '\0' ) len + + ; startIndex = 0 ; endIndex = len-1 ; while ( startIndex < = endIndex ) { if ( str [ startIndex ] ! = str [ endIndex ] ) break ; startIndex + + ; endIndex-- ; } if ( startIndex > = endIndex ) { printf ( " String is Palindrome. " ) ; } else { printf ( " String is Not Palindrome. " ) ; } return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int flag ; printf ( " Enter any string : " ) ; gets ( str ) ; strcpy ( reverse , str ) ; strrev ( reverse ) ; flag = strcmp ( str , reverse ) ; if ( flag = = 0 ) { printf ( " String is Palindrome. " ) ; } else { printf ( " String is Not Palindrome. " ) ; } return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; int i , strIndex , revIndex , len ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; while ( str [ i ] ! = '\0' ) i + + ; len = i ; revIndex = 0 ; strIndex = len - 1 ; while ( strIndex > = 0 ) { reverse [ revIndex ] = str [ strIndex ] ; strIndex-- ; revIndex + + ; } reverse [ revIndex ] = '\0' ; printf ( " \n Original string = %s\n  " , str ) ; printf ( " Reverse string = %s " , reverse ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] , reverse [ MAX_SIZE ] ; char * s = str ; char * r = reverse ; int len = 0 ; printf ( " Enter any string : " ) ; gets ( str ) ; while ( * ( s + + ) ) len + + ; s-- ; while ( len > = 0 ) { * ( r + + ) = * ( --s ) ; len-- ; } * r = '\0' ; printf ( " \n Original string = %s\n  " , str ) ; printf ( " Reverse string = %s " , reverse ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; printf ( " Enter any string : " ) ; gets ( str ) ; printf ( " Original string = %s\n  " , str ) ; strrev ( str ) ; printf ( " Reverse string = %s " , str ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len , vowel , consonant ; printf ( " Enter any string : " ) ; gets ( str ) ; vowel = 0 ; consonant = 0 ; len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) || ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) ) { if ( str [ i ] = = 'a' || str [ i ] = = 'e' || str [ i ] = = 'i' || str [ i ] = = 'o' || str [ i ] = = 'u' || str [ i ] = = 'A' || str [ i ] = = 'E' || str [ i ] = = 'I' || str [ i ] = = 'O' || str [ i ] = = 'U' ) vowel + + ; else consonant + + ; } } printf ( " Total number of vowel = %d\n  " , vowel ) ; printf ( " Total number of consonant = %d\n  " , consonant ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len , vowel , consonant ; printf ( " Enter any string : " ) ; gets ( str ) ; vowel = 0 ; consonant = 0 ; len = strlen ( str ) ; for ( i = 0 ; i <len ; i + + ) { if ( ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) || ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) ) { switch ( str [ i ] ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : vowel + + ; break ; default : consonant + + ; } } } printf ( " Total number of vowel = %d\n  " , vowel ) ; printf ( " Total number of consonant = %d\n  " , consonant ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char * s = str ; int vowel , consonant ; printf ( " Enter any string : " ) ; gets ( str ) ; vowel = 0 ; consonant = 0 ; while ( * s ) { if ( ( * s > = 'a' & & * s < = 'z' ) || ( * s > = 'A' & & * s < = 'Z' ) ) { switch ( * s ) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : vowel + + ; break ; default : consonant + + ; } } s + + ; } printf ( " Total number of vowel = %d\n  " , vowel ) ; printf ( " Total number of consonant = %d\n  " , consonant ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int i ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; for ( i = 0 ; text [ i ] ! = '\0' ; i + + ) { count + + ; } printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ index ] ! = '\0' ) { index + + ; } printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int index = -1 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( text [ + + index ] ! = '\0' ) ; printf ( " Length of ' %s' = %d " , text , index ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ! = '\0' ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; char * str = text ; int count = 0 ; printf ( " Enter any string : " ) ; gets ( text ) ; while ( * ( str + + ) ) count + + ; printf ( " Length of ' %s' = %d " , text , count ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char text [ MAX_SIZE ] ; int length ; printf ( " Enter any string : " ) ; gets ( text ) ; length = strlen ( text ) ; printf ( " Length of ' %s' = %d " , text , length ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , words ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; words = 1 ; while ( str [ i ] ! = '\0' ) { if ( str [ i ] = = ' ' || str [ i ] = = '\n ' || str [ i ] = = '\t' ) { words + + ; } i + + ; } printf ( " Total number of words = %d " , words ) ; return 0 ; }
#include <stdio.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; char prevChar ; int i , words ; printf ( " Enter any string : " ) ; gets ( str ) ; i = 0 ; words = 0 ; prevChar = '\0' ; while ( 1 ) { if ( str [ i ] = = ' ' || str [ i ] = = '\n ' || str [ i ] = = '\t' || str [ i ] = = '\0' ) { if ( prevChar ! = ' ' & & prevChar ! = '\n ' & & prevChar ! = '\t' & & prevChar ! = '\0' ) { words + + ; } } prevChar = str [ i ] ; if ( str [ i ] = = '\0' ) break ; else i + + ; } printf ( " Total number of words = %d " , words ) ; return 0 ; }
#include <stdio.h> #include <string.h> #define MAX_SIZE 100 int main ( ) { char str [ MAX_SIZE ] ; int i , len ; int freq [ 26 ] ; printf ( " Enter any string : " ) ; gets ( str ) ; len = strlen ( str ) ; for ( i = 0 ; i <26 ; i + + ) { freq [ i ] = 0 ; } for ( i = 0 ; i <len ; i + + ) { if ( str [ i ] > = 'a' & & str [ i ] < = 'z' ) { freq [ str [ i ] - 97 ] + + ; } else if ( str [ i ] > = 'A' & & str [ i ] < = 'Z' ) { freq [ str [ i ] - 65 ] + + ; } } printf ( " \n Frequency of all characters in the given string : \n  " ) ; for ( i = 0 ; i <26 ; i + + ) { if ( freq [ i ] ! = 0 ) { printf ( " ' %c' = %d\n  " , ( i + 97 ) , freq [ i ] ) ; } } return 0 ; }
